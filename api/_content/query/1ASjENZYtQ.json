[{"_path":"/til/big-o-notation","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Notação Big O","description":"Notas sobre a notação Big O.","excerpt":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developerinsider.co/big-o-notation-explained-with-examples/","rel":["nofollow"]},"children":[{"type":"text","value":"Big-O Notation Explained with Examples"}]}]}]}]},"date":"2020-07-07T00:00:00.000Z","draft":true,"tags":["cpp"],"Thumbnail":"img/headers/cpp.jpg","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developerinsider.co/big-o-notation-explained-with-examples/","rel":["nofollow"]},"children":[{"type":"text","value":"Big-O Notation Explained with Examples"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:big-o-notation.md","_source":"content","_file":"til/big-o-notation.md","_extension":"md"},{"_path":"/til/cpp-magic-enum","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Magic Enum C++","description":"Biblioteca C++17 header-only que provê reflexão estática de enums, trabalha com qualquer tipo de enum sem usar macros.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Biblioteca C++17 header-only que provê reflexão estática de enums, trabalha com qualquer tipo de enum sem usar macros."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_cast"}]},{"type":"text","value":" obtains enum value from string or integer."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_value"}]},{"type":"text","value":" returns enum value at specified index."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_values"}]},{"type":"text","value":" obtains enum value sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_count"}]},{"type":"text","value":" returns number of enum values."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_integer"}]},{"type":"text","value":" obtains integer value from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_name"}]},{"type":"text","value":" returns string name from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_names"}]},{"type":"text","value":" obtains string enum name sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_entries"}]},{"type":"text","value":" obtains pair (value enum, string enum name) sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_index"}]},{"type":"text","value":" obtains index in enum value sequence from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_contains"}]},{"type":"text","value":" checks whether enum contains enumerator with such value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_type_name"}]},{"type":"text","value":" returns string name of enum type."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"is_unscoped_enum"}]},{"type":"text","value":" checks whether type is an Unscoped enumeration."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"is_scoped_enum"}]},{"type":"text","value":" checks whether type is an Scoped enumeration."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"underlying_type"}]},{"type":"text","value":" improved UB-free \"SFINAE-friendly\" std::underlying_type."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ostream_operators"}]},{"type":"text","value":" ostream operators for enums."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"bitwise_operators"}]},{"type":"text","value":" bitwise operators for enums."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Inserir exemplos"}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/Neargye/magic_enum","rel":["nofollow"]},"children":[{"type":"text","value":"Magic Enum C++"}]}]}]}]},"date":"2020-06-27T00:00:00.000Z","draft":true,"tags":["C++","cpp"],"Thumbnail":"img/headers/debian.jpg","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Biblioteca C++17 header-only que provê reflexão estática de enums, trabalha com qualquer tipo de enum sem usar macros."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_cast"}]},{"type":"text","value":" obtains enum value from string or integer."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_value"}]},{"type":"text","value":" returns enum value at specified index."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_values"}]},{"type":"text","value":" obtains enum value sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_count"}]},{"type":"text","value":" returns number of enum values."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_integer"}]},{"type":"text","value":" obtains integer value from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_name"}]},{"type":"text","value":" returns string name from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_names"}]},{"type":"text","value":" obtains string enum name sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_entries"}]},{"type":"text","value":" obtains pair (value enum, string enum name) sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_index"}]},{"type":"text","value":" obtains index in enum value sequence from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_contains"}]},{"type":"text","value":" checks whether enum contains enumerator with such value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_type_name"}]},{"type":"text","value":" returns string name of enum type."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"is_unscoped_enum"}]},{"type":"text","value":" checks whether type is an Unscoped enumeration."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"is_scoped_enum"}]},{"type":"text","value":" checks whether type is an Scoped enumeration."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"underlying_type"}]},{"type":"text","value":" improved UB-free \"SFINAE-friendly\" std::underlying_type."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ostream_operators"}]},{"type":"text","value":" ostream operators for enums."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"bitwise_operators"}]},{"type":"text","value":" bitwise operators for enums."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Inserir exemplos"}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/Neargye/magic_enum","rel":["nofollow"]},"children":[{"type":"text","value":"Magic Enum C++"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:cpp-magic-enum.md","_source":"content","_file":"til/cpp-magic-enum.md","_extension":"md"},{"_path":"/til/app-djinni","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Desenvolvendo em C++ para mobile com Djinni","description":"Como criar aplicativos para android e IOS usando C++ com Djinni.","excerpt":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.dropbox.com/s/k1b214bsqgpx4e6/Djinni%20Talk%20-%20CppCon%202015.pdf?dl=0","rel":["nofollow"]},"children":[{"type":"text","value":"Bindings Languages Cross-Platform"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.udemy.com/course/desenvolvendo-aplicativos-mobile-com-cpp-para-android-e-ios/","rel":["nofollow"]},"children":[{"type":"text","value":"Desenvolvendo Aplicativos Mobile com C++ para Android e iOS"}]}]}]}]},"date":"2020-06-23T00:00:00.000Z","draft":true,"tags":["C++","cpp","Djinni"],"Thumbnail":"img/headers/cpp.jpg","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.dropbox.com/s/k1b214bsqgpx4e6/Djinni%20Talk%20-%20CppCon%202015.pdf?dl=0","rel":["nofollow"]},"children":[{"type":"text","value":"Bindings Languages Cross-Platform"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.udemy.com/course/desenvolvendo-aplicativos-mobile-com-cpp-para-android-e-ios/","rel":["nofollow"]},"children":[{"type":"text","value":"Desenvolvendo Aplicativos Mobile com C++ para Android e iOS"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:app-djinni.md","_source":"content","_file":"til/app-djinni.md","_extension":"md"},{"_path":"/til/cpp-cracking-the-c++-interview","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Cracking the C++","description":"Estudar","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Estudar"}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://medium.com/c-programming-language/cracking-the-c-interview-part-1-1b01879779e9","rel":["nofollow"]},"children":[{"type":"text","value":"Cracking the C++ Interview — Part 1"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://medium.com/c-programming-language/cracking-the-c-interview-part-2-1e35d0e3fa83","rel":["nofollow"]},"children":[{"type":"text","value":"Cracking the C++ Interview — Part 2"}]}]}]}]},"date":"2020-06-23T00:00:00.000Z","draft":true,"tags":["cpp"],"Thumbnail":"img/headers/cpp.jpg","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Estudar"}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://medium.com/c-programming-language/cracking-the-c-interview-part-1-1b01879779e9","rel":["nofollow"]},"children":[{"type":"text","value":"Cracking the C++ Interview — Part 1"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://medium.com/c-programming-language/cracking-the-c-interview-part-2-1e35d0e3fa83","rel":["nofollow"]},"children":[{"type":"text","value":"Cracking the C++ Interview — Part 2"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:cpp-cracking-the-c++-interview.md","_source":"content","_file":"til/cpp-cracking-the-c++-interview.md","_extension":"md"},{"_path":"/til/cpp-thread","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Thread em C++","description":"Escrevendo funções e classes para execução em paralelo.","excerpt":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"thread-com-função-sem-argumentos"},"children":[{"type":"text","value":"Thread com função sem argumentos"}]},{"type":"element","tag":"code","props":{"code":"void foo() {\n  cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n}\n\nvoid run () {\n  thread t1( foo );\n  // Algum processamento...\n  t1.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"void foo() {\n  cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n}\n\nvoid run () {\n  thread t1( foo );\n  // Algum processamento...\n  t1.join();\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"thread-com-função-passando-parâmetros-por-valor"},"children":[{"type":"text","value":"Thread com função passando parâmetros por valor"}]},{"type":"element","tag":"code","props":{"code":"void fooByRef( int & a ) {\n  while( true ) {\n    cout << \"O valor é \" << a << endl;\n    this_thread::sleep_for( chrono::milliseconds( 1000 ) );\n  }\n}\n\nvoid run () {\n  int p = 9;\n  thread t2( fooByRef, std::ref( p ) ); // usar o wrapper ref para não passar por valor\n  // Algum processamento...\n  this_thread::sleep_for( chrono::milliseconds( 5000 ) );\n  p = 30;\n  t1.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"void fooByRef( int & a ) {\n  while( true ) {\n    cout << \"O valor é \" << a << endl;\n    this_thread::sleep_for( chrono::milliseconds( 1000 ) );\n  }\n}\n\nvoid run () {\n  int p = 9;\n  thread t2( fooByRef, std::ref( p ) ); // usar o wrapper ref para não passar por valor\n  // Algum processamento...\n  this_thread::sleep_for( chrono::milliseconds( 5000 ) );\n  p = 30;\n  t1.join();\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"thread-com-função-passando-parâmetros-por-referência"},"children":[{"type":"text","value":"Thread com função passando parâmetros por referência"}]},{"type":"element","tag":"code","props":{"code":"void foo( int a, int b ) {\n}\n\nvoid run () {\n  int p = 9;\n  int q = 8;\n  thread t1( foo, p, q );\n  // Algum processamento...\n  t1.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"void foo( int a, int b ) {\n}\n\nvoid run () {\n  int p = 9;\n  int q = 8;\n  thread t1( foo, p, q );\n  // Algum processamento...\n  t1.join();\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"thread-com-classe-callable"},"children":[{"type":"text","value":"Thread com classe callable"}]},{"type":"element","tag":"code","props":{"code":"class CallableClass {\n  public:\n    void operator()() {\n      cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n    }\n};\n\nvoid run() {\n  CallableClass obj;\n  thread t2( obj );\n  // Algum processamento...\n  t2.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class CallableClass {\n  public:\n    void operator()() {\n      cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n    }\n};\n\nvoid run() {\n  CallableClass obj;\n  thread t2( obj );\n  // Algum processamento...\n  t2.join();\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"thread-com-lambda"},"children":[{"type":"text","value":"Thread com lambda"}]},{"type":"element","tag":"code","props":{"code":"// Sintaxe\n// [capture-list]( params ) /*mutable*/ /*constexpr*/ /*exception attribute*/ -> ret { body }\n// [capture-list]( params ) -> ret { body }\n// [capture-list]( params ) { body }\n// [capture-list]{ body }\n\nvoid run() {\n  thread t3( []{\n    cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n  } );\n  // Algum processamento...\n  t3.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Sintaxe\n// [capture-list]( params ) /*mutable*/ /*constexpr*/ /*exception attribute*/ -> ret { body }\n// [capture-list]( params ) -> ret { body }\n// [capture-list]( params ) { body }\n// [capture-list]{ body }\n\nvoid run() {\n  thread t3( []{\n    cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n  } );\n  // Algum processamento...\n  t3.join();\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"join-detach-e-terminate"},"children":[{"type":"text","value":"Join, detach e terminate"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Uma thread representa um objeto de execução em nível de hardware e está num estado chamado "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"joinable"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A opções no estado "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"joinable"}]},{"type":"text","value":" são:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"join"}]},{"type":"text","value":" - introduz um ponto de sincronismo e bloqueia a execução"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"detach"}]},{"type":"text","value":" - faz a execução continuar em modo independente"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Após esta escolha a thread se torna "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"non joinable"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Se esquecer de realizar o join ou detach a função "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::terminate"}]},{"type":"text","value":" será chamada pelo destrutor"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Um programa com "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::terminate"}]},{"type":"text","value":" é considerado não seguro."}]}]},{"type":"element","tag":"h2","props":{"id":"tratamento-de-exceção"},"children":[{"type":"text","value":"Tratamento de exceção"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Para evitar problemas caso uma exceção for lançada antes do "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"join"}]},{"type":"text","value":" use\n"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"RAII - Resource acquisition is initialization"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"RAII:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Construtor adquire os recursos"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Destrutor libera os recursos"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Exemplo de código com problema:"}]},{"type":"element","tag":"code","props":{"code":"void run() {\n  thread t4( foo );\n  throw runtime_error( \"Algum erro antes do join/detach\" );\n  t4.join(); // esta linha nunca vai ser executada\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"void run() {\n  thread t4( foo );\n  throw runtime_error( \"Algum erro antes do join/detach\" );\n  t4.join(); // esta linha nunca vai ser executada\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A classe "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ThreadGuard"}]},{"type":"text","value":" fornece um auxiliar para garantir que o "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"join"}]},{"type":"text","value":" será\nsempre executado quando o objeto sair do contexto."}]},{"type":"element","tag":"code","props":{"code":"class ThreadGuard {\n  thread & mThread;\n\n  public:\n    // garantir que não haverá conversões implícitas\n    explicit ThreadGuard( thread & t ) : mThread( t ) {  }\n\n    // realiza o join pelo destrutor\n    ~ThreadGuard() { if( mThread.joinable() ) { mThread.join(); } }\n\n    // não permite o uso dos contrutores de cópia e atribuição\n    ThreadGuard( const ThreadGuard & ) = delete;\n    ThreadGuard & operator= ( const ThreadGuard & ) = delete;\n};\n\nvoid run() {\n  thread t4( foo );\n  ThreadGuard tg( t4 ); // quando sair do escopo o join será chamado\n  throw runtime_error( \"Este erro não afeta a thread acima\" );\n}\n","filename":"6,9","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class ThreadGuard {\n  thread & mThread;\n\n  public:\n    // garantir que não haverá conversões implícitas\n    explicit ThreadGuard( thread & t ) : mThread( t ) {  }\n\n    // realiza o join pelo destrutor\n    ~ThreadGuard() { if( mThread.joinable() ) { mThread.join(); } }\n\n    // não permite o uso dos contrutores de cópia e atribuição\n    ThreadGuard( const ThreadGuard & ) = delete;\n    ThreadGuard & operator= ( const ThreadGuard & ) = delete;\n};\n\nvoid run() {\n  thread t4( foo );\n  ThreadGuard tg( t4 ); // quando sair do escopo o join será chamado\n  throw runtime_error( \"Este erro não afeta a thread acima\" );\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"transferindo-a-posse-das-threads"},"children":[{"type":"text","value":"Transferindo a posse das threads"}]},{"type":"element","tag":"code","props":{"code":"void foo() { }\nvoid bar() { }\n\nvoid run() {\n  thread t1( foo );\n  // thread t2 = t1; // Se fizer isso vai gerar erro de compilação\n\n  // usar move para transferir a posse da thread\n  thread t2 = std::move( t1 ); // t1 não é mais dono da thread\n  t1 = thread( bar ); // t1 tem nova thread\n\n  t1.join();\n  t2.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"void foo() { }\nvoid bar() { }\n\nvoid run() {\n  thread t1( foo );\n  // thread t2 = t1; // Se fizer isso vai gerar erro de compilação\n\n  // usar move para transferir a posse da thread\n  thread t2 = std::move( t1 ); // t1 não é mais dono da thread\n  t1 = thread( bar ); // t1 tem nova thread\n\n  t1.join();\n  t2.join();\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"threadget_id"},"children":[{"type":"text","value":"thread::get_id()"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"retorna um id único para cada thread ativa em execução"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"retorna 0 para todas as threads não ativas"}]}]},{"type":"element","tag":"code","props":{"code":"void run() {\n  thread t1( foo );\n  thread t2( foo );\n  thread t3;\n\n  cout << t1.get_id() << endl; // 1234\n  cout << t2.get_id() << endl; // 5678\n  cout << t3.get_id() << endl; // 0\n\n  t1.join();\n  t2.join();\n\n  cout << t1.get_id() << endl; // 0\n  cout << t2.get_id() << endl; // 0\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"void run() {\n  thread t1( foo );\n  thread t2( foo );\n  thread t3;\n\n  cout << t1.get_id() << endl; // 1234\n  cout << t2.get_id() << endl; // 5678\n  cout << t3.get_id() << endl; // 0\n\n  t1.join();\n  t2.join();\n\n  cout << t1.get_id() << endl; // 0\n  cout << t2.get_id() << endl; // 0\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"sleep_for"},"children":[{"type":"text","value":"sleep_for"}]},{"type":"element","tag":"h2","props":{"id":"stdthis_threadyield"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::this_thread::yield()"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"retorna a fatia de tempo"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"reinsere a thread na fila de execução"}]}]},{"type":"element","tag":"h2","props":{"id":"stdthreadhardware_concurrency"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::thread::hardware_concurrency()"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"retorna o número de thread concorrentes suportado pela implementação do sistema"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"considere este valor apenas como uma dica"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"é usualmente o número de cores lógicos"}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.udemy.com/course/modern-cpp-concurrency-in-depth/","rel":["nofollow"]},"children":[{"type":"text","value":"Modern C++ Concurrency in Depth"}]}]}]}]},"date":"2020-06-23T00:00:00.000Z","draft":false,"tags":["C++","cpp","thread"],"Thumbnail":"img/headers/cpp.png","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"thread-com-função-sem-argumentos"},"children":[{"type":"text","value":"Thread com função sem argumentos"}]},{"type":"element","tag":"code","props":{"code":"void foo() {\n  cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n}\n\nvoid run () {\n  thread t1( foo );\n  // Algum processamento...\n  t1.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"void foo() {\n  cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n}\n\nvoid run () {\n  thread t1( foo );\n  // Algum processamento...\n  t1.join();\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"thread-com-função-passando-parâmetros-por-valor"},"children":[{"type":"text","value":"Thread com função passando parâmetros por valor"}]},{"type":"element","tag":"code","props":{"code":"void fooByRef( int & a ) {\n  while( true ) {\n    cout << \"O valor é \" << a << endl;\n    this_thread::sleep_for( chrono::milliseconds( 1000 ) );\n  }\n}\n\nvoid run () {\n  int p = 9;\n  thread t2( fooByRef, std::ref( p ) ); // usar o wrapper ref para não passar por valor\n  // Algum processamento...\n  this_thread::sleep_for( chrono::milliseconds( 5000 ) );\n  p = 30;\n  t1.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"void fooByRef( int & a ) {\n  while( true ) {\n    cout << \"O valor é \" << a << endl;\n    this_thread::sleep_for( chrono::milliseconds( 1000 ) );\n  }\n}\n\nvoid run () {\n  int p = 9;\n  thread t2( fooByRef, std::ref( p ) ); // usar o wrapper ref para não passar por valor\n  // Algum processamento...\n  this_thread::sleep_for( chrono::milliseconds( 5000 ) );\n  p = 30;\n  t1.join();\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"thread-com-função-passando-parâmetros-por-referência"},"children":[{"type":"text","value":"Thread com função passando parâmetros por referência"}]},{"type":"element","tag":"code","props":{"code":"void foo( int a, int b ) {\n}\n\nvoid run () {\n  int p = 9;\n  int q = 8;\n  thread t1( foo, p, q );\n  // Algum processamento...\n  t1.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"void foo( int a, int b ) {\n}\n\nvoid run () {\n  int p = 9;\n  int q = 8;\n  thread t1( foo, p, q );\n  // Algum processamento...\n  t1.join();\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"thread-com-classe-callable"},"children":[{"type":"text","value":"Thread com classe callable"}]},{"type":"element","tag":"code","props":{"code":"class CallableClass {\n  public:\n    void operator()() {\n      cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n    }\n};\n\nvoid run() {\n  CallableClass obj;\n  thread t2( obj );\n  // Algum processamento...\n  t2.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"class CallableClass {\n  public:\n    void operator()() {\n      cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n    }\n};\n\nvoid run() {\n  CallableClass obj;\n  thread t2( obj );\n  // Algum processamento...\n  t2.join();\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"thread-com-lambda"},"children":[{"type":"text","value":"Thread com lambda"}]},{"type":"element","tag":"code","props":{"code":"// Sintaxe\n// [capture-list]( params ) /*mutable*/ /*constexpr*/ /*exception attribute*/ -> ret { body }\n// [capture-list]( params ) -> ret { body }\n// [capture-list]( params ) { body }\n// [capture-list]{ body }\n\nvoid run() {\n  thread t3( []{\n    cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n  } );\n  // Algum processamento...\n  t3.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// Sintaxe\n// [capture-list]( params ) /*mutable*/ /*constexpr*/ /*exception attribute*/ -> ret { body }\n// [capture-list]( params ) -> ret { body }\n// [capture-list]( params ) { body }\n// [capture-list]{ body }\n\nvoid run() {\n  thread t3( []{\n    cout << \"Corpo da função: \" << this_thread::get_id() << endl;\n  } );\n  // Algum processamento...\n  t3.join();\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"join-detach-e-terminate"},"children":[{"type":"text","value":"Join, detach e terminate"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Uma thread representa um objeto de execução em nível de hardware e está num estado chamado "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"joinable"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A opções no estado "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"joinable"}]},{"type":"text","value":" são:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"join"}]},{"type":"text","value":" - introduz um ponto de sincronismo e bloqueia a execução"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"detach"}]},{"type":"text","value":" - faz a execução continuar em modo independente"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Após esta escolha a thread se torna "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"non joinable"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Se esquecer de realizar o join ou detach a função "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::terminate"}]},{"type":"text","value":" será chamada pelo destrutor"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Um programa com "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::terminate"}]},{"type":"text","value":" é considerado não seguro."}]}]},{"type":"element","tag":"h2","props":{"id":"tratamento-de-exceção"},"children":[{"type":"text","value":"Tratamento de exceção"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Para evitar problemas caso uma exceção for lançada antes do "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"join"}]},{"type":"text","value":" use\n"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"RAII - Resource acquisition is initialization"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"RAII:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Construtor adquire os recursos"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Destrutor libera os recursos"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Exemplo de código com problema:"}]},{"type":"element","tag":"code","props":{"code":"void run() {\n  thread t4( foo );\n  throw runtime_error( \"Algum erro antes do join/detach\" );\n  t4.join(); // esta linha nunca vai ser executada\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"void run() {\n  thread t4( foo );\n  throw runtime_error( \"Algum erro antes do join/detach\" );\n  t4.join(); // esta linha nunca vai ser executada\n}"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A classe "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ThreadGuard"}]},{"type":"text","value":" fornece um auxiliar para garantir que o "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"join"}]},{"type":"text","value":" será\nsempre executado quando o objeto sair do contexto."}]},{"type":"element","tag":"code","props":{"code":"class ThreadGuard {\n  thread & mThread;\n\n  public:\n    // garantir que não haverá conversões implícitas\n    explicit ThreadGuard( thread & t ) : mThread( t ) {  }\n\n    // realiza o join pelo destrutor\n    ~ThreadGuard() { if( mThread.joinable() ) { mThread.join(); } }\n\n    // não permite o uso dos contrutores de cópia e atribuição\n    ThreadGuard( const ThreadGuard & ) = delete;\n    ThreadGuard & operator= ( const ThreadGuard & ) = delete;\n};\n\nvoid run() {\n  thread t4( foo );\n  ThreadGuard tg( t4 ); // quando sair do escopo o join será chamado\n  throw runtime_error( \"Este erro não afeta a thread acima\" );\n}\n","filename":"6,9","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"class ThreadGuard {\n  thread & mThread;\n\n  public:\n    // garantir que não haverá conversões implícitas\n    explicit ThreadGuard( thread & t ) : mThread( t ) {  }\n\n    // realiza o join pelo destrutor\n    ~ThreadGuard() { if( mThread.joinable() ) { mThread.join(); } }\n\n    // não permite o uso dos contrutores de cópia e atribuição\n    ThreadGuard( const ThreadGuard & ) = delete;\n    ThreadGuard & operator= ( const ThreadGuard & ) = delete;\n};\n\nvoid run() {\n  thread t4( foo );\n  ThreadGuard tg( t4 ); // quando sair do escopo o join será chamado\n  throw runtime_error( \"Este erro não afeta a thread acima\" );\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"transferindo-a-posse-das-threads"},"children":[{"type":"text","value":"Transferindo a posse das threads"}]},{"type":"element","tag":"code","props":{"code":"void foo() { }\nvoid bar() { }\n\nvoid run() {\n  thread t1( foo );\n  // thread t2 = t1; // Se fizer isso vai gerar erro de compilação\n\n  // usar move para transferir a posse da thread\n  thread t2 = std::move( t1 ); // t1 não é mais dono da thread\n  t1 = thread( bar ); // t1 tem nova thread\n\n  t1.join();\n  t2.join();\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"void foo() { }\nvoid bar() { }\n\nvoid run() {\n  thread t1( foo );\n  // thread t2 = t1; // Se fizer isso vai gerar erro de compilação\n\n  // usar move para transferir a posse da thread\n  thread t2 = std::move( t1 ); // t1 não é mais dono da thread\n  t1 = thread( bar ); // t1 tem nova thread\n\n  t1.join();\n  t2.join();\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"threadget_id"},"children":[{"type":"text","value":"thread::get_id()"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"retorna um id único para cada thread ativa em execução"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"retorna 0 para todas as threads não ativas"}]}]},{"type":"element","tag":"code","props":{"code":"void run() {\n  thread t1( foo );\n  thread t2( foo );\n  thread t3;\n\n  cout << t1.get_id() << endl; // 1234\n  cout << t2.get_id() << endl; // 5678\n  cout << t3.get_id() << endl; // 0\n\n  t1.join();\n  t2.join();\n\n  cout << t1.get_id() << endl; // 0\n  cout << t2.get_id() << endl; // 0\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"void run() {\n  thread t1( foo );\n  thread t2( foo );\n  thread t3;\n\n  cout << t1.get_id() << endl; // 1234\n  cout << t2.get_id() << endl; // 5678\n  cout << t3.get_id() << endl; // 0\n\n  t1.join();\n  t2.join();\n\n  cout << t1.get_id() << endl; // 0\n  cout << t2.get_id() << endl; // 0\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"sleep_for"},"children":[{"type":"text","value":"sleep_for"}]},{"type":"element","tag":"h2","props":{"id":"stdthis_threadyield"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::this_thread::yield()"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"retorna a fatia de tempo"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"reinsere a thread na fila de execução"}]}]},{"type":"element","tag":"h2","props":{"id":"stdthreadhardware_concurrency"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::thread::hardware_concurrency()"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"retorna o número de thread concorrentes suportado pela implementação do sistema"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"considere este valor apenas como uma dica"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"é usualmente o número de cores lógicos"}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.udemy.com/course/modern-cpp-concurrency-in-depth/","rel":["nofollow"]},"children":[{"type":"text","value":"Modern C++ Concurrency in Depth"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"thread-com-função-sem-argumentos","depth":2,"text":"Thread com função sem argumentos"},{"id":"thread-com-função-passando-parâmetros-por-valor","depth":2,"text":"Thread com função passando parâmetros por valor"},{"id":"thread-com-função-passando-parâmetros-por-referência","depth":2,"text":"Thread com função passando parâmetros por referência"},{"id":"thread-com-classe-callable","depth":2,"text":"Thread com classe callable"},{"id":"thread-com-lambda","depth":2,"text":"Thread com lambda"},{"id":"join-detach-e-terminate","depth":2,"text":"Join, detach e terminate"},{"id":"tratamento-de-exceção","depth":2,"text":"Tratamento de exceção"},{"id":"transferindo-a-posse-das-threads","depth":2,"text":"Transferindo a posse das threads"},{"id":"threadget_id","depth":2,"text":"thread::get_id()"},{"id":"sleep_for","depth":2,"text":"sleep_for"},{"id":"stdthis_threadyield","depth":2,"text":"std::this_thread::yield()"},{"id":"stdthreadhardware_concurrency","depth":2,"text":"std::thread::hardware_concurrency()"},{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:cpp-thread.md","_source":"content","_file":"til/cpp-thread.md","_extension":"md"}]