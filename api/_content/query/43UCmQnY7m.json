[{"_path":"/til/java-reflection","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Java Reflection","description":"Notas sobre java reflection","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SomeClass.class"}]},{"type":"text","value":" obtém o tipo "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Class<SomeClass>"}]},{"type":"text","value":" que é um objeto que representa o nome da classe em tempo de execução e é o mesmo objeto retornado pelo "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"getClass"}]},{"type":"text","value":"."}]},{"type":"element","tag":"code","props":{"code":"NombreClase obj = new NombreClase();\nSystem.out.println(NombreClase.class.getName());\nSystem.out.println(obj.getClass().getName())\n","language":"java"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"NombreClase obj = new NombreClase();\nSystem.out.println(NombreClase.class.getName());\nSystem.out.println(obj.getClass().getName())\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://stackoverflow.com/questions/15101794/what-does-class-mean-after-a-class-name","rel":["nofollow"]},"children":[{"type":"text","value":"What does .class mean after a class name"}]}]}]}]},"date":"2019-11-23T00:00:00.000Z","draft":true,"tags":["java"],"Thumbnail":"img/headers/java.jpg","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SomeClass.class"}]},{"type":"text","value":" obtém o tipo "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Class<SomeClass>"}]},{"type":"text","value":" que é um objeto que representa o nome da classe em tempo de execução e é o mesmo objeto retornado pelo "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"getClass"}]},{"type":"text","value":"."}]},{"type":"element","tag":"code","props":{"code":"NombreClase obj = new NombreClase();\nSystem.out.println(NombreClase.class.getName());\nSystem.out.println(obj.getClass().getName())\n","language":"java"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"NombreClase obj = new NombreClase();\nSystem.out.println(NombreClase.class.getName());\nSystem.out.println(obj.getClass().getName())"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://stackoverflow.com/questions/15101794/what-does-class-mean-after-a-class-name","rel":["nofollow"]},"children":[{"type":"text","value":"What does .class mean after a class name"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:java-reflection.md","_source":"content","_file":"til/java-reflection.md","_extension":"md"},{"_path":"/til/junit-excecao","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Testando exceções com junit","description":"Como testar exceções usando o junit.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Este artigo apresenta uma visão suscinta sobre testes de exceção com JUnit usando o idioma "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"try/fail/catch"}]},{"type":"text","value":", o parâmetro "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"expected"}]},{"type":"text","value":" da anotação "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"@Test"}]},{"type":"text","value":" e a anotação "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"@Rule"}]},{"type":"text","value":".\nCada um dos métodos apresenta prós e contras."}]},{"type":"element","tag":"h2","props":{"id":"usando-bloco-trycatch"},"children":[{"type":"text","value":"Usando bloco try/catch"}]},{"type":"element","tag":"code","props":{"code":"@Test\npublic void example1() {\n    try {\n        find(\"função que deveria lançar uma exceção\");\n        fail();\n        // Ponto que nunca deveria ser alcançado quando o teste passar\n    } catch (NotFoundException e) {\n        assertThat(e.getMessage(), containsString(\"algo que indique que a exceção certa ocorreu\"));\n    }\n    // ... Outras exceções podem ser tratadas aqui.\n}\n","language":"java"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"@Test\npublic void example1() {\n    try {\n        find(\"função que deveria lançar uma exceção\");\n        fail();\n        // Ponto que nunca deveria ser alcançado quando o teste passar\n    } catch (NotFoundException e) {\n        assertThat(e.getMessage(), containsString(\"algo que indique que a exceção certa ocorreu\"));\n    }\n    // ... Outras exceções podem ser tratadas aqui.\n}\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Vantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Ter acesso à exceção para realizar outros procedimentos"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Poder realizar outros "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"asserts"}]},{"type":"text","value":" na mesma função"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Funciona bem de os testes forem criado antes"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Desvantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Um erro comum é esquecer de incluir "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"fail()"}]},{"type":"text","value":" como barreira causando um falso positivo"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"test-expected--exceptionclass"},"children":[{"type":"text","value":"@Test (expected = Exception.class)"}]},{"type":"element","tag":"code","props":{"code":"public void example2() throws NotFoundException {\n    find(\"função que deveria lançar uma exceção\");\n    // Ponto que nunca deveria ser alcançado quando o teste passar\n}\n","language":"java"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public void example2() throws NotFoundException {\n    find(\"função que deveria lançar uma exceção\");\n    // Ponto que nunca deveria ser alcançado quando o teste passar\n}\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Vantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Sintaxe muito mais concisa"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Favorece a escrita de teste focados em um único ponto"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Desvantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Não é possível realizar outros testes após o "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"find"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"expectedexception-rule"},"children":[{"type":"text","value":"ExpectedException Rule"}]},{"type":"element","tag":"code","props":{"code":"\n@Test\npublic void example3() throws NotFoundException {\n    exception.expect(NotFoundException.class);\n    exception.expectMessage(containsString(\"algo que indique que a exceção certa ocorreu\"));\n    find(\"função que deveria lançar uma exceção\");\n    // Ponto que nunca deveria ser alcançado quando o teste passar\n}\n","language":"java"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n@Test\npublic void example3() throws NotFoundException {\n    exception.expect(NotFoundException.class);\n    exception.expectMessage(containsString(\"algo que indique que a exceção certa ocorreu\"));\n    find(\"função que deveria lançar uma exceção\");\n    // Ponto que nunca deveria ser alcançado quando o teste passar\n}\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Vantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Mais de uma expetativa sobre a mesma exceção podem ser testadas após o teste"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Desvantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Não é possível realizar outros testes após o "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"find"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://baddotrobot.com/blog/2012/03/27/expecting-exception-with-junit-rule/","rel":["nofollow"]},"children":[{"type":"text","value":"Expecting Exceptions JUnit Rule"}]}]}]}]},"date":"2019-11-12T00:00:00.000Z","draft":false,"tags":["java","junit","exceção","try-catch"],"Thumbnail":"img/headers/junit.webp","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Este artigo apresenta uma visão suscinta sobre testes de exceção com JUnit usando o idioma "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"try/fail/catch"}]},{"type":"text","value":", o parâmetro "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"expected"}]},{"type":"text","value":" da anotação "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"@Test"}]},{"type":"text","value":" e a anotação "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"@Rule"}]},{"type":"text","value":".\nCada um dos métodos apresenta prós e contras."}]},{"type":"element","tag":"h2","props":{"id":"usando-bloco-trycatch"},"children":[{"type":"text","value":"Usando bloco try/catch"}]},{"type":"element","tag":"code","props":{"code":"@Test\npublic void example1() {\n    try {\n        find(\"função que deveria lançar uma exceção\");\n        fail();\n        // Ponto que nunca deveria ser alcançado quando o teste passar\n    } catch (NotFoundException e) {\n        assertThat(e.getMessage(), containsString(\"algo que indique que a exceção certa ocorreu\"));\n    }\n    // ... Outras exceções podem ser tratadas aqui.\n}\n","language":"java"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"@Test\npublic void example1() {\n    try {\n        find(\"função que deveria lançar uma exceção\");\n        fail();\n        // Ponto que nunca deveria ser alcançado quando o teste passar\n    } catch (NotFoundException e) {\n        assertThat(e.getMessage(), containsString(\"algo que indique que a exceção certa ocorreu\"));\n    }\n    // ... Outras exceções podem ser tratadas aqui.\n}"}]}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Vantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Ter acesso à exceção para realizar outros procedimentos"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Poder realizar outros "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"asserts"}]},{"type":"text","value":" na mesma função"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Funciona bem de os testes forem criado antes"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Desvantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Um erro comum é esquecer de incluir "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"fail()"}]},{"type":"text","value":" como barreira causando um falso positivo"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"test-expected--exceptionclass"},"children":[{"type":"text","value":"@Test (expected = Exception.class)"}]},{"type":"element","tag":"code","props":{"code":"public void example2() throws NotFoundException {\n    find(\"função que deveria lançar uma exceção\");\n    // Ponto que nunca deveria ser alcançado quando o teste passar\n}\n","language":"java"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"public void example2() throws NotFoundException {\n    find(\"função que deveria lançar uma exceção\");\n    // Ponto que nunca deveria ser alcançado quando o teste passar\n}"}]}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Vantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Sintaxe muito mais concisa"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Favorece a escrita de teste focados em um único ponto"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Desvantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Não é possível realizar outros testes após o "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"find"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"expectedexception-rule"},"children":[{"type":"text","value":"ExpectedException Rule"}]},{"type":"element","tag":"code","props":{"code":"\n@Test\npublic void example3() throws NotFoundException {\n    exception.expect(NotFoundException.class);\n    exception.expectMessage(containsString(\"algo que indique que a exceção certa ocorreu\"));\n    find(\"função que deveria lançar uma exceção\");\n    // Ponto que nunca deveria ser alcançado quando o teste passar\n}\n","language":"java"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"\n@Test\npublic void example3() throws NotFoundException {\n    exception.expect(NotFoundException.class);\n    exception.expectMessage(containsString(\"algo que indique que a exceção certa ocorreu\"));\n    find(\"função que deveria lançar uma exceção\");\n    // Ponto que nunca deveria ser alcançado quando o teste passar\n}"}]}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Vantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Mais de uma expetativa sobre a mesma exceção podem ser testadas após o teste"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Desvantagens:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Não é possível realizar outros testes após o "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"find"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://baddotrobot.com/blog/2012/03/27/expecting-exception-with-junit-rule/","rel":["nofollow"]},"children":[{"type":"text","value":"Expecting Exceptions JUnit Rule"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"usando-bloco-trycatch","depth":2,"text":"Usando bloco try/catch"},{"id":"test-expected--exceptionclass","depth":2,"text":"@Test (expected = Exception.class)"},{"id":"expectedexception-rule","depth":2,"text":"ExpectedException Rule"},{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:junit-excecao.md","_source":"content","_file":"til/junit-excecao.md","_extension":"md"},{"_path":"/til/junit-swtbot","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Testes com SWTBot","description":"Testes com SWTBot","excerpt":{"type":"root","children":[{"type":"element","tag":"code","props":{"code":"SWTBotMenu windowMenu = bot.menu(\"Window\");\nwindowMenu.click();\n\nSWTBotMenu showViewMenu = windowMenu.menu(\"ShowView\");\nshowViewMenu.click();\n\nSWTBotMenu otherMenu = showViewMenu.menu(\"Other...\");\notherMenu.click();\n\nSWTBotTree tree = bot.tree(0);\nSWTBotTreeItem tItem = tree.getTreeItem(\"General\").expand();\ntItem.getNode(\"Console\").doubleClick();\n","language":"java"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"SWTBotMenu windowMenu = bot.menu(\"Window\");\nwindowMenu.click();\n\nSWTBotMenu showViewMenu = windowMenu.menu(\"ShowView\");\nshowViewMenu.click();\n\nSWTBotMenu otherMenu = showViewMenu.menu(\"Other...\");\notherMenu.click();\n\nSWTBotTree tree = bot.tree(0);\nSWTBotTreeItem tItem = tree.getTreeItem(\"General\").expand();\ntItem.getNode(\"Console\").doubleClick();\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://eclipseo.blogspot.com/2010/12/simple-test-using-swtbot.html","rel":["nofollow"]},"children":[{"type":"text","value":"A Simple Test using SWTBOT !!"}]}]}]}]},"date":"2019-11-12T00:00:00.000Z","draft":true,"tags":["swtbot","java","junit"],"Thumbnail":"img/headers/junit.webp","body":{"type":"root","children":[{"type":"element","tag":"code","props":{"code":"SWTBotMenu windowMenu = bot.menu(\"Window\");\nwindowMenu.click();\n\nSWTBotMenu showViewMenu = windowMenu.menu(\"ShowView\");\nshowViewMenu.click();\n\nSWTBotMenu otherMenu = showViewMenu.menu(\"Other...\");\notherMenu.click();\n\nSWTBotTree tree = bot.tree(0);\nSWTBotTreeItem tItem = tree.getTreeItem(\"General\").expand();\ntItem.getNode(\"Console\").doubleClick();\n","language":"java"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"SWTBotMenu windowMenu = bot.menu(\"Window\");\nwindowMenu.click();\n\nSWTBotMenu showViewMenu = windowMenu.menu(\"ShowView\");\nshowViewMenu.click();\n\nSWTBotMenu otherMenu = showViewMenu.menu(\"Other...\");\notherMenu.click();\n\nSWTBotTree tree = bot.tree(0);\nSWTBotTreeItem tItem = tree.getTreeItem(\"General\").expand();\ntItem.getNode(\"Console\").doubleClick();"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://eclipseo.blogspot.com/2010/12/simple-test-using-swtbot.html","rel":["nofollow"]},"children":[{"type":"text","value":"A Simple Test using SWTBOT !!"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:junit-swtbot.md","_source":"content","_file":"til/junit-swtbot.md","_extension":"md"}]