[{"_path":"/til/cpp-array","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"C++ array","description":"Exemplos de uso de std::array","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Exemplos de uso de std::array"}]},{"type":"element","tag":"h2","props":{"id":"características"},"children":[{"type":"text","value":"Características"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"é um wrapper para o array do C"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"array oferece uma sintaxe mais amigável comparada com a array do C"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pode ser passado e retornado por valor"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pode ser passado e retornado por referência"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"uso mais conveniente de "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"size"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"uso mais conveniente de iteradores STL"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"possui exatamente a mesma performace da array do C"}]}]},{"type":"element","tag":"h2","props":{"id":"array-vs-vector"},"children":[{"type":"text","value":"Array vs Vector"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"array"}]},{"type":"text","value":" é estático e possui tamanho definido em tempo de compilação"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"vector"}]},{"type":"text","value":" é dinâmico e é alocado no "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"heap"}]}]}]},{"type":"element","tag":"h2","props":{"id":"exemplos"},"children":[{"type":"text","value":"Exemplos"}]},{"type":"element","tag":"code","props":{"code":"#include <algorithm>\n#include <array>\n#include <iostream>\n\nusing namespace std;\n\n// Multidimensionais\ntemplate <class T, size_t ROW, size_t COL>\nusing Matrix = std::array<std::array<T, COL>, ROW>;\n\ntemplate <class T, size_t I, size_t... J>\nstruct MultiDimArray {\n  using Nested = typename MultiDimArray<T, J...>::type;\n  using type   = std::array<Nested, I>;\n};\n\ntemplate <class T, size_t I>\nstruct MultiDimArray<T, I> {\n  using type = std::array<T, I>;\n};\n\nint main( int argc, char **argv )\n{\n  auto print = []( const auto &arr ) {\n    cout << \"{ \";\n    for( const auto &x : arr ) {\n      cout << x << \" \";\n    }\n    cout << \"}\" << endl;\n  };\n\n  array<int, 3> a    = {2, 1, 3};\n  int           c[3] = {2, 1, 3}; // old C style\n\n  sort( a.begin(), a.end() );\n  print( a ); // { 1, 2, 3 }\n\n  sort( begin( c ), end( c ) ); // c == { 1, 2, 3 }\n  print( c );\n\n  for( auto &x : a ) {\n    x *= 2;\n  }\n  print( a ); // { 2, 4, 6 }\n\n  for( auto &x : c ) {\n    x *= 2;\n  }\n  print( c ); // { 2, 4, 6 }\n\n  array<array<int, 3>, 3> arr = {{{5, 8, 2}, {8, 3, 1}, {5, 3, 9}}};\n  cout << arr[2][2] << endl; // 9\n\n  Matrix<float, 3, 4> mat;\n  mat[1][2] = 5;\n\n  MultiDimArray<int, 2, 3, 4, 5>::type multi;\n  multi[1][1][1][1] = 5;\n\n  return 0;\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#include <algorithm>\n#include <array>\n#include <iostream>\n\nusing namespace std;\n\n// Multidimensionais\ntemplate <class T, size_t ROW, size_t COL>\nusing Matrix = std::array<std::array<T, COL>, ROW>;\n\ntemplate <class T, size_t I, size_t... J>\nstruct MultiDimArray {\n  using Nested = typename MultiDimArray<T, J...>::type;\n  using type   = std::array<Nested, I>;\n};\n\ntemplate <class T, size_t I>\nstruct MultiDimArray<T, I> {\n  using type = std::array<T, I>;\n};\n\nint main( int argc, char **argv )\n{\n  auto print = []( const auto &arr ) {\n    cout << \"{ \";\n    for( const auto &x : arr ) {\n      cout << x << \" \";\n    }\n    cout << \"}\" << endl;\n  };\n\n  array<int, 3> a    = {2, 1, 3};\n  int           c[3] = {2, 1, 3}; // old C style\n\n  sort( a.begin(), a.end() );\n  print( a ); // { 1, 2, 3 }\n\n  sort( begin( c ), end( c ) ); // c == { 1, 2, 3 }\n  print( c );\n\n  for( auto &x : a ) {\n    x *= 2;\n  }\n  print( a ); // { 2, 4, 6 }\n\n  for( auto &x : c ) {\n    x *= 2;\n  }\n  print( c ); // { 2, 4, 6 }\n\n  array<array<int, 3>, 3> arr = {{{5, 8, 2}, {8, 3, 1}, {5, 3, 9}}};\n  cout << arr[2][2] << endl; // 9\n\n  Matrix<float, 3, 4> mat;\n  mat[1][2] = 5;\n\n  MultiDimArray<int, 2, 3, 4, 5>::type multi;\n  multi[1][1][1][1] = 5;\n\n  return 0;\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://cpptruths.blogspot.com/2011/10/multi-dimensional-arrays-in-c11.html","rel":["nofollow"]},"children":[{"type":"text","value":"Multi-dimensional arrays in C++11"}]}]}]}]},"date":"2020-01-04T00:00:00.000Z","draft":false,"tags":["C++","cpp","std::array","Algorítimos"],"Thumbnail":"img/headers/cpp.png","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Exemplos de uso de std::array"}]},{"type":"element","tag":"h2","props":{"id":"características"},"children":[{"type":"text","value":"Características"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"é um wrapper para o array do C"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"array oferece uma sintaxe mais amigável comparada com a array do C"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pode ser passado e retornado por valor"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pode ser passado e retornado por referência"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"uso mais conveniente de "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"size"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"uso mais conveniente de iteradores STL"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"possui exatamente a mesma performace da array do C"}]}]},{"type":"element","tag":"h2","props":{"id":"array-vs-vector"},"children":[{"type":"text","value":"Array vs Vector"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"array"}]},{"type":"text","value":" é estático e possui tamanho definido em tempo de compilação"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"vector"}]},{"type":"text","value":" é dinâmico e é alocado no "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"heap"}]}]}]},{"type":"element","tag":"h2","props":{"id":"exemplos"},"children":[{"type":"text","value":"Exemplos"}]},{"type":"element","tag":"code","props":{"code":"#include <algorithm>\n#include <array>\n#include <iostream>\n\nusing namespace std;\n\n// Multidimensionais\ntemplate <class T, size_t ROW, size_t COL>\nusing Matrix = std::array<std::array<T, COL>, ROW>;\n\ntemplate <class T, size_t I, size_t... J>\nstruct MultiDimArray {\n  using Nested = typename MultiDimArray<T, J...>::type;\n  using type   = std::array<Nested, I>;\n};\n\ntemplate <class T, size_t I>\nstruct MultiDimArray<T, I> {\n  using type = std::array<T, I>;\n};\n\nint main( int argc, char **argv )\n{\n  auto print = []( const auto &arr ) {\n    cout << \"{ \";\n    for( const auto &x : arr ) {\n      cout << x << \" \";\n    }\n    cout << \"}\" << endl;\n  };\n\n  array<int, 3> a    = {2, 1, 3};\n  int           c[3] = {2, 1, 3}; // old C style\n\n  sort( a.begin(), a.end() );\n  print( a ); // { 1, 2, 3 }\n\n  sort( begin( c ), end( c ) ); // c == { 1, 2, 3 }\n  print( c );\n\n  for( auto &x : a ) {\n    x *= 2;\n  }\n  print( a ); // { 2, 4, 6 }\n\n  for( auto &x : c ) {\n    x *= 2;\n  }\n  print( c ); // { 2, 4, 6 }\n\n  array<array<int, 3>, 3> arr = {{{5, 8, 2}, {8, 3, 1}, {5, 3, 9}}};\n  cout << arr[2][2] << endl; // 9\n\n  Matrix<float, 3, 4> mat;\n  mat[1][2] = 5;\n\n  MultiDimArray<int, 2, 3, 4, 5>::type multi;\n  multi[1][1][1][1] = 5;\n\n  return 0;\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"#include <algorithm>\n#include <array>\n#include <iostream>\n\nusing namespace std;\n\n// Multidimensionais\ntemplate <class T, size_t ROW, size_t COL>\nusing Matrix = std::array<std::array<T, COL>, ROW>;\n\ntemplate <class T, size_t I, size_t... J>\nstruct MultiDimArray {\n  using Nested = typename MultiDimArray<T, J...>::type;\n  using type   = std::array<Nested, I>;\n};\n\ntemplate <class T, size_t I>\nstruct MultiDimArray<T, I> {\n  using type = std::array<T, I>;\n};\n\nint main( int argc, char **argv )\n{\n  auto print = []( const auto &arr ) {\n    cout << \"{ \";\n    for( const auto &x : arr ) {\n      cout << x << \" \";\n    }\n    cout << \"}\" << endl;\n  };\n\n  array<int, 3> a    = {2, 1, 3};\n  int           c[3] = {2, 1, 3}; // old C style\n\n  sort( a.begin(), a.end() );\n  print( a ); // { 1, 2, 3 }\n\n  sort( begin( c ), end( c ) ); // c == { 1, 2, 3 }\n  print( c );\n\n  for( auto &x : a ) {\n    x *= 2;\n  }\n  print( a ); // { 2, 4, 6 }\n\n  for( auto &x : c ) {\n    x *= 2;\n  }\n  print( c ); // { 2, 4, 6 }\n\n  array<array<int, 3>, 3> arr = {{{5, 8, 2}, {8, 3, 1}, {5, 3, 9}}};\n  cout << arr[2][2] << endl; // 9\n\n  Matrix<float, 3, 4> mat;\n  mat[1][2] = 5;\n\n  MultiDimArray<int, 2, 3, 4, 5>::type multi;\n  multi[1][1][1][1] = 5;\n\n  return 0;\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://cpptruths.blogspot.com/2011/10/multi-dimensional-arrays-in-c11.html","rel":["nofollow"]},"children":[{"type":"text","value":"Multi-dimensional arrays in C++11"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"características","depth":2,"text":"Características"},{"id":"array-vs-vector","depth":2,"text":"Array vs Vector"},{"id":"exemplos","depth":2,"text":"Exemplos"},{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:cpp-array.md","_source":"content","_file":"til/cpp-array.md","_extension":"md"}]