[{"_path":"/til/sbe","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"SBE - Simple Binary Encoding","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"~25X greater throughput than Google Protocol Buffers (GPB) with very low and predictable latency."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A typical market data message can be encoded, or decoded, in ~25ns compared\nto ~1000ns for the same message with GPB on the same hardware. XML and FIX\ntag value messages are orders of magnitude slower again."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"NOTE: Parece que o artigo do Mechanical Sympathy está melhor revisado"}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/real-logic/simple-binary-encoding","rel":["nofollow"]},"children":[{"type":"text","value":"github: Simple Binary Encoding (SBE) - High Performance Message Codec"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://dzone.com/articles/simple-binary-encoding","rel":["nofollow"]},"children":[{"type":"text","value":"DZone: Simple Binary Encoding"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://mechanical-sympathy.blogspot.com/2014/05/simple-binary-encoding.html","rel":["nofollow"]},"children":[{"type":"text","value":"Mechanical Sympathy: Simple Binary Encoding"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://capnproto.org/news/2014-06-17-capnproto-flatbuffers-sbe.html","rel":["nofollow"]},"children":[{"type":"text","value":"Cap'n Proto, FlatBuffers, and SBE"}]}]}]}]},"date":"2020-10-08T00:00:00.000Z","draft":false,"tags":["sbe","zeromq","nanomsg"],"Thumbnail":"img/headers/sbe.jpg","body":{"type":"root","children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"~25X greater throughput than Google Protocol Buffers (GPB) with very low and predictable latency."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A typical market data message can be encoded, or decoded, in ~25ns compared\nto ~1000ns for the same message with GPB on the same hardware. XML and FIX\ntag value messages are orders of magnitude slower again."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"NOTE: Parece que o artigo do Mechanical Sympathy está melhor revisado"}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/real-logic/simple-binary-encoding","rel":["nofollow"]},"children":[{"type":"text","value":"github: Simple Binary Encoding (SBE) - High Performance Message Codec"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://dzone.com/articles/simple-binary-encoding","rel":["nofollow"]},"children":[{"type":"text","value":"DZone: Simple Binary Encoding"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://mechanical-sympathy.blogspot.com/2014/05/simple-binary-encoding.html","rel":["nofollow"]},"children":[{"type":"text","value":"Mechanical Sympathy: Simple Binary Encoding"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://capnproto.org/news/2014-06-17-capnproto-flatbuffers-sbe.html","rel":["nofollow"]},"children":[{"type":"text","value":"Cap'n Proto, FlatBuffers, and SBE"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:sbe.md","_source":"content","_file":"til/sbe.md","_extension":"md"},{"_path":"/til/zeromq","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"ZeroMQ","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"orientado a transporte de bytes (mensagens)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"inspirado no sistema de atores do erlang para trocar mensagens e evitar problemas comuns na programação concorrente"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"resolve o problema de carregar bytes de um lugar para outro"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"não é apenas um modelo de socket crú"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"oferece alguns modelos de programação em cima de uma API baseada em socket"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"publish/subscribe"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"push/pull"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"dealer-router"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"comunicação entre threads"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"suporta IPC"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"suporta TCP"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"suporta multicast UDP"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pattern match"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"modelo de transporte eficiente"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"escrito em C++ com API no estilo C"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"push é um dos modelos mais rápidos, mas é o que demanda mais controle"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"push usa round-robin para distribuir"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"um publisher pode fazer bind com mais de um protocolo a mesmo tempo, assim um único send envia para dois ou mais protocolos"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"publisher_socker.bind(\"tcp://*:60001\");"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"publisher_socker.bind(\"ipc://pub.ipc\");"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"prefira usar um socket só para enviar e outro só para receber"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"defina afinidades para cada socket"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"incluir explicação sobre ZMQ_ROUTER_HANDOVER no tempo 40:27"}]}]},{"type":"element","tag":"h3","props":{"id":"socket-types"},"children":[{"type":"text","value":"Socket types"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Request/Reply pattern"}]},{"type":"text","value":": usado para enviar uma requisição e receber posteriormente a resposta para cada mensagem enviada."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Publish/Subscribe pattern"}]},{"type":"text","value":": usado para distribuir dados de um único processo (publisher) para múltiplos destinatários (subscribers)."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Pipeline Pattern"}]},{"type":"text","value":": Usado para distribuir dados entre nós conectados"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Exclusive Pair Pattern"}]},{"type":"text","value":": Usado para conectar dois nós"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"REQ: request client"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"REP: replay server"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"PUSH: server"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"PULL: client (worker)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"DEALER: client"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ROUTER: server"}]}]},{"type":"element","tag":"h2","props":{"id":"tipo-de-transporte"},"children":[{"type":"text","value":"Tipo de transporte"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"In-Process (INPROC): Local (in-process) communication transport."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Inter-Process (IPC): Local (inter-process) communication transport."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"TCP: Unicast communication transport using TCP."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"PGM: Multicast communication transport using PGM."}]}]},{"type":"element","tag":"h2","props":{"id":"veja-também"},"children":[{"type":"text","value":"Veja também"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"[nanomsg]("},{"type":"element","tag":"binding","props":{"value":"< ref \"nanomsg\" >"},"children":[]},{"type":"text","value":" \"nanomsg\")"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"[sbe]("},{"type":"element","tag":"binding","props":{"value":"< ref \"sbe\" >"},"children":[]},{"type":"text","value":" \"Simple Binary Encoding\")"}]}]},{"type":"element","tag":"h2","props":{"id":"nnd"},"children":[{"type":"text","value":"nnd"}]},{"type":"element","tag":"h2","props":{"id":"sbe-simple-binary-encoding"},"children":[{"type":"text","value":"SBE simple binary encoding"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/real-logic/simple-binary-encoding","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/real-logic/simple-binary-encoding"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"muito usado no mercado financeiro (stock exchanges)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"protocolo para mensagens de negócio"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Martin Tompson (especialista em desempenho dem JVM)"}]}]},{"type":"element","tag":"h2","props":{"id":"messagepack"},"children":[{"type":"text","value":"MessagePack"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"serializador de alto desempenho"}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.infoq.com/br/presentations/mensagens-distribuidas-com-alto-desempenho-zeromq-e-aplicacoes-financeiras/","rel":["nofollow"]},"children":[{"type":"text","value":"Mensagens distribuídas com alto desempenho: ZeroMQ e aplicações financeiras em larga escala"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/fabiogaluppo/samples/tree/master/events/qconsp2017/code","rel":["nofollow"]},"children":[{"type":"text","value":"Código de exemplo da palestra do Fabio Galuppo"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://youtu.be/UrwtQfSbrOs","rel":["nofollow"]},"children":[{"type":"text","value":"Video: ZeroMQ (ØMQ) Crash Course"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://brettviren.github.io/cppzmq-tour/","rel":["nofollow"]},"children":[{"type":"text","value":"A tour of CPPZMQ, the C++ bindings to libzmq"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://jaxenter.com/using-zeromq-security-part-1-119346.html","rel":["nofollow"]},"children":[{"type":"text","value":"Using ZeroMQ Security (Part 1)"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.digitalocean.com/community/tutorials/how-to-work-with-the-zeromq-messaging-library","rel":["nofollow"]},"children":[{"type":"text","value":"How To Work with the ZeroMQ Messaging Library"}]}]}]}]},"date":"2020-10-07T00:00:00.000Z","draft":false,"tags":["zeromq"],"Thumbnail":"img/headers/zeromq.jpg","body":{"type":"root","children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"orientado a transporte de bytes (mensagens)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"inspirado no sistema de atores do erlang para trocar mensagens e evitar problemas comuns na programação concorrente"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"resolve o problema de carregar bytes de um lugar para outro"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"não é apenas um modelo de socket crú"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"oferece alguns modelos de programação em cima de uma API baseada em socket"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"publish/subscribe"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"push/pull"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"dealer-router"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"comunicação entre threads"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"suporta IPC"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"suporta TCP"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"suporta multicast UDP"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pattern match"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"modelo de transporte eficiente"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"escrito em C++ com API no estilo C"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"push é um dos modelos mais rápidos, mas é o que demanda mais controle"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"push usa round-robin para distribuir"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"um publisher pode fazer bind com mais de um protocolo a mesmo tempo, assim um único send envia para dois ou mais protocolos"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"publisher_socker.bind(\"tcp://*:60001\");"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"publisher_socker.bind(\"ipc://pub.ipc\");"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"prefira usar um socket só para enviar e outro só para receber"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"defina afinidades para cada socket"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"incluir explicação sobre ZMQ_ROUTER_HANDOVER no tempo 40:27"}]}]},{"type":"element","tag":"h3","props":{"id":"socket-types"},"children":[{"type":"text","value":"Socket types"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Request/Reply pattern"}]},{"type":"text","value":": usado para enviar uma requisição e receber posteriormente a resposta para cada mensagem enviada."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Publish/Subscribe pattern"}]},{"type":"text","value":": usado para distribuir dados de um único processo (publisher) para múltiplos destinatários (subscribers)."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Pipeline Pattern"}]},{"type":"text","value":": Usado para distribuir dados entre nós conectados"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Exclusive Pair Pattern"}]},{"type":"text","value":": Usado para conectar dois nós"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"REQ: request client"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"REP: replay server"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"PUSH: server"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"PULL: client (worker)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"DEALER: client"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ROUTER: server"}]}]},{"type":"element","tag":"h2","props":{"id":"tipo-de-transporte"},"children":[{"type":"text","value":"Tipo de transporte"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"In-Process (INPROC): Local (in-process) communication transport."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Inter-Process (IPC): Local (inter-process) communication transport."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"TCP: Unicast communication transport using TCP."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"PGM: Multicast communication transport using PGM."}]}]},{"type":"element","tag":"h2","props":{"id":"veja-também"},"children":[{"type":"text","value":"Veja também"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"[nanomsg]("},{"type":"element","tag":"binding","props":{"value":"< ref \"nanomsg\" >"},"children":[]},{"type":"text","value":" \"nanomsg\")"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"[sbe]("},{"type":"element","tag":"binding","props":{"value":"< ref \"sbe\" >"},"children":[]},{"type":"text","value":" \"Simple Binary Encoding\")"}]}]},{"type":"element","tag":"h2","props":{"id":"nnd"},"children":[{"type":"text","value":"nnd"}]},{"type":"element","tag":"h2","props":{"id":"sbe-simple-binary-encoding"},"children":[{"type":"text","value":"SBE simple binary encoding"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/real-logic/simple-binary-encoding","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/real-logic/simple-binary-encoding"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"muito usado no mercado financeiro (stock exchanges)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"protocolo para mensagens de negócio"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Martin Tompson (especialista em desempenho dem JVM)"}]}]},{"type":"element","tag":"h2","props":{"id":"messagepack"},"children":[{"type":"text","value":"MessagePack"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"serializador de alto desempenho"}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.infoq.com/br/presentations/mensagens-distribuidas-com-alto-desempenho-zeromq-e-aplicacoes-financeiras/","rel":["nofollow"]},"children":[{"type":"text","value":"Mensagens distribuídas com alto desempenho: ZeroMQ e aplicações financeiras em larga escala"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/fabiogaluppo/samples/tree/master/events/qconsp2017/code","rel":["nofollow"]},"children":[{"type":"text","value":"Código de exemplo da palestra do Fabio Galuppo"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://youtu.be/UrwtQfSbrOs","rel":["nofollow"]},"children":[{"type":"text","value":"Video: ZeroMQ (ØMQ) Crash Course"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://brettviren.github.io/cppzmq-tour/","rel":["nofollow"]},"children":[{"type":"text","value":"A tour of CPPZMQ, the C++ bindings to libzmq"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://jaxenter.com/using-zeromq-security-part-1-119346.html","rel":["nofollow"]},"children":[{"type":"text","value":"Using ZeroMQ Security (Part 1)"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.digitalocean.com/community/tutorials/how-to-work-with-the-zeromq-messaging-library","rel":["nofollow"]},"children":[{"type":"text","value":"How To Work with the ZeroMQ Messaging Library"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"socket-types","depth":3,"text":"Socket types"},{"id":"tipo-de-transporte","depth":2,"text":"Tipo de transporte"},{"id":"veja-também","depth":2,"text":"Veja também"},{"id":"nnd","depth":2,"text":"nnd"},{"id":"sbe-simple-binary-encoding","depth":2,"text":"SBE simple binary encoding"},{"id":"messagepack","depth":2,"text":"MessagePack"},{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:zeromq.md","_source":"content","_file":"til/zeromq.md","_extension":"md"},{"_path":"/til/nanomsg","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"nanomsg","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"nanomsg"},"children":[{"type":"text","value":"nanomsg"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"olhar nanomsg "},{"type":"element","tag":"a","props":{"href":"https://nanomsg.org/gettingstarted/pipeline.html","rel":["nofollow"]},"children":[{"type":"text","value":"https://nanomsg.org/gettingstarted/pipeline.html"}]},{"type":"text","value":" nanomsg\nlibrary is MIT-licensed. What it means is that, unlike with ZeroMQ, you can\nmodify the source code and re-release it under a different license, as\na proprietary product, etc. More reasoning about the licensing can be found\nhere."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://staysail.github.io/nng_presentation/nng_presentation.html","rel":["nofollow"]},"children":[{"type":"text","value":"https://staysail.github.io/nng_presentation/nng_presentation.html"}]},{"type":"text","value":"\nSCALABILITY PROTOCOLS\n(nanomsg, nng, mangos, and other critters)\nFebruary 13, 2018\nImportar esta apresentação"}]}]},"date":"2020-10-07T00:00:00.000Z","draft":false,"tags":["zeromq","nanomsg"],"Thumbnail":"img/headers/zeromq.jpg","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"nanomsg"},"children":[{"type":"text","value":"nanomsg"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"olhar nanomsg "},{"type":"element","tag":"a","props":{"href":"https://nanomsg.org/gettingstarted/pipeline.html","rel":["nofollow"]},"children":[{"type":"text","value":"https://nanomsg.org/gettingstarted/pipeline.html"}]},{"type":"text","value":" nanomsg\nlibrary is MIT-licensed. What it means is that, unlike with ZeroMQ, you can\nmodify the source code and re-release it under a different license, as\na proprietary product, etc. More reasoning about the licensing can be found\nhere."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://staysail.github.io/nng_presentation/nng_presentation.html","rel":["nofollow"]},"children":[{"type":"text","value":"https://staysail.github.io/nng_presentation/nng_presentation.html"}]},{"type":"text","value":"\nSCALABILITY PROTOCOLS\n(nanomsg, nng, mangos, and other critters)\nFebruary 13, 2018\nImportar esta apresentação"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"nanomsg","depth":2,"text":"nanomsg"}]}},"_type":"markdown","_id":"content:til:nanomsg.md","_source":"content","_file":"til/nanomsg.md","_extension":"md"}]