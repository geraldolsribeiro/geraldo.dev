{"_path":"/til/vim-run-tests","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Run Tests in Vim","description":"Test driven development thrives on a tight feedback loop\nbut switching from the editor to the shell\nto manually run specs is inefficient.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Test driven development thrives on a tight feedback loop\nbut switching from the editor to the shell\nto manually run specs is inefficient."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Tools such as "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"autotest"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"guard"}]},{"type":"text","value":" run specs whenever a file gets saved.\nAlthough an improvement over a manual workflow,\nthose approaches often run the suite when not needed\nand run too many or too few specs."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Enter "},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"vim-rspec"}]},{"type":"text","value":",\na lightweight Vim plugin that runs specs directly from within Vim\nwith the press of a key."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It exposes methods such as "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"RunNearestSpec()"}]},{"type":"text","value":",\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"RunCurrentSpecFile()"}]},{"type":"text","value":", and\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"RunLastSpec()"}]},{"type":"text","value":",\nwhich can be bound to a key mapping of your choice.\nIn "},{"type":"element","tag":"a","props":{"href":"https://github.com/thoughtbot/dotfiles/blob/master/vimrc","rel":["nofollow"]},"children":[{"type":"text","value":"thoughtbot/dotfiles"}]},{"type":"text","value":",\nwe bind those methods to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>s"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>t"}]},{"type":"text","value":", and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>l"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Cursor over any line within an RSpec spec like this:"}]},{"type":"element","tag":"code","props":{"code":"describe RecipientInterceptor do\n  it 'overrides to/cc/bcc fields' do\n    Mail.register_interceptor RecipientInterceptor.new(recipient_string)\n\n    response = deliver_mail\n\n    expect(response.to).to eq [recipient_string]\n    expect(response.cc).to eq []\n    expect(response.bcc).to eq []\n  end\nend\n","language":"ruby"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"describe RecipientInterceptor do\n  it 'overrides to/cc/bcc fields' do\n    Mail.register_interceptor RecipientInterceptor.new(recipient_string)\n\n    response = deliver_mail\n\n    expect(response.to).to eq [recipient_string]\n    expect(response.cc).to eq []\n    expect(response.bcc).to eq []\n  end\nend\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Type "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>s"}]},{"type":"text","value":":"}]},{"type":"element","tag":"code","props":{"code":"rspec spec/recipient_interceptor_spec.rb:4\n.\n\nFinished in 0.03059 seconds\n1 example, 0 failures\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"rspec spec/recipient_interceptor_spec.rb:4\n.\n\nFinished in 0.03059 seconds\n1 example, 0 failures\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The screen is overtaken by a shell that runs only the focused spec.\nDevelopers using tmux with vim-rspec and tslime\nsometimes send the output to a nearby shell\nso the code and spec output display on the screen at the same time."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Feeling good that this new spec passes,\nrun the whole file's specs with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>t"}]},{"type":"text","value":"\nto make sure the class's entire functionality is still intact:"}]},{"type":"element","tag":"code","props":{"code":"rspec spec/recipient_interceptor_spec.rb\n......\n\nFinished in 0.17752 seconds\n6 examples, 0 failures\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"rspec spec/recipient_interceptor_spec.rb\n......\n\nFinished in 0.17752 seconds\n6 examples, 0 failures\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Red, green, refactor.\nFrom within the application's or library's code:"}]},{"type":"element","tag":"code","props":{"code":"def delivering_email(message)\n  add_custom_headers message\n  add_subject_prefix message\n  message.to = @recipients\n  message.cc = []\n  message.bcc = []\nend\n","language":"ruby"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"def delivering_email(message)\n  add_custom_headers message\n  add_subject_prefix message\n  message.to = @recipients\n  message.cc = []\n  message.bcc = []\nend\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>l"}]},{"type":"text","value":" without having to switch back to the spec:"}]},{"type":"element","tag":"code","props":{"code":"rspec spec/recipient_interceptor_spec.rb\n......\n\nFinished in 0.17752 seconds\n6 examples, 0 failures\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"rspec spec/recipient_interceptor_spec.rb\n......\n\nFinished in 0.17752 seconds\n6 examples, 0 failures\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"These tight feedback loops make Test-Driven Development easier\nby eliminating the switching cost between editor to the shell\nwhen running specs."}]}]},"scientia":"c97248ec-d18b-4ccd-81c6-d6f7c63b8a95","date":"2018-11-19T00:00:00.000Z","draft":false,"Thumbnail":"/img/headers/vim.jpg","tags":["vim"],"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Test driven development thrives on a tight feedback loop\nbut switching from the editor to the shell\nto manually run specs is inefficient."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Tools such as "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"autotest"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"guard"}]},{"type":"text","value":" run specs whenever a file gets saved.\nAlthough an improvement over a manual workflow,\nthose approaches often run the suite when not needed\nand run too many or too few specs."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Enter "},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"vim-rspec"}]},{"type":"text","value":",\na lightweight Vim plugin that runs specs directly from within Vim\nwith the press of a key."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It exposes methods such as "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"RunNearestSpec()"}]},{"type":"text","value":",\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"RunCurrentSpecFile()"}]},{"type":"text","value":", and\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"RunLastSpec()"}]},{"type":"text","value":",\nwhich can be bound to a key mapping of your choice.\nIn "},{"type":"element","tag":"a","props":{"href":"https://github.com/thoughtbot/dotfiles/blob/master/vimrc","rel":["nofollow"]},"children":[{"type":"text","value":"thoughtbot/dotfiles"}]},{"type":"text","value":",\nwe bind those methods to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>s"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>t"}]},{"type":"text","value":", and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>l"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Cursor over any line within an RSpec spec like this:"}]},{"type":"element","tag":"code","props":{"code":"describe RecipientInterceptor do\n  it 'overrides to/cc/bcc fields' do\n    Mail.register_interceptor RecipientInterceptor.new(recipient_string)\n\n    response = deliver_mail\n\n    expect(response.to).to eq [recipient_string]\n    expect(response.cc).to eq []\n    expect(response.bcc).to eq []\n  end\nend\n","language":"ruby"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"describe RecipientInterceptor do\n  it 'overrides to/cc/bcc fields' do\n    Mail.register_interceptor RecipientInterceptor.new(recipient_string)\n\n    response = deliver_mail\n\n    expect(response.to).to eq [recipient_string]\n    expect(response.cc).to eq []\n    expect(response.bcc).to eq []\n  end\nend"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Type "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>s"}]},{"type":"text","value":":"}]},{"type":"element","tag":"code","props":{"code":"rspec spec/recipient_interceptor_spec.rb:4\n.\n\nFinished in 0.03059 seconds\n1 example, 0 failures\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"rspec spec/recipient_interceptor_spec.rb:4\n.\n\nFinished in 0.03059 seconds\n1 example, 0 failures"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The screen is overtaken by a shell that runs only the focused spec.\nDevelopers using tmux with vim-rspec and tslime\nsometimes send the output to a nearby shell\nso the code and spec output display on the screen at the same time."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Feeling good that this new spec passes,\nrun the whole file's specs with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>t"}]},{"type":"text","value":"\nto make sure the class's entire functionality is still intact:"}]},{"type":"element","tag":"code","props":{"code":"rspec spec/recipient_interceptor_spec.rb\n......\n\nFinished in 0.17752 seconds\n6 examples, 0 failures\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"rspec spec/recipient_interceptor_spec.rb\n......\n\nFinished in 0.17752 seconds\n6 examples, 0 failures"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Red, green, refactor.\nFrom within the application's or library's code:"}]},{"type":"element","tag":"code","props":{"code":"def delivering_email(message)\n  add_custom_headers message\n  add_subject_prefix message\n  message.to = @recipients\n  message.cc = []\n  message.bcc = []\nend\n","language":"ruby"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"def delivering_email(message)\n  add_custom_headers message\n  add_subject_prefix message\n  message.to = @recipients\n  message.cc = []\n  message.bcc = []\nend"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<Leader>l"}]},{"type":"text","value":" without having to switch back to the spec:"}]},{"type":"element","tag":"code","props":{"code":"rspec spec/recipient_interceptor_spec.rb\n......\n\nFinished in 0.17752 seconds\n6 examples, 0 failures\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"rspec spec/recipient_interceptor_spec.rb\n......\n\nFinished in 0.17752 seconds\n6 examples, 0 failures"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"These tight feedback loops make Test-Driven Development easier\nby eliminating the switching cost between editor to the shell\nwhen running specs."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:til:vim-run-tests.md","_source":"content","_file":"til/vim-run-tests.md","_extension":"md"}