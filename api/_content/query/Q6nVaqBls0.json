{"_path":"/til/cpp-armadillo","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Álgebra linear com Armadillo","description":"Algebra linear com a biblioteca armadillo.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Algebra linear com a biblioteca "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"armadillo"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n$$\nA_{m,n} =\n\\begin{pmatrix}\na_{1,1} & a_{1,2} & \\cdots & a_{1,n} \\\\\na_{2,1} & a_{2,2} & \\cdots & a_{2,n} \\\\\n\\vdots  & \\vdots  & \\ddots & \\vdots  \\\\\na_{m,1} & a_{m,2} & \\cdots & a_{m,n} \n\\end{pmatrix}\n$$\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Armadillo"}]},{"type":"text","value":" é uma biblioteca de álgebra linear para C++ rápida e fácil de usar, com sintaxe parecida com a do "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Matlab"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Provê suporte para:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"vetores (tensores de primeira ordem)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"matrizes (tensores de segunda ordem)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"cubos (tensores de terceira ordem)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"matrizes densas e esparsas"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"números inteiros, de ponto flutuante e complexos"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"decomposição (via LAPACK)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"multi-thread (Intel MKL ou OpenBLAS)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"avaliador de expressão baseado em meta-programação"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"paralelização (via OpenMP)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Principais usos:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"machine learning"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"reconhecimento de padrões"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"visão computacional"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"processamento de sinais"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"bioinformática"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"estatística"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"finanças"}]}]},{"type":"element","tag":"h2","props":{"id":"instalação-no-debian"},"children":[{"type":"text","value":"Instalação no Debian"}]},{"type":"element","tag":"code","props":{"code":"apt install libarmadillo-dev\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"apt install libarmadillo-dev\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"instalação-no-macos"},"children":[{"type":"text","value":"Instalação no MacOS"}]},{"type":"element","tag":"code","props":{"code":"brew install armadillo\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"brew install armadillo\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"exemplos-de-uso"},"children":[{"type":"text","value":"Exemplos de uso"}]},{"type":"element","tag":"code","props":{"code":"#include <armadillo>\n#include <iostream>\n\nusing namespace std;\nusing namespace arma;\n\nint main()\n{\n  // inicia o gerador de números aleatórios\n  arma_rng::set_seed_random();\n\n  // Cria uma matriz com dados aleatório com dimensão 2x3\n  auto A = randu( 2, 3 );\n  cout << A << endl;\n  //    0.7038   0.6819   0.9555\n  //    0.3804   0.9666   0.9270\n\n  // Transposta\n  cout << A.t() << endl;\n  //    0.7526   0.5681\n  //    0.5874   0.9469\n  //    0.3562   0.9346\n\n  // Multiplicação de matrizes\n  cout << A.t() * A << endl;\n  //    0.0536   0.2644   0.2534\n  //    0.4731   0.3874   0.9599\n  //    0.1739   0.3313   0.4768\n\n  mat B( 3, 3, fill::randu );\n  cout << B << endl;\n  //    0.9563   0.8955   0.0919\n  //    0.3291   0.3086   0.3452\n  //    0.1894   0.9898   0.8642\n\n  cout << \"Determinante: \" << det( B ) << endl;\n  // Determinante: -0.243228\n\n  auto C = randu( 3, 3 );\n  cout << C << endl;\n  //    0.5561   0.6219   0.2147\n  //    0.3105   0.2813   0.9172\n  //    0.3408   0.1925   0.4703\n  cout << \"Determinante: \" << det( C ) << endl;\n  // Determinante: -0.254525\n\n  mat D = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n  cout << D << endl;\n  //    1.0000   2.0000   3.0000\n  //    4.0000   5.0000   6.0000\n  //    7.0000   8.0000   9.0000\n  cout << \"Determinante: \" << det( D ) << endl;\n  // Determinante: 6.66134e-16\n\n  D.row( 0 ) = D.row( 1 ) + D.row( 2 );\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  //  4.0000    5.0000    6.0000\n  //  7.0000    8.0000    9.0000\n\n  D.row( 1 ) = D.row( 1 ) * 5;\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  // 20.0000   25.0000   30.0000\n  //  7.0000    8.0000    9.0000\n  //\n\n  D.row( 2 ).zeros();\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  // 20.0000   25.0000   30.0000\n  //       0         0         0\n\n  D.col( 2 ) = D.col( 2 ) + 10;\n  cout << D << endl;\n  // 11.0000   13.0000   25.0000\n  // 20.0000   25.0000   40.0000\n  //       0         0   10.0000\n\n  D = diagmat( D );\n  cout << D << endl;\n  // 11.0000         0         0\n  //       0   25.0000         0\n  //       0         0   10.0000\n\n  D.save( \"D.bin\" );\n\n  D.save( \"D.txt\", arma_ascii );\n  // ARMA_MAT_TXT_FN008\n  // 3 3\n  //    1.10000000000000e+01   0.00000000000000e+00   0.00000000000000e+00\n  //    0.00000000000000e+00   2.50000000000000e+01   0.00000000000000e+00\n  //    0.00000000000000e+00   0.00000000000000e+00   1.00000000000000e+01\n\n  auto O = ones( 2, 2 );\n  cout << O << endl;\n  // 1.0000   1.0000\n  // 1.0000   1.0000\n\n  auto Z = zeros( 3, 5 );\n  cout << Z << endl;\n  // 0        0        0        0        0\n  // 0        0        0        0        0\n  // 0        0        0        0        0\n\n  mat F1, F2;\n  F1.load( \"D.bin\" );\n  F2.load( \"D.txt\" );\n  cout << F1 << endl;\n  // 11.0000         0         0\n  //       0   25.0000         0\n  //       0         0   10.000\n\n  cout << F1 - F2 << endl;\n  // 0        0        0\n  // 0        0        0\n  // 0        0        0\n\n  mat F( 2, 3 );\n  F.fill( 3.14 );\n  cout << F << endl;\n  // 3.1400   3.1400   3.1400\n  // 3.1400   3.1400   3.1400\n\n  F = F.ones();\n  F.col( 0 ) *= datum::pi;\n  F.col( 1 ) *= datum::inf;\n  F.col( 2 ) *= datum::nan;\n  cout << F << endl;\n  // 3.1416      inf      nan\n  // 3.1416      inf      nan\n\n  return 0;\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#include <armadillo>\n#include <iostream>\n\nusing namespace std;\nusing namespace arma;\n\nint main()\n{\n  // inicia o gerador de números aleatórios\n  arma_rng::set_seed_random();\n\n  // Cria uma matriz com dados aleatório com dimensão 2x3\n  auto A = randu( 2, 3 );\n  cout << A << endl;\n  //    0.7038   0.6819   0.9555\n  //    0.3804   0.9666   0.9270\n\n  // Transposta\n  cout << A.t() << endl;\n  //    0.7526   0.5681\n  //    0.5874   0.9469\n  //    0.3562   0.9346\n\n  // Multiplicação de matrizes\n  cout << A.t() * A << endl;\n  //    0.0536   0.2644   0.2534\n  //    0.4731   0.3874   0.9599\n  //    0.1739   0.3313   0.4768\n\n  mat B( 3, 3, fill::randu );\n  cout << B << endl;\n  //    0.9563   0.8955   0.0919\n  //    0.3291   0.3086   0.3452\n  //    0.1894   0.9898   0.8642\n\n  cout << \"Determinante: \" << det( B ) << endl;\n  // Determinante: -0.243228\n\n  auto C = randu( 3, 3 );\n  cout << C << endl;\n  //    0.5561   0.6219   0.2147\n  //    0.3105   0.2813   0.9172\n  //    0.3408   0.1925   0.4703\n  cout << \"Determinante: \" << det( C ) << endl;\n  // Determinante: -0.254525\n\n  mat D = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n  cout << D << endl;\n  //    1.0000   2.0000   3.0000\n  //    4.0000   5.0000   6.0000\n  //    7.0000   8.0000   9.0000\n  cout << \"Determinante: \" << det( D ) << endl;\n  // Determinante: 6.66134e-16\n\n  D.row( 0 ) = D.row( 1 ) + D.row( 2 );\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  //  4.0000    5.0000    6.0000\n  //  7.0000    8.0000    9.0000\n\n  D.row( 1 ) = D.row( 1 ) * 5;\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  // 20.0000   25.0000   30.0000\n  //  7.0000    8.0000    9.0000\n  //\n\n  D.row( 2 ).zeros();\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  // 20.0000   25.0000   30.0000\n  //       0         0         0\n\n  D.col( 2 ) = D.col( 2 ) + 10;\n  cout << D << endl;\n  // 11.0000   13.0000   25.0000\n  // 20.0000   25.0000   40.0000\n  //       0         0   10.0000\n\n  D = diagmat( D );\n  cout << D << endl;\n  // 11.0000         0         0\n  //       0   25.0000         0\n  //       0         0   10.0000\n\n  D.save( \"D.bin\" );\n\n  D.save( \"D.txt\", arma_ascii );\n  // ARMA_MAT_TXT_FN008\n  // 3 3\n  //    1.10000000000000e+01   0.00000000000000e+00   0.00000000000000e+00\n  //    0.00000000000000e+00   2.50000000000000e+01   0.00000000000000e+00\n  //    0.00000000000000e+00   0.00000000000000e+00   1.00000000000000e+01\n\n  auto O = ones( 2, 2 );\n  cout << O << endl;\n  // 1.0000   1.0000\n  // 1.0000   1.0000\n\n  auto Z = zeros( 3, 5 );\n  cout << Z << endl;\n  // 0        0        0        0        0\n  // 0        0        0        0        0\n  // 0        0        0        0        0\n\n  mat F1, F2;\n  F1.load( \"D.bin\" );\n  F2.load( \"D.txt\" );\n  cout << F1 << endl;\n  // 11.0000         0         0\n  //       0   25.0000         0\n  //       0         0   10.000\n\n  cout << F1 - F2 << endl;\n  // 0        0        0\n  // 0        0        0\n  // 0        0        0\n\n  mat F( 2, 3 );\n  F.fill( 3.14 );\n  cout << F << endl;\n  // 3.1400   3.1400   3.1400\n  // 3.1400   3.1400   3.1400\n\n  F = F.ones();\n  F.col( 0 ) *= datum::pi;\n  F.col( 1 ) *= datum::inf;\n  F.col( 2 ) *= datum::nan;\n  cout << F << endl;\n  // 3.1416      inf      nan\n  // 3.1416      inf      nan\n\n  return 0;\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://arma.sourceforge.net/","rel":["nofollow"]},"children":[{"type":"text","value":"Armadillo C++ library for linear algebra & scientific computing"}]}]}]}]},"date":"2019-12-17T00:00:00.000Z","draft":false,"tags":["armadillo","C++","cpp","álgebra linear"],"Thumbnail":"img/headers/armadillo.jpg","math":true,"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Algebra linear com a biblioteca "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"armadillo"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n$$\nA_{m,n} =\n\\begin{pmatrix}\na_{1,1} & a_{1,2} & \\cdots & a_{1,n} \\\\\na_{2,1} & a_{2,2} & \\cdots & a_{2,n} \\\\\n\\vdots  & \\vdots  & \\ddots & \\vdots  \\\\\na_{m,1} & a_{m,2} & \\cdots & a_{m,n} \n\\end{pmatrix}\n$$\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Armadillo"}]},{"type":"text","value":" é uma biblioteca de álgebra linear para C++ rápida e fácil de usar, com sintaxe parecida com a do "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Matlab"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Provê suporte para:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"vetores (tensores de primeira ordem)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"matrizes (tensores de segunda ordem)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"cubos (tensores de terceira ordem)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"matrizes densas e esparsas"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"números inteiros, de ponto flutuante e complexos"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"decomposição (via LAPACK)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"multi-thread (Intel MKL ou OpenBLAS)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"avaliador de expressão baseado em meta-programação"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"paralelização (via OpenMP)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Principais usos:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"machine learning"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"reconhecimento de padrões"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"visão computacional"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"processamento de sinais"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"bioinformática"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"estatística"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"finanças"}]}]},{"type":"element","tag":"h2","props":{"id":"instalação-no-debian"},"children":[{"type":"text","value":"Instalação no Debian"}]},{"type":"element","tag":"code","props":{"code":"apt install libarmadillo-dev\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-751ee3"},"children":[{"type":"text","value":"apt install libarmadillo-dev"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"instalação-no-macos"},"children":[{"type":"text","value":"Instalação no MacOS"}]},{"type":"element","tag":"code","props":{"code":"brew install armadillo\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-751ee3"},"children":[{"type":"text","value":"brew install armadillo"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"exemplos-de-uso"},"children":[{"type":"text","value":"Exemplos de uso"}]},{"type":"element","tag":"code","props":{"code":"#include <armadillo>\n#include <iostream>\n\nusing namespace std;\nusing namespace arma;\n\nint main()\n{\n  // inicia o gerador de números aleatórios\n  arma_rng::set_seed_random();\n\n  // Cria uma matriz com dados aleatório com dimensão 2x3\n  auto A = randu( 2, 3 );\n  cout << A << endl;\n  //    0.7038   0.6819   0.9555\n  //    0.3804   0.9666   0.9270\n\n  // Transposta\n  cout << A.t() << endl;\n  //    0.7526   0.5681\n  //    0.5874   0.9469\n  //    0.3562   0.9346\n\n  // Multiplicação de matrizes\n  cout << A.t() * A << endl;\n  //    0.0536   0.2644   0.2534\n  //    0.4731   0.3874   0.9599\n  //    0.1739   0.3313   0.4768\n\n  mat B( 3, 3, fill::randu );\n  cout << B << endl;\n  //    0.9563   0.8955   0.0919\n  //    0.3291   0.3086   0.3452\n  //    0.1894   0.9898   0.8642\n\n  cout << \"Determinante: \" << det( B ) << endl;\n  // Determinante: -0.243228\n\n  auto C = randu( 3, 3 );\n  cout << C << endl;\n  //    0.5561   0.6219   0.2147\n  //    0.3105   0.2813   0.9172\n  //    0.3408   0.1925   0.4703\n  cout << \"Determinante: \" << det( C ) << endl;\n  // Determinante: -0.254525\n\n  mat D = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n  cout << D << endl;\n  //    1.0000   2.0000   3.0000\n  //    4.0000   5.0000   6.0000\n  //    7.0000   8.0000   9.0000\n  cout << \"Determinante: \" << det( D ) << endl;\n  // Determinante: 6.66134e-16\n\n  D.row( 0 ) = D.row( 1 ) + D.row( 2 );\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  //  4.0000    5.0000    6.0000\n  //  7.0000    8.0000    9.0000\n\n  D.row( 1 ) = D.row( 1 ) * 5;\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  // 20.0000   25.0000   30.0000\n  //  7.0000    8.0000    9.0000\n  //\n\n  D.row( 2 ).zeros();\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  // 20.0000   25.0000   30.0000\n  //       0         0         0\n\n  D.col( 2 ) = D.col( 2 ) + 10;\n  cout << D << endl;\n  // 11.0000   13.0000   25.0000\n  // 20.0000   25.0000   40.0000\n  //       0         0   10.0000\n\n  D = diagmat( D );\n  cout << D << endl;\n  // 11.0000         0         0\n  //       0   25.0000         0\n  //       0         0   10.0000\n\n  D.save( \"D.bin\" );\n\n  D.save( \"D.txt\", arma_ascii );\n  // ARMA_MAT_TXT_FN008\n  // 3 3\n  //    1.10000000000000e+01   0.00000000000000e+00   0.00000000000000e+00\n  //    0.00000000000000e+00   2.50000000000000e+01   0.00000000000000e+00\n  //    0.00000000000000e+00   0.00000000000000e+00   1.00000000000000e+01\n\n  auto O = ones( 2, 2 );\n  cout << O << endl;\n  // 1.0000   1.0000\n  // 1.0000   1.0000\n\n  auto Z = zeros( 3, 5 );\n  cout << Z << endl;\n  // 0        0        0        0        0\n  // 0        0        0        0        0\n  // 0        0        0        0        0\n\n  mat F1, F2;\n  F1.load( \"D.bin\" );\n  F2.load( \"D.txt\" );\n  cout << F1 << endl;\n  // 11.0000         0         0\n  //       0   25.0000         0\n  //       0         0   10.000\n\n  cout << F1 - F2 << endl;\n  // 0        0        0\n  // 0        0        0\n  // 0        0        0\n\n  mat F( 2, 3 );\n  F.fill( 3.14 );\n  cout << F << endl;\n  // 3.1400   3.1400   3.1400\n  // 3.1400   3.1400   3.1400\n\n  F = F.ones();\n  F.col( 0 ) *= datum::pi;\n  F.col( 1 ) *= datum::inf;\n  F.col( 2 ) *= datum::nan;\n  cout << F << endl;\n  // 3.1416      inf      nan\n  // 3.1416      inf      nan\n\n  return 0;\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"#include <armadillo>\n#include <iostream>\n\nusing namespace std;\nusing namespace arma;\n\nint main()\n{\n  // inicia o gerador de números aleatórios\n  arma_rng::set_seed_random();\n\n  // Cria uma matriz com dados aleatório com dimensão 2x3\n  auto A = randu( 2, 3 );\n  cout << A << endl;\n  //    0.7038   0.6819   0.9555\n  //    0.3804   0.9666   0.9270\n\n  // Transposta\n  cout << A.t() << endl;\n  //    0.7526   0.5681\n  //    0.5874   0.9469\n  //    0.3562   0.9346\n\n  // Multiplicação de matrizes\n  cout << A.t() * A << endl;\n  //    0.0536   0.2644   0.2534\n  //    0.4731   0.3874   0.9599\n  //    0.1739   0.3313   0.4768\n\n  mat B( 3, 3, fill::randu );\n  cout << B << endl;\n  //    0.9563   0.8955   0.0919\n  //    0.3291   0.3086   0.3452\n  //    0.1894   0.9898   0.8642\n\n  cout << \"Determinante: \" << det( B ) << endl;\n  // Determinante: -0.243228\n\n  auto C = randu( 3, 3 );\n  cout << C << endl;\n  //    0.5561   0.6219   0.2147\n  //    0.3105   0.2813   0.9172\n  //    0.3408   0.1925   0.4703\n  cout << \"Determinante: \" << det( C ) << endl;\n  // Determinante: -0.254525\n\n  mat D = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n  cout << D << endl;\n  //    1.0000   2.0000   3.0000\n  //    4.0000   5.0000   6.0000\n  //    7.0000   8.0000   9.0000\n  cout << \"Determinante: \" << det( D ) << endl;\n  // Determinante: 6.66134e-16\n\n  D.row( 0 ) = D.row( 1 ) + D.row( 2 );\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  //  4.0000    5.0000    6.0000\n  //  7.0000    8.0000    9.0000\n\n  D.row( 1 ) = D.row( 1 ) * 5;\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  // 20.0000   25.0000   30.0000\n  //  7.0000    8.0000    9.0000\n  //\n\n  D.row( 2 ).zeros();\n  cout << D << endl;\n  // 11.0000   13.0000   15.0000\n  // 20.0000   25.0000   30.0000\n  //       0         0         0\n\n  D.col( 2 ) = D.col( 2 ) + 10;\n  cout << D << endl;\n  // 11.0000   13.0000   25.0000\n  // 20.0000   25.0000   40.0000\n  //       0         0   10.0000\n\n  D = diagmat( D );\n  cout << D << endl;\n  // 11.0000         0         0\n  //       0   25.0000         0\n  //       0         0   10.0000\n\n  D.save( \"D.bin\" );\n\n  D.save( \"D.txt\", arma_ascii );\n  // ARMA_MAT_TXT_FN008\n  // 3 3\n  //    1.10000000000000e+01   0.00000000000000e+00   0.00000000000000e+00\n  //    0.00000000000000e+00   2.50000000000000e+01   0.00000000000000e+00\n  //    0.00000000000000e+00   0.00000000000000e+00   1.00000000000000e+01\n\n  auto O = ones( 2, 2 );\n  cout << O << endl;\n  // 1.0000   1.0000\n  // 1.0000   1.0000\n\n  auto Z = zeros( 3, 5 );\n  cout << Z << endl;\n  // 0        0        0        0        0\n  // 0        0        0        0        0\n  // 0        0        0        0        0\n\n  mat F1, F2;\n  F1.load( \"D.bin\" );\n  F2.load( \"D.txt\" );\n  cout << F1 << endl;\n  // 11.0000         0         0\n  //       0   25.0000         0\n  //       0         0   10.000\n\n  cout << F1 - F2 << endl;\n  // 0        0        0\n  // 0        0        0\n  // 0        0        0\n\n  mat F( 2, 3 );\n  F.fill( 3.14 );\n  cout << F << endl;\n  // 3.1400   3.1400   3.1400\n  // 3.1400   3.1400   3.1400\n\n  F = F.ones();\n  F.col( 0 ) *= datum::pi;\n  F.col( 1 ) *= datum::inf;\n  F.col( 2 ) *= datum::nan;\n  cout << F << endl;\n  // 3.1416      inf      nan\n  // 3.1416      inf      nan\n\n  return 0;\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://arma.sourceforge.net/","rel":["nofollow"]},"children":[{"type":"text","value":"Armadillo C++ library for linear algebra & scientific computing"}]}]}]},{"type":"element","tag":"style","children":[{"type":"text","value":".ct-751ee3{color:#F8F8F2}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"instalação-no-debian","depth":2,"text":"Instalação no Debian"},{"id":"instalação-no-macos","depth":2,"text":"Instalação no MacOS"},{"id":"exemplos-de-uso","depth":2,"text":"Exemplos de uso"},{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:cpp-armadillo.md","_source":"content","_file":"til/cpp-armadillo.md","_extension":"md"}