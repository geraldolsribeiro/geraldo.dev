{"_path":"/til/cpp-magic-enum","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Magic Enum C++","description":"Biblioteca C++17 header-only que provê reflexão estática de enums, trabalha com qualquer tipo de enum sem usar macros.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Biblioteca C++17 header-only que provê reflexão estática de enums, trabalha com qualquer tipo de enum sem usar macros."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_cast"}]},{"type":"text","value":" obtains enum value from string or integer."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_value"}]},{"type":"text","value":" returns enum value at specified index."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_values"}]},{"type":"text","value":" obtains enum value sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_count"}]},{"type":"text","value":" returns number of enum values."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_integer"}]},{"type":"text","value":" obtains integer value from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_name"}]},{"type":"text","value":" returns string name from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_names"}]},{"type":"text","value":" obtains string enum name sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_entries"}]},{"type":"text","value":" obtains pair (value enum, string enum name) sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_index"}]},{"type":"text","value":" obtains index in enum value sequence from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_contains"}]},{"type":"text","value":" checks whether enum contains enumerator with such value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_type_name"}]},{"type":"text","value":" returns string name of enum type."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"is_unscoped_enum"}]},{"type":"text","value":" checks whether type is an Unscoped enumeration."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"is_scoped_enum"}]},{"type":"text","value":" checks whether type is an Scoped enumeration."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"underlying_type"}]},{"type":"text","value":" improved UB-free \"SFINAE-friendly\" std::underlying_type."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ostream_operators"}]},{"type":"text","value":" ostream operators for enums."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"bitwise_operators"}]},{"type":"text","value":" bitwise operators for enums."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Inserir exemplos"}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/Neargye/magic_enum","rel":["nofollow"]},"children":[{"type":"text","value":"Magic Enum C++"}]}]}]}]},"date":"2020-06-27T00:00:00.000Z","draft":true,"tags":["C++","cpp"],"Thumbnail":"img/headers/debian.jpg","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Biblioteca C++17 header-only que provê reflexão estática de enums, trabalha com qualquer tipo de enum sem usar macros."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_cast"}]},{"type":"text","value":" obtains enum value from string or integer."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_value"}]},{"type":"text","value":" returns enum value at specified index."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_values"}]},{"type":"text","value":" obtains enum value sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_count"}]},{"type":"text","value":" returns number of enum values."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_integer"}]},{"type":"text","value":" obtains integer value from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_name"}]},{"type":"text","value":" returns string name from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_names"}]},{"type":"text","value":" obtains string enum name sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_entries"}]},{"type":"text","value":" obtains pair (value enum, string enum name) sequence."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_index"}]},{"type":"text","value":" obtains index in enum value sequence from enum value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_contains"}]},{"type":"text","value":" checks whether enum contains enumerator with such value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"enum_type_name"}]},{"type":"text","value":" returns string name of enum type."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"is_unscoped_enum"}]},{"type":"text","value":" checks whether type is an Unscoped enumeration."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"is_scoped_enum"}]},{"type":"text","value":" checks whether type is an Scoped enumeration."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"underlying_type"}]},{"type":"text","value":" improved UB-free \"SFINAE-friendly\" std::underlying_type."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ostream_operators"}]},{"type":"text","value":" ostream operators for enums."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"bitwise_operators"}]},{"type":"text","value":" bitwise operators for enums."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Inserir exemplos"}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/Neargye/magic_enum","rel":["nofollow"]},"children":[{"type":"text","value":"Magic Enum C++"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:cpp-magic-enum.md","_source":"content","_file":"til/cpp-magic-enum.md","_extension":"md"}