{"_path":"/til/vapid-key","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Criando VAPID key","description":"Como misturar de forma saudável diferentes distribuições do Debian. Instale exatamente a versão do aplicativo que você quer sem bagunçar o sistema todo.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"VAPID (Voluntary Application Server Identification)\né o novo meio de receber e enviar notificações push através da web."}]},{"type":"element","tag":"h2","props":{"id":"criação-usando-openssl"},"children":[{"type":"text","value":"Criação usando openssl"}]},{"type":"element","tag":"code","props":{"code":"mkdir -p certs\nopenssl ecparam -name prime256v1 -genkey -noout -out certs/vapid_private.pem\nopenssl ec -in certs/vapid_private.pem -pubout  -out certs/vapid_public.pem\nopenssl ec -in certs/vapid_private.pem -outform DER \\\n  | tail -c +8 | head -c 32 | base64 | tr -d '=' | tr '/+' '_-' \\\n  > certs/private_key.txt\nopenssl ec -in certs/vapid_private.pem -pubout -outform DER \\\n  | tail -c 65 | base64 | tr -d '=' | tr '/+' '_-' \\\n  > certs/public_key.txt\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"mkdir -p certs\nopenssl ecparam -name prime256v1 -genkey -noout -out certs/vapid_private.pem\nopenssl ec -in certs/vapid_private.pem -pubout  -out certs/vapid_public.pem\nopenssl ec -in certs/vapid_private.pem -outform DER \\\n  | tail -c +8 | head -c 32 | base64 | tr -d '=' | tr '/+' '_-' \\\n  > certs/private_key.txt\nopenssl ec -in certs/vapid_private.pem -pubout -outform DER \\\n  | tail -c 65 | base64 | tr -d '=' | tr '/+' '_-' \\\n  > certs/public_key.txt\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"criação-usando-web-push"},"children":[{"type":"text","value":"Criação usando web-push"}]},{"type":"element","tag":"code","props":{"code":"npm install -g web-push\nweb-push generate-vapid-keys\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm install -g web-push\nweb-push generate-vapid-keys\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"push-services"},"children":[{"type":"text","value":"Push services"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fcm.googleapi.com - firebase - Google"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"updates.push.service.mozilla.com - Firefox"}]}]},{"type":"element","tag":"h2","props":{"id":"envio-através-do-php-para-android"},"children":[{"type":"text","value":"Envio através do PHP para android"}]},{"type":"element","tag":"code","props":{"code":"<?php\n\n// API access key from Google API's Console\ndefine( 'API_ACCESS_KEY', 'YOUR-API-ACCESS-KEY-GOES-HERE' );\n\n\n$registrationIds = array( $_GET['id'] );\n\n// prep the bundle\n$msg = array\n(\n    'message'   => 'here is a message. message',\n    'title'     => 'This is a title. title',\n    'subtitle'  => 'This is a subtitle. subtitle',\n    'tickerText'    => 'Ticker text here...Ticker text here...Ticker text here',\n    'vibrate'   => 1,\n    'sound'     => 1,\n    'largeIcon' => 'large_icon',\n    'smallIcon' => 'small_icon'\n);\n\n$fields = array\n(\n    'registration_ids'  => $registrationIds,\n    'data'          => $msg\n);\n \n$headers = array\n(\n    'Authorization: key=' . API_ACCESS_KEY,\n    'Content-Type: application/json'\n);\n \n$ch = curl_init();\ncurl_setopt( $ch,CURLOPT_URL, 'https://android.googleapis.com/gcm/send' );\ncurl_setopt( $ch,CURLOPT_POST, true );\ncurl_setopt( $ch,CURLOPT_HTTPHEADER, $headers );\ncurl_setopt( $ch,CURLOPT_RETURNTRANSFER, true );\ncurl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false );\ncurl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) );\n$result = curl_exec($ch );\ncurl_close( $ch );\n\necho $result;\n","language":"php"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<?php\n\n// API access key from Google API's Console\ndefine( 'API_ACCESS_KEY', 'YOUR-API-ACCESS-KEY-GOES-HERE' );\n\n\n$registrationIds = array( $_GET['id'] );\n\n// prep the bundle\n$msg = array\n(\n    'message'   => 'here is a message. message',\n    'title'     => 'This is a title. title',\n    'subtitle'  => 'This is a subtitle. subtitle',\n    'tickerText'    => 'Ticker text here...Ticker text here...Ticker text here',\n    'vibrate'   => 1,\n    'sound'     => 1,\n    'largeIcon' => 'large_icon',\n    'smallIcon' => 'small_icon'\n);\n\n$fields = array\n(\n    'registration_ids'  => $registrationIds,\n    'data'          => $msg\n);\n \n$headers = array\n(\n    'Authorization: key=' . API_ACCESS_KEY,\n    'Content-Type: application/json'\n);\n \n$ch = curl_init();\ncurl_setopt( $ch,CURLOPT_URL, 'https://android.googleapis.com/gcm/send' );\ncurl_setopt( $ch,CURLOPT_POST, true );\ncurl_setopt( $ch,CURLOPT_HTTPHEADER, $headers );\ncurl_setopt( $ch,CURLOPT_RETURNTRANSFER, true );\ncurl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false );\ncurl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) );\n$result = curl_exec($ch );\ncurl_close( $ch );\n\necho $result;\n"}]}]}]},{"type":"element","tag":"code","props":{"code":"ensure connection is secured, so CURLOPT_SSL_VERIFYPEER should be set to true\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"ensure connection is secured, so CURLOPT_SSL_VERIFYPEER should be set to true\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"envio-via-php-para-ios"},"children":[{"type":"text","value":"Envio via PHP para IOS"}]},{"type":"element","tag":"code","props":{"code":"<?php\n\n    // Provide the Host Information.\n\n    $tHost = 'gateway.sandbox.push.apple.com';\n\n    $tPort = 2195;\n\n    // Provide the Certificate and Key Data.\n\n    $tCert = 'dev.pem';\n\n    // Provide the Private Key Passphrase (alternatively you can keep this secrete\n\n    // and enter the key manually on the terminal -> remove relevant line from code).\n\n    // Replace XXXXX with your Passphrase\n\n    $tPassphrase = 'xxxxxx';\n\n    // Provide the Device Identifier (Ensure that the Identifier does not have spaces in it).\n\n    // Replace this token with the token of the iOS device that is to receive the notification.\n\n    $tToken = 'ada56107075e4d00f9da001b0ad71200cb953b99266e506884f6eab06f13f666';\n\n    // The message that is to appear on the dialog.\n\n    $empresa = \"Petiskeira\";\n\n    $tAlert = $empresa . ' tem um recado para você!';\n\n    // The Badge Number for the Application Icon (integer >=0).\n\n    $tBadge = 1;\n\n    // Audible Notification Option.\n\n    $tSound = 'default';\n\n    // The content that is returned by the LiveCode \"pushNotificationReceived\" message.\n\n    $tPayload = '{\"endereco\":\"lauro oscar diefenthaeler\",\"tel\":\"51 3561-8797\",\"numero\":\"243\",\"complemento\":\"0\",\"id\":\"9\",\"nome\":\"petiskeira\",\"msg\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\"}';\n\n    // Create the message content that is to be sent to the device.\n\n    $tBody['aps'] = array (\n\n    'alert' => $tAlert,\n\n    'badge' => $tBadge,\n\n    'sound' => $tSound,\n\n    );\n\n    $tBody ['payload'] = $tPayload;\n\n    // Encode the body to JSON.\n\n    $tBody = json_encode ($tBody);\n\n    // Create the Socket Stream.\n\n    $tContext = stream_context_create ();\n\n    stream_context_set_option ($tContext, 'ssl', 'local_cert', $tCert);\n\n    // Remove this line if you would like to enter the Private Key Passphrase manually.\n\n    stream_context_set_option ($tContext, 'ssl', 'passphrase', $tPassphrase);\n\n    // Open the Connection to the APNS Server.\n\n    $tSocket = stream_socket_client ('ssl://'.$tHost.':'.$tPort, $error, $errstr, 30, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $tContext);\n\n    // Check if we were able to open a socket.\n\n    if (!$tSocket)\n\n    exit (\"APNS Connection Failed: $error $errstr\" . PHP_EOL);\n\n    // Build the Binary Notification.\n\n    $tMsg = chr (0) . chr (0) . chr (32) . pack ('H*', $tToken) . pack ('n', strlen ($tBody)) . $tBody;\n\n    // Send the Notification to the Server.\n\n    $tResult = fwrite ($tSocket, $tMsg, strlen ($tMsg));\n\n    if ($tResult){\n\n    echo 'Delivered Message to APNS' . PHP_EOL;\n\n    }else\n\n    echo 'Could not Deliver Message to APNS' . PHP_EOL;\n\n    // Close the Connection to the Server.\n\n    fclose ($tSocket);\n\n?>\n","language":"php"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<?php\n\n    // Provide the Host Information.\n\n    $tHost = 'gateway.sandbox.push.apple.com';\n\n    $tPort = 2195;\n\n    // Provide the Certificate and Key Data.\n\n    $tCert = 'dev.pem';\n\n    // Provide the Private Key Passphrase (alternatively you can keep this secrete\n\n    // and enter the key manually on the terminal -> remove relevant line from code).\n\n    // Replace XXXXX with your Passphrase\n\n    $tPassphrase = 'xxxxxx';\n\n    // Provide the Device Identifier (Ensure that the Identifier does not have spaces in it).\n\n    // Replace this token with the token of the iOS device that is to receive the notification.\n\n    $tToken = 'ada56107075e4d00f9da001b0ad71200cb953b99266e506884f6eab06f13f666';\n\n    // The message that is to appear on the dialog.\n\n    $empresa = \"Petiskeira\";\n\n    $tAlert = $empresa . ' tem um recado para você!';\n\n    // The Badge Number for the Application Icon (integer >=0).\n\n    $tBadge = 1;\n\n    // Audible Notification Option.\n\n    $tSound = 'default';\n\n    // The content that is returned by the LiveCode \"pushNotificationReceived\" message.\n\n    $tPayload = '{\"endereco\":\"lauro oscar diefenthaeler\",\"tel\":\"51 3561-8797\",\"numero\":\"243\",\"complemento\":\"0\",\"id\":\"9\",\"nome\":\"petiskeira\",\"msg\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\"}';\n\n    // Create the message content that is to be sent to the device.\n\n    $tBody['aps'] = array (\n\n    'alert' => $tAlert,\n\n    'badge' => $tBadge,\n\n    'sound' => $tSound,\n\n    );\n\n    $tBody ['payload'] = $tPayload;\n\n    // Encode the body to JSON.\n\n    $tBody = json_encode ($tBody);\n\n    // Create the Socket Stream.\n\n    $tContext = stream_context_create ();\n\n    stream_context_set_option ($tContext, 'ssl', 'local_cert', $tCert);\n\n    // Remove this line if you would like to enter the Private Key Passphrase manually.\n\n    stream_context_set_option ($tContext, 'ssl', 'passphrase', $tPassphrase);\n\n    // Open the Connection to the APNS Server.\n\n    $tSocket = stream_socket_client ('ssl://'.$tHost.':'.$tPort, $error, $errstr, 30, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $tContext);\n\n    // Check if we were able to open a socket.\n\n    if (!$tSocket)\n\n    exit (\"APNS Connection Failed: $error $errstr\" . PHP_EOL);\n\n    // Build the Binary Notification.\n\n    $tMsg = chr (0) . chr (0) . chr (32) . pack ('H*', $tToken) . pack ('n', strlen ($tBody)) . $tBody;\n\n    // Send the Notification to the Server.\n\n    $tResult = fwrite ($tSocket, $tMsg, strlen ($tMsg));\n\n    if ($tResult){\n\n    echo 'Delivered Message to APNS' . PHP_EOL;\n\n    }else\n\n    echo 'Could not Deliver Message to APNS' . PHP_EOL;\n\n    // Close the Connection to the Server.\n\n    fclose ($tSocket);\n\n?>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/rtancman/flask-pywebpush/blob/master/Makefile","rel":["nofollow"]},"children":[{"type":"text","value":"Makefile do flask-pywebpush"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.rtancman.com.br/python/criando-sistema-de-notificacoes-com-pywebpush.html","rel":["nofollow"]},"children":[{"type":"text","value":"Criando um sistema de notificações com pywebpush"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://medium.com/izettle-engineering/beginners-guide-to-web-push-notifications-using-service-workers-cb3474a17679","rel":["nofollow"]},"children":[{"type":"text","value":"Beginners guide to Web Push Notifications using Service Workers"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://gist.github.com/prime31/5675017","rel":["nofollow"]},"children":[{"type":"text","value":"gits: envio de webpush usando PHP"}]},{"type":"text","value":" Aqui tem muitos comentários importantes"}]}]}]},"date":"2020-03-21T00:00:00.000Z","draft":true,"tags":["web"],"Thumbnail":"img/headers/web.jpg","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"VAPID (Voluntary Application Server Identification)\né o novo meio de receber e enviar notificações push através da web."}]},{"type":"element","tag":"h2","props":{"id":"criação-usando-openssl"},"children":[{"type":"text","value":"Criação usando openssl"}]},{"type":"element","tag":"code","props":{"code":"mkdir -p certs\nopenssl ecparam -name prime256v1 -genkey -noout -out certs/vapid_private.pem\nopenssl ec -in certs/vapid_private.pem -pubout  -out certs/vapid_public.pem\nopenssl ec -in certs/vapid_private.pem -outform DER \\\n  | tail -c +8 | head -c 32 | base64 | tr -d '=' | tr '/+' '_-' \\\n  > certs/private_key.txt\nopenssl ec -in certs/vapid_private.pem -pubout -outform DER \\\n  | tail -c 65 | base64 | tr -d '=' | tr '/+' '_-' \\\n  > certs/public_key.txt\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"mkdir -p certs"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"openssl ecparam -name prime256v1 -genkey -noout -out certs/vapid_private.pem"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"openssl ec -in certs/vapid_private.pem -pubout  -out certs/vapid_public.pem"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"openssl ec -in certs/vapid_private.pem -outform DER \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-eb5025"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" tail -c +8 "}]},{"type":"element","tag":"span","props":{"class":"ct-eb5025"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" head -c 32 "}]},{"type":"element","tag":"span","props":{"class":"ct-eb5025"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" base64 "}]},{"type":"element","tag":"span","props":{"class":"ct-eb5025"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" tr -d "}]},{"type":"element","tag":"span","props":{"class":"ct-ee66cb"},"children":[{"type":"text","value":"'='"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-eb5025"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" tr "}]},{"type":"element","tag":"span","props":{"class":"ct-ee66cb"},"children":[{"type":"text","value":"'/+'"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-ee66cb"},"children":[{"type":"text","value":"'_-'"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-eb5025"},"children":[{"type":"text","value":">"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" certs/private_key.txt"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"openssl ec -in certs/vapid_private.pem -pubout -outform DER \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-eb5025"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" tail -c 65 "}]},{"type":"element","tag":"span","props":{"class":"ct-eb5025"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" base64 "}]},{"type":"element","tag":"span","props":{"class":"ct-eb5025"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" tr -d "}]},{"type":"element","tag":"span","props":{"class":"ct-ee66cb"},"children":[{"type":"text","value":"'='"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-eb5025"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" tr "}]},{"type":"element","tag":"span","props":{"class":"ct-ee66cb"},"children":[{"type":"text","value":"'/+'"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-ee66cb"},"children":[{"type":"text","value":"'_-'"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-eb5025"},"children":[{"type":"text","value":">"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" certs/public_key.txt"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"criação-usando-web-push"},"children":[{"type":"text","value":"Criação usando web-push"}]},{"type":"element","tag":"code","props":{"code":"npm install -g web-push\nweb-push generate-vapid-keys\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"npm install -g web-push"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"web-push generate-vapid-keys"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"push-services"},"children":[{"type":"text","value":"Push services"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"fcm.googleapi.com - firebase - Google"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"updates.push.service.mozilla.com - Firefox"}]}]},{"type":"element","tag":"h2","props":{"id":"envio-através-do-php-para-android"},"children":[{"type":"text","value":"Envio através do PHP para android"}]},{"type":"element","tag":"code","props":{"code":"<?php\n\n// API access key from Google API's Console\ndefine( 'API_ACCESS_KEY', 'YOUR-API-ACCESS-KEY-GOES-HERE' );\n\n\n$registrationIds = array( $_GET['id'] );\n\n// prep the bundle\n$msg = array\n(\n    'message'   => 'here is a message. message',\n    'title'     => 'This is a title. title',\n    'subtitle'  => 'This is a subtitle. subtitle',\n    'tickerText'    => 'Ticker text here...Ticker text here...Ticker text here',\n    'vibrate'   => 1,\n    'sound'     => 1,\n    'largeIcon' => 'large_icon',\n    'smallIcon' => 'small_icon'\n);\n\n$fields = array\n(\n    'registration_ids'  => $registrationIds,\n    'data'          => $msg\n);\n \n$headers = array\n(\n    'Authorization: key=' . API_ACCESS_KEY,\n    'Content-Type: application/json'\n);\n \n$ch = curl_init();\ncurl_setopt( $ch,CURLOPT_URL, 'https://android.googleapis.com/gcm/send' );\ncurl_setopt( $ch,CURLOPT_POST, true );\ncurl_setopt( $ch,CURLOPT_HTTPHEADER, $headers );\ncurl_setopt( $ch,CURLOPT_RETURNTRANSFER, true );\ncurl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false );\ncurl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) );\n$result = curl_exec($ch );\ncurl_close( $ch );\n\necho $result;\n","language":"php"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"<?php\n\n// API access key from Google API's Console\ndefine( 'API_ACCESS_KEY', 'YOUR-API-ACCESS-KEY-GOES-HERE' );\n\n\n$registrationIds = array( $_GET['id'] );\n\n// prep the bundle\n$msg = array\n(\n    'message'   => 'here is a message. message',\n    'title'     => 'This is a title. title',\n    'subtitle'  => 'This is a subtitle. subtitle',\n    'tickerText'    => 'Ticker text here...Ticker text here...Ticker text here',\n    'vibrate'   => 1,\n    'sound'     => 1,\n    'largeIcon' => 'large_icon',\n    'smallIcon' => 'small_icon'\n);\n\n$fields = array\n(\n    'registration_ids'  => $registrationIds,\n    'data'          => $msg\n);\n \n$headers = array\n(\n    'Authorization: key=' . API_ACCESS_KEY,\n    'Content-Type: application/json'\n);\n \n$ch = curl_init();\ncurl_setopt( $ch,CURLOPT_URL, 'https://android.googleapis.com/gcm/send' );\ncurl_setopt( $ch,CURLOPT_POST, true );\ncurl_setopt( $ch,CURLOPT_HTTPHEADER, $headers );\ncurl_setopt( $ch,CURLOPT_RETURNTRANSFER, true );\ncurl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false );\ncurl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) );\n$result = curl_exec($ch );\ncurl_close( $ch );\n\necho $result;"}]}]}]}]}]},{"type":"element","tag":"code","props":{"code":"ensure connection is secured, so CURLOPT_SSL_VERIFYPEER should be set to true\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":"ensure connection is secured, so CURLOPT_SSL_VERIFYPEER should be "}]},{"type":"element","tag":"span","props":{"class":"ct-5d2a48"},"children":[{"type":"text","value":"set"}]},{"type":"element","tag":"span","props":{"class":"ct-defb14"},"children":[{"type":"text","value":" to "}]},{"type":"element","tag":"span","props":{"class":"ct-5d2a48"},"children":[{"type":"text","value":"true"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"envio-via-php-para-ios"},"children":[{"type":"text","value":"Envio via PHP para IOS"}]},{"type":"element","tag":"code","props":{"code":"<?php\n\n    // Provide the Host Information.\n\n    $tHost = 'gateway.sandbox.push.apple.com';\n\n    $tPort = 2195;\n\n    // Provide the Certificate and Key Data.\n\n    $tCert = 'dev.pem';\n\n    // Provide the Private Key Passphrase (alternatively you can keep this secrete\n\n    // and enter the key manually on the terminal -> remove relevant line from code).\n\n    // Replace XXXXX with your Passphrase\n\n    $tPassphrase = 'xxxxxx';\n\n    // Provide the Device Identifier (Ensure that the Identifier does not have spaces in it).\n\n    // Replace this token with the token of the iOS device that is to receive the notification.\n\n    $tToken = 'ada56107075e4d00f9da001b0ad71200cb953b99266e506884f6eab06f13f666';\n\n    // The message that is to appear on the dialog.\n\n    $empresa = \"Petiskeira\";\n\n    $tAlert = $empresa . ' tem um recado para você!';\n\n    // The Badge Number for the Application Icon (integer >=0).\n\n    $tBadge = 1;\n\n    // Audible Notification Option.\n\n    $tSound = 'default';\n\n    // The content that is returned by the LiveCode \"pushNotificationReceived\" message.\n\n    $tPayload = '{\"endereco\":\"lauro oscar diefenthaeler\",\"tel\":\"51 3561-8797\",\"numero\":\"243\",\"complemento\":\"0\",\"id\":\"9\",\"nome\":\"petiskeira\",\"msg\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\"}';\n\n    // Create the message content that is to be sent to the device.\n\n    $tBody['aps'] = array (\n\n    'alert' => $tAlert,\n\n    'badge' => $tBadge,\n\n    'sound' => $tSound,\n\n    );\n\n    $tBody ['payload'] = $tPayload;\n\n    // Encode the body to JSON.\n\n    $tBody = json_encode ($tBody);\n\n    // Create the Socket Stream.\n\n    $tContext = stream_context_create ();\n\n    stream_context_set_option ($tContext, 'ssl', 'local_cert', $tCert);\n\n    // Remove this line if you would like to enter the Private Key Passphrase manually.\n\n    stream_context_set_option ($tContext, 'ssl', 'passphrase', $tPassphrase);\n\n    // Open the Connection to the APNS Server.\n\n    $tSocket = stream_socket_client ('ssl://'.$tHost.':'.$tPort, $error, $errstr, 30, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $tContext);\n\n    // Check if we were able to open a socket.\n\n    if (!$tSocket)\n\n    exit (\"APNS Connection Failed: $error $errstr\" . PHP_EOL);\n\n    // Build the Binary Notification.\n\n    $tMsg = chr (0) . chr (0) . chr (32) . pack ('H*', $tToken) . pack ('n', strlen ($tBody)) . $tBody;\n\n    // Send the Notification to the Server.\n\n    $tResult = fwrite ($tSocket, $tMsg, strlen ($tMsg));\n\n    if ($tResult){\n\n    echo 'Delivered Message to APNS' . PHP_EOL;\n\n    }else\n\n    echo 'Could not Deliver Message to APNS' . PHP_EOL;\n\n    // Close the Connection to the Server.\n\n    fclose ($tSocket);\n\n?>\n","language":"php"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"<?php\n\n    // Provide the Host Information.\n\n    $tHost = 'gateway.sandbox.push.apple.com';\n\n    $tPort = 2195;\n\n    // Provide the Certificate and Key Data.\n\n    $tCert = 'dev.pem';\n\n    // Provide the Private Key Passphrase (alternatively you can keep this secrete\n\n    // and enter the key manually on the terminal -> remove relevant line from code).\n\n    // Replace XXXXX with your Passphrase\n\n    $tPassphrase = 'xxxxxx';\n\n    // Provide the Device Identifier (Ensure that the Identifier does not have spaces in it).\n\n    // Replace this token with the token of the iOS device that is to receive the notification.\n\n    $tToken = 'ada56107075e4d00f9da001b0ad71200cb953b99266e506884f6eab06f13f666';\n\n    // The message that is to appear on the dialog.\n\n    $empresa = \"Petiskeira\";\n\n    $tAlert = $empresa . ' tem um recado para você!';\n\n    // The Badge Number for the Application Icon (integer >=0).\n\n    $tBadge = 1;\n\n    // Audible Notification Option.\n\n    $tSound = 'default';\n\n    // The content that is returned by the LiveCode \"pushNotificationReceived\" message.\n\n    $tPayload = '{\"endereco\":\"lauro oscar diefenthaeler\",\"tel\":\"51 3561-8797\",\"numero\":\"243\",\"complemento\":\"0\",\"id\":\"9\",\"nome\":\"petiskeira\",\"msg\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\"}';\n\n    // Create the message content that is to be sent to the device.\n\n    $tBody['aps'] = array (\n\n    'alert' => $tAlert,\n\n    'badge' => $tBadge,\n\n    'sound' => $tSound,\n\n    );\n\n    $tBody ['payload'] = $tPayload;\n\n    // Encode the body to JSON.\n\n    $tBody = json_encode ($tBody);\n\n    // Create the Socket Stream.\n\n    $tContext = stream_context_create ();\n\n    stream_context_set_option ($tContext, 'ssl', 'local_cert', $tCert);\n\n    // Remove this line if you would like to enter the Private Key Passphrase manually.\n\n    stream_context_set_option ($tContext, 'ssl', 'passphrase', $tPassphrase);\n\n    // Open the Connection to the APNS Server.\n\n    $tSocket = stream_socket_client ('ssl://'.$tHost.':'.$tPort, $error, $errstr, 30, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $tContext);\n\n    // Check if we were able to open a socket.\n\n    if (!$tSocket)\n\n    exit (\"APNS Connection Failed: $error $errstr\" . PHP_EOL);\n\n    // Build the Binary Notification.\n\n    $tMsg = chr (0) . chr (0) . chr (32) . pack ('H*', $tToken) . pack ('n', strlen ($tBody)) . $tBody;\n\n    // Send the Notification to the Server.\n\n    $tResult = fwrite ($tSocket, $tMsg, strlen ($tMsg));\n\n    if ($tResult){\n\n    echo 'Delivered Message to APNS' . PHP_EOL;\n\n    }else\n\n    echo 'Could not Deliver Message to APNS' . PHP_EOL;\n\n    // Close the Connection to the Server.\n\n    fclose ($tSocket);\n\n?>"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/rtancman/flask-pywebpush/blob/master/Makefile","rel":["nofollow"]},"children":[{"type":"text","value":"Makefile do flask-pywebpush"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.rtancman.com.br/python/criando-sistema-de-notificacoes-com-pywebpush.html","rel":["nofollow"]},"children":[{"type":"text","value":"Criando um sistema de notificações com pywebpush"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://medium.com/izettle-engineering/beginners-guide-to-web-push-notifications-using-service-workers-cb3474a17679","rel":["nofollow"]},"children":[{"type":"text","value":"Beginners guide to Web Push Notifications using Service Workers"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://gist.github.com/prime31/5675017","rel":["nofollow"]},"children":[{"type":"text","value":"gits: envio de webpush usando PHP"}]},{"type":"text","value":" Aqui tem muitos comentários importantes"}]}]},{"type":"element","tag":"style","children":[{"type":"text","value":".ct-5d2a48{color:#66D9EF}.ct-ee66cb{color:#E6DB74}.ct-eb5025{color:#F92672}.ct-defb14{color:#F8F8F2}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"criação-usando-openssl","depth":2,"text":"Criação usando openssl"},{"id":"criação-usando-web-push","depth":2,"text":"Criação usando web-push"},{"id":"push-services","depth":2,"text":"Push services"},{"id":"envio-através-do-php-para-android","depth":2,"text":"Envio através do PHP para android"},{"id":"envio-via-php-para-ios","depth":2,"text":"Envio via PHP para IOS"},{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:vapid-key.md","_source":"content","_file":"til/vapid-key.md","_extension":"md"}