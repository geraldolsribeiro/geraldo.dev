{"_path":"/til/cpp-constexpr","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"C++ - otimização com constexpr","description":"Otimização com constexpr.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A linguagem C++ possui o conceito de expressões constantes (p.e. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"1+2"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"3*4"}]},{"type":"text","value":")\nque SEMPRE produzem o mesmo resultado sem nenhum efeito colateral. Se\no compilador puder diretamente otimizar e embutir esta expressões no programa\nem tempo de compilação teremos um ganho de performance."}]},{"type":"element","tag":"code","props":{"code":"#include <iostream>\n#define LEN 10\nint len_foo() {\n    int i = 2;\n    return i;\n}\nconstexpr int len_foo_constexpr() {\n    return 5;\n}\n\n// Pode ser usado em recursão\nconstexpr int fibonacci(const int n) {\n    return n == 1 || n == 2 ? 1 : fibonacci(n-1) + fibonacci(n-2);\n}\n\nint main() {\n    char arr_1[10];                      // legal\n    char arr_2[LEN];                     // legal\n    int len = 10;\n    // char arr_3[len];                  // ilegal\n    const int len_2 = len + 1;\n    constexpr int len_2_constexpr = 1 + 2 + 3;\n    // char arr_4[len_2];                // ilegal, mas aceito por vários compiladores\n    // len_2 apesar de constante não é formado somente por constantes\n    char arr_4[len_2_constexpr];         // legal\n    // char arr_5[len_foo()+5];          // ilegal\n    char arr_6[len_foo_constexpr() + 1]; // legal\n    // 1, 1, 2, 3, 5, 8, 13, 21, 34, 55\n    std::cout << fibonacci(10) << std::endl;\n    return 0;\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#include <iostream>\n#define LEN 10\nint len_foo() {\n    int i = 2;\n    return i;\n}\nconstexpr int len_foo_constexpr() {\n    return 5;\n}\n\n// Pode ser usado em recursão\nconstexpr int fibonacci(const int n) {\n    return n == 1 || n == 2 ? 1 : fibonacci(n-1) + fibonacci(n-2);\n}\n\nint main() {\n    char arr_1[10];                      // legal\n    char arr_2[LEN];                     // legal\n    int len = 10;\n    // char arr_3[len];                  // ilegal\n    const int len_2 = len + 1;\n    constexpr int len_2_constexpr = 1 + 2 + 3;\n    // char arr_4[len_2];                // ilegal, mas aceito por vários compiladores\n    // len_2 apesar de constante não é formado somente por constantes\n    char arr_4[len_2_constexpr];         // legal\n    // char arr_5[len_foo()+5];          // ilegal\n    char arr_6[len_foo_constexpr() + 1]; // legal\n    // 1, 1, 2, 3, 5, 8, 13, 21, 34, 55\n    std::cout << fibonacci(10) << std::endl;\n    return 0;\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://itbook.xuxinkai.cn/read/modern-cpp-tutorial-en/02-usability.md","rel":["nofollow"]},"children":[{"type":"text","value":"Chapter 02: Language Usability Enhancements"}]}]}]}]},"date":"2020-05-04T00:00:00.000Z","draft":true,"tags":["C++","cpp","constexpr"],"Thumbnail":"img/headers/cpp.png","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A linguagem C++ possui o conceito de expressões constantes (p.e. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"1+2"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"3*4"}]},{"type":"text","value":")\nque SEMPRE produzem o mesmo resultado sem nenhum efeito colateral. Se\no compilador puder diretamente otimizar e embutir esta expressões no programa\nem tempo de compilação teremos um ganho de performance."}]},{"type":"element","tag":"code","props":{"code":"#include <iostream>\n#define LEN 10\nint len_foo() {\n    int i = 2;\n    return i;\n}\nconstexpr int len_foo_constexpr() {\n    return 5;\n}\n\n// Pode ser usado em recursão\nconstexpr int fibonacci(const int n) {\n    return n == 1 || n == 2 ? 1 : fibonacci(n-1) + fibonacci(n-2);\n}\n\nint main() {\n    char arr_1[10];                      // legal\n    char arr_2[LEN];                     // legal\n    int len = 10;\n    // char arr_3[len];                  // ilegal\n    const int len_2 = len + 1;\n    constexpr int len_2_constexpr = 1 + 2 + 3;\n    // char arr_4[len_2];                // ilegal, mas aceito por vários compiladores\n    // len_2 apesar de constante não é formado somente por constantes\n    char arr_4[len_2_constexpr];         // legal\n    // char arr_5[len_foo()+5];          // ilegal\n    char arr_6[len_foo_constexpr() + 1]; // legal\n    // 1, 1, 2, 3, 5, 8, 13, 21, 34, 55\n    std::cout << fibonacci(10) << std::endl;\n    return 0;\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"#include <iostream>\n#define LEN 10\nint len_foo() {\n    int i = 2;\n    return i;\n}\nconstexpr int len_foo_constexpr() {\n    return 5;\n}\n\n// Pode ser usado em recursão\nconstexpr int fibonacci(const int n) {\n    return n == 1 || n == 2 ? 1 : fibonacci(n-1) + fibonacci(n-2);\n}\n\nint main() {\n    char arr_1[10];                      // legal\n    char arr_2[LEN];                     // legal\n    int len = 10;\n    // char arr_3[len];                  // ilegal\n    const int len_2 = len + 1;\n    constexpr int len_2_constexpr = 1 + 2 + 3;\n    // char arr_4[len_2];                // ilegal, mas aceito por vários compiladores\n    // len_2 apesar de constante não é formado somente por constantes\n    char arr_4[len_2_constexpr];         // legal\n    // char arr_5[len_foo()+5];          // ilegal\n    char arr_6[len_foo_constexpr() + 1]; // legal\n    // 1, 1, 2, 3, 5, 8, 13, 21, 34, 55\n    std::cout << fibonacci(10) << std::endl;\n    return 0;\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://itbook.xuxinkai.cn/read/modern-cpp-tutorial-en/02-usability.md","rel":["nofollow"]},"children":[{"type":"text","value":"Chapter 02: Language Usability Enhancements"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:cpp-constexpr.md","_source":"content","_file":"til/cpp-constexpr.md","_extension":"md"}