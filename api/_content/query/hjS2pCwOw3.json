[{"_path":"/til/cpp-const-cast","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"C++ - const_cast","description":"Usando o operador `const_cast`","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"O operador"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const_cast"}]},{"type":"text","value":" é utilizado para:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"adicionar um modificador "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" a um tipo"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"remover um modificador "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" de um tipo"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"adicionar um modificador "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"volatile"}]},{"type":"text","value":" a um tipo"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"remover um modificador "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"volatile"}]},{"type":"text","value":" de um tipo"}]}]},{"type":"element","tag":"code","props":{"code":"#include <iostream>\nusing namespace std;\n\nvoid f(int* p) {\n  cout << *p << endl;\n}\n\nint main(void) {\n  const int a = 10;\n  const int* b = &a;\n\n  // A função f() espera receber um int* e não um const int*\n  // f(b);\n\n  int* c = const_cast<int*>(b);\n  f(c);\n\n  // Lvalue é const\n  //  *b = 20;\n\n  // Comportamento indefinido\n  //  *c = 30;\n\n  int a1 = 40;\n  const int* b1 = &a1;\n  int* c1 = const_cast<int*>(b1);\n\n  // o inteiro a1 referenciado por c1 não foi declarado como const\n  *c1 = 50;\n\n  return 0;\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#include <iostream>\nusing namespace std;\n\nvoid f(int* p) {\n  cout << *p << endl;\n}\n\nint main(void) {\n  const int a = 10;\n  const int* b = &a;\n\n  // A função f() espera receber um int* e não um const int*\n  // f(b);\n\n  int* c = const_cast<int*>(b);\n  f(c);\n\n  // Lvalue é const\n  //  *b = 20;\n\n  // Comportamento indefinido\n  //  *c = 30;\n\n  int a1 = 40;\n  const int* b1 = &a1;\n  int* c1 = const_cast<int*>(b1);\n\n  // o inteiro a1 referenciado por c1 não foi declarado como const\n  *c1 = 50;\n\n  return 0;\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"[const_cast operator syntax("},{"type":"element","tag":"a","props":{"href":"https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.cbclx01/keyword_const_cast.htm","rel":["nofollow"]},"children":[{"type":"text","value":"https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.cbclx01/keyword_const_cast.htm"}]},{"type":"text","value":")"}]}]}]},"date":"2020-01-10T00:00:00.000Z","draft":false,"tags":["C++","cpp","const_cast"],"Thumbnail":"img/headers/cpp.png","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"O operador"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const_cast"}]},{"type":"text","value":" é utilizado para:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"adicionar um modificador "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" a um tipo"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"remover um modificador "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" de um tipo"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"adicionar um modificador "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"volatile"}]},{"type":"text","value":" a um tipo"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"remover um modificador "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"volatile"}]},{"type":"text","value":" de um tipo"}]}]},{"type":"element","tag":"code","props":{"code":"#include <iostream>\nusing namespace std;\n\nvoid f(int* p) {\n  cout << *p << endl;\n}\n\nint main(void) {\n  const int a = 10;\n  const int* b = &a;\n\n  // A função f() espera receber um int* e não um const int*\n  // f(b);\n\n  int* c = const_cast<int*>(b);\n  f(c);\n\n  // Lvalue é const\n  //  *b = 20;\n\n  // Comportamento indefinido\n  //  *c = 30;\n\n  int a1 = 40;\n  const int* b1 = &a1;\n  int* c1 = const_cast<int*>(b1);\n\n  // o inteiro a1 referenciado por c1 não foi declarado como const\n  *c1 = 50;\n\n  return 0;\n}\n","language":"c++"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"#include <iostream>\nusing namespace std;\n\nvoid f(int* p) {\n  cout << *p << endl;\n}\n\nint main(void) {\n  const int a = 10;\n  const int* b = &a;\n\n  // A função f() espera receber um int* e não um const int*\n  // f(b);\n\n  int* c = const_cast<int*>(b);\n  f(c);\n\n  // Lvalue é const\n  //  *b = 20;\n\n  // Comportamento indefinido\n  //  *c = 30;\n\n  int a1 = 40;\n  const int* b1 = &a1;\n  int* c1 = const_cast<int*>(b1);\n\n  // o inteiro a1 referenciado por c1 não foi declarado como const\n  *c1 = 50;\n\n  return 0;\n}"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"referências"},"children":[{"type":"text","value":"Referências"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"[const_cast operator syntax("},{"type":"element","tag":"a","props":{"href":"https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.cbclx01/keyword_const_cast.htm","rel":["nofollow"]},"children":[{"type":"text","value":"https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.cbclx01/keyword_const_cast.htm"}]},{"type":"text","value":")"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"referências","depth":2,"text":"Referências"}]}},"_type":"markdown","_id":"content:til:cpp-const-cast.md","_source":"content","_file":"til/cpp-const-cast.md","_extension":"md"}]