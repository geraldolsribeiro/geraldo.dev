{"_path":"/til/vim-rails","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Vim com rails","description":"https://github.com/tpope/vim-rails","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/tpope/vim-rails","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/tpope/vim-rails"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gf"}]},{"type":"text","value":" considers context and knows about partials, fixtures, and much more.  There are two commands,"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":A"}]},{"type":"text","value":" (alternate) and"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":R"}]},{"type":"text","value":" (related) for easy jumping between files, including favorites like model to schema, template to\nhelper, and controller to functional test.  Commands like"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Emodel"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Eview"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Econtroller"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"are provided to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":edit"}]},{"type":"text","value":" files by type, along with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"S"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"V"}]},{"type":"text","value":", and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"T"}]},{"type":"text","value":" variants for "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":split"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":vsplit"}]},{"type":"text","value":", and\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":tabedit"}]},{"type":"text","value":".  Throw a bang on the end ("},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Emodel foo!"}]},{"type":"text","value":") to automatically\ncreate the file with the standard boilerplate if it doesn't exist.\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-navigation"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Enhanced syntax highlighting.  From "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"has_and_belongs_to_many"}]},{"type":"text","value":" to\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"distance_of_time_in_words"}]},{"type":"text","value":", it's here."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Interface to rake.  Use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rake"}]},{"type":"text","value":" to run the current test, spec, or\nfeature.  Use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":.Rake"}]},{"type":"text","value":" to do a focused run of just the method,\nexample, or scenario on the current line.  "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rake"}]},{"type":"text","value":" can also run\narbitrary migrations, load individual fixtures, and more.\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-rake"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Interface to the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rails"}]},{"type":"text","value":" command.  Generally, use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rails console"}]},{"type":"text","value":" to\ncall "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rails console"}]},{"type":"text","value":".  Many commands have wrappers with additional features:\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rgenerate controller Blog"}]},{"type":"text","value":" generates a blog controller and loads the\ngenerated files into the quickfix list, and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rrunner"}]},{"type":"text","value":" wraps "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rails runner"}]},{"type":"text","value":"\nand doubles as a direct test runner.  "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-scripts"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Partial and concern extraction.  In a view, "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rextract {file}"}]},{"type":"text","value":"\nreplaces the desired range (typically selected in visual line mode)\nwith "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"render '{file}'"}]},{"type":"text","value":", which is automatically created with your\ncontent.  In a model or controller, a concern is created, with the\nappropriate "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"include"}]},{"type":"text","value":" declaration left behind.\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-:Rextract"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Fully customizable. Define \"projections\" at the global, app, or gem\nlevel to define navigation commands and override the alternate file,\ndefault rake task, syntax highlighting, abbreviations, and more.\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-projections"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Integration with other plugins.  If\n"},{"type":"element","tag":"a","props":{"href":"http://www.vim.org/scripts/script.php?script_id=356","rel":["nofollow"]},"children":[{"type":"text","value":"dbext.vim"}]},{"type":"text","value":" is\ninstalled, it will be transparently configured to reflect\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"database.yml"}]},{"type":"text","value":".  Users of\n"},{"type":"element","tag":"a","props":{"href":"https://github.com/tpope/vim-abolish","rel":["nofollow"]},"children":[{"type":"text","value":"abolish.vim"}]},{"type":"text","value":" get pluralize and\ntableize coercions, and users of\n"},{"type":"element","tag":"a","props":{"href":"https://github.com/tpope/vim-bundler","rel":["nofollow"]},"children":[{"type":"text","value":"bundler.vim"}]},{"type":"text","value":" get a smattering of\nfeatures.  "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-integration"}]}]}]}]},"scientia":"bb2b4ed2-0d1f-4cd0-930f-39da2ebd0aca","date":"2018-11-19T00:00:00.000Z","draft":false,"Thumbnail":"/img/headers/vim.jpg","tags":["vim"],"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/tpope/vim-rails","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/tpope/vim-rails"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gf"}]},{"type":"text","value":" considers context and knows about partials, fixtures, and much more.  There are two commands,"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":A"}]},{"type":"text","value":" (alternate) and"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":R"}]},{"type":"text","value":" (related) for easy jumping between files, including favorites like model to schema, template to\nhelper, and controller to functional test.  Commands like"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Emodel"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Eview"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Econtroller"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"are provided to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":edit"}]},{"type":"text","value":" files by type, along with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"S"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"V"}]},{"type":"text","value":", and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"T"}]},{"type":"text","value":" variants for "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":split"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":vsplit"}]},{"type":"text","value":", and\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":tabedit"}]},{"type":"text","value":".  Throw a bang on the end ("},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Emodel foo!"}]},{"type":"text","value":") to automatically\ncreate the file with the standard boilerplate if it doesn't exist.\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-navigation"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Enhanced syntax highlighting.  From "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"has_and_belongs_to_many"}]},{"type":"text","value":" to\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"distance_of_time_in_words"}]},{"type":"text","value":", it's here."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Interface to rake.  Use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rake"}]},{"type":"text","value":" to run the current test, spec, or\nfeature.  Use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":.Rake"}]},{"type":"text","value":" to do a focused run of just the method,\nexample, or scenario on the current line.  "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rake"}]},{"type":"text","value":" can also run\narbitrary migrations, load individual fixtures, and more.\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-rake"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Interface to the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rails"}]},{"type":"text","value":" command.  Generally, use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rails console"}]},{"type":"text","value":" to\ncall "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rails console"}]},{"type":"text","value":".  Many commands have wrappers with additional features:\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rgenerate controller Blog"}]},{"type":"text","value":" generates a blog controller and loads the\ngenerated files into the quickfix list, and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rrunner"}]},{"type":"text","value":" wraps "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rails runner"}]},{"type":"text","value":"\nand doubles as a direct test runner.  "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-scripts"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Partial and concern extraction.  In a view, "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":Rextract {file}"}]},{"type":"text","value":"\nreplaces the desired range (typically selected in visual line mode)\nwith "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"render '{file}'"}]},{"type":"text","value":", which is automatically created with your\ncontent.  In a model or controller, a concern is created, with the\nappropriate "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"include"}]},{"type":"text","value":" declaration left behind.\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-:Rextract"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Fully customizable. Define \"projections\" at the global, app, or gem\nlevel to define navigation commands and override the alternate file,\ndefault rake task, syntax highlighting, abbreviations, and more.\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-projections"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Integration with other plugins.  If\n"},{"type":"element","tag":"a","props":{"href":"http://www.vim.org/scripts/script.php?script_id=356","rel":["nofollow"]},"children":[{"type":"text","value":"dbext.vim"}]},{"type":"text","value":" is\ninstalled, it will be transparently configured to reflect\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"database.yml"}]},{"type":"text","value":".  Users of\n"},{"type":"element","tag":"a","props":{"href":"https://github.com/tpope/vim-abolish","rel":["nofollow"]},"children":[{"type":"text","value":"abolish.vim"}]},{"type":"text","value":" get pluralize and\ntableize coercions, and users of\n"},{"type":"element","tag":"a","props":{"href":"https://github.com/tpope/vim-bundler","rel":["nofollow"]},"children":[{"type":"text","value":"bundler.vim"}]},{"type":"text","value":" get a smattering of\nfeatures.  "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":":help rails-integration"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:til:vim-rails.md","_source":"content","_file":"til/vim-rails.md","_extension":"md"}