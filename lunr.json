[{"id":0,"location":"/til/cpp_const-cast.html","tags":["C++","cpp","const_cast"],"text":" O operador`const_cast` é utilizado para:  * adicionar um modificador `const` a um tipo * remover um modificador `const` de um tipo * adicionar um modificador `volatile` a um tipo * remover um modificador `volatile` de um tipo  ```c++ #include <iostream> using namespace std;  void f(int* p) {   cout << *p << endl; }  int main(void) {   const int a = 10;   const int* b = &a;    // A função f() espera receber um int* e não um const int*   // f(b);    int* c = const_cast<int*>(b);   f(c);    // Lvalue é const   //  *b = 20;    // Comportamento indefinido   //  *c = 30;    int a1 = 40;   const int* b1 = &a1;   int* c1 = const_cast<int*>(b1);    // o inteiro a1 referenciado por c1 não foi declarado como const   *c1 = 50;    return 0; } ```  ## Referências  * [const_cast operator syntax(https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.cbclx01/keyword_const_cast.htm)  ","title":"C++ - const_cast"},{"id":1,"location":"/til/flutter.html","tags":["flutter"],"text":" ## CLI  ### Criando um aplicação  ```shell flutter create hello_world_app cd hello_world_app flutter run ```  ### Listando emuladores configurados  Se o seu smartphone estiver conectado será automaticamente detectado.  ```shell flutter emulators ```  ## Scaffold  * appbar * body * side nav * right nav * bottom bar   ![img](/til/flutter-scaffold-01.webp)  ## Referências  * []()  ","title":"Flutter"},{"id":2,"location":"/til/css-scroll-snap.html","tags":["css"],"text":" ## Referências  * [Scroll Snap](https://codyhouse.co/nuggets/scroll-snap)   ","title":"CSS - Scroll Snap"},{"id":3,"location":"/til/git-diff-image.html","tags":["git"],"text":" ## Dizer ao git que imagem é imagem  Primeiro é necessário informar ao `git` para tratar imagens de um modo especial. Isso pode ser feito globalmente ou por projeto.  O comando abaixo diz ao `git` que algumas extensões são imagens.  ```shell git config --global core.attributesfile '~/.gitattributes' ```  ```shell cat ~/.gitattributes *.gif diff=image *.jpg diff=image *.png diff=image ```  ## Dizer ao git como fazer o diff  O comando abaixo diz ao `git` qual programa executar para fazer o diff da imagem.  ```shell git config --global diff.image.command '~/bin/git-imgdiff' ```  ## O programa de diff  ```shell cat << 'EOF' > ~/bin/git-imgdiff #!/bin/sh # Descomente o modo que desejar  # 3 imagens lado a lado: NOVA | DIFF | ANTIGA compare \"$2\" \"$1\" png:- | montage -geometry +4+4 \"$2\" - \"$1\" png:- | display -title \"$1\" -  # 1 imagem: DIFF # compare \"$2\" \"$1\" png:- | display -title \"$1\" - EOF chmod 755 ~/bin/git-imgdiff ```  ## Referências  * [Image diffs with git](https://akikoskinen.info/image-diffs-with-git/)  ","title":"Git - diff de imagens"},{"id":4,"location":"/til/vim-complete.html","tags":["vim","autocomplete"],"text":" ## `C-x C-u`   ## `C-x C-n`  ## `C-x C-p`  ## Referências  * []()  ","title":"Autocompletar no VIM"},{"id":5,"location":"/til/mapproxy.html","tags":["mapproxy"],"text":" ## Referências  * [mapproxy.org](https://mapproxy.org/)  ","title":"MapProxy"},{"id":6,"location":"/til/tmsu.html","tags":["tmsu"],"text":" ## Referências  * []()  ","title":"TMSU"},{"id":7,"location":"/til/inxi.html","tags":["inxi"],"text":" Para ver informações sobre:  * `inxi -A` placas de som/áudio do computador * `inxi -b` informações básicas * `inxi -C` gerais apenas do CPU * `inxi -D` completas de armazenamento dos SSDs/HDDs, etc * `inxi -f` básicas do CPU e das flags que ele suporta * `inxi -G` placa de vídeo * `inxi -i` ip e informações de rede * `inxi -l` tabela de partições * `inxi -n` placa de rede, incluindo o mac   ## Referências  * [INXI - Um comando simples e completo para obter informações da sua distro Linux](https://www.diolinux.com.br/2018/02/inxi-um-comando-simples-e-completo-para-ter-informacoes-linux.html)  ","title":"inxi - Obtendo informações sobre sua distribuição Linux"},{"id":8,"location":"/til/chafa.html","tags":["bash","image-viewer","terminal"],"text":" ::: toc  ::: fixme Add description and examples   ```shell apt install chafa ```  ## References  * [Chafa](https://hpjansson.org/chafa/)  ","title":"Chafa - Image viewer for terminal"},{"id":9,"location":"/til/javascript-console-dir.html","tags":["javascript","console"],"text":" Considere a seguinte página:  ```html <html>   <head></head>   <body>     <input id=\"clickMe\" type=\"button\" value=\"Clique aqui\">   </body> </html> ```  Que quando aberta no navegador tem a seguinte aparência:  ![img](/til/javascript-console-dir-00.webp)  Para obter o elemento do botão poderiamos fazer o seguinte:  ```javascript var btn = document.getElementById( 'clickMe' ); ```  Agora que temos o objeto botão armazenado em uma variável chamada `btn` podemos obter mais informações.  Ao enviar a variável `btn` para a função `console.log` veremos a seguinte representação:  ```javascript console.log( btn ) <input id=\"clickMe\" type=\"button\" value=\"Clique aqui\"> ```  Ao enviar a variável `btn` para a função `console.dir` teremos acesso a todas as propriedades internas do objeto.  ```javascript console.dir( btn ) ```  ![img](/til/javascript-console-dir-01.webp)  A lista de propriedades é muito longa, abaixo vemos um trecho com as funções que tratam eventos (cliques, drag, change, ...)  ![img](/til/javascript-console-dir-02.webp)  ## Adicionado um evento de clique  ```javascript // Definindo uma função de tratamento meuClique = function() { alert('Fui clicado'); } // Vinculando a função ao evento de clique do botão // Não usar `on`. Em vez de `onclick` use `click`  btn.addEventListener(\"click\", meuClique);  // Clicar no botão ou executar `btn.click()` ```  Ao clicar no botão uma janela é exibida:  ![img](/til/javascript-console-dir-03.webp)  Ao usar novamente o comando `console.dir( btn )` esperava ver no `onclick` alguma informação sobre a função de tratamento, mas estava `null`.  Usando a função `getEventListeners` consegui localizar a função `meuClique`  ![img](/til/javascript-console-dir-04.webp)   `$_` retorna o valor da última expressão avaliada  `$0`, `$1`,`$2`, `$3` e `$4` referenciam os últimos 5 elementos inspecionados   `$(selector, [startNode])` referencia o primeiro elemento no DOM especificado pelo seletor CSS.  ```shell $('input') <input id=\"clickMe\" type=\"button\" value=\"Clique aqui\"> ```  `$$(selector, [startNode])` retorna um array de objetos  ```javascript var images = $$('img'); for (each in images) {   console.log(images[each].src); } ```  `$x(path, [startNode])` retorna um array de elementos que batem com uma expressão XPath  ```javascript $x(\"//p\") ```  `copy` copia um objeto para a área de transferência  ```javascript copy($0); ```  `monitor(function)` monitor a execução de uma função  ```javascript function sum(x, y) {   return x + y; } monitor(sum);  sum(1,2) // function sum called with arguments: 1, 2 ```  `monitorEvents(object[, events])` monitora eventos  ```javascript monitorEvents(window, \"resize\"); // resize Event {isTrusted: true, type: \"resize\", target: Window, currentTarget: Window, eventPhase: 2, …} // resize Event {isTrusted: true, type: \"resize\", target: Window, currentTarget: Window, eventPhase: 2, …} ```  `unmonitorEvents(object[, events])`    ## Mais opções do console  ```javascript const label = 'Adolescent Irradiated Espionage Tortoises'; console.group(label); console.info('Leo'); console.info('Mike'); console.info('Don'); console.info('Raph'); console.groupEnd(label); ```  ```javascript console.count(); console.count('coffee'); console.count(); console.count(); console.countReset(); console.countReset('coffee'); ```  ```javascript console.table([   {     first: 'René',     last: 'Magritte',   },   {     first: 'Chaim',     last: 'Soutine',     birthday: '18930113',   },   {     first: 'Henri',     last: 'Matisse',   } ]); ```  ```javascript console.time(); for (var i = 0; i < 100000; i++) {   let square = i ** 2; } console.timeEnd(); ```  ```javascript const first = () => { second(); }; const second = () => { third(); }; const third = () => { fourth(); }; const fourth = () => { console.trace(); }; first(); ```  ```javascript console.log('%c Oh my heavens! ', 'background: #222; color: #bada55'); ```  {{< img src=\"https://developers.google.com/web/updates/images/2015-05-20-get-and-debug-event-listeners/get-debug-event-listeners.gif\" alt=\"img\" >}}  ## Referências  * [MDN Console.dir()](https://developer.mozilla.org/pt-BR/docs/Web/API/console/dir) * [Console API Reference](https://developers.google.com/web/tools/chrome-devtools/console/api) * [Console Utilities API Reference](https://developers.google.com/web/tools/chrome-devtools/console/utilities) * [HTML DOM addEventListener() Method](https://www.w3schools.com/jsref/met_element_addeventlistener.asp) * [Colors in JavaScript console](https://stackoverflow.com/questions/7505623/colors-in-javascript-console) * [Get and debug event listeners](https://developers.google.com/web/updates/2015/05/get-and-debug-event-listeners) * Sugestão de leitor [Basic HTML Codes for Beginners](https://www.websiteplanet.com/blog/html-guide-beginners/) ","title":"Javascript - console.dir"},{"id":10,"location":"/til/bloqueando-a-sessao-com-light-locker.html","tags":["screensaver","locker","debian","linux"],"text":" ## Instalação  ```shell apt purge xscreensaver xscreensaver-data apt install light-locker ```  ## Travando pelo terminal  ```shell light-locker-command -l ```  ## Referências  * [Instale Light Locker: Um novo bloqueador de sessão para LightDM](http://www.edivaldobrito.com.br/instale-light-locker-um-novo-sessao-locker-para-lightdm/) * [Debian xscreensaver very old. What's an alternative?](http://linuxoidchannel.blogspot.com.br/2016/12/debian-xscreensaver-very-old-whats.html)  ","title":"Bloqueando a Sessão com Light Locker"},{"id":11,"location":"/til/cpp_templates.html","tags":["C++"],"text":" ## Referências  * [Hiding C++ template parameter packs in a tuple](https://devblogs.microsoft.com/oldnewthing/20200529-00/?p=103810) * [Introduction to C++ Variadic Templates](https://kevinushey.github.io/blog/2016/01/27/introduction-to-c++-variadic-templates/) ","title":"Templates em C++"},{"id":12,"location":"/til/preact.html","tags":["preact"],"text":" ## Ciclo de vida  * `componentWillMount`: Antes que o componente seja montado no DOM * `componentDidMount`: Depois que o componente é montado no DOM * `componentWillUnmount`: Antes da remoção do DOM * `componentWillReceiveProps`: Antes que novas props sejam aceitas * `shouldComponentUpdate`: Antes de `render()`. Retorne false caso queiram pular o `render()` * `componentWillUpdate`: Antes `render()` * `componentDidUpdate`: Depois `render()`  ## Preact sem babel ou JSX  index.html  ```html <!DOCTYPE html> <html>   <head>     <title>Preact sem Babel or JSX</title>   </head>   <body>     <script src=\"https://unpkg.com/preact\"></script>     <script src=\"index.js\"></script>   </body> </html> ```  index.js  ```javascript 'use strict';  const { Component, h, render } = window.preact;  /** Example classful component */ class App extends Component {   componentDidMount() {     this.setState({ message:'Hello!' });   }   render(props, state) {     return (       h('div', {id:'app'},         h(Header, { message: state.message }),         h(Main)       )     );   } }   /** Components can just be pure functions */ const Header = (props) => {   return h('header', null,     h('h1', null, 'App'),     props.message && h('h2', null, props.message)   ); };   /** Instead of JSX, use: h(type, props, ...children) */ class Main extends Component {   render() {     const items = [1,2,3,4,5].map( (item) => (       h('li', {id:item}, 'Item '+item)     ));     return (       h('main', null,         h('ul', null, items)       )     );   } }   render(h(App), document.body); ```  Exemplo de preact com mitt  https://codepen.io/developit/pen/rjMEwW?editors=0010    ## Referências  * [Preact](https://medium.com/reactbrasil/preact-b128e4bf7625) * https://preactjs.com/guide/getting-started * https://blog.kiprosh.com/getting-started-with-preactjs-a-step-by-step-guide-f3197f871753/ * https://github.com/developit/preact-without-babel * https://blog.moove-it.com/getting-started-preact-progressive-web-apps/ * https://blog.theodo.fr/2017/11/preact-progressive-web-app-webpack-material-design-web-apis/ * http://react-materialize.github.io/react-materialize/?path=/story/react-materialize--welcome * https://project-awesome.org/ooade/awesome-preact  ","title":"Preact - Petit React"},{"id":13,"location":"/til/junit-swtbot.html","tags":["swtbot","java","junit"],"text":" ```java SWTBotMenu windowMenu = bot.menu(\"Window\"); windowMenu.click();  SWTBotMenu showViewMenu = windowMenu.menu(\"ShowView\"); showViewMenu.click();  SWTBotMenu otherMenu = showViewMenu.menu(\"Other...\"); otherMenu.click();  SWTBotTree tree = bot.tree(0); SWTBotTreeItem tItem = tree.getTreeItem(\"General\").expand(); tItem.getNode(\"Console\").doubleClick(); ```  ## Referências  * [A Simple Test using SWTBOT !!](http://eclipseo.blogspot.com/2010/12/simple-test-using-swtbot.html) ","title":"Testes com SWTBot"},{"id":14,"location":"/til/vim-livro-noob-gratis.html","tags":["vim"],"text":" > Um livro guia/referência para quem deseja aprender a utilizar o editor de textos Vim  Confira em https://leanpub.com/vimparanoobs  ## Referência  * https://woliveiras.com.br/vimparanoobs/chapters/pesquisando-por-plugins-no-vundle.html  ","title":"vim-livro-noob-gratis.md"},{"id":15,"location":"/til/eclipse-plugin.html","tags":["eclipse"],"text":" ## Referências  Analisar pdf  * [Code samples for the \"Eclipse Plugin Development by Example: Beginners Guide\" book 978-1782160328](https://github.com/alblue/com.packtpub.e4) * [A Quick-Start Tutorial to Eclipse Plug-in Development](http://scg.unibe.ch/archive/projects/Bals10b-EclipsePlugins.pdf) ","title":"Desenvolvimento de plugin para o Eclipse"},{"id":16,"location":"/til/vapid-key.html","tags":["web"],"text":" VAPID (Voluntary Application Server Identification) é o novo meio de receber e enviar notificações push através da web.  ## Criação usando openssl  ```shell mkdir -p certs openssl ecparam -name prime256v1 -genkey -noout -out certs/vapid_private.pem openssl ec -in certs/vapid_private.pem -pubout  -out certs/vapid_public.pem openssl ec -in certs/vapid_private.pem -outform DER \\   | tail -c +8 | head -c 32 | base64 | tr -d '=' | tr '/+' '_-' \\   > certs/private_key.txt openssl ec -in certs/vapid_private.pem -pubout -outform DER \\   | tail -c 65 | base64 | tr -d '=' | tr '/+' '_-' \\   > certs/public_key.txt ```  ## Criação usando web-push  ```shell npm install -g web-push web-push generate-vapid-keys ```  ## Push services  * fcm.googleapi.com - firebase - Google * updates.push.service.mozilla.com - Firefox  ## Envio através do PHP para android  ```php <?php  // API access key from Google API's Console define( 'API_ACCESS_KEY', 'YOUR-API-ACCESS-KEY-GOES-HERE' );   $registrationIds = array( $_GET['id'] );  // prep the bundle $msg = array ( \t'message' \t=> 'here is a message. message', \t'title'\t\t=> 'This is a title. title', \t'subtitle'\t=> 'This is a subtitle. subtitle', \t'tickerText'\t=> 'Ticker text here...Ticker text here...Ticker text here', \t'vibrate'\t=> 1, \t'sound'\t\t=> 1, \t'largeIcon'\t=> 'large_icon', \t'smallIcon'\t=> 'small_icon' );  $fields = array ( \t'registration_ids' \t=> $registrationIds, \t'data'\t\t\t=> $msg );   $headers = array ( \t'Authorization: key=' . API_ACCESS_KEY, \t'Content-Type: application/json' );   $ch = curl_init(); curl_setopt( $ch,CURLOPT_URL, 'https://android.googleapis.com/gcm/send' ); curl_setopt( $ch,CURLOPT_POST, true ); curl_setopt( $ch,CURLOPT_HTTPHEADER, $headers ); curl_setopt( $ch,CURLOPT_RETURNTRANSFER, true ); curl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false ); curl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) ); $result = curl_exec($ch ); curl_close( $ch );  echo $result; ```  ```shell ensure connection is secured, so CURLOPT_SSL_VERIFYPEER should be set to true ```  ## Envio via PHP para IOS  ```php <?php      // Provide the Host Information.      $tHost = 'gateway.sandbox.push.apple.com';      $tPort = 2195;      // Provide the Certificate and Key Data.      $tCert = 'dev.pem';      // Provide the Private Key Passphrase (alternatively you can keep this secrete      // and enter the key manually on the terminal -> remove relevant line from code).      // Replace XXXXX with your Passphrase      $tPassphrase = 'xxxxxx';      // Provide the Device Identifier (Ensure that the Identifier does not have spaces in it).      // Replace this token with the token of the iOS device that is to receive the notification.      $tToken = 'ada56107075e4d00f9da001b0ad71200cb953b99266e506884f6eab06f13f666';      // The message that is to appear on the dialog.      $empresa = \"Petiskeira\";      $tAlert = $empresa . ' tem um recado para você!';      // The Badge Number for the Application Icon (integer >=0).      $tBadge = 1;      // Audible Notification Option.      $tSound = 'default';      // The content that is returned by the LiveCode \"pushNotificationReceived\" message.      $tPayload = '{\"endereco\":\"lauro oscar diefenthaeler\",\"tel\":\"51 3561-8797\",\"numero\":\"243\",\"complemento\":\"0\",\"id\":\"9\",\"nome\":\"petiskeira\",\"msg\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\"}';      // Create the message content that is to be sent to the device.      $tBody['aps'] = array (      'alert' => $tAlert,      'badge' => $tBadge,      'sound' => $tSound,      );      $tBody ['payload'] = $tPayload;      // Encode the body to JSON.      $tBody = json_encode ($tBody);      // Create the Socket Stream.      $tContext = stream_context_create ();      stream_context_set_option ($tContext, 'ssl', 'local_cert', $tCert);      // Remove this line if you would like to enter the Private Key Passphrase manually.      stream_context_set_option ($tContext, 'ssl', 'passphrase', $tPassphrase);      // Open the Connection to the APNS Server.      $tSocket = stream_socket_client ('ssl://'.$tHost.':'.$tPort, $error, $errstr, 30, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $tContext);      // Check if we were able to open a socket.      if (!$tSocket)      exit (\"APNS Connection Failed: $error $errstr\" . PHP_EOL);      // Build the Binary Notification.      $tMsg = chr (0) . chr (0) . chr (32) . pack ('H*', $tToken) . pack ('n', strlen ($tBody)) . $tBody;      // Send the Notification to the Server.      $tResult = fwrite ($tSocket, $tMsg, strlen ($tMsg));      if ($tResult){      echo 'Delivered Message to APNS' . PHP_EOL;      }else      echo 'Could not Deliver Message to APNS' . PHP_EOL;      // Close the Connection to the Server.      fclose ($tSocket);  ?> ```  ## Referências  * [Makefile do flask-pywebpush](https://github.com/rtancman/flask-pywebpush/blob/master/Makefile) * [Criando um sistema de notificações com pywebpush](https://www.rtancman.com.br/python/criando-sistema-de-notificacoes-com-pywebpush.html) * [Beginners guide to Web Push Notifications using Service Workers](https://medium.com/izettle-engineering/beginners-guide-to-web-push-notifications-using-service-workers-cb3474a17679) * [gits: envio de webpush usando PHP](https://gist.github.com/prime31/5675017) Aqui tem muitos comentários importantes   ","title":"Criando VAPID key"},{"id":17,"location":"/til/design-mode.html","tags":["chrome"],"text":" A variável `document.designMode` controla se o documento todo é editável.  ```javascript var mode = document.designMode; document.designMode = \"on\"; document.designMode = \"off\"; ```   ## Referências  * [Document.designMode - Mozilla](https://developer.mozilla.org/pt-BR/docs/Web/API/Document/designMode)   ","title":"Editando a página diretamente no browser"},{"id":18,"location":"/til/prince2.html","tags":["prince2"],"text":" ## PRINCE2 vs PMP  * PRINCE2 focuses of WHAT to do * PMP focuses on HOW to do it * PRINCE2 is a methodology using processes * PMP is a standard and a knowlegebase  Theses certifications are not in competition with each other, they can be used with each other.  ## Benefits of PRINCE2  * Common lexicon for those involved in project * Explicit roles assigned for each reponsability * Customer focuses by design * Provides repeatable processes * Deliver on busines needs * Adaptable and tailorable to the business  ## What it Won't Provide?  * Excludes specialized aspects   * Procurement   * Legal   * Finatial   * Human resources * Excludes management of people * Doesn't focus on techniques or dictate how to do something  ## & Principles  * Continued Business Justification * Learn From Experience * Defined Roles and Reponsabilities * Manage by Stages * Manage by Exception * Focus on Products * Tailor To Suit The Project  ## Principle: Continued Business Justification  * Are the benefits still worth the risk & costs? * Project must always remain **desirable**, viable, and achievable   * If not, the project should be **closed** * Does the organization have the capability to deliver the product? * Will the use of the project's products result in the outcomes and benefits expected? * Prevents wasting resources on a project that has no benefits * Benefits **do not** have to be (only) monetary  ### Business Case Components  * Reason for the project * Expected benefits and dis-benefits   * What threshold would project be terminated? * Timeline, Cost, and Risk * Underlying assumptions * Options considered * Chosen solution  ## Learn From Experiences  * Everyone makes mistakes, but how can we learn from them? * Collect reports of lessons learned from previous projects * Generate reports during the project  ### Who's Responsability Is It?  * Project managers should identify, document, and disseminate lessons via lesson reports to the project board * Project board should distribute these reports to the organization's other project managers  ### Hindsight is 20-20  * Setup a lessons learned log during the Starting Up a Project process * Generate lessons reports at the end of each stage * Final lessons report created before the Closing a Project process is completed  ### Lessons Learned arr \"Testable\"  * Assurance auditors will ask for evidence that lessons ar actually being **learned** * Looking for proof that things are implemented to improve process and prevent mistakes * Lessons Learned is different from Lessons Observed  ### How to prevent mistakes?  * Learn from past mistakes to prevent new ones * Create a repository of lessons reports * Recruit members to your project with similar project experiences... * ...there really is no substitute for experience!  ## Referências  * [PRINCE2 Foundation: Cram to Pass the PRINCE2 Exam in 7 days](https://subscription.packtpub.com/video/application_development/9781838829247/105514/105519/project-management) ","title":"PRINCE2"},{"id":19,"location":"/til/dart.html","tags":["dart"],"text":" ## Instalação  ```shell apt-get update apt-get install apt-transport-https sh -c 'curl https://dl-ssl.google.com/linux/linux_signing_key.pub \\   | apt-key add -' sh -c 'curl https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list \\   > /etc/apt/sources.list.d/dart_stable.list' ```  ```shell apt-get update apt-get install dart ```  ## Referências  * []()  ","title":"Linguagem DART"},{"id":20,"location":"/til/css-banner.html","tags":["css"],"text":" Para evitar que o adblock remova elementos da tela não utilize como parte do nome das classes ou ids as seguintes palavras:  * ad * ads * adv * advert * advertisement * banner * banners  Exemplos:  * `meu-banner-legal` pode ser removido acidentalmente * `meu-bannerx-legal` provavelmente não será removido  ## Referências  * [AdBlock plus hids elements with ids or class with the word “ad”](https://stackoverflow.com/questions/14079048/adblock-plus-hids-elements-with-ids-or-class-with-the-word-ad) * [Regra id-class-no-ad do htmllint](https://github.com/htmllint/htmllint/wiki/Options#id-class-no-ad) ","title":"Nomes de classes a evitar no CSS"},{"id":21,"location":"/til/deploy-site-with-git.html","tags":["git","site estático"],"text":" image: headers/voce-na-internet.jpg  Você que tem acompanhado os outros posts deve ter notado que chegamos a um ponto muito importante da série *você na internet*. Apenas para relembrar, já passamos pelas seguintes etapas:  * Escolher uma *aparência* básica para o seu site * Editar e personalizar o site * Gerar a versão local  Agora é o momento de mostrar pra todo mundo o que já conseguimos. É hora de fazer o *deploy* do seu site. É hora do seu site deixar o círculo de amigos próximos e ser visível na web.  ","title":"Publique seu site com com git"},{"id":22,"location":"/til/git-bare.html","tags":["git"],"text":" ```shell cd repo mv .git ../repo.git # renaming just for clarity cd .. rm -fr repo cd repo.git git config --bool core.bare true ```  ## Referências  * [How to convert a normal Git repository to a bare one?](https://stackoverflow.com/questions/2199897/how-to-convert-a-normal-git-repository-to-a-bare-one)  ","title":"Convertendo um repositório git para bare"},{"id":23,"location":"/til/mosquitto.html","tags":["mosquitto","mqtt"],"text":" ## Introduction  * MQTT is a very lightweight messaging protocol * Specifically designed for machine-to-machine telemetry * The MQTT protocol is based on a TCP connection. * IBM Watson uses MQTT to allow it to communicate with devices.  ## Pros   * Lightweight and efficient—which means it's optimal for small bandwidth environments such as microcontrollers * Bi-directional communications * Messages are encrypted using TLS * Offers support for unreliable networks using persistent sessions  ## Cons   * Doesn't support video streaming * Messages are transmitted asynchronously * Can experience issues with latency and speed.  ## Install server  ```shell sudo apt-get install mosquitto ```  ## Install client  ```shell sudo apt-get install mosquitto mosquitto-clients ```  ## Subscribe a topic  ```shell mosquitto_sub -t \"test_topic\" ```  ## Publish on topic  ```shell mosquitto_pub -t \"test_topic\" -m \"HELLO WORLD!\" ```  ## Testing the communication  ![Communication testing](/til/mosquitto_hello_01.webp)   Producer:  ```shell mosquitto_pub -t \"test_topic\" -m \"HELLO WORLD!\" for i in {1..10}; do mosquitto_pub -t \"test_topic\" -m \"I=$i\"; done ```  Consumer:  ```shell mosquitto_sub -t \"test_topic\" HELLO WORLD! I=1 I=2 I=3 I=4 I=5 I=6 I=7 I=8 I=9 I=10 ```  ## C++ and C library  ```shell sudo apt install libmosquitto-dev or  sudo apt install libpaho-mqtt-dev ```  ## References  * [8 Most Popular Instant Messaging & Chat Protocols](https://www.cometchat.com/blog/popular-chat-and-instant-messaging-protocols) * [Everything About MQTT Protocol — Message Queue Telemetry Transport](https://www.cometchat.com/blog/everything-about-mqtt-protocol-message-queue-telemetry-transport) * [How to Install and Secure the Mosquitto MQTT Messaging Broker on Ubuntu 16.04](https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-the-mosquitto-mqtt-messaging-broker-on-ubuntu-16-04) * [How to Install and Secure the Mosquitto MQTT Messaging Broker on Debian 8](https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-the-mosquitto-mqtt-messaging-broker-on-debian-8) * [Mosquitto C++ sample code to publish message](https://www.disk91.com/2013/technology/programming/mosquitto-c-sample-code-to-publish-message/) * [Eclipse Paho MQTT C++ Client Library](https://github.com/eclipse/paho.mqtt.cpp) * https://github.com/eclipse/paho.mqtt.cpp/tree/master/src/samples * [libmosquittopp - sample client hangs on loop_stop() method](https://stackoverflow.com/questions/37956152/libmosquittopp-sample-client-hangs-on-loop-stop-method) * https://medium.com/tht-things-hackers-team/instalar-mqtt-broker-no-linux-debian-ubuntu-f8861da70ef6 * https://android.developreference.com/article/16161720/libmosquittopp+-+sample+client+hangs+on+loop_stop()+method ","title":"Mosquitto"},{"id":24,"location":"/til/como-limpar-o-audio-com-o-audacity.html","tags":["audacity"],"text":" ## Efeito redução de ruído  1. Selecionar somente o ruído (sem vóz) 1. Menu **Efeitos** 1. Menu **Redução de ruídos** 1. Clicar no botão **Obter perfil do ruído** 1. Ctrl+A Para para selecionar tudo 1. Menu **Efeitos** 1. Menu **Redução de ruídos** 1. Clicar no botão **OK**  ## Efeito compressor  1. Ctrl+A para selecionar tudo 1. Menu **Efeitos** 1. Menu **Compressor** 1. Não precisa mexer em nada 1. Clicar no botão **OK**  ## Efeito normalizar  1. Ctrl+A para selecionar tudo 1. Menu **Efeitos** 1. Menu **Normalizar** 1. Não precisa mexer em nada 1. Clicar no botão **OK**  ## Efeito equalização  1. Ctrl+A para selecionar tudo 1. Menu **Efeitos** 1. Menu **Equalização** 1. Selecione a curva **100Hz Rumble** 1. Clicar no botão **OK**  ","title":"Como limpar o audio com audacity"},{"id":25,"location":"/til/eclipse-formatar-codigo-via-linha-de-comando.html","tags":["eclipse"],"text":" ## Referências  * [How to Run the Eclipse Formatter From the Command Line](https://www.beyondjava.net/run-eclipse-formatter-command-line)  ","title":"Formatar código via linha de comando com eclipse"},{"id":26,"location":"/til/curl.html","tags":["curl"],"text":" Ótimas dicas  ## Referências  * [12 DICAS para você usar o COMANDO curl como um NINJA](https://youtu.be/HxezVt5IEHQ)  ","title":"cURL"},{"id":27,"location":"/til/vim-plugins.html","tags":["vim"],"text":" ## Instalação do vundle  ```shell git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim ```    ## Ctrlp  ## Ctrlp modified  Easily open locally modified files in your git-versioned projects.   Uso a versão que lista os arquivos [modificadas[(https://github.com/jasoncodes/ctrlp-modified.vim)  ### Instalação  Acrescentar no `.vimrc`  ```vim Bundle 'kien/ctrlp.vim' Bundle 'jasoncodes/ctrlp-modified.vim' ```  Rodar o `VundleInstall`  ### Atalhos  Acrescentar no `.vimrc`  ```vim map <Leader>m :CtrlPModified<CR> map <Leader>M :CtrlPBranch<CR> ```  ","title":"Plugins para o vim"},{"id":28,"location":"/til/cpp_user-literals.html","tags":[""],"text":" ## Para que servem  * para definir atalhos sintáticos para linguagens comuns e aumentar a segurança do tipo * para conveniência ou para dedução de tipo em tempo de compilação  ## Desempenho  * não há vantagem ou desvantagem de desempenho para literais definidos pelo usuário  ## Categorias de literais  Existem 6 categorias:  * inteiro * caractere * ponto flutuante * cadeia de caracteres * bool * ponteiro  ## Literais definicos na biblioteca padrão  ### `<string>`  ```c++ string str = \"hello\"s + \" world\"s; ```  ### `<complex>`  ```c++ complex<double> num = (2.0 + 3.01i) * (5.0 + 4.3i); ```  ### `<chrono>`  ```c++ bash auto duration = 15ms + 42h; ```  ## Assinaturas dos literais definidos pelo usuário  Você implementa um literal definido pelo usuário definindo um `operator \"\"` no escopo de namespace com uma das seguintes assinaturas:  ```c++ ReturnType operator \"\" _a(unsigned long long int);   // Literal operator for user-defined INTEGRAL literal ReturnType operator \"\" _b(long double);              // Literal operator for user-defined FLOATING literal ReturnType operator \"\" _c(char);                     // Literal operator for user-defined CHARACTER literal ReturnType operator \"\" _d(wchar_t);                  // Literal operator for user-defined CHARACTER literal ReturnType operator \"\" _e(char16_t);                 // Literal operator for user-defined CHARACTER literal ReturnType operator \"\" _f(char32_t);                 // Literal operator for user-defined CHARACTER literal ReturnType operator \"\" _g(const char*, size_t);      // Literal operator for user-defined STRING literal ReturnType operator \"\" _h(const wchar_t*, size_t);   // Literal operator for user-defined STRING literal ReturnType operator \"\" _i(const char16_t*, size_t);  // Literal operator for user-defined STRING literal ReturnType operator \"\" _g(const char32_t*, size_t);  // Literal operator for user-defined STRING literal ReturnType operator \"\" _r(const char*);              // Raw literal operator template<char...> ReturnType operator \"\" _t();       // Literal operator template ```  ## Referências  * [Literais definidos pelo usuário](https://docs.microsoft.com/pt-br/cpp/cpp/user-defined-literals-cpp?view=vs-2019) ","title":"C++ Literais definidas pelo usuário"},{"id":29,"location":"/til/medium-free.html","tags":["hacking"],"text":" * clicar no cadeado * clicar em cookies * selecione `medium.com` e clique em bloquear  ## Referências  * [How do I read Medium articles for free?](https://www.quora.com/How-do-I-read-Medium-articles-for-free)  ","title":"Como ler o medium de graça"},{"id":30,"location":"/til/como-instalar-o-tema-papirus-no-debian.html","tags":["icons","papirus","debian","linux"],"text":" O pacote `papirus-icon-theme` está no `Debian Sid`. Para instalar na versão `stable` basta criar um arquivo `papirus-icon-theme.list` contendo o endereço do repositório:  ```shell echo \"deb http://ppa.launchpad.net/papirus/papirus/ubuntu xenial main\" \\    > /etc/apt/sources.list.d/papirus-icon-theme.list ```  Adicionar a chave   ```shell apt-key adv --recv-keys --keyserver keyserver.ubuntu.com E58A9D36647CAE7F ```  Instalar  ```shell apt-get update apt-get install papirus-icon-theme ```  Pronto, agora é só selecionar o tema `papirus` na configuração do seu ambiente.  ## Selecionando o tema no XFCE  Em **Configurações** escolha **Aparência** e depois **Ícones**.  ![img](/til/papirus-02.webp)  ![img](/til/papirus-03.webp)  ## Referências  * [Github do projeto](https://github.com/PapirusDevelopmentTeam/papirus-icon-theme/) * https://www.reddit.com/r/unixporn/comments/6a0cfp/xfce_my_style_of_mac_osx_for_linux/ * https://github.com/nizarmah/tintedarc  ","title":"Como instalar o tema de ícones Papirus no Debian"},{"id":31,"location":"/til/vim-formatar-json.html","tags":["vim"],"text":" ## Antes: Um exemplo de json colapsado  ```json { \"quiz\": { \"sport\": { \"q1\": { \"question\": \"Which one is correct team name in NBA?\", \"options\": [ \"New York Bulls\", \"Los Angeles Kings\", \"Golden State Warriros\", \"Huston Rocket\" ], \"answer\": \"Huston Rocket\" } }, \"maths\": { \"q1\": { \"question\": \"5 + 7 = ?\", \"options\": [ \"10\", \"11\", \"12\", \"13\" ], \"answer\": \"12\" }, \"q2\": { \"question\": \"12 - 8 = ?\", \"options\": [ \"1\", \"2\", \"3\", \"4\" ], \"answer\": \"4\" } } } } ```  ## Depois: endentado  ```json {     \"quiz\": {         \"maths\": {             \"q1\": {                 \"answer\": \"12\",                 \"options\": [                     \"10\",                     \"11\",                     \"12\",                     \"13\"                 ],                 \"question\": \"5 + 7 = ?\"             },             \"q2\": {                 \"answer\": \"4\",                 \"options\": [                     \"1\",                     \"2\",                     \"3\",                     \"4\"                 ],                 \"question\": \"12 - 8 = ?\"             }         },         \"sport\": {             \"q1\": {                 \"answer\": \"Huston Rocket\",                 \"options\": [                     \"New York Bulls\",                     \"Los Angeles Kings\",                     \"Golden State Warriros\",                     \"Huston Rocket\"                 ],                 \"question\": \"Which one is correct team name in NBA?\"             }         }     } } ```  Crie um atalho para executar um comando externo.  ### Usando python  ```vim nmap =j :%!python -m json.tool<CR> ```  ### Usando jq  ```vim nmap =j :%!jq .<CR> ```   ","title":"Formatar JSON no Vim"},{"id":32,"location":"/til/codigo-de-barras.html","tags":["barcode"],"text":" ## EAN  * Esse código é usado principalmente nos pontos de venda porque permite fazer uma leitura mais simples. * É o formato mais comum e contém uma sequência de números que totaliza 13 dígitos na maioria das vezes. * Pode ser usado para as vendas ou o controle interno, porque o EAN armazena dados sobre a numeração única da unidade ou do lote. * Esse código também se subdivide, como ocorre com o ISBN, que é voltado para livros e produtos semelhantes.  ![EAN](/til/codigo-de-barras_EAN-300x219.webp)  ## Databar  * Tem um funcionamento similar ao do EAN-13 e pode ser usado no ponto de venda. * A diferença é que tem um tamanho reduzido. * Devido a essa característica, é utilizado principalmente em verduras, frutas e legumes, além de outros produtos menores, como joias e cosméticos. * Outra característica é que o Databar pode armazenar dados sobre o prazo de validade, o que permite ter um controle maior das vendas e evitar que uma mercadoria vencida seja comercializada.  ![Databar](/til/codigo-de-barras-DataBar.webp)  ## UPC  * É muito utilizado para identificar mercadorias nos Estados Unidos e no Canadá. * Tem uma sequência de 12 números e é usado nos pontos de venda. * A vantagem é que o UPC garante que o produto seja aceito em toda a América do Norte. * Possui semelhanças com os códigos anteriores. * Por exemplo: o UPC-A corresponde ao EAN-13 e o UPC-E é parecido com o Databar. * Não é um código interessante para usar no Brasil, mas quem quer exportar para os Estados Unidos e o Canadá deve considerar o UPC.  ![UPC](/til/codigo-de-barras-UPC-300x196.webp)  ## ITF-14  * Possui 14 dígitos e é mais voltado para unidades logísticas. * É usado em operações internas para rastreio e localização de mercadorias nas mais diversas etapas logísticas. * Pode ser usado diretamente nas caixas ou nos lotes de produtos, mas não tem validade para produtos únicos ou aqueles que chegarão aos pontos de venda.  ![ITF-14](/til/codigo-de-barras-ITF-14-300x95.webp)  ## Código 128  * Esse também é um código indicado para aplicações logísticas. * Ele apresenta informações que vão desde a data de validade até números de lote e de série. * Sua composição é alfanumérica e seu tamanho pode variar conforme a aplicação. * É bastante usado no transporte de produtos de saúde e oferece um rastreamento mais completo. * Por meio do código 128 é possível encontrar onde a mercadoria está na cadeia logística e elevar a visibilidade de todo o processo.  ![Código 128](/til/codigo-de-barras-ean-128-300x169.webp)  ## Código 25 intercalado  * O código 25 intercalado pode ser utilizado para o manuseio e o transporte de itens do tipo fichas, inventários, passagens aéreas e envelopes. * No processo logístico é usado especialmente para equipamentos despachados, bagagens e cargas. * Outra possibilidade é usá-lo em relógios de ponto, boletos de pagamento, entre outras possibilidades que não se ligam a um ponto de venda ou à logística. * Seu comprimento pode variar.  ![Legenda da imagem](/til/codigo-de-barras-2de5-intercalado.webp)  ## QR code  * Esse é um código criado para smartphones e outros dispositivos móveis. Devido a isso, é bidimensional e tem um padrão único. * O escaneamento deve ser realizado com leitores próprios, que fazem o redirecionamento para uma página com informações sobre o produto, por exemplo. * A vantagem é pode armazenar uma quantidade maior de informações e facilitar o conhecimento do consumidor a respeito do produto, situação chamada de embalagem estendida.  ![QR code](/til/codigo-de-barras-qrcode.webp)  ## DataMatrix  * É semelhante ao QR code por ser bidimensional e com tamanho reduzido. * Pode ser gravado no produto para ser inviolável. * É mais utilizado na área de saúde por aumentar a confiabilidade e a rastreabilidade das informações. * Como você pôde perceber, os vários tipos de códigos existentes servem para situações específicas, que melhoram a visibilidade do processo e facilitam as operações internas do seu negócio. * E você, já adotou algum dos códigos de barras abordados? * Se você tem algo a compartilhar ou possui uma dúvida, deixe seu comentário no post.  ![DataMatrix](/til/codigo-de-barras_DATAMATRIX.webp)  ## Referências  * [Códigos de barras: conheça os 8 tipos existentes](https://ibid.com.br/blog/codigos-de-barras-conheca-os-8-tipos-existentes/)    ","title":"Código de barras"},{"id":33,"location":"/til/cruft.html","tags":["cruft","debsums"],"text":" ::: toc  ## Introduction  **cruft** is a useful tool exactly for this purpose: it makes a comparison between a file system and the database of installed Debian packages. In addition to listing unknown files it also lists files which are missing but should be there.  I use it routinely together with **debsums** when I need to start system administration or upgrade work on machine which I did not take care of earlier. This allows me to spot any local modifications and installations and plan for them, instead of the customer telling me after an upgrade that their software does not work any more.  Install:  ```shell apt-get install cruft ```  List all \"cruft\" but ignore the named directories:  ```shell cruft --ignore \"/dev /proc /sys /root /home /tmp\" ```  More information:  ```shell man cruft zless /usr/share/doc/cruft/README.gz ```  ## References  * [How to list files and folders that are not maintained by any DEB package](https://unix.stackexchange.com/questions/18038/how-to-list-files-and-folders-that-are-not-maintained-by-any-deb-package) * [Debian Cleanup Tip #5: identify cruft that can be removed from your Debian system](https://raphaelhertzog.com/2011/02/28/debian-cleanup-tip-5-identify-cruft-that-can-be-removed-from-your-debian-system/)   ","title":"Cruft — Cleaning Filesystem"},{"id":34,"location":"/til/rstudio.html","tags":["r"],"text":" ## Instalação  ```shell apt-get update apt-get install r-base r-base-dev rstudio apt-get install r-cran-httpuv r-cran-shiny r-cran-dt r-cran-crosstalk r-cran-miniui r-cran-rmysql r-cran-devtools ```  Para baixar a última versão do RStudio do site acesse <https://rstudio.com/products/rstudio/download/>.   ## Referências  * [Brazilian Economic Time Series (BETS): R package](https://bibliotecadigital.fgv.br/dspace/bitstream/handle/10438/18172/Brazilian_Economic_Time_Series_BETS_R_package.pdf?sequence=1&isAllowed=y) * [Deflacionando e extraindo sazonalidade de séries de tempo no R](https://rpubs.com/arthurlula/deflacionar) * [ribge R package](https://github.com/tbrugz/ribge) ","title":"RStudio no debian"},{"id":35,"location":"/til/vim-awesome.html","tags":["vim"],"text":" * <http://vimawesome.com/> * <http://vimawesome.com/plugin/fugitive-vim> * <http://vimawesome.com/plugin/vim-snipmate-mine>   ","title":"Vim awesome"},{"id":36,"location":"/til/git-diff.html","tags":["git","diff"],"text":" ## Sem espaços no final da linha ou final do arquivo  O comando abaixo adiciona uma marcação no `git diff` no terminal ou no `git gui`.  ```shell git config --global core.whitespace 'blank-at-eol,blank-at-eof' ```  Após rodar o comando acima o arquivo `~/.gitconfig` é alterado para conter as seguintes linhas:  ```ini [core] \twhitespace = blank-at-eol ```  ### Exemplos  Uma linha com espaço sobrando no final aparece assim no `git gui`:  ![diff no git gui.](/til/git-diff-check-01.webp)  Uma linha com espaço sobrando no final (acrescentei mais alguns) aparece assim no `terminal`:  ![diff no console.](/til/git-diff-check-02.webp)   ### Listando as linhas com problemas  Para ver só as linhas com problema use `git diff --check`:  ```shell git diff --check README.md:11: trailing whitespace. ```   ## Referências  * [How Effective Teams Use Git - Enrico Campidoglio](https://www.youtube.com/watch?v=jw8yK5JV0xw)  ","title":"Exibindo problemas de formatação com git diff"},{"id":37,"location":"/til/big-o-notation.html","tags":["C++"],"text":" ## Referências  * [Big-O Notation Explained with Examples](https://developerinsider.co/big-o-notation-explained-with-examples/)  ","title":"Notação Big O"},{"id":38,"location":"/til/git-checkout-somente-da-ultima-versao.html","tags":["git","checkout","depth"],"text":" Muitas vezes não precisamos baixar todo o histórico de commits de um projeto. Principalmente quando estamos usando bibliotecas de terceiros.  Para indicar o número máximo de commits a ser baixado use a opção `--depth`, adicionalmente você pode indicar de qual o branch deve ser baixado.  Exemplo de uso retirado do site do mongodb:  ```shell git clone https://github.com/mongodb/mongo-cxx-driver.git \\     --branch releases/stable \\     --depth 1 ```  ## Referências  * [Installing the mongocxx driver](http://mongocxx.org/mongocxx-v3/installation/)  ","title":"Como realizar o checkout somente da última versão"},{"id":39,"location":"/til/js-set.html","tags":["javascript"],"text":" https://alligator.io/js/sets-introduction/  ```javascript let animals = new Set();  animals.add('🐷'); animals.add('🐼'); animals.add('🐢'); animals.add('🐿'); console.log(animals.size); // 4 animals.add('🐼'); console.log(animals.size); // 4  console.log(animals.has('🐷')); // true animals.delete('🐷'); console.log(animals.has('🐷')); // false  animals.forEach(animal => {   console.log(\\`Hey ${animal}!\\`); });  // Hey 🐼! // Hey 🐢! // Hey 🐿!  animals.clear(); console.log(animals.size); // 0 ```  ```javascript let myAnimals = new Set(['🐷', '🐢', '🐷', '🐷']);  myAnimals.add(['🐨', '🐑']); myAnimals.add({ name: 'Rud', type: '🐢' }); console.log(myAnimals.size); // 4  myAnimals.forEach(animal => {   console.log( animal ); });   // 🐷 // 🐢 // [\"🐨\", \"🐑\"] // Object { name: \"Rud\", type: \"🐢\" } ```    ","title":"javascript set"},{"id":40,"location":"/til/algoritmos.html","tags":["C++","algorithms","count_if","for_each","max_element"],"text":" ::: toc  Algoritmos que todo programador deveria conhecer bem.  ::: fixme Add description and examples  ## C++/STL  * [`count_if`](/til/cpp_algorithm_count_if_01.html) * [`for_each`](/til/cpp_algorithm_for_each.html) * [`max_element`](/til/cpp_algorithm_max_element_01.html)   ## Estruturas lineares de dados  * [Arrays](/til/cpp_array.html) * Linked List - Single and Doubly * Stack * Queues  ## Algoritmos básicos  * Sorting - Merge Sort, Insertion Sort, Quick Sort, Number of inversions * Matrix Multiplication (just know the algo if not implement it) * Prime Sieving * Modular Math including multiplication and division * Euclidean Algorithm for GCD, Modular Inverse, Fast Exponentiation * Fibonacci number with matrix multiplication * Probability distribution and expected value * Stats - Mean, Median, Variance, Bayes theorem  ## Técnicas populares  * Divide and Conquer - Binary Search, Maximum Subarray * Greedy Algorithms - Activity Selection, Huffman encoding * Dynamic Programming - Matrix Chain Multiplication, Knapsack, * Linear Programming - Variable Maximisation, Linear time sorting * String Algorithms - Manacher, LCS, Edit Distance  ## Estruturas não lineares de dados  * Trees - Binary Tree, General Tree, Lowest Common Ancestor * Binary Search Tree - Inorder Traversal, Level order traversal, finding kth largest element, diameter, depth, number of nodes, etc. * Heaps - Array Implementation, Heapify, Heap Sort * Union Find * [Hash Table](/til/cpp_hash_table.html) - Linear Probing, Open addressing, Collision avoidance  ## Grafos  * Adjacency List, Adjacency Matrix, Weighted Edge Graphs * Basic Traversal algos - Breadth First Search, Depth First Search, etc * Shortest Path Finding Algorithm - Dijkstra, Floyd Warshal, Bellman Ford * Minimum Spanning Tree - Kruskal's Algo, Prim's Algo  ## Árvores avançadas e grafos  * Balanced Trees - AVL, Red-Black * Heavy Light Decomposition, B+ Trees, Quad Tree * Advance Graph - Min Cut, Max Flow * Maximum Matching - Hall's Marriage * Hamiltonian Cycle * Edge Graphs / Line Graphs * Strongly Connected Components * Dominant Sub-Graph, Vertex Cover, Travelling Salesman - Approx algos  ## Algoritmos avançados para String  * Knuth Morris Pratt Algorithm * Rabin Karp Algorithm * Tries and Compressed Tries * Prefix Trees, Suffix Trees, Suffix Automation - Ukkonen Algorithm  ## Matemática avançada  * Fast Fourier Transformation * Primality Testing * Computational Geometry - Closest point pair, Voronoi diagram, Convex Hull  ## Tópicos gerais avançados  * Iterating through all combination / permutation * Bit manipulation  ## Referências  * [What algorithms should I know to become a good programmer?](https://www.quora.com/What-algorithms-should-I-know-to-become-a-good-programmer/answer/Ashish-Kedia?ch=3&share=ae955848&srid=zRrj) * [C++20/17/14/11](https://github.com/AnthonyCalandra/modern-cpp-features/blob/master/README.md) ","title":"Algoritmos"},{"id":41,"location":"/til/failban.html","tags":["fail2ban"],"text":" ## Objetivo  TBD  ## Instalação  ```shell apt update apt install fail2ban ```  Copie o arquivo padrão `jail.conf` para `jail.local` para que numa futura atualização não se perca a personalização.  ```shell cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local ```  ## Referências  * [How fail2ban works](http://www.the-lazy-dev.com/en/how-fail2ban-works/) * [Install and configure Fail2ban with Docker](http://www.the-lazy-dev.com/en/install-fail2ban-with-docker/)  ","title":"fail2ban"},{"id":42,"location":"/til/nemo-como-gerenciador-de-arquivos-padrao.html","tags":["file-manager","nemo","nautilus","gnome","xfce"],"text":" ## Trocando o Nautilus pelo Nemo no GNOME  ```shell xdg-mime default \\   nemo.desktop inode/directory \\   application/x-gnome-saved-search ```  ### Desabilitando o Nautilus  ```shell gsettings set org.gnome.desktop.background show-desktop-icons false ```  ### Habilitando o Nemo  ```shell gsettings set org.nemo.desktop show-desktop-icons true ```  ## Trocando o Thunar pelo Nemo no XFCE  Em **Configurações** acesse **Aplicativos preferidos**  ![img](/til/post-nemo-xfce-01.webp)  Abra a aba **Utilitários** e altere para **nemo** em **Gerenciador de Arquivos**  ![img](/til/post-nemo-xfce-02.webp)  ## Testando  ```shell xdg-open $HOME ```  ## Configurando o terminal  ### Usar o `xfce4-terminal` no nemo  ```shell gsettings set org.cinnamon.desktop.default-applications.terminal exec xfce4-terminal ```  ### Usar o `gnome-shell` no nemo  ```shell gsettings set org.cinnamon.desktop.default-applications.terminal exec gnome-shell ```  ### Usar o `gnome-terminal` no nemo  ```shell gsettings set org.cinnamon.desktop.default-applications.terminal exec gnome-terminal ```  ## Referências  * [How to Install and Make Nemo the Default File Manager in Ubuntu](https://itsfoss.com/install-nemo-file-manager-ubuntu/) * [How to configure Nemo's right-click “Open in Terminal” to launch “gnome-terminal”](https://unix.stackexchange.com/questions/336368/how-to-configure-nemos-right-click-open-in-terminal-to-launch-gnome-terminal/336587#:~:text=You%20can%20use%20%22%20CTRL%20%2B%20ALT,open%20the%20terminal%20from%20there.) ","title":"Nemo como Gerenciador De Arquivos Padrão"},{"id":43,"location":"/til/plantuml.html","tags":["plantuml"],"text":" ## Usando ícones  ```shell @startuml ../../../src/static_src/til/plantuml-icon-01.png  skinparam DefaultFontSize 24 skinparam DefaultTextAlignment center  title <&caret-right> Using icons in PlantUML <&caret-left>  package \"Charts <&menu>\" as charts {      file bar [         Bar          <size:120><&bar-chart></size>     ]      file pie [         Pie          <size:42><&pie-chart></size>     ]  }  @enduml ```  ![Exemplo de uso de ícone.](/til/plantuml-icon-01.png)   ## Ícones disponíveis  ```shell @startuml ../../../src/static_src/til/plantuml-icon-02.png listopeniconic @enduml ```  ![Ícones disponíveis](/til/plantuml-icon-02.png)  ## Referências   * [PlantUML Pleasantness: Using The Built-in Icons](https://mrhaki.blogspot.com/2017/10/plantuml-pleasantness-using-built-in.html) ","title":"Plantuml"},{"id":44,"location":"/til/cpp_magic-enum.html","tags":["C++"],"text":" Biblioteca C++17 header-only que provê reflexão estática de enums, trabalha com qualquer tipo de enum sem usar macros.  * `enum_cast` obtains enum value from string or integer. * `enum_value` returns enum value at specified index. * `enum_values` obtains enum value sequence. * `enum_count` returns number of enum values. * `enum_integer` obtains integer value from enum value. * `enum_name` returns string name from enum value. * `enum_names` obtains string enum name sequence. * `enum_entries` obtains pair (value enum, string enum name) sequence. * `enum_index` obtains index in enum value sequence from enum value. * `enum_contains` checks whether enum contains enumerator with such value. * `enum_type_name` returns string name of enum type. * `is_unscoped_enum` checks whether type is an Unscoped enumeration. * `is_scoped_enum` checks whether type is an Scoped enumeration. * `underlying_type` improved UB-free \"SFINAE-friendly\" std::underlying_type. * `ostream_operators` ostream operators for enums. * `bitwise_operators` bitwise operators for enums.  Inserir exemplos  ## Referências  * [Magic Enum C++](https://github.com/Neargye/magic_enum)  ","title":"Magic Enum C++"},{"id":45,"location":"/til/mlpack-macos.html","tags":["mlpack"],"text":" ```shell brew brewsci/science/mlpack ```  ## Referências  * [Brewsci/science (legacy)](https://github.com/brewsci/homebrew-science)  ","title":"Instalando o mlpack no Mac OS"},{"id":46,"location":"/til/go.html","tags":["golang"],"text":" ## Organização  * Os programas go são organizados em pacotes. * Pacotes são coleções de arquivos fontes num mesmo diretório * Os arquivos do pacote são compilados juntos * Constantes definidas em um arquivo fonte são visíveis para todos os outros fontes do mesmo pacote * Um repositório contém um ou mais módulos * Um módulo é uma coleção de pacotes relacionados e são distribuídos juntos * Um repositório típico contém somente um módulo localizado na raiz da repositório * Um arquivo chamado `go.mod` declara o `module path` e importa o prefixo    ## Seu primeiro programa  ```shell mkdir hello cd hello go mod init example.com/user/hello cat go.mod ```   ## Referências  * [How to Write Go Code](https://golang.org/doc/code.html)  ","title":"Golang"},{"id":47,"location":"/til/firewall.html","tags":["firewall","debian","linux"],"text":" ## Instalação  ```shell apt install ufw ```  ## Status  ```shell ufw status verbose ```  Depois de configurado alguns serviços a saída do comando pode ser similar a:  ``` ufw status Status: active  To                         Action      From --                         ------      ---- OpenSSH                    ALLOW       Anywhere 80/tcp                     ALLOW       Anywhere 443/tcp                    ALLOW       Anywhere OpenSSH (v6)               ALLOW       Anywhere (v6) 80/tcp (v6)                ALLOW       Anywhere (v6) 443/tcp (v6)               ALLOW       Anywhere (v6) ```  ## Listando aplicações  ```shell ufw app list ufw app info OpenSSH ```  ## Liberando algumas aplicações  ```shell ufw allow OpenSSH ufw allow http ufw allow https ```  ## Habilitando o firewall  ```shell ufw enable ```  ## Liberando uma porta específica  ```shell ufw allow 8080/tcp ```  ## Liberando um range de portas  ```shell ufw allow 7100:7200/tcp ufw allow 7100:7200/udp ```  ## Liberando acesso a um IP específico  Cuidado: Este comando libera todas as portas para o IP especificado!  ```shell ufw allow from 64.63.62.61 ```  ## Liberando acesso a uma porta para a um IP específico  ```shell ufw allow from 64.63.62.61 to any port 22 ```  ## Liberando acesso a uma subrede  Neste exemplo os IPs `192.168.1.1` até `192.168.1.254` podem acessar a porta `3306` (MySQL).  ```shell ufw allow from 192.168.1.0/24 to any port 3306 ```  ## Proibindo conexões  Bloqueando todo o acesso de faixa de IPs `23.24.25.0/24`  ```shell ufw deny from 23.24.25.0/24 ```  Bloqueando somente alguns serviços:  ```shell ufw deny from 23.24.25.0/24 to any port 80 ufw deny from 23.24.25.0/24 to any port 443 ```  ## Removendo regras  ```shell ufw status numbered ```  Poderia ter uma saída similar a:  ```text Status: active      To                         Action      From      --                         ------      ---- [ 1] OpenSSH                    ALLOW IN    Anywhere [ 2] 80/tcp                     ALLOW IN    Anywhere [ 3] 443/tcp                    ALLOW IN    Anywhere [ 4] OpenSSH (v6)               ALLOW IN    Anywhere (v6) [ 5] 80/tcp (v6)                ALLOW IN    Anywhere (v6) [ 6] 443/tcp (v6)               ALLOW IN    Anywhere (v6) ```  Dá para usar o número da regra para removê-la ou então a porta diretamente:  ```shell ufw delete 2 ufw delete allow 8069 ```  ## Desabilitando o firewall  ```shell ufw disable ```  ## Referências  * [How To Set Up a Firewall with UFW on Debian 9](https://linuxize.com/post/how-to-setup-a-firewall-with-ufw-on-debian-9/) ","title":"Configurando um firewall no Debian"},{"id":48,"location":"/til/vim-digraphs.html","tags":["vim"],"text":" Em modo de edição teclar `Ctrl+K` seguido de dois caracteres:  Dígrafo | Caractere | Descrição :---:|:---:|:--------| SE | § | SEction DG | ° | DeGree -a | ª |  -o | º | Co | © | Copyright PI | ¶ | Pilcrow .M | · | Meddle dot My | µ | Micro +- | ± |  0S | ⁰ | 0 superescrito 1S | ¹ | 1 superescrito 2S | ² | 2 superescrito 3S | ³ | 3 superescrito 4S | ⁴ | 4 superescrito 9S | ⁹ | 9 superescrito 0s | ₀ | 0 subescrito 1s | ₁ | 1 subescrito 2s | ₂ | 2 subescrito 9s | ₉ | 9 subescrito 14 | ¼ | 12 | ½ | 34 | ¾ | o/ | ø | O/ | Ø | -: | ÷ | A* | Α | Alfa (grego) B* | Β | Beta (grego) G* | Γ | Gama (grego) D* | Δ | Delta (grego) H* | Θ | Teta (grego) L* | Λ | Lambda (grego) S* | Σ | Sigma (grego) F* | Φ | Phi (grefo) Q* | Ψ | Psi (grego) W* | Ω | Omega (grego) a* | α | Alga (grego) b* | β | Beta (grego) g* | γ | Gama (greto) d* | δ | Delta (grego) e* | ε | Epslon (grego) p* | π | Pi (grego) -3 | ― | Barra horizontal :X | ※ | Marca de referência Eu | €| Euro oC | ℃ | Graus Célsius TM | ™ | Trademark 1R | Ⅰ | 1 romano 2R | Ⅱ | 2 romano 3R | Ⅲ | 3 romano 4R | Ⅳ | 4 romano 5R | Ⅴ | 5 romano 9R | Ⅸ | 9 romano aR | Ⅹ | 10 romano bR | Ⅺ | 11 romano cR | Ⅻ | 12 romano 1r | ⅰ | 1 romano 2r | ⅱ | 2 romano <- | ← | -> | → | -v | ↓ | -! | ↑ | <> | ↔ | UD | ↕ | <= | ⇐ | => | ⇒ | == | ⇔ | FA | ∀ | For all TE | ∃ | There exists /0 | ∅ | Vazio DE | ∆ | increment NB | ∇ | nabla (- | ∈ | Pertence a RT | √ | raiz +Z | ∑ | Somatório *P | ∏ | Produtório Ob | ∘ | Ring operator Sb | ∙ | Bullet operator 00 | ∞ | Infinito In | ∫ | Integral DI | ∬ | Integral dupla Io | ∮ | Integral de linha Iu | ⌠ | Parte de cima da integral Il | ⌡ | Parte de baixo da integral .: | ∴ | Therefore :. | ∵ | Because :: | ∷ | Proporção </ | 〈| /> | 〉| FD | ╱ | Diagonal BD | ╲ | Diagonal TB | ▀ | Top block FB | █ | Full block LB | ▄ | Lower block fS | ■ | Black square OS | □ | White square sB | ▪ | Small black square 0M | ● | Black circle 0m | ○ | White circle Ml | ♂ | Masculino Fm | ♀ | Feminino  ## Define your own digraph  ```vim :digraph {char1}{char2} {number} :digraphs lc 128557 \" 😭 ```  `{number}` is the decimal value for the Unicode character.   ## Referências  * [Manual Vim: digraph](https://vimhelp.org/digraph.txt.html)  ","title":"Dígrafos no VIM"},{"id":49,"location":"/til/vim-compilar-vim-8.html","tags":["vim"],"text":" ``` cd ~/git git clone https://github.com/vim/vim.git cd vim  ./configure --with-compiledby=\"Geraldo Ribeiro <geraldolsribeiro@gmail.com>\" \\ --with-features=huge \\ --enable-gui=auto \\ --with-x \\ --enable-rubyinterp \\ --with-ruby-command=/usr/bin/ruby \\ --enable-perlinterp \\ --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config \\ --enable-fontset \\ --enable-cscope \\ --enable-gtk2-check \\ --enable-gnome-check  make ```  ","title":"Compilar Vim 8"},{"id":50,"location":"/til/mktemp.html","tags":["bash","mktemp"],"text":" ```shell cd $(mktemp -d) ``` ","title":"Bash - trap"},{"id":51,"location":"/til/canary-release.html","tags":["web"],"text":" ## Referências  * [Dark Launching, Canary Releases for Frontend Projects](https://medium.com/front-end-weekly/how-to-add-dark-launching-to-frontend-projects-df35e6046d46)  ","title":"Canary Release & Dark Launching"},{"id":52,"location":"/til/cpp_fltk-layout.html","tags":["C++","fltk"],"text":" ## Introdução  O FLTK utiliza um sistema simples, porém versátil para redimensionar interfaces.  ## Aplicação inicial  * Para demonstrar o gerenciamento do layout criei uma aplicação composta de 9 botões com labels de 1 até 9. * Note que eu criei os botões totalmente fora de ordem: 5, 2, 4, 8, 6, 1, 3, 7 e 9. Isto não importa para o layout. * Todos os botões são filhos da janela principal.  ### Arquivo 01.fl  ```c++ # data file for the Fltk User Interface Designer (fluid) version 1.0304 header_name {.h} code_name {.cxx} Function {} {open } {   Fl_Window {} {     label 01 open selected     xywh {122 262 420 180} type Double visible   } {     Fl_Button {} {       label 5       xywh {140 60 140 60}     }     Fl_Button {} {       label 2       xywh {140 0 140 60}     }     Fl_Button {} {       label 4       xywh {0 60 140 60}     }     Fl_Button {} {       label 8       xywh {140 120 140 60}     }     Fl_Button {} {       label 6       xywh {280 60 140 60}     }     Fl_Button {} {       label 1       xywh {0 0 140 60}     }     Fl_Button {} {       label 3       xywh {280 0 140 60}     }     Fl_Button {} {       label 7       xywh {0 120 140 60}     }     Fl_Button {} {       label 9       xywh {280 120 140 60}     }   } } ```  ### Arquivo Makefile  Para realizar a compilação dos programas crie o seguinte `Makefile`:  ```Makefile # ---------------------------------------------------------------------- # Copyright (C) 2017-2021 Geraldo Ribeiro <geraldo@intmain.io> # ----------------------------------------------------------------------  PROGRAMS=01 02 03 04 GENERATED=$(addsuffix .h, $(PROGRAMS)) $(addsuffix .cxx, $(PROGRAMS))  CXXFLAGS+=-std=c++17 CXXFLAGS+=`fltk-config --cxxflags` LDFLAGS+=`fltk-config --ldflags`  # Geração de código %.cxx: %.fl \tfluid -c $^  # Opção de compilação 1 %: %.cxx \tfltk-config --compile $^  # Opção de compilação 2 #%: %.cxx #\t$(CXX) $(LDFLAGS) $^ -o $@ $(LDFLAGS)   all: $(PROGRAMS)  clean: \trm -f $(PROGRAMS) $(GENERATED) ```  ### Geração de código  Para gerar o código **C++** (`.cxx`) a partir do **Fluid** (`.fl`) basta digitar `make` que o código é gerado e compilado:  ```shell make fluid -c 01.fl fltk-config --compile 01.cxx ```  ### Arquivo gerado 01.cxx  ```c++ // generated by Fast Light User Interface Designer (fluid) version 1.0304  #include \"01.h\"  int main(int argc, char **argv) {   Fl_Double_Window* w;   { Fl_Double_Window* o = new Fl_Double_Window(420, 180, \"01\");     w = o; if (w) {/* empty */}     { new Fl_Button(140, 60, 140, 60, \"5\");     } // Fl_Button* o     { new Fl_Button(140, 0, 140, 60, \"2\");     } // Fl_Button* o     { new Fl_Button(0, 60, 140, 60, \"4\");     } // Fl_Button* o     { new Fl_Button(140, 120, 140, 60, \"8\");     } // Fl_Button* o     { new Fl_Button(280, 60, 140, 60, \"6\");     } // Fl_Button* o     { new Fl_Button(0, 0, 140, 60, \"1\");     } // Fl_Button* o     { new Fl_Button(280, 0, 140, 60, \"3\");     } // Fl_Button* o     { new Fl_Button(0, 120, 140, 60, \"7\");     } // Fl_Button* o     { new Fl_Button(280, 120, 140, 60, \"9\");     } // Fl_Button* o     o->end();   } // Fl_Double_Window* o   w->show(argc, argv);   return Fl::run(); } ```  ## Executando a aplicação 01  Ao ser executada a aplicação `./01` notamos que o redimensionamento está desabilitado, pois temos na janela principal somente os botões de *enrolar*, *minimizar* e *fechar* habilitados.  ![Aplicação 01 sem possibilidade de redimensionamento.](/til/fltk-01-01.webp)  ## Aplicação 02  A aplicação 02 é uma cópia da 01 com redimensionamento (`resizable`) habilitado na janela principal.  ![Ativando redimensionamento na aplicação 02.](/til/fltk-02-00.webp)  Podemos ver pelo `diff` abaixo que apenas o flag `resizable` foi adicionado e o título da janela foi alterado para `02`.  ```diff diff 01.fl 02.fl 8,9c8,9 <     label 01 open selected <     xywh {122 262 420 180} type Double visible --- >     label 02 open selected >     xywh {122 262 420 180} type Double resizable visible ```  Note que agora o botão de *maximizar* é adicionado:  ![Aplicação 02 em tamanho inicial.](/til/fltk-02-01.webp)  E podemos redimensionar a janela horizontalmente e verticalmente:  ![Aplicação 02 redimensionada horizontalmente.](/til/fltk-02-02.webp)  ![Aplicação 02 redimensionada verticalmente.](/til/fltk-02-03.webp)  Note que todos os 9 botões são redimensionados da mesma forma.  ## Aplicação 03  A aplicação 03 é uma cópia da 02 com redimensionamento habilitado no botão 5.  ![Ativando o redimensionamento para o botão 05 na aplicação 03.](/til/fltk-03-00.webp)  ```diff 8c8 <     label 02 open selected --- >     label 03 open selected 13c13 <       xywh {140 60 140 60} --- >       xywh {140 60 140 60} resizable  ```  ![Aplicação 03 em tamanho inicial.](/til/fltk-03-01.webp)  Ao redimensionar a janela podemos notar alguns comportamentos:  * os botões 1, 3, 7 e 9 (diagonais de 5) permanecem com suas dimensões originais * os botões 2 e 8 (acima e abaixo de 5) são redimensionados horizontalmente acompanhando o tamanho 5. * os botões 4 e 6 (à direita e à esquerda de 5) são redimensionados verticalmente acompanhando o tamanho 5. * comportamento válido quando se tem somente um widget marcado como `resizable`.  ![Aplicação 03 redimensionada.](/til/fltk-03-02.webp)  ## Aplicação 04  A aplicação 04 é uma cópia da 02 com redimensionamento habilitado no botão 9.  ![Aplicação 04 redimensionada.](/til/fltk-04-01.webp)  Observe que o mesmo comportamento geral é aplicado:  * diagonais são mantidas * acima (e abaixo se houvesse) redimensionados acompanhando a largura de 9 * à esquerda (e à direita se houvesse) redimensionados acompanhando a altura de 9  ## Referências  * [Article #415: How does resizing work?](https://www.fltk.org/articles.php?L415)  ","title":"C++ - Gerenciando layout em FLTK"},{"id":53,"location":"/til/vim-slow.html","tags":["vim"],"text":" * <http://eduncan911.com/software/fix-slow-scrolling-in-vim-and-neovim.html>  ```vim :set cursorline! :set lazyredraw ```  ```vim set synmaxcol=128 syntax sync minlines=256 ```  ","title":"Vim lento"},{"id":54,"location":"/til/vim-copiar-nome-do-arquivo.html","tags":["vim"],"text":" Ao preparar relatórios por vezes preciso obter o caminho completo do arquivo que estou analisando. Uma maneira prática de obter esse caminho é colar o conteúdo do registrador `%` e recortá-lo para a área de transferência com `dd`:  {{< kbd \"\\\" % p d d\" >}}  Para o comando acima copiar diretamente para a área de transferência do desktop é necessário a seguinte configuração no `.vimrc`:  ```vim set clipboard=unnamedplus ```  Caso contrário seria necessário especificar o registrador `\"+` e o comando ficaria um pouquinho maior:  {{< kbd \"\\\" % p \\\" + d d\" >}}  ## Referências  * [Get the name of the current file](https://vim.fandom.com/wiki/Get_the_name_of_the_current_file)  ","title":"Copiar o nome do arquivo atual"},{"id":55,"location":"/til/vim-explorer.html","tags":["vim"],"text":" ```vim :Explore \" Lista os arquivo :Sex     \" Lista com split :Vex     \" Lista Vertical com split ```  ## Comando dentro da árvore  * `%` cria um arquivo * `d` cria um diretório * `R` renomeia um arquivo * `D` deleta um arquivo  ## Referências  * [The file explorer](http://vimcasts.org/transcripts/15/en/)  ","title":"VIM - Explorer"},{"id":56,"location":"/til/eclipse-debug.html","tags":["eclipse"],"text":" ## Debugando plugin com Spy    plug-in spy (Alt+Shift+F1)  xxx  ## Referências  * [Java Debugging with Eclipse - Tutorial](https://www.vogella.com/tutorials/EclipseDebugging/article.html)  ","title":"Debugando no eclipse"},{"id":57,"location":"/til/fonte-para-desenvolvimento.html","tags":["fonts"],"text":" http://s9w.io/font_compare/  ","title":"Fonte Para Desenvolvimento"},{"id":58,"location":"/til/dropzonejs.html","tags":["dropzone","javascript","upload"],"text":"   ## Referências  * [gitlab do dropzone](https://gitlab.com/meno/dropzone) * [Dropzonejs.com](https://www.dropzonejs.com/) * [How to Build a File Upload Form with Express and Dropzone.js](https://www.sitepoint.com/file-upload-form-express-dropzone-js/) * [Upload de arquivos com DropzoneJS e PHP](https://www.devmedia.com.br/upload-de-arquivos-com-dropzonejs-e-php/36781) ","title":"Dropzone"},{"id":59,"location":"/til/web-insomnia.html","tags":["web"],"text":" ## Instalação  Adicionar ao `sources.list`  ```shell echo \"deb https://dl.bintray.com/getinsomnia/Insomnia /\" \\     | sudo tee -a /etc/apt/sources.list.d/insomnia.list ```  Adicionar a chave pública para verificar as assinaturas dos pacotes  ```shell wget --quiet -O - https://insomnia.rest/keys/debian-public.key.asc \\     | sudo apt-key add - ```  Atualizar a lista de pacotes disponíveis e instalar o pacote insomnia.  ```shell apt-get update apt-get install insomnia ```    ## Referências  * [Installation](https://support.insomnia.rest/article/23-installation#ubuntu)  ","title":"Primeiros passos com o insomnia"},{"id":60,"location":"/til/simple-screen-recorder.html","tags":["simple-screen-recorder"],"text":" Configurações sugeridas pelo Leandro Ramos:  * Tela toda * Taxa de quadros 24 ou 30 * Backend: Pulseaudio * Recipiente: Matroska (MKV) * Codec vídeo: outro/msmpeg4v2 * Bitrate: 5000 * Codec audio: sem compressão (aqui é que ganha redução de CPU)  * [Otimizando a performance do Simplescreenrecorder](https://www.youtube.com/watch?v=GM7gbX6E83Q)  ","title":"Configurações para o simple-screen-recorder"},{"id":61,"location":"/til/git-manter-somente-os-n-ultimos-commit.html","tags":["git"],"text":" Não estou certo de cut -c3-  ```shell git config --global alias.rebase-last-five '!b=\"$(git branch --no-color | cut -c3-)\"; \\ h=\"$(git rev-parse $b)\" ; \\ echo \"Current branch: $b $h\" ; \\ c=\"$(git rev-parse $b~4)\" ; \\ echo \"Recreating $b branch with initial commit $c ...\" ; \\ git checkout --orphan new-start $c ; \\ git commit -C $c ; \\ git rebase --onto new-start $c $b ; \\ git branch -d new-start ; \\ git gc'  ```  ## Referências  * [How to delete all Git commits except the last five](https://stackoverflow.com/questions/11929766/how-to-delete-all-git-commits-except-the-last-five) ","title":"git - como manter somente os n últimos commits"},{"id":62,"location":"/til/html-input-pattern.html","tags":["html","input","pattern"],"text":" ::: toc  ## Apenas letras  ```html <input   type=\"text\"   required=\"required\"   name=\"text\"   pattern=\"[a-z\\s]+$\" /> ```  ## Apenas números  ```html <input   type=\"text\"   required=\"required\"   name=\"numbers\"   pattern=\"[0-9]+$\" /> ```  ## Data  ```html <input   type=\"date\"   required=\"required\"   maxlength=\"10\"   name=\"date\"   pattern=\"[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$\"   min=\"2012-01-01\"   max=\"2014-02-18\" /> ```  ## Hora  ```html <input   type=\"time\"   required=\"required\"   maxlength=\"8\"   name=\"hour\"   pattern=\"[0-9]{2}:[0-9]{2} [0-9]{2}$\" /> ```  ## Campos genéricos de texto  ```html <input   type=\"text\"   required=\"required\"   name=\"name\" /> ```  ## Telefone  ```html <input   type=\"tel\"   required=\"required\"   maxlength=\"15\"   name=\"phone\"   pattern=\"\\([0-9]{2}\\) [0-9]{4,6}-[0-9]{3,4}$\" /> ```  ## Email  ```html <input   type=\"email\"   required=\"required\"   class=\"input-text\"   name=\"email\"   pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\" /> ```  ## Moeda  ```html <input   type=\"tel\"   required=\"required\"   maxlength=\"15\"   name=\"valor\"   pattern=\"([0-9]{1,3}\\.)?[0-9]{1,3},[0-9]{2}$\" /> ```  Utilizei o `type=”tel”`, pq em celulares renderiza melhor o teclado.  ## Input file  ```html <input   type=\"file\"   name=\"file\"   accept=\"image/*\"   required=\"required\" /> ```  ## Código do país  ```html <input   type=\"text\"   name=\"country_code\"   pattern=\"[A-Za-z]{3}\"   title=\"Three letter country code\" /> ```  ## Senha  ```html <input   type=\"password\"   name=\"pwd\"   pattern=\".{8,}\"   title=\"Eight or more characters\" /> ```  ```html <input   type=\"password\"   name=\"pwd\"   pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"   title=\"Must contain at least one  number and one uppercase and lowercase letter, and at least 8 or more characters\" /> ```  ## Busca  An `<input>` element with `type=\"search\"` that CANNOT contain the following characters: `'` or `\"`  ```html <input   type=\"search\"   name=\"search\"   pattern=\"[^'\\x22]+\"   title=\"Invalid input\"> ```  ## URL  ```html <input   type=\"url\"   name=\"website\"   pattern=\"https?://.+\"   title=\"Include http://\"> ```  ## Placeholder  Lembre-se de usar o placeholder nos seus campos em que você precise “dar alguma dica” para o usuário de como ele deve preenchê-lo  ## Estilizar os inputs  Faça testes utilizando as pseudo classes  ```html input:required:invalid {} input:required:valid {} ```  ## Personalizar as mensagens de erro  Encontrei este artigo bem completo e interessante: Validando formulários like a boss com HTML5. Onde é mostrado o atributo: required x-moz-errormessage=”Ops. Não esqueça de preencher este campo.”, logicamente exclusivo do Firefox.  E para webkit, o css:  ```html ::-webkit-validation-bubble {/*Insira aqui seu CSS.*/} ::-webkit-validation-bubble-message {} ::-webkit-validation-bubble-arrow {} ::-webkit-validation-bubble-arrow-clipper {} ```  That’s all folks!  Em alguns inputs, mesmo com o type definido, eu forcei a validação no pattern, pois um pode ser implementado sem o outro pelos browsers, e existe um “bug” no type email, em que no Chrome ele aceita um email do tipo: email@a, sem obrigar que o cliente informe o domínio do site. (.com, .net…)  Comente caso use algum, ou tenha outro para sugerir!!  ## Referências  * [Validando formulários apenas com html5](http://wbruno.com.br/html/validando-formularios-apenas-com-html5/) * [HTML input pattern Attribute](https://www.w3schools.com/tags/att_input_pattern.asp)  ","title":"HTML input pattern"},{"id":63,"location":"/til/eclipse-juno-4.2.2-no-debian-buster.html","tags":["eclipse"],"text":" How to install **Eclipse Juno** on Linux?  Baixei a versão xxx do mirror https://mirror.combahton.net/ubuntu/pool/main/o/openjdk-8/   ```shell BASEURL=https://mirror.combahton.net/ubuntu/pool/main/o/openjdk-8  for i in \\ openjdk-8-dbg_8u131-b11-2ubuntu1.16.04.3_amd64.deb \\ openjdk-8-demo_8u131-b11-2ubuntu1.16.04.3_amd64.deb \\ openjdk-8-jdk-headless_8u131-b11-2ubuntu1.16.04.3_amd64.deb \\ openjdk-8-jdk_8u131-b11-2ubuntu1.16.04.3_amd64.deb \\ openjdk-8-jre-headless_8u131-b11-2ubuntu1.16.04.3_amd64.deb \\ openjdk-8-jre-jamvm_8u131-b11-2ubuntu1.16.04.3_amd64.deb \\ openjdk-8-jre_8u131-b11-2ubuntu1.16.04.3_amd64.deb \\ openjdk-8-source_8u131-b11-2ubuntu1.16.04.3_all do   wget -c $BASEURL/$i done  apt install multiarch-support  wget http://ftp.us.debian.org/debian/pool/main/libp/libpng/libpng12-0_1.2.50-2+deb8u3_amd64.deb   #wget $BASEURL/openjdk-8-dbg_8u191-b12-2ubuntu0.16.04.1_amd64.deb #wget $BASEURL/openjdk-8-jdk-headless_8u191-b12-0ubuntu0.16.04.1_amd64.deb #https://mirror.combahton.net/ubuntu/pool/main/o/openjdk-8/openjdk-8-jre-headless_8u191-b12-2ubuntu0.16.04.1_amd64.deb ```  ","title":"Eclipse Juno 4.2"},{"id":64,"location":"/til/x-inverter-cores.html","tags":["debian","linux","xorg","xcalib","xfce"],"text":" Use o utilitário `xcalib` para inverter as cores da tela:  ```shell apt install xcalib xcalib -i -a ```  ## Referências  * [invert colors on X (or xfce4)](https://superuser.com/questions/208746/invert-colors-on-x-or-xfce4)  ","title":"Como inverter as cores no X"},{"id":65,"location":"/til/analise-de-ponto-de-funcao.html","tags":["function-point"],"text":" * adicionar 30% aos pontos de função para problemas não previstos  Produtividade por linguagem:  * C++: de 6.5 a 12 H/PF  * Quando se conta somente tabelas o TER é sempre igual a 1 * XML TER pode ser maior que 1 * tem uma boa explicação neste vídeo [Pontos por função - Arquivos Lógicos Internos](https://youtu.be/d7P-bh-1Y_g)  ## Referências  * ▶️[Exemplo de Medição com Pontos de Função em um Estudo de Caso Web](https://youtu.be/T2NShJoKJqI) * ▶️[APF - Análise de Pontos de Função - Exemplo Prático](https://youtu.be/N3AO3JKaLa4) * ▶️[UCP - Use Case Points - Pontos de Casos de Uso - Exemplo Prático](https://www.youtube.com/watch?v=10NpZxju2YI) * ▶️[Pontos por função - Arquivos Lógicos Internos](https://youtu.be/d7P-bh-1Y_g) * ▶️[Pontos por função - mapeando a complexidade da saída de dados](https://youtu.be/BMLqq0aYlLE?list=TLPQMjIwOTIwMjBlrBT_JmSVhg) ","title":"Análise de Pontos de Função"},{"id":66,"location":"/til/cpp_optimlib.html","tags":["C++","otimização","optimlib","differential evolution"],"text":" A **OptimLib** é uma biblioteca C++ lightweight para otimização numérica de funções não lineares.  ::: toc  ## Instalação da optimlib  ```shell git clone https://github.com/kthohr/optim.git cd optim ./configure --header-only-version ```  Após os comandos acima é criado um diretório chamado `header_only_version`. A partir daí é só incluir este diretório nos flags de compilação: `-Ialgum-lugar/header_only_version`  ## Exemplo 1  Neste exemplo usaremos o método **Differential Evolution (DE)** que é uma busca genética estocástica para otimização global.  Localizar o mínimo da função $f(x) = x^2 - 5x + 6$.  ![Função exemplo para busca do mínimo.](/til/optimlib_01.webp)  A função a ser otimizada precisa ter o seguinte formato:  ```cpp double f( vetor_de_entrada,           vetor_de_gradiente,           parametros_adicionais ) ```  Definindo nosso $f(x)$ usando o formato acima:  ```cpp double f( const arma::vec &vals_inp,           arma::vec *grad_out,           void *opt_data ) {   // Nosssa função é muito simples e só utiliza uma entrada   const double x = vals_inp( 0 );   return x * x - 5 * x + 6; } ```  Realizando a otimização:  ```cpp arma::vec x = arma::ones( 1, 1 ) + 0.5; // Valor inicial 1.5 if( optim::de( x, f, nullptr ) ) {   cout << \"Mínimo para f(x): \"        << \"x² - 5x + 6 => \" << x << endl;   // Mínimo para f(x) = x² - 5x + 6 => 2.5000 } ```  ## Exemplo 2  A função anterior é muito bem comportada e sem mínimos locais. Vamos complicar um pouco.  Localizar o mínimo da função $h(x) = x^2 - 5x + 6 + 0.2\\sin(10x)$.  ![Cálculo do valor mínimo.](/til/optimlib_02.webp)  Definindo a nova função:  ```cpp double h( const arma::vec &vals_inp,           arma::vec *grad_out,           void *opt_data ) {   const double x  = vals_inp( 0 );   return x * x - 5 * x + 6 + 0.2 * sin( 10 * x ); } ```  Realizando a otimização:  ```cpp arma::vec x = arma::ones( 1, 1 ) + 0.5; // Valor inicial 1.5 if( optim::de( x, h, nullptr ) ) {   cout << \"Mínimo para h(x): \"        << \"x² - 5x + 6 + 0.2 sin( 10x ) => \"        << x << endl;   // Mínimo para h(x): x² - 5x + 6 + 0.2 sin( 10x ) => 2.3693 } ```  ## Referências  * [OptimLib: a lightweight C++ library of numerical optimization methods for nonlinear functions](https://github.com/kthohr/optim) * [Lec 12 : Differential Evolution](https://www.youtube.com/watch?v=xwR7WbKtylg)   ","title":"Otimização numérica em C++"},{"id":67,"location":"/til/cpp_fltk-fluid.html","tags":["flkt","fluid","C++","gvim"],"text":" Para usar o `gvim` como editor externo no `fluid` use o modo *foreground*:  ```shell gvim -f ```  ![Usando o gvim em modo foreground.](/til/fltk-fluid-01.webp) ","title":"Fluid + gvim"},{"id":68,"location":"/til/troca-rapida-de-usuario-no-xfce.html","tags":["xfce"],"text":"     apt install xfswitch-plugin  https://askubuntu.com/questions/79318/how-can-i-switch-users-from-within-xfce  ","title":"Troca Rápida De Usuário No Xfce"},{"id":69,"location":"/til/gerenciador-de-arquivos.html","tags":["file-manager","linux","debian","ubuntu"],"text":" O gerenciador de arquivos pode fazer muito mais do que simplesmente copiar, colar e renomear arquivos.  Você já conhece o **Nemo**, um fork do **GNOME Files**?   ## Instalando o nemo  ```shell apt install nemo ```  ## Nemo como gerenciador padrão  ```shell xdg-mime default nemo.desktop inode/directory application/x-gnome-saved-search ```  ## Criando novas funções  O arquivo [/usr/share/nemo/actions/sample.nemo_action](https://github.com/linuxmint/nemo/blob/master/files/usr/share/nemo/actions/sample.nemo_action) contém um exemplo de script para criação de comandos.  O locais padrão para os arquivos de script são:  * `/usr/share/nemo/actions/` para todos os usuários do sistema * `~/.local/share/nemo/actions/` para um usuário específico  Nota: os arquivos precisam ter a extensão `.nemo_action`.  Exemplo: `clamscan.nemo_action`  ```shell [Nemo Action] Name=Clam Scan Comment=Clam Scan Exec=gnome-terminal -x sh -c \"clamscan -r %F | less\" Icon-Name=bug-buddy Selection=Any Extensions=dir;exe;dll;zip;gz;7z;rar; ```  Exemplo: `archive.nemo_action`  ```shell [Nemo Action] Active=true Name=Archive %N Comment=Archiving %N will add .archive to the object. Exec=<archive.py %F> Selection=S Extensions=any; ```  Exemplo: `archive.py`  ```python #! /usr/bin/python2 -OOt import sys import os import shutil filename = sys.argv[0] print \"Running \" + filename print \"With the following arguments:\" for arg in sys.argv:     if filename == arg:         continue     else:         print arg         #os.rename('%s','%s.archive') % (arg,arg)         shutil.move(arg, arg+\".archive\") ```   ## Referências  * [Nemo wiki do archlinux](https://wiki.archlinux.org/index.php/Nemo)  ","title":"Gerenciador de arquivos"},{"id":70,"location":"/til/opendds.html","tags":["OpenDDS","ZeroMQ","Boost.Asio"],"text":" ## Referências  * [COMPARING OPENDDS AND ZEROMQ USAGE AND PERFORMANCE](https://objectcomputing.com/resources/publications/mnb/comparing-opendds-and-zeromq-usage-and-performance) ","title":"OpenDDS"},{"id":71,"location":"/til/bindfs.html","tags":["bash"],"text":"   ## Referências  * [Mounting filesystem with special user id set](https://askubuntu.com/questions/34066/mounting-filesystem-with-special-user-id-set)   ","title":"BindFS - visualizando filesystem com outro usuário"},{"id":72,"location":"/til/imgui.html","tags":["imgui"],"text":" ## Referências  * [Going deep with IMGUI and Editor Customization](https://blogs.unity3d.com/pt/2015/12/22/going-deep-with-imgui-and-editor-customization/) * [Range Selection / Multiple selection for TreeNode (Shift+click, Shift+arrows) #1861](https://github.com/ocornut/imgui/issues/1861)  ","title":"Imgui"},{"id":73,"location":"/til/i3.html","tags":["i3"],"text":" ## Eliminar a borda das janelas  ```shell for_window [class=\".*\"] border pixel 0 ```  Dica do [Kylinux Cast](https://www.youtube.com/watch?v=rnZm3g_rbwM)  https://gitlab.com/kylinux/dotfiles   ## Referências  * []()  ","title":"i3"},{"id":74,"location":"/til/touchpad-desabilitar-colar-com-botao-do-meio.html","tags":["touchpad"],"text":" Frequentemente tenho colado texto no editor enquanto tentava apens clicar para posicionar o cursor. Isto ocorre no notebook em que o touchpad não tem separação tátil entre os botões. É muito fácil clicar um pouco mais para a direita e acertar o botão errado.  Para desabilitar a função use:  ```shell gsettings set org.gnome.desktop.interface gtk-enable-primary-paste false ```  Para habilitar a função use:  ```shell gsettings set org.gnome.desktop.interface gtk-enable-primary-paste true ```  ## Referências  * [How do I disable middle mouse button click paste?](https://askubuntu.com/questions/4507/how-do-i-disable-middle-mouse-button-click-paste  ","title":"Desabilitar função color com botão do meio"},{"id":75,"location":"/til/ex.html","tags":["ex","vim","bash"],"text":" ```shell ex foo.txt <<-EOF   g/^\\s*$/d   %s/^/[/   %s/\\(.*\\)\\(\\s\\+\\)\\(.*\\)/\\3\\2\\1   %s/$/]/   %s/design/test/   wq \" Update changes and quit. EOF ```   * o comando `ex` é equivalente a `vim -E`. * acrescente `-V1` para saída mais verbosa   Exemplo uma linha:  ```shell ex +\"g/^\\s*$/d\" +\"%s/^/[/\" +\"%s/design/test/\" -cwq foo.txt ```  ## Referências  * [How to run a series of vim commands from command prompt](https://stackoverflow.com/questions/23235112/how-to-run-a-series-of-vim-commands-from-command-prompt)  ","title":"Editando arquivos com ex / vim"},{"id":76,"location":"/til/vim-tidy-html.html","tags":["vim"],"text":"  ```shell !tidy -mi -html -wrap 0 % ```  ```shell !tidy -mi -xml -wrap 0 % ```  ```shell gg=G ```  ## Referências  * [How do I tidy up an HTML file's indentation in VI?](https://stackoverflow.com/questions/815548/how-do-i-tidy-up-an-html-files-indentation-in-vi)  ","title":"Formatação de HTML no vim"},{"id":77,"location":"/til/javascript-error-logging.html","tags":["javascript"],"text":" ## Função de captura de erro  ```javascript window.onerror = function (msg, url, lineNo, columnNo, error) {   // msg - mensagem de erro (p.e. Uncaught ReferenceError: foot is not defined)   // url - script associado ao erro (p.e. /dist/app.js)   // lineNo - número da linha se disponível   // columnNo - número da coluna se disponível   // error - objeto de erro se disponível    // trate o erro aqui    return false; } ```  * Retornar `true` não deixa disparar o default handler * Retornar `false` deixa o default handler executar   ## Transmitindo o erro para o servidor  ```javascript function captureError(ex) {   var errorData = {     name: ex.name, // e.g. ReferenceError     message: ex.line, // e.g. x is undefined     url: document.location.href,     stack: ex.stack // stacktrace string; remember, different per-browser!   };    $.post('/logger/js/', {     data: errorData   }); } ```   ## Referências  * [Capture and report JavaScript errors with window.onerror](https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror)  ","title":"Logando erros em javascript"},{"id":78,"location":"/til/jwt.html","tags":["jwt"],"text":" FlutterCast, Entendendo o JWT (Autenticação) https://youtu.be/BCbO4iRNNsM  ","title":"JWT"},{"id":79,"location":"/til/vim-inserir-caracteres-repetidos.html","tags":["vim"],"text":" Para fazer a linha do título acima `<esc>70i=<esc><esc>`  ```vim     <esc>Nic<esc><esc> ```  N número de repetições c caractere ou palavra  ```vim <esc>5iX<esc><esc> XXXXX  <esc>5iX Y <esc><esc> X Y X Y X Y X Y X Y  ```   ","title":"Como repetir texto no vim"},{"id":80,"location":"/til/vim-executar-macro-em-todos-os-buffers.html","tags":["vim","macro"],"text":" ``` :bufdo execute \"normal @a\" | write ```  ## Referências  * [Run a macro in all buffers in vim](https://stackoverflow.com/questions/3024321/run-a-macro-in-all-buffers-in-vim) ","title":"Como executar macro em todos os buffers do Vim"},{"id":81,"location":"/til/materialize.html","tags":["css"],"text":" ## Exemplo de sites utilizando materialize  * https://www.protectamerica.com/  ## Referências  * [Make Material Design Websites with the Materialize CSS Framework](https://scotch.io/tutorials/make-material-design-websites-with-the-materialize-css-framework) * [Mastering Materialize’s grid system](https://medium.com/protect-america-design/mastering-materializes-grid-system-ffb32b2126d5)  ","title":"Materialize"},{"id":82,"location":"/til/vim-special-auto-complete.html","tags":["vim"],"text":" Do pacote UltiSnip:  ~/.vim/bundle/vim-snippets/UltiSnips/  * date -> 2018-10-27 * time -> 15:10 * datetime -> 2018-10-27 15:47 * uuid -> e348aa09-1875-4eaa-b016-edd12ad7091d * lorem -> lorem ipsum * bbox -> caixa com texto centrado com a largura de comentário * box -> cria uma caixa do tamenho do texto        ","title":"Auto completar especial no Vim"},{"id":83,"location":"/til/junit-rules.html","tags":["junit"],"text":" https://www.infoq.com/news/2009/07/junit-4.7-rules  Unit 4.7, which has just reached Release Candidate stage, includes a significant new feature: Rules.  Rules are, in essence, another extension mechanism for JUnit, which can be used to add functionality to JUnit on a per-test basis. Most examples of custom runners in earlier versions of JUnit can be replaced by Rules. As described in an earlier blog post about the feature:  In JUnit 3 you could also manipulate the test running process itself in various ways. One of the prices of the simplicity of JUnit 4 was the loss of this “meta-testing”. It doesn’t affect simple tests, but for more powerful tests it can be constraining. The object framework style of JUnit 3 lent itself to extension by default. The DSL style of JUnit 4 doesn’t. Last night we brought back meta-testing, but much cleaner and simpler than before. In addition to the capability of adding rules, a number of core rules have been added:  TemporaryFolder: Allows test to create files and folders that are guaranteed to be deleted after the test is run. This is a common need for tests that work with the filesystem and want to run in isolation. ExternalResource: A pattern for resources that need to be set up in advance and are guaranteed to be torn down after the test runs. This will be useful for tests that work with sockets, embedded servers, and the like. ErrorCollector: Allows the test to continue running after a failure and report all errors at the end of the test. Useful when a test verifies a number of independent conditions (although that may itself be a 'test smell'). ExpectedException: Allows a test to specify expected exception types and messages in the test itself. Timeout: Applies the same timeout to all tests in a class. If you'd like to see an example of a rule in action, here's a test using the TemporaryFolder and ExpectedException rules:  public class DigitalAssetManagerTest {  \t@Rule \tpublic TemporaryFolder tempFolder = new TemporaryFolder();  \t@Rule \tpublic ExpectedException exception = ExpectedException.none();  \t@Test \tpublic void countsAssets() throws IOException { \t\tFile icon = tempFolder.newFile(\"icon.webp\"); \t\tFile assets = tempFolder.newFolder(\"assets\"); \t\tcreateAssets(assets, 3);  \t\tDigitalAssetManager dam = new DigitalAssetManager(icon, assets); \t\tassertEquals(3, dam.getAssetCount()); \t}  \tprivate void createAssets(File assets, int numberOfAssets) throws IOException { \t\tfor (int index = 0; index < numberOfAssets; index++) { \t\t\tFile asset = new File(assets, String.format(\"asset-%d.mpg\", index)); \t\t\tAssert.assertTrue(\"Asset couldn't be created.\", asset.createNewFile()); \t\t} \t}  \t@Test \tpublic void throwsIllegalArgumentExceptionIfIconIsNull() { \t\texception.expect(IllegalArgumentException.class); \t\texception.expectMessage(\"Icon is null, not a file, or doesn't exist.\"); \t\tnew DigitalAssetManager(null, null); \t} } To make rule development easier, a few base classes for rules have been added:  Verifier: A base class for rules like ErrorCollector that can turn failing tests into passing ones if a verification check is failed. TestWatchman: A base class for rules that observe the running of tests without modifying the results. Rules were called Interceptors when they made their first appearance in earlier builds of JUnit 4.7. In addition to the rules, JUnit 4.7 also includes:  Some changes to the matchers. Tests that timeout now show the stack trace; this can help to diagnose the cause of the test timing out. Improvements to Javadoc and a few bugs fixed. More information on these features is available in the JUnit 4.7 release notes.  Hamcrest 1.2 support was listed in earlier release notes, but has been rolled back for this release.  While you're waiting for the final release, you can download the release candidate from github, browse org.junit.rules gear, fill out the survey, read about the deadpooling of Kent Beck's JUnit Max, and wait for user reactions to JUnit 4.7 on blogs, friendfeed and twitter.    ","title":"JUnit Rules"},{"id":84,"location":"/til/varicad-moldura.html","tags":["varicad"],"text":" ## Margens por tamanho de folha  Formato | Margem esquerda | Demais margens --------|-----------------|--------------- A0      | 25 mm           | 10 mm A1      | 25 mm           | 10 mm A2      | 25 mm           | 7 mm A3      | 25 mm           | 7 mm A4      | 25 mm           | 5 mm  ## Definindo parâmetros da moldura  1. Execute o comando `sbd` (Ferramentas/Definição dos formatos de folha)  2. Clicar em **Definir o estilo da fronteira da folha de desenho**  ![Comando sbd](/til/varicad-moldura-01.webp)  3. Em **Moldura recortada** use os valores: 0, 0, 0, 0  ![Moldura recortada](/til/varicad-moldura-02.webp)  4. Em **Moldura da grelha** use os valores: 23, 5, 5, 5  ![Moldura da grelha](/til/varicad-moldura-03.webp)  4. Em **Moldura da área de desenho** use os valores: 25, 7, 7, 7  ![Moldura da área de desenho](/til/varicad-moldura-04.webp)  5. Em **Grelha** use os valores:    * Altura do texto: 1.5   * Largura relativa à altura: 1   * Nível: Dimensions  ![Moldura da área de desenho](/til/varicad-moldura-05.webp) ","title":"Varicad - configurando moldura da página"},{"id":85,"location":"/til/junit-excecao.html","tags":["java","junit","exceção","try-catch"],"text":" Este artigo apresenta uma visão suscinta sobre testes de exceção com JUnit usando o idioma `try/fail/catch`, o parâmetro `expected` da anotação `@Test` e a anotação `@Rule`. Cada um dos métodos apresenta prós e contras.   ## Usando bloco try/catch  ```java @Test public void example1() {     try {         find(\"função que deveria lançar uma exceção\");         fail();         // Ponto que nunca deveria ser alcançado quando o teste passar     } catch (NotFoundException e) {         assertThat(e.getMessage(), containsString(\"algo que indique que a exceção certa ocorreu\"));     }     // ... Outras exceções podem ser tratadas aqui. } ```  * Vantagens:   * Ter acesso à exceção para realizar outros procedimentos   * Poder realizar outros *asserts* na mesma função   * Funciona bem de os testes forem criado antes * Desvantagens:   * Um erro comum é esquecer de incluir `fail()` como barreira causando um falso positivo   ## @Test (expected = Exception.class)  ```java public void example2() throws NotFoundException {     find(\"função que deveria lançar uma exceção\");     // Ponto que nunca deveria ser alcançado quando o teste passar } ```  * Vantagens:   * Sintaxe muito mais concisa   * Favorece a escrita de teste focados em um único ponto * Desvantagens:   * Não é possível realizar outros testes após o `find`  ## ExpectedException Rule  ```java  @Test public void example3() throws NotFoundException {     exception.expect(NotFoundException.class);     exception.expectMessage(containsString(\"algo que indique que a exceção certa ocorreu\"));     find(\"função que deveria lançar uma exceção\");     // Ponto que nunca deveria ser alcançado quando o teste passar } ```  * Vantagens:   * Mais de uma expetativa sobre a mesma exceção podem ser testadas após o teste * Desvantagens:   * Não é possível realizar outros testes após o `find`  ## Referências  * [Expecting Exceptions JUnit Rule](http://baddotrobot.com/blog/2012/03/27/expecting-exception-with-junit-rule/) ","title":"Testando exceções com junit"},{"id":86,"location":"/til/chrome-upload-nao-seguro.html","tags":[""],"text":" A partir da versão Chrome 79 (dezembro de 2019) bloqueia o *conteúdo misto* (sites que não usam HTTPS.). Não é mais possível fazer upload para site não seguro.  ## Referências  * [Como evitar conteúdo misto](https://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content) * [Chrome vai bloquear upload de conteúdo que não usa HTTPS](https://sempreupdate.com.br/chrome-vai-bloquear-upload-de-conteudo-que-nao-usa-https/) * [CSP: block-all-mixed-content](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/block-all-mixed-content) * [Upgrade-Insecure-Requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade-Insecure-Requests) * [No More Mixed Messages About HTTPS](https://security.googleblog.com/2019/10/no-more-mixed-messages-about-https_3.html)  ","title":"Tratando upload não seguro no chrome"},{"id":87,"location":"/til/documentando-projetos-com-doxygen-e-markdown.html","tags":["markdown","doxygen"],"text":" In the next release of doxygen (1.8.3) I plan to introduce a new configuration option USE_MDFILE_AS_MAINPAGE which can be used to specify a markdown page that is to be used as the main page. Then you can configure doxygen as follows:  INPUT                  = README.md other_sources USE_MDFILE_AS_MAINPAGE = README.md  ## Instalação do doxygen      apt-get install doxygen doxygen-latex doxygen-doc doxygen-gui     texlive-lang-portuguese   Doxygen não suporte bash então  https://stackoverflow.com/questions/26874238/can-doxygen-be-used-to-document-makefile-templates-and-include-mk-file-interfa  EXTENSION_MAPPING = sh=C   ## Referências  * [stackoverflow](https://stackoverflow.com/questions/13368350/use-the-readme-md-file-as-main-page-in-doxygen) ","title":"Documentando Projetos Com Doxygen E Markdown"},{"id":88,"location":"/til/xml-tinyxml2.html","tags":["xml"],"text":" ## Referências  * [TinyXML2 Tutorial](https://shilohjames.wordpress.com/2014/04/27/tinyxml2-tutorial/) ","title":"TinyXML2"},{"id":89,"location":"/til/conky.html","tags":["conky"],"text":" ::: description Conky is a free, light-weight system monitor for X, that displays any kind of information on your desktop. It can also run on Wayland, macOS, output to your console, a file, or even HTTP (oh my!).   ```shell apt install conky-all ```  ```shell # Configuração default conky -C > ~/.conkyrc ```  ## Referências  * []()   ","title":"conky"},{"id":90,"location":"/til/git-update.html","tags":["git"],"text":" How to update all branches?  ```shell git remote update # or git fetch --all  git pull --all ```  ","title":"git - update everything"},{"id":91,"location":"/til/cpp_constexpr.html","tags":["C++","constexpr"],"text":" A linguagem C++ possui o conceito de expressões constantes (p.e. `1+2`, `3*4`) que SEMPRE produzem o mesmo resultado sem nenhum efeito colateral. Se o compilador puder diretamente otimizar e embutir esta expressões no programa em tempo de compilação teremos um ganho de performance.  ```c++ #include <iostream> #define LEN 10 int len_foo() {     int i = 2;     return i; } constexpr int len_foo_constexpr() {     return 5; }  // Pode ser usado em recursão constexpr int fibonacci(const int n) {     return n == 1 || n == 2 ? 1 : fibonacci(n-1) + fibonacci(n-2); }  int main() {     char arr_1[10];                      // legal     char arr_2[LEN];                     // legal     int len = 10;     // char arr_3[len];                  // ilegal     const int len_2 = len + 1;     constexpr int len_2_constexpr = 1 + 2 + 3;     // char arr_4[len_2];                // ilegal, mas aceito por vários compiladores     // len_2 apesar de constante não é formado somente por constantes     char arr_4[len_2_constexpr];         // legal     // char arr_5[len_foo()+5];          // ilegal     char arr_6[len_foo_constexpr() + 1]; // legal     // 1, 1, 2, 3, 5, 8, 13, 21, 34, 55     std::cout << fibonacci(10) << std::endl;     return 0; } ```  ## Referências  * [Chapter 02: Language Usability Enhancements](https://itbook.xuxinkai.cn/read/modern-cpp-tutorial-en/02-usability.md)  ","title":"C++ - otimização com constexpr"},{"id":92,"location":"/til/git-odt.html","tags":["git"],"text":" Instalar as dependências:  ```shell apt install odt2txt ```  Acrescentar o mapeamento das extensões no `.gitattributes` que serão conhecidas por `odf`:  ``` *.ods diff=odf *.odt diff=odf *.odp diff=odf  *.ods difftool=odf *.odt difftool=odf *.odp difftool=odf ```  Definir qual ferramenta será usada para conversão de texto para o tipo `odf`.  ```shell git config diff.odf.textconv odt2txt ```  ## Referências  * [How to diff .odt files with difftool? kdiff3 diff outputs unreadable characters](https://stackoverflow.com/questions/33448260/how-to-diff-odt-files-with-difftool-kdiff3-diff-outputs-unreadable-characters)   ","title":"git diff para odt"},{"id":93,"location":"/til/varicad-legenda.html","tags":["varicad"],"text":" ## Definindo arquivos de legenda  1. Execute o comando `atm` (Objetos/Atributos e legendas/Lista de materiais e configuração de legenda)  ![Comando atm](/til/varicad-legenda-01.webp)  2. Clique no botão **Legendas**  ![Clicar no botão legendas](/til/varicad-legenda-02.webp)  3. Clicar na legenda e depois em **modificar legenda**  ![Legendas padrão](/til/varicad-legenda-03.webp)  4. Configurar a legenda  ![Configuração para parte](/til/varicad-legenda-04.webp)    * Dx = `-7`   * Dy =  `7`   * Arquivo = `IntMainPart.dwb`   * [x] Para peças  ![Configuração para montagem](/til/varicad-legenda-05.webp)    * Dx = `-7`   * Dy =  `7`   * Arquivo = `IntMainAssembly.dwb`   * [x] Para montagens  ![Deslocamento a partir do canto inferior direito](/til/varicad-legenda-09.webp)  ## Formato dos arquivos de legenda  ![Legenda para componente fabricado](/til/varicad-legenda-06.webp)  ![Legenda para montagem](/til/varicad-legenda-07.webp)  ![Legenda para componente comprado](/til/varicad-legenda-08.webp)   ## Posicionamento dos campos  1. Execute o comando `atm` (Objetos/Atributos e legendas/Lista de materiais e configuração de legenda)  ![Campos marcados para aparecer na legenda](/til/varicad-legenda-10.webp)  Clique em cada um dos itens marcados para aparecer na legenda e depois escolha **Editar atributo**  ![Edição de atributos](/til/varicad-legenda-11.webp)  ![Formato de texto padrão](/til/varicad-legenda-12.webp)  ### Tabela de posicionamento  Campo          | Dx   | Dy ---------------|------|---- name           | -113 | 9 date           |  -19 | 17 weight         |  -19 | 25 material       | -113 | 25 dwg no.        |  -19 | 9 assembly no.   |  -19 | 9 scale          | x    | y drawing format | x    | y designer       | x    | y checker        | x    | y approver       | x    | y drafter        | x    | y revision       | x    | y  ## Referências  * NP 48:1968 Norma portuguesa: Tamanho de folhas * NP 204:1968 Norma portuguesa * ISO 7200:1984 Norma ISO  ","title":"Varicad - configurando arquivos de legenda"},{"id":94,"location":"/til/packt.html","tags":["packtpub"],"text":" ## Crie uma conta  ## Instale o python3  ```shell apt update apt install python3-venv python3-pip ```  ## Instale cliente packt  ```shell pip3 install packt --upgrade ```  ## Referências  * [Packt Publishing Free Learning](https://github.com/luk6xff/Packt-Publishing-Free-Learning)  ","title":"Baixando livros gratuitos da PacktPub"},{"id":95,"location":"/til/certbot-hooks.html","tags":["certbot","hooks","letsencrypt"],"text":" ## Exemplo  Exemplos retirados de [How to Install and Secure the Mosquitto MQTT Messaging Broker on Debian 8](https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-the-mosquitto-mqtt-messaging-broker-on-debian-8).  O certbot utiliza as portas 80 (HTTP) e 443 (HTTPS).  Vamos usar apenas a porta 80.  ```shell {linenos=false} sudo ufw allow http ```  ```shell {linenos=false} sudo certbot certonly --standalone --standalone-supported-challenges http-01 -d mqtt.example.com ```  ```shell {linenos=false} crontab -e ```  ```shell {linenos=false} 15 3 * * * certbot renew --noninteractive --post-hook \"systemctl restart mosquitto\" ```  ## Opções  ### `--pre-hook PRE_HOOK`  Comando a ser executado antes de obter um certificado. Se existirem vários hooks iguais somente um será executado.  * Parar um servidor.  ### `--post-hook POST_HOOK`  Comando a ser executado depois da tentativa de obter ou renovar o certificado. Se existirem vários hooks iguais somente um será executado.  * Reiniciar/iniciar um servidor  ### `--deploy-hook DEPLOY_HOOK`  Comando a ser executado uma vez para cada certificado emitido. São passados as seguintes variáveis para o shell:  * `RENEWED_LINEAGE` contendo o caminho certificado (p.e. `/etc/letsencrypt/live/geraldo.dev`) que contém a chaves e o certificado. * `RENEWED_DOMAINS` contem uma lista separada por espaço dos certificados renovados (p.e. `geraldo.dev www.geraldo.dev`)  ### `--disable-hook-validation`  > Manual: Ordinarily the commands specified for --pre- hook/--post-hook/--deploy-hook will be checked for validity, to see if the programs being run are in the $PATH, so that mistakes can be caught early, even when the hooks aren't being run just yet. The validation is rather simplistic and fails if you use more advanced shell constructs, so you can use this switch to disable it. (default: False)  ### `--no-directory-hooks`  > Manual: Disable running executables found in Certbot's hook directories during renewal. (default: False)  ## Referências  * [How to Install and Secure the Mosquitto MQTT Messaging Broker on Debian 8](https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-the-mosquitto-mqtt-messaging-broker-on-debian-8)  ","title":"Certbot Hooks"},{"id":96,"location":"/til/lgpd.html","tags":["lgpd"],"text":" ## Referências  * [Você está pronto para a LGPD? 5 medidas práticas](https://youtu.be/eTNwBGaOd0g) * [Como a LGPD vai afetar o relacionamento da minha empresa com leads e clientes](https://youtu.be/6lwrlO5QPzw) ","title":"LGPD - Lei Geral de Proteção de Dados"},{"id":97,"location":"/til/escolhendo-versoes-dos-pacotes-no-debian-e-ubuntu.html","tags":["sysadmin","linux","debian","ubuntu","hugo","apt"],"text":" ## Parte 1 - Regra geral  Antes de começar a escolher versões vamos estabelecer que todos os pacotes usarão a versão `stable` por padrão.  No arquivo `/etc/apt/preferences` (que deve estar vazio inicialmente) acrescente as seguintes linhas:  ```shell # Arquivo: /etc/apt/preferences  # Todos os pacotes vem do stable por padrão Package: * Pin: release a=stable Pin-Priority: 1001  Package: * Pin: release a=testing Pin-Priority: 650  Package: * Pin: release a=unstable Pin-Priority: 600 ```  O valor acima de 1000 vai forçar os pacotes que foram instalados na mão usando outras versões a voltarem para o `stable`.  Agora que já definimos uma REGRA GERAL podemos começar a definir as exceções à regra.  ## Parte 2 - Exceções à regra geral  ### Por target  Para exemplo vamos escolher o pacote `hugo` para este post. Você pode usar este mesmo procedimento para qualquer pacote.  Se você acessar https://packages.debian.org/search?keywords=hugo encontrará as seguintes versões:  * stable 0.18.1 * testing 0.55.6 * unstable 0.55.6  ::: tip Crie um arquivo dentro do diretório `/etc/apt/preferences.d/` com o nome do pacote que você quer especificar a versão. Pode ser qualquer nome aqui, mas usando o nome do pacote fica mais fácil de manter o sistema.   ```shell # /etc/apt/preferences.d/hugo Package: hugo Pin: release a=testing Pin-Priority: 1002 ```  Observe que a prioridade precisa ser maior que a prioridade da regra padrão para funcionar.  ### Por origem  Ao instalar o pacote `nodejs` a versão `4.8` será instalada pois é a mais recente que está no repositório padrão.  ```shell apt install nodejs ... Obter:1 http://ftp.br.debian.org/debian stretch/main amd64 nodejs amd64 4.8.2~dfsg-1 [3.440 kB] ... ```  Para pegar a versão mais rescente do `nodejs` diretamente do `deb.nodesource.com` em vez do repositório padrão do Debian use:  ```shell # /etc/apt/preferences.d/nodejs Package: * Pin: origin deb.nodesource.com Pin-Priority: 1001 ```  Então basta executar o comando de instalação novamente para que o pacote seja atualizado para a versão `12`.  ```shell apt update apt install nodejs ... Obter:1 https://deb.nodesource.com/node_12.x stretch/main amd64 nodejs amd64 12.6.0-1nodesource1 [16,9 MB] ... ```  ## Parte 3 - Upgrade/Downgrade  Agora que todas as nossas regras já estão definida basta atualizar que os pacotes vão para a versões escolhidas.  ```shell apt-get update apt-get upgrade apt-get dist-upgrade ```  Note que alguns pacotes podem sofrer downgrade nesta atualização.  Só para conferir que a versão escolhida foi realmente instalada:  ```text $ dpkg -l | grep hugo ii  hugo 0.55.6+really0.54.0-1 amd64 Fast and flexible Static Site Generator written in Go ```  ## Entendendo os valores das prioridades  ### P > 1000  Instala mesmo que precise baixar a versão de algum pacote já instalado. Somente prioridades acima de 1000 permitem downgrade.  ### 990 < P <= 1000  Instala somente se uma versão maior estiver disponível no **target release** (Ver variáel APT::Default-Release para detalhes). Não permite downgrade de pacote instalado.  ### 500 < P <= 990  Instala somente se uma versão maior estiver disponível no **target release** (Ver variáel APT::Default-Release para detalhes).  ### 100 < P <= 500  Utilizado como predefinição para os arquivos NotAutomatic e ButAutomaticUpgrades  Instala a menos que exista uma versão disponível em outra distribuição ou se a versão instalada for mais recente.  > causes a version to be installed unless there is a version available > belonging to some other distribution or the installed version is more recent  ### 0 < P <= 100  Instala somente se não possuir versão instalada do pacote.  ### P == 1  Valor padrão para NotAutomatic  ### P < 0  Nunca instala o pacote mesmo que o pacote seja recomendado.  ","title":"Escolhendo versões dos pacotes no Debian/Ubuntu"},{"id":98,"location":"/til/network_ip.html","tags":["network","ip","route"],"text":" ## Route  ```shell $ ip route default via 192.168.15.1 dev wlp3s0 proto dhcp metric 600   10.181.29.0/24   dev lxdbr0  proto kernel scope link src 10.181.29.1   linkdown  172.17.0.0/16    dev docker0 proto kernel scope link src 172.17.0.1    linkdown  192.168.15.0/24  dev wlp3s0  proto kernel scope link src 192.168.15.19 metric 600  192.168.122.0/24 dev virbr0  proto kernel scope link src 192.168.122.1 linkdown  DESTINATION     |INTERFACE  |PROTOCOL    |          |SOURCE           | ```  After launching 5 lxc containers we can realize that each one use an specific virtual interface.  ```shell $ ip route default dev vethb1efb2e9 scope link  default via 192.168.15.1 dev wlp3s0 proto dhcp metric 600  10.181.29.0/24   dev lxdbr0 proto kernel scope link src 10.181.29.1  169.254.0.0/16   dev vethb1efb2e9 proto kernel scope link src 169.254.249.217  169.254.0.0/16   dev vetha30d7f12 proto kernel scope link src 169.254.153.8  169.254.0.0/16   dev veth21ef1dfb proto kernel scope link src 169.254.28.175  169.254.0.0/16   dev vethcfed8118 proto kernel scope link src 169.254.129.246  169.254.0.0/16   dev vethdf8caaa2 proto kernel scope link src 169.254.206.4  172.17.0.0/16    dev docker0      proto kernel scope link src 172.17.0.1 linkdown  192.168.15.0/24  dev wlp3s0       proto kernel scope link src 192.168.15.19 metric 600  192.168.122.0/24 dev virbr0       proto kernel scope link src 192.168.122.1 linkdown ```  After reconfiguring lxc bridge `lxdbr0` to use the address `10.11.12.254` we get and inconsistent routing table.  ```shell $ ip route  default dev veth36479aca scope link  default via 192.168.15.1 dev wlp3s0 proto dhcp metric 600  10.11.12.0/24    dev lxdbr0 proto kernel scope link src 10.11.12.254  169.254.0.0/16   dev veth36479aca proto kernel scope link src 169.254.129.244  169.254.0.0/16   dev veth53f1f182 proto kernel scope link src 169.254.80.31  169.254.0.0/16   dev vethe35f1309 proto kernel scope link src 169.254.67.125  169.254.0.0/16   dev veth252db3c5 proto kernel scope link src 169.254.17.212  169.254.0.0/16   dev vethd2deb052 proto kernel scope link src 169.254.199.118  172.17.0.0/16    dev docker0      proto kernel scope link src 172.17.0.1 linkdown  192.168.15.0/24  dev wlp3s0       proto kernel scope link src 192.168.15.19 metric 600  192.168.122.0/24 dev virbr0       proto kernel scope link src 192.168.122.1 linkdown  ```  Another problem is the default gateway was replaced by a virtual interface and my host can't resolve any internet address. To solve this issue I set the correct gateway again.  ```shell ip route del default route add default gw 192.168.15.1 dev wlp3s0 ```  Then setting the containers to use the bridge  ```shell $ ip route default via 192.168.15.1 dev wlp3s0  default via 192.168.15.1 dev wlp3s0 proto dhcp metric 600  10.11.12.0/24 dev lxdbr0 proto kernel scope link src 10.11.12.254  172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown  192.168.15.0/24 dev wlp3s0 proto kernel scope link src 192.168.15.19 metric 600  192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 linkdown  ```  ## References  * [Route Specific Subnet to a Particular Interface](https://www.baeldung.com/linux/destination-source-routing) ","title":"The network ip command"},{"id":99,"location":"/til/cpp_mlpack-feed-forward-neural-network-no-debian.html","tags":["ffn","neural-network","mlpack","debian","linux","apt","C++","cpp","armadillo"],"text":" Este artigo mostra como criar uma rede neural simples no  [Debian stable](https://www.debian.org/releases/stable/) utilizando a [mlpack](http://www.mlpack.org). A `mlpack` é uma biblioteca popular e de alta performance para aprendizado de máquina em C++.  ## Versões do mlpack disponíveis do Debian  As versões disponíveis no momento da escrita deste artigo são:  | Versão do Debian   | Versão do mlpack | Arquiteturas | |:------------------:|:----------------:|--------------| | jessie (oldstable) | 1.0.10-1         | amd64 armel armhf i386 | | stretch (stable)   | 2.1.1-1          | amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x | | buster (testing)   | 3.0.4-1          | amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x | | sid (unstable)     | 3.0.4-1+b1       | kfreebsd-amd64 kfreebsd-i386 |  As versões do `libmlpack-dev` disponíveis para o [Debian](http://debian.org) podem ser consultadas neste [link](https://packages.debian.org/search?keywords=libmlpack-dev&searchon=names&suite=all&section=all).  Neste artigo usaremos a versão `3.0.4` presente no `testing`.  ## Utilizando pacotes testing junto com stable  Eu prefiro utilizar somente os pacotes `stable` nos servidores por serem versões muito bem testadas. Normalmente as últimas versões não estão disponíveis no repositório `stable`, mas sim nos repositórios `testing` e `unstable`. O repositório `testing` contém próximo candidato a se tornar `stable` de cada pacote. O repositório `unstable` contém a última versão disponível de cada pacote.  Misturar repositórios diferente pode ser algo tranquilo de manter se feito com cuidado. É só indicar **precisamente** qual pacote deve ser pego de cada repositório. O Debian tem um mecanismo bem fácil de usar para realizar esta tarefa. No meu caso eu tenho uma regra geral: **pegar sempre do stable** e algumas poucas exceções para pacotes específicos.  Para mesclar diferentes repositórios basta *pinar* os pacotes para indicar quais versões serão usadas.  Para marcar o `mlpack` e o `armadillo` para serem instalados a partir do `testing` crie um arquivo chamado `/etc/apt/preferences.d/mlpack` com o seguinte conteúdo:  ```text Package: *mlpack* Pin: release a=testing Pin-Priority: 1002  Package: *armadillo* Pin: release a=testing Pin-Priority: 1002 ```  O arquivo `/etc/apt/preferences.d/mlpack` poderia ter qualquer nome, mas é conveniente usar algo descritivo.  E para desfazer a pinagem basta remover o arquivo.  Então é só proceder a instalação normal com o `apt` como de costume:  ```shell apt install libmlpack-dev ```  ## Dados de treinamento  Vamos utilizar dois grupos de dados, cada um com duas variáveis (x e y).  Olhando nosso conjunto de dados de cima podemos ver claramente duas curvas, uma para cada conjunto.  ![Grupo de dados de treinamento](/til/mlpack-foo-1.gif)  Para facilitar a visualização, o primeiro grupo está em *z=0* e o segundo em *z=1*, conforme pode ser visto na animação abaixo. É mais ou menos isso que a rede deverá *aprender*.  ![Grupo de dados de treinamento](/til/mlpack-foo-2.gif)  O arquivo `foo.csv` contém as duas curvas com os pontos distribuídos do modo aleatório para não favorecer ou influenciar o treinamento. São ao todo 400 linhas e 3 colunas. As duas primeiras colunas são as **entradas** e a terceira é o **grupo** a qual pertencem.  ```csv -1.336471627143056118e+00,3.770125142464317847e+00,0.000000000000000000e+00 1.804415958408375431e+00,2.999013679368799146e+00,1.000000000000000000e+00 1.401588838630331679e+00,3.746404773569839364e+00,0.000000000000000000e+00 9.741670427761830453e-01,3.361695788254598583e+00,1.000000000000000000e+00 -2.602637515616321284e+00,2.340144859256901189e+00,1.000000000000000000e+00 ... ```  ## Implementação   ### Carregando as dependências  Incluindo os cabeçalhos específicos para rede neural artificial (ANN).  ```c++ #include <mlpack/core.hpp> #include <mlpack/methods/ann/ffn.hpp> #include <mlpack/methods/ann/layer/layer.hpp> #include <mlpack/methods/ann/loss_functions/mean_squared_error.hpp> ```  Para deixar o código bem mais legível alguns namespaces serão usados por padrão.  ```c++ using namespace mlpack; using namespace mlpack::ann; using namespace mlpack::optimization; using namespace arma; using namespace std; using mlpack::data::Load; using mlpack::data::Save; ```  ### Carregar e transpor os dados do arquivo CSV  As matrizes do [Armadillo](http://arma.sourceforge.net/) (pacote de álgebra linear do mlpack) são armazenada no formato `column-major`; isto significa que no disco cada coluna é localizada numa região contígua de memória. Veja [detalhes](https://www.mlpack.org/doc/mlpack-3.1.0/doxygen/matrices.html) na documentação do `mlpack`.  Esta é uma conveniência bem interessante, pois para escrever os arquivos os registros são entrados por linha e para processamento são tratados em colunas.  Então além de carregar é preciso transpor a matriz de dados.  ```c++   // lança uma exceção std::runtime_error se não conseguir carregar. default false   const auto THROW_EXCEPTION = true;   // transpôe a matriz depois de carregar. default true   const auto TRANSPOSE_INPUT = true;   Load( \"foo.csv\", data, THROW_EXCEPTION, TRANSPOSE_INPUT );   cout << \"Linhas:  \" << data.n_rows << endl; // 3   cout << \"Colunas: \" << data.n_cols << endl; // 400 ```  A matriz de dados foi carregada e precisa ser dividida entre dados de treinamento e dados de teste.  ![Dados depois de carregados](/til/mlpack-data.svg#center)  É muito importante que o modelo nunca veja os dados de teste para que se tenha uma boa generalização.  ### Constantes para os índices  Para facilitar a leitura do fonte e evitar *números mágicos* no código defini algumas constantes convenientes:  ```c++   const auto VAR1_ROW  = 0;   const auto VAR2_ROW  = 1;   const auto LABEL_ROW = 2;   const auto FIRST_COL = 0;   const auto LAST_COL  = data.n_cols - 1;   const auto TEST_SIZE = 10; ```  Note que neste caso serão usadas 10 amostras para teste.  ### Dados de entrada para treinamento  Usando a função `submat` vamos recortar uma porção dos dados para formar os dados de entrada para treinamento.  ```c++   auto firtsRow  = VAR1_ROW;   auto firtsCol  = FIRST_COL;   auto lastRow   = VAR2_ROW;   auto lastCol   = LAST_COL - TEST_SIZE;   mat  traindata = data.submat( firtsRow, firtsCol, lastRow, lastCol ); ```  ### Dados de saída para treinamento  Usando a função `submat` vamos recortar uma porção dos dados para formar os dados de saída para treinamento.  ```c++   firtsRow        = LABEL_ROW;   lastRow         = LABEL_ROW;   mat trainlabels = data.submat( firtsRow, firtsCol, lastRow, lastCol ); ```  ### Dados de entrada para teste  Usando a função `submat` vamos recortar uma porção dos dados para formar os dados de entrada para teste.  ```c++   firtsRow     = VAR1_ROW;   lastRow      = VAR2_ROW;   firtsCol     = LAST_COL - TEST_SIZE + 1;   lastCol      = LAST_COL;   mat testdata = data.submat( firtsRow, firtsCol, lastRow, lastCol ); ```  ### Dados de saída para teste  Usando a função `submat` vamos recortar uma porção dos dados para formar os dados de saída para teste.  ```c++   firtsRow       = LABEL_ROW;   lastRow        = LABEL_ROW;   mat testlabels = data.submat( firtsRow, firtsCol, lastRow, lastCol ); ```  ### Visualizando os dados de teste  ```c++   cout << \"Dados de entrada para teste: \\n\" << testdata << endl;   cout << \"Dados de saída para teste: \\n\" << testlabels << endl; ```  É importante notar que os dados de teste contém amostras de ambos os grupos e estão distribuídos em todo o espaço de amostra.  ``` Dados de entrada para teste:    0.7482   2.5516   2.1925  -1.3355   0.0608   0.6829  -2.6796  -0.6668  -2.9646  -2.8399    3.9294   2.3957   2.7282   3.7705   3.9995   3.4327   2.2516   3.9440   1.8603   2.0458  Dados de saída para teste:    0        1.0000   1.0000   0        0        1.0000   1.0000   0        1.0000   1.0000 ```  ### Construindo a rede neural  ![img](/til/mlpack-ffn.svg#center)  ```c++   // Feed Forward Network   // FFN<tipo-de-saída-das-camadas, regra-de-inicialização> model;   FFN<MeanSquaredError<>, RandomInitialization> model;   // Adiciona camada com 2 entradas e 8 saídas   model.Add<Linear<>>( traindata.n_rows, 8 );   model.Add<SigmoidLayer<>>();   // Adiciona camada com 8 entradas e 8 saídas   model.Add<Linear<>>( 8, 8 );   model.Add<SigmoidLayer<>>();   // Adiciona camada com 8 entradas e 1 saída   model.Add<Linear<>>( 8, 1 );   model.Add<SigmoidLayer<>>(); ```  ### Treinamento  A partir da inicialização aleatória dos pesos da conexões inicia-se o treinamento.  ```c++   for( int i = 0; i < 4; ++i ) {     model.Train( traindata, trainlabels );     // Acompanha o erro do modelo     mat assignments;     model.Predict( testdata, assignments );     // Diferença entre o obtido e o esperado     mat diff = assignments - testlabels;     cout << \"Erro: \" << diff * diff.t();   } ```  Note o erro sendo reduzido a cada treinamento.  ``` Erro:    0.0292 Erro:    0.0058 Erro:    0.0038 Erro:    0.0024 ```   ### Testando o modelo ajustado  ```c++   mat assignments;   model.Predict( testdata, assignments );   cout << \"Previsões:\\n\" << assignments << endl;   cout << \"Classificação correta:\\n\" << testlabels << endl; ```  Saída:  ``` Previsões:    0.0074   0.9985   0.9918   0.0097   0.0057   0.9853   0.9998   0.0107   1.0000   1.0000  Classificação correta:    0        1.0000   1.0000   0        0        1.0000   1.0000   0        1.0000   1.0000 ```  ### Salvando modelo para continuar depois  O modelo pode ser salvo a qualquer momento e recarregado para continuar o treinamento. Um arquivo `XML` serializado pelo `boost` é salvo.  ```c++   Save( \"model.xml\", \"model\", model, false ); ```  ### Carregando o modelo salvo na sessão anterior  ```c++   Load( \"model.xml\", \"model\", model ); ```  ### Nova sessão de treinamento para refinar  ```c++   for( int i = 0; i < 4; ++i ) {     model.Train( traindata, trainlabels );   } ```  ### Novos testes  ```c++   model.Predict( testdata, assignments );   cout << \"Previsões:\\n\" << assignments << endl;   cout << \"Classificação correta:\\n\" << testlabels << endl; ```  Saída:  ``` Previsões:    0.0045   0.9996   0.9893   0.0010   0.0049   0.9942   1.0000   0.0076   1.0000   1.0000  Classificação correta:    0        1.0000   1.0000   0        0        1.0000   1.0000   0        1.0000   1.0000 ```  ### Salvando o modelo atualizado  ```c++   Save( \"model2.xml\", \"model\", model, false ); ```  ## Código fonte completo  O código fonte completo pode ser encontrado no [github](https://github.com/geraldolsribeiro/mlpack-tutorials/tree/master/ffn).  Para baixar e compilar o fonte deste artigo utilize:  ```shell git clone https://github.com/geraldolsribeiro/mlpack-tutorials/ cd mlpack-tutorials/ffn make ```  ## Referências  * [Apt Preferences](https://wiki.debian.org/AptPreferences) * [Neural Network Tutorial](https://www.mlpack.org/doc/mlpack-3.1.0/doxygen/anntutorial.html)  ","title":"Feed Forward Neural Network no Debian com mlpack"},{"id":100,"location":"/til/vim-clipboard.html","tags":["vim"],"text":" Registros:  * `+`: geralmente é a área de transferência do desktop `XA_SECONDARY` (`:help quoteplus`) e é acessada pelo Ctrl+C/Ctrl+V/Ctrl+X * `*`: geralmente é a área de transferência primária do X11 `XA_PRIMARY` (`:help quotestar`), acessada pelo está selecionado pelo mouse  ## Copiar o buffer todo para a área de transferência  ``` :%y           \" copia o buffer todo para uso no vim :%y+          \" copia o buffer todo para uso em qualquer aplicação externa gg\"+yG gg\"*yG ```  ## Vincular as áreas de transferência do vim com a do sistema  ```vim set clipboard=unnamedplus ```  ## Referências  * [How do i select all text in Vi/Vim?](https://superuser.com/questions/227385/how-do-i-select-all-text-in-vi-vim)  ","title":"VIM - Área de transferência"},{"id":101,"location":"/til/java-12-no-debian-buster.html","tags":["java","debian","linux"],"text":" Adicionar repositório.  ```shell cat <<EOF > /etc/apt/sources.list.d/java-12-debian.list deb http://ppa.launchpad.net/linuxuprising/java/ubuntu bionic main deb-src http://ppa.launchpad.net/linuxuprising/java/ubuntu bionic main EOF ```  ```shell apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EA8CACC073C3DB2A apt-get update apt-get install oracle-java12-installer ```  ## Referências  * [How to Install Java 12 on Debian 10/9/8 via PPA](https://tecadmin.net/install-java-non-tls-on-debian/) ","title":"Java 12 no Debian Buster"},{"id":102,"location":"/til/micro.html","tags":["micro","text-editor"],"text":" ```shell apt install micro ```  ## Referências  * [GentooBer #041 : Micro, tipo o VIM mas que vc consegue fechar](https://www.youtube.com/watch?v=KO4kSDHchfo)  ","title":"micro text editor"},{"id":103,"location":"/til/dtd.html","tags":["xml","dtd"],"text":" ## O DTD pode estar em um arquivo externo  Example howto.html  ```html <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>  <!DOCTYPE howto SYSTEM \"howto.dtd\">  <howto>    <topic>        <title>Java</title>        <url>http://www.rgagnon.com/topics/java-xml.html</url>    </topic>      <topic>        <title>PowerBuilder</title>        <url>http://www.rgagnon.com/topics/pb-powerscript.htm</url>    </topic>    <topic>          <title>Javascript</title>          <url>http://www.rgagnon.com/topics/js-language.html</url>    </topic>    <topic>          <title>VBScript</title>          <url>http://www.rgagnon.com/topics/wsh-vbs.html</url>    </topic>  </howto> ```  Example howto.dtd  ```dtd  <!ELEMENT howto (topic*)>  <!ELEMENT topic (title,url)>  <!ELEMENT title (#PCDATA)>  <!ELEMENT url (#PCDATA)> ```  ## O DTD pode estar dentro do XML  ```xml  <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>  <!DOCTYPE howto [    <!ELEMENT howto (topic*)>    <!ELEMENT topic (title,url)>    <!ELEMENT title (#PCDATA)>    <!ELEMENT url (#PCDATA)>    ]>  <howto>    <topic>        <title>Java</title>        <url>http://www.rgagnon.com/topics/java-xml.html</url>    </topic>  ...  </howto> ```  ## Referências  * [Validate XML using a DTD](https://www.rgagnon.com/javadetails/java-0668.html)  ","title":"Como validar documentos XML usando DTD"},{"id":104,"location":"/til/varicad-importando-do-solidworks.html","tags":["varicad","step","cadexchanger","debian","linux"],"text":" Extrai o conversor cadexchanger  ```shell cd /tmp/work unzip cadexchanger_3.7.1_build12316_lin64.zip ```  Renomeia a extensão dos arquivos do SolidWorks para minúscula pois o cadexchanger não reconhece.  ```shell sudo apt-install rename cd /tmp/work rename \"s/SLDPRT/sldprt/\" * rename \"s/SLDPRT/sldprt/\" * rename \"s/SLDDRW/slddrw/\" * ```  ```shell /tmp/work/cadexchanger_3.7.1_build12316_lin64/bin/ExchangerGui.sh ```    ## Diretórios criados  * `~/.cache/CADEX/` * `~/.cache/mesa_shader_cache` * `~/.cache/qtshadercache` * `~/.config/CAD Exchanger` * `~/.local/share/CAD Exchanger`  ![Converter para step](/til/varicad-convert-step-via-cad-exchanger.webp)  ## Referências  * []()  ","title":"Importando arquivos do SolidWorks para o VariCAD"},{"id":105,"location":"/til/noip.html","tags":["noip"],"text":" ```shell curl \\   -u myuser@email.com:mypassword \\   \"http://dynupdate.no-ip.com/nic/update?hostname=myhost.x.y\" ```  ","title":"How to update no-ip by using the command line?"},{"id":106,"location":"/til/cpp_array.html","tags":["C++","std::array","Algorítimos"],"text":" Exemplos de uso de std::array  ## Características  * é um wrapper para o array do C * array oferece uma sintaxe mais amigável comparada com a array do C * pode ser passado e retornado por valor * pode ser passado e retornado por referência * uso mais conveniente de `size` * uso mais conveniente de iteradores STL * possui exatamente a mesma performace da array do C  ## Array vs Vector  * `array` é estático e possui tamanho definido em tempo de compilação * `vector` é dinâmico e é alocado no `heap`  ## Exemplos  ```c++ #include <algorithm> #include <array> #include <iostream>  using namespace std;  // Multidimensionais template <class T, size_t ROW, size_t COL> using Matrix = std::array<std::array<T, COL>, ROW>;  template <class T, size_t I, size_t... J> struct MultiDimArray {   using Nested = typename MultiDimArray<T, J...>::type;   using type   = std::array<Nested, I>; };  template <class T, size_t I> struct MultiDimArray<T, I> {   using type = std::array<T, I>; };  int main( int argc, char **argv ) {   auto print = []( const auto &arr ) {     cout << \"{ \";     for( const auto &x : arr ) {       cout << x << \" \";     }     cout << \"}\" << endl;   };    array<int, 3> a    = {2, 1, 3};   int           c[3] = {2, 1, 3}; // old C style    sort( a.begin(), a.end() );   print( a ); // { 1, 2, 3 }    sort( begin( c ), end( c ) ); // c == { 1, 2, 3 }   print( c );    for( auto &x : a ) {     x *= 2;   }   print( a ); // { 2, 4, 6 }    for( auto &x : c ) {     x *= 2;   }   print( c ); // { 2, 4, 6 }    array<array<int, 3>, 3> arr = {{{5, 8, 2}, {8, 3, 1}, {5, 3, 9}}};   cout << arr[2][2] << endl; // 9    Matrix<float, 3, 4> mat;   mat[1][2] = 5;    MultiDimArray<int, 2, 3, 4, 5>::type multi;   multi[1][1][1][1] = 5;    return 0; } ```  ## Referências  * [Multi-dimensional arrays in C++11](http://cpptruths.blogspot.com/2011/10/multi-dimensional-arrays-in-c11.html) ","title":"C++ array"},{"id":107,"location":"/til/pencil.html","tags":["pencil"],"text":" ## Referências  * [Introdução à criação de wireframes com o Pencil](https://libredesigners.org/pt-br/blog/post/introducao-criacao-de-wireframes-com-o-pencil) ","title":"Pencil - wireframe"},{"id":108,"location":"/til/git-dicas.html","tags":["git"],"text":" ## Diferença entre dois branches -- somente nomes de arquivos  ```shell git diff --name-only branch-1 branch-2 ```  Status:  * `M` arquivos modificados * `A` arquivos adicionados * `D` arquivos removidos  Filtrando por estes códigos de status temos as próximas dicas.  ## Listar somente os arquivos modificados entre dois branches  ```shell git diff --name-status branch-1 branch-2 | sed -n \"s/^M\\s\\+//p\" ```  * filtra somente as linhas que começam com `M` de modificado.   ## Listar somente os arquivos adicionados entre dois branches  ```shell git diff --name-status branch-1 branch-2 | sed -n \"s/^A\\s\\+//p\" ```  * filtra somente as linhas que começam com `A` de adicionado   ## Listar somente os arquivos removidos entre dois branches  ```shell git diff --name-status branch-1 branch-2 | sed -n \"s/^D\\s\\+//p\" ```  * filtra somente as linhas que começam com `D` de deletados    ## Referências  * [Git - Getting a list of files changed between branches](http://sushihangover.github.io/git-getting-a-list-of-files-changed-between-branches/)  ","title":"git - dicas"},{"id":109,"location":"/til/escolher-o-terminal-padrao.html","tags":["term","linux","debian"],"text":" ```shell update-alternatives --config x-terminal-emulator ```  ## Referências  * []()  ","title":"Como escolher o terminal padrão"},{"id":110,"location":"/til/docker-exportar-imagem.html","tags":["docker"],"text":" ```shell docker export nome-da-imagem > arquivo.tar ```  ```shell docker export --output=\"arquivo.tar\" nome-da-image ```  {{% note %}} Exte comando não salva o conteúdo dos volumes. {{% /note %}}  ## Referências  * [docker export](https://docs.docker.com/engine/reference/commandline/export/)  ","title":"Docker - exportar imagem"},{"id":111,"location":"/til/kali.html","tags":["kali","linux"],"text":" * [27 FERRAMENTAS PARA HACKERS QUE PODEM SER USADAS NO KALI LINUX (PARTE 1)](https://e-tinet.com/linux/27-ferramentas-hackers-kali-linux-parte-1/) * [30 FERRAMENTAS PARA HACKERS QUE PODEM SER USADAS NO KALI LINUX (PARTE 2)](https://e-tinet.com/linux/30-ferramentas-para-hackers-kali-linux/) ","title":"Kali linux"},{"id":112,"location":"/til/xml.html","tags":["xml"],"text":" ## DTD  ### Símbolos  * `?` zero ou um * `+` um ou mais * `*` zero ou mais * `|` ou * ',' e  ### Tipos de dados  * `PCDATA` Parsed Character Data - texto que pode conter marcações * `CDATA` Character Data - texto que não será analisado pelo parser * `Enumerated` lista de valores possíveis, dos quais somente um deve ser escolhido * `ID` um nome único no documento * `IDREF` referência a um nome único no documento * `IDREFS` múltiplos id separados por espaço * `ENTITY` nome de uma entidade * `ENTITIES` múltiplas entidades separadas por espaço * `NMTOKEN` um nome XML * `NMTOKENS` múltiplos nomes de XML separados por espaço * `NOTATION` nome de uma notação  * `#REQUIRED` obrigatório * `#IMPLIED` opcional * `#FIXED` valor padrão não alterável  ## Referências  * [SCA Training for Developers and Testers - Day 4: Developing Application XML Configuration Files](http://web.cse.msstate.edu/~hamilton/SDR/SCA_Training_-_Day_4_Application_XML_Files.pdf)  ","title":"XML"},{"id":113,"location":"/til/meilisearch.html","tags":["search"],"text":" * Search as-you-type experience (answers < 50 milliseconds) * Full-text search * Typo tolerant (understands typos and miss-spelling) * Supports Kanji characters * Supports Synonym * Easy to install, deploy, and maintain * Whole documents are returned * Highly customizable * RESTful API * Faceted search and filtering   ## Referências  * [MeiliSearch - Lightning Fast, Ultra Relevant, and Typo-Tolerant Search Engine](https://github.com/meilisearch/MeiliSearch) * [MeiliSearch - Marketplace digital](https://marketplace.digitalocean.com/apps/meilisearch?action=deploy&refcode=7c67bd97e101) * [Integrate a relevant search bar to your documentation](https://blog.meilisearch.com/how-to-integrate-a-relevant-search-bar-to-your-documentation/)  ","title":"Meili Search"},{"id":114,"location":"/til/js-eventos.html","tags":["javascript","eventos"],"text":" ## Principais eventos  * `onBlur`: remove o foco do elemento * `onChange`: muda o valor do elemento * `onClick`: o elemento é clicado pelo usuário * `onFocus`: o elemento é focado * `onKeyPress`: o usuário pressiona uma tecla sobre o elemento * `onLoad`: carrega o elemento por completo * `onMouseOver`: define ação quando o usuário passa o mouse sobre o elemento * `onMouseOut`: define ação quando o usuário retira o mouse sobre o elemento * `onSubmit`: define ação ao enviar um formulário  ## Eventos inline  ```html <h1 onclick=\"this.innerHTML='Isso acontece quando usamos o evento onClick!'\"> Clique nesse link para testar o evento onClick! </h1> ```  ## onLoad  Disparado quando a página for carregada.  ```html <!DOCTYPE html> <html>   <head>     <title>Usando eventos no Javascript</title>   </head>   <body onload=\"checkCookies()\">    <script>   function checkCookies() {     if( navigator.cookieEnabled == true ) {       alert(\"Cookies são permitidos\")     } else {       alert(\"Cookies não são permitidos\")     }   }   </script>    <p>Irá aparecer um alert dizendo se os cookies estão ou não liberados em seu navegador</p>   </body> </html> ```  ## Referências  * [Trabalhando com eventos em JavaScript](https://www.devmedia.com.br/trabalhando-com-eventos-em-javascript/28521) ","title":"Eventos em javascript"},{"id":115,"location":"/til/sed-cheat-sheet.html","tags":["sed"],"text":" ```shell :  # label =  # line_number a  # append_text_to_stdout_after_flush b  # branch_unconditional              c  # range_change                      d  # pattern_delete_top/cycle           D  # pattern_ltrunc(line+nl)_top/cycle  g  # pattern=hold                       G  # pattern+=nl+hold                   h  # hold=pattern                       H  # hold+=nl+pattern                   i  # insert_text_to_stdout_now          l  # pattern_list                        n  # pattern_flush=nextline_continue    N  # pattern+=nl+nextline               p  # pattern_print                      P  # pattern_first_line_print           q  # flush_quit                         r  # append_file_to_stdout_after_flush  s  # substitute                                           t  # branch_on_substitute               w  # append_pattern_to_file_now          x  # swap_pattern_and_hold              y  # transform_chars                 ```  ## Referências  * [How can I use sed to replace a multi-line string?](https://unix.stackexchange.com/questions/26284/how-can-i-use-sed-to-replace-a-multi-line-string)  ","title":"Dicas do sed"},{"id":116,"location":"/til/english.html","tags":["english"],"text":" * timelessness atemporalidade * cognizance conhecimento   ","title":"English"},{"id":117,"location":"/til/zip-multiplos-volumes.html","tags":["zip"],"text":" Para gerar um zip dividido em múltiplos volumes acrescente `-s` e o tamanho do volume.  ```shell zip -s 50m new.zip big.iso   # partes de 50 MB zip -s 3g  new.zip big.iso   # partes de 3G (útil para vfat) ```  Use:  * `k` para kB * `m` para MB * `g` para GB * `t` para TB * o default é `m`   ## Referências  * [How do I split a .zip file into multiple segments?](https://superuser.com/questions/336219/how-do-i-split-a-zip-file-into-multiple-segments) ","title":"Criando zip com múltiplos volumes"},{"id":118,"location":"/til/ensmallen.html","tags":["C++"],"text":" ## Referências  * [Ensmallen Documentation](https://www.ensmallen.org/docs.html)  ","title":"Ensmallen - flexible C++ library for efficient numerical optimization"},{"id":119,"location":"/til/mithril.html","tags":["js"],"text":" ## Referências  * [Mithril.js: A Tutorial Introduction (Part 1)](https://gilbert.ghost.io/mithril-js-tutorial-1/) * [Mithril.js: A Tutorial Introduction (Part 2)](https://gilbert.ghost.io/mithril-js-tutorial-2/) * [Vídeo: Mithril - The Best Little Framework You've Never Heard Of](https://youtu.be/tNMiCr39Fx0) * [Wiki: Tutorials & Videos & Slides](https://github.com/MithrilJS/mithril.js/wiki/Tutorials-&-Videos-&-Slides) ","title":"Mithril.js"},{"id":120,"location":"/til/hacking.html","tags":["hacking"],"text":" ## Referências  * []()  Existe uma lista gigante de livro acima deste diretório http://index-of.es/Exploit/  ","title":"Download de livros"},{"id":121,"location":"/til/cpp_armadillo.html","tags":["armadillo","C++","álgebra linear"],"text":" Algebra linear com a biblioteca **armadillo**.  <div> $$ A_{m,n} = \\begin{pmatrix} a_{1,1} & a_{1,2} & \\cdots & a_{1,n} \\\\ a_{2,1} & a_{2,2} & \\cdots & a_{2,n} \\\\ \\vdots  & \\vdots  & \\ddots & \\vdots  \\\\ a_{m,1} & a_{m,2} & \\cdots & a_{m,n}  \\end{pmatrix} $$ </div>  **Armadillo** é uma biblioteca de álgebra linear para C++ rápida e fácil de usar, com sintaxe parecida com a do **Matlab**.  Provê suporte para:  * vetores (tensores de primeira ordem) * matrizes (tensores de segunda ordem) * cubos (tensores de terceira ordem) * matrizes densas e esparsas * números inteiros, de ponto flutuante e complexos * decomposição (via LAPACK) * multi-thread (Intel MKL ou OpenBLAS) * avaliador de expressão baseado em meta-programação * paralelização (via OpenMP)  Principais usos:  * machine learning * reconhecimento de padrões * visão computacional * processamento de sinais * bioinformática * estatística * finanças  ## Instalação no Debian  ```shell apt install libarmadillo-dev ```  ## Instalação no MacOS  ```shell brew install armadillo ```  ## Exemplos de uso  ```c++ #include <armadillo> #include <iostream>  using namespace std; using namespace arma;  int main() {   // inicia o gerador de números aleatórios   arma_rng::set_seed_random();    // Cria uma matriz com dados aleatório com dimensão 2x3   auto A = randu( 2, 3 );   cout << A << endl;   //    0.7038   0.6819   0.9555   //    0.3804   0.9666   0.9270    // Transposta   cout << A.t() << endl;   //    0.7526   0.5681   //    0.5874   0.9469   //    0.3562   0.9346    // Multiplicação de matrizes   cout << A.t() * A << endl;   //    0.0536   0.2644   0.2534   //    0.4731   0.3874   0.9599   //    0.1739   0.3313   0.4768    mat B( 3, 3, fill::randu );   cout << B << endl;   //    0.9563   0.8955   0.0919   //    0.3291   0.3086   0.3452   //    0.1894   0.9898   0.8642    cout << \"Determinante: \" << det( B ) << endl;   // Determinante: -0.243228    auto C = randu( 3, 3 );   cout << C << endl;   //    0.5561   0.6219   0.2147   //    0.3105   0.2813   0.9172   //    0.3408   0.1925   0.4703   cout << \"Determinante: \" << det( C ) << endl;   // Determinante: -0.254525    mat D = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};   cout << D << endl;   //    1.0000   2.0000   3.0000   //    4.0000   5.0000   6.0000   //    7.0000   8.0000   9.0000   cout << \"Determinante: \" << det( D ) << endl;   // Determinante: 6.66134e-16    D.row( 0 ) = D.row( 1 ) + D.row( 2 );   cout << D << endl;   // 11.0000   13.0000   15.0000   //  4.0000    5.0000    6.0000   //  7.0000    8.0000    9.0000    D.row( 1 ) = D.row( 1 ) * 5;   cout << D << endl;   // 11.0000   13.0000   15.0000   // 20.0000   25.0000   30.0000   //  7.0000    8.0000    9.0000   //    D.row( 2 ).zeros();   cout << D << endl;   // 11.0000   13.0000   15.0000   // 20.0000   25.0000   30.0000   //       0         0         0    D.col( 2 ) = D.col( 2 ) + 10;   cout << D << endl;   // 11.0000   13.0000   25.0000   // 20.0000   25.0000   40.0000   //       0         0   10.0000    D = diagmat( D );   cout << D << endl;   // 11.0000         0         0   //       0   25.0000         0   //       0         0   10.0000    D.save( \"D.bin\" );    D.save( \"D.txt\", arma_ascii );   // ARMA_MAT_TXT_FN008   // 3 3   //    1.10000000000000e+01   0.00000000000000e+00   0.00000000000000e+00   //    0.00000000000000e+00   2.50000000000000e+01   0.00000000000000e+00   //    0.00000000000000e+00   0.00000000000000e+00   1.00000000000000e+01    auto O = ones( 2, 2 );   cout << O << endl;   // 1.0000   1.0000   // 1.0000   1.0000    auto Z = zeros( 3, 5 );   cout << Z << endl;   // 0        0        0        0        0   // 0        0        0        0        0   // 0        0        0        0        0    mat F1, F2;   F1.load( \"D.bin\" );   F2.load( \"D.txt\" );   cout << F1 << endl;   // 11.0000         0         0   //       0   25.0000         0   //       0         0   10.000    cout << F1 - F2 << endl;   // 0        0        0   // 0        0        0   // 0        0        0    mat F( 2, 3 );   F.fill( 3.14 );   cout << F << endl;   // 3.1400   3.1400   3.1400   // 3.1400   3.1400   3.1400    F = F.ones();   F.col( 0 ) *= datum::pi;   F.col( 1 ) *= datum::inf;   F.col( 2 ) *= datum::nan;   cout << F << endl;   // 3.1416      inf      nan   // 3.1416      inf      nan    return 0; } ```  ## Referências  * [Armadillo C++ library for linear algebra & scientific computing](http://arma.sourceforge.net/)  ","title":"Álgebra linear com Armadillo"},{"id":122,"location":"/til/vim-spell-checking.html","tags":["vim"],"text":" * `[s` e `]s` navigate to next and previous misspelled word.  ::: youtube id=\"kbMYuCFTSfw\" title=\"Turn Vim into a Spell Checker | Vim 🔥 Tips and Tricks\"  There are times when we edit prose in Vim, such as in a project `README` or Git commit message. In those cases, we can use Vim's spell-checking to help us avoid embarrassing mistakes.  ## Switching on spell-checking  We can switch on spell checking with this command:  ``` :setlocal spell ```  We can also specify the language:  ``` :setlocal spell spelllang=en_us ```  ## What does it look like  Here's a screenshot of what I see as I edit this blog post:  {{< img src=\"images/vim-spell-check.webp\" alt=\"''\" >}}  The highlighted words are considered misspellings.  ## Spell check per filetype  It would be tedious to manually turn on spell-checking each time we need it. Luckily, we can guess by convention that we'll want to spell-check certain files.  We automatically turn on spell-checking for Markdown files based on their file extension with this line in our `~/.vimrc` via [thoughtbot/dotfiles][dotfiles]:  ``` autocmd BufRead,BufNewFile *.md setlocal spell ```  [dotfiles]: https://github.com/thoughtbot/dotfiles/blob/master/vimrc  Another way to do it for certain filetypes is like this:  ``` autocmd FileType gitcommit setlocal spell ```  ## We get word completion for free  By turning on spell-checking in our `~/.vimrc`, we'll be turning on word completion as well. The following command will let us press `CTRL-N` or `CTRL-P` in insert-mode to complete the word we're typing!  ``` set complete+=kspell ```  ## Add words to the dictionary  We can add words like \"RSpec\" or \"thoughtbot\" to the `spellfile` (a list of correctly-spelled words) by cursoring over those words in a file and typing:  ``` zg ```  ","title":"Vim Spell Checking"},{"id":123,"location":"/til/m4.html","tags":["m4"],"text":" **m4** é uma linguagem de macro desenvolvida pelo *Dennis M. Ritchie*   ## Definindo uma macro  O delimitador padrão é o *backtick* (`` ` ``)  junto com o *single quote* (` ' `).  ```m4 define(`yoo',`Hello World!') I say this: yoo yoo yoo ```  Executando `m4 nome_do_arquivo.m4` temos:  ``` I say this: Hello World! Hello World! Hello World! ```  ## Definição com várias linhas  ```m4 define(`header', ` <html>   <head>     <meta charset=\"utf-8\"/>     <title>Meu título</title>   </head> ') ```  ## Passando parâmetros   ```m4 define(`my_value',`$1_file') my_value(`test') ```  Use $1, $2, ... para passar parâmetros:  ``` test_file ```  ## Condicionais  ```m4 ifelse(`first_text',`second_text',`true_action',`false_action') ```  No exemplo abaixo se `my_filename` for `index.html` então será gerado apenas a palavra `Home`, do contrário será gerado um link apontando para `index.html`.  ```m4 ifelse(my_filename,`index.html',`Home',`<a href=\"/index.html\" title=\"To index page\">Home</a>') ```  ## Delete tudo até a próxima nova linha  ```m4 dnl uma opção para colocar comentários dnl ou para garantir que não tem espaços extras ```  ## Incluir um arquivo  ```m4 include(filename) ```  ## Operações matemáticas  ```m4 define(decr,`eval($1-1)') ```  ## Referências  * [Using the m4 macro processor for fun and profit](https://box.matto.nl/m4.html) * [Exploiting the m4 Macro Language](http://www.cs.stir.ac.uk/~kjt/research/pdf/expl-m4.pdf) ","title":"Preprocessador M4"},{"id":124,"location":"/til/swap.html","tags":["swap","debian","linux"],"text":" ## Configuração atual  ```shell swapon --show ```  A saída do comando acima, se tiver swap configurado, será parecido com:  ```shell NAME      TYPE      SIZE USED PRIO /dev/sda5 partition 2,9G   1G   -2 ```  Neste caso uma partição foi utilizada para swap.  Outro modo de verificar o swap é:  ```shell free -h ```  Na ausência o valor é informado como zero.  ```shell Mem:          996Mi       262Mi        79Mi        40Mi       654Mi       514Mi Swap:            0B          0B          0B ```  ## Verificar se existe espaço disponível para criação  Antes de criar o swap é necessário garantir que existe espaço em disco.  ```shell $ df -ah ```  Saída  ``` Filesystem      Size  Used Avail Use% Mounted on sysfs              0     0     0    - /sys proc               0     0     0    - /proc udev            488M     0  488M   0% /dev devpts             0     0     0    - /dev/pts tmpfs           100M   13M   88M  13% /run /dev/vda1        25G   11G   14G  45% / securityfs         0     0     0    - /sys/kernel/security tmpfs           499M   12K  499M   1% /dev/shm tmpfs           5.0M     0  5.0M   0% /run/lock tmpfs           499M     0  499M   0% /sys/fs/cgroup ```  ## Criação do arquivo de swap  Como a memória do sistema é de 1GB vamos criar um arquivo de swap com 2GB no raiz.  ```shell fallocate -l 2G /swapfile ```  O acesso deve ser somente do root:  ```shell chown root.root /swapfile chmod 600 /swapfile ls -lh /swapfile ```  Saída  ``` -rw------- 1 root root 2.0G Aug 10 09:45 /swapfile ```  Com as permissões corretas podemos continuar marcando o espaço como swap:  ```shell mkswap /swapfile ```  ``` Setting up swapspace version 1, size = 2 GiB (2147479552 bytes) no label, UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx ```  ## Ativando o swap  Depois de marcado podemos disponibilizar o swap para o sistema.  ```shell swapon /swapfile ```  ``` NAME      TYPE SIZE USED PRIO /swapfile file   2G   0B   -1 ```  Vamos verificar como os comando que já vimos anteriormente:  ```shell $ swapon --show NAME      TYPE SIZE USED PRIO /swapfile file   2G   0B   -1  $ free -h               total        used        free      shared  buff/cache   available Mem:          996Mi       263Mi        74Mi        40Mi       658Mi       513Mi Swap:         2.0Gi          0B       2.0Gi ```  ## Tornando o swap permanente  Primeiramente faremos um backup do arquivo fstab  ```shell cp /etc/fstab /etc/fstab.bak ```  Agora vamos acrescentar uma linha no final do fstab  ```shell echo '/swapfile none swap sw 0 0' | tee -a /etc/fstab ```  ## Ajustes finos  ### Swappiness  Este parâmetro, que varia de 0 a 100, ajusta a frequência de acesso ao swap  * próximos a 0: o sistema só acessa o swap se absolutamente necessário (mais rápido) * próximos a 100: prioriza colocar os dados no swap para liberar RAM * desktop: 60 * server: 10  Para verificar a configuração atual use:  ```shell cat /proc/sys/vm/swappiness ```  Para definir o valor 10 use:  ```shell sysctl vm.swappiness=10 ```  Para deixar permanente a configuração:  ```shell cp /etc/sysctl.conf /etc/sysctl.conf.bak echo 'vm.swappiness=10' | tee -a /etc/sysctl.conf ```  ### Cache pressure  Usado para realizar cache de informações de `inode` e `dentry` possibilitando reduzir o custo de acessar esta informações frequentemente.  Para verificar o valor atual use:  ```shell cat /proc/sys/vm/vfs_cache_pressure ```  Saída  ``` 100 ```  Da maneira como está agora o sistema removerá as informações sobre `inode` muito rapidamente. Vamos adotar uma configuração mais conservativa utilizando o valor 50.  ```shell sysctl vm.vfs_cache_pressure=50 ```  Para deixar permanente a configuração  ```shell echo 'vm.vfs_cache_pressure=50' | tee -a /etc/sysctl.conf ```     ## Referências  * [How To Add Swap Space on Ubuntu 16.04](https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-ubuntu-16-04) ","title":"Gerenciamento de memória swap"},{"id":125,"location":"/til/sed.html","tags":["sed"],"text":" ## Referências  * [10 EXEMPLOS para você usar o Sed como NINJA](https://terminalroot.com.br/2020/10/10-exemplos-para-voce-usar-o-sed-como-ninja.html)  ","title":"Sed"},{"id":126,"location":"/til/linux-cgroup.html","tags":["linux","aws","lambda"],"text":" ## Introdução  * `cgroup` é uma das tecnologias de isolação mais importantes usadas em *containers*.  Listando os cgroups  ```shell cat /proc/1/cgroup  ```  ``` 11:freezer:/ 10:net_cls,net_prio:/ 9:blkio:/ 8:memory:/ 7:devices:/ 6:cpu,cpuacct:/ 5:perf_event:/ 4:pids:/ 3:rdma:/ 2:cpuset:/ 1:name=systemd:/init.scope 0::/init.scope ```  ## Referências  * [Gaining Persistency on Vulnerable Lambdas](https://unit42.paloaltonetworks.com/gaining-persistency-vulnerable-lambdas) * [Manual: cgroups - Linux control groups](http://man7.org/linux/man-pages/man7/cgroups.7.html) * [github: CLI tool for spawning and running containers according to the OCI specification](https://github.com/opencontainers/runc) ","title":"cgroup - Grupos de controle linux"},{"id":127,"location":"/til/vim-rails.html","tags":["vim"],"text":" https://github.com/tpope/vim-rails   * `gf` considers context and knows about partials, fixtures, and much more.  There are two commands,  * `:A` (alternate) and  * `:R` (related) for easy jumping between files, including favorites like model to schema, template to   helper, and controller to functional test.  Commands like  * `:Emodel`, * `:Eview`, * `:Econtroller`   are provided to `:edit` files by type, along with `S`, `V`, and `T` variants for `:split`, `:vsplit`, and   `:tabedit`.  Throw a bang on the end (`:Emodel foo!`) to automatically   create the file with the standard boilerplate if it doesn't exist.   `:help rails-navigation`  * Enhanced syntax highlighting.  From `has_and_belongs_to_many` to   `distance_of_time_in_words`, it's here.  * Interface to rake.  Use `:Rake` to run the current test, spec, or   feature.  Use `:.Rake` to do a focused run of just the method,   example, or scenario on the current line.  `:Rake` can also run   arbitrary migrations, load individual fixtures, and more.   `:help rails-rake`  * Interface to the `rails` command.  Generally, use `:Rails console` to   call `rails console`.  Many commands have wrappers with additional features:   `:Rgenerate controller Blog` generates a blog controller and loads the   generated files into the quickfix list, and `:Rrunner` wraps `rails runner`   and doubles as a direct test runner.  `:help rails-scripts`  * Partial and concern extraction.  In a view, `:Rextract {file}`   replaces the desired range (typically selected in visual line mode)   with `render '{file}'`, which is automatically created with your   content.  In a model or controller, a concern is created, with the   appropriate `include` declaration left behind.   `:help rails-:Rextract`  * Fully customizable. Define \"projections\" at the global, app, or gem   level to define navigation commands and override the alternate file,   default rake task, syntax highlighting, abbreviations, and more.   `:help rails-projections`.  * Integration with other plugins.  If   [dbext.vim](http://www.vim.org/scripts/script.php?script_id=356) is   installed, it will be transparently configured to reflect   `database.yml`.  Users of   [abolish.vim](https://github.com/tpope/vim-abolish) get pluralize and   tableize coercions, and users of   [bundler.vim](https://github.com/tpope/vim-bundler) get a smattering of   features.  `:help rails-integration`  ","title":"Vim com rails"},{"id":128,"location":"/til/varicad-visao-predefinida.html","tags":["varicad"],"text":" 1. Execute o comando `cfg` (Ferramentas/Configurações do Sistema) 2. Abra o item *Definições da Vistas 3D Pré-Definidas* em *3D* 3. Defina os seguinte valores   * Rotação ao redor do eixo visualizado X: 35.264   * Rotação ao redor do eixo visualizado Y: -45   * Rotação ao redor do eixo visualizado Z: 0  ![Comando atm](/til/varicad-visao-isometrica-01.webp)  <div> $$ \\arcsin(\\tan 30°) \\approx 35.264 $$ </div>  ","title":"Varicad - configurando visão pré-definida para isométrica"},{"id":129,"location":"/til/trader-ordens.html","tags":["trader"],"text":" ## Tipos de ordens  ### Ordem de mercado  Para abrir uma posição a preço de mercado  #### Sell (venda)  Venda que ocorre pelo *Bid* (preço de oferta)  #### Buy (compra)  Compra que ocorre pelo *Ask* (preço de demanda)   ## Ordem pendente  Ordem que depende de alguma condição para ocorrer.  #### Buy limit  ![order_type_buy_limit.webp](/til/order_type_buy_limit.webp)  Compra por $valor <= Ask$.  O nível atual de preços é superior ao valor estabelecido na ordem.  Expectativa que o preço caia até o valor da ordem e volte a subir.  #### Buy Stop  ![order_type_buy_stop.webp](/til/order_type_buy_stop.webp)  Combra por $valor >= Ask$  O nível atual de preços é inferior ao valor estabelecido na ordem.  Expectativa que o preço ultrapasse o valor da ordem e continue subindo.  #### Sell Limit  ![order_type_sell_limit.webp](/til/order_type_sell_limit.webp)  Venda por $valor >= Bid$  O nível atual de preços é inferior ao valor estabelecido na ordem.  Expectativa após atingir um o valor da ordem volte a cair.  #### Sell Stop  ![order_type_sell_stop.webp](/til/order_type_sell_stop.webp)  Venda por $valor <= Bid$  O nível atual de preços é superior ao valor estabelecido na ordem.  Expectativa de que tendo caído até o valor da ordem continue a cair.   #### Buy Stop Limit  ![order_type_buy_stop_limit.webp](/til/order_type_buy_stop_limit.webp)  $BuyStop + BuyLimit$  Uma ordem stop para estabelecer uma ordem limit de compra (\"Buy Limit\").  Uma vez que o preço futuro \"Ask\" atinja o nível stop indicado na ordem (no campo \"Preço\"), será colocada uma ordem \"Buy Limit\" no nível especificado no campo \"Preço Stop Limit\".  O nível stop é colocado acima do atual preço Ask e o preço Stop Limit é colocado abaixo do nível stop.  #### Sell Stop Limit  ![order_type_sell_stop_limit.webp](/til/order_type_sell_stop_limit.webp)  Uma ordem stop para estabelecer uma ordem limit de venda (\"Sell Limit\").  Uma vez que o preço futuro \"Bid\" atinja o nível stop indicado nessa ordem (no campo \"Preço\"), será colocada uma ordem \"Sell Limit\" no nível especificado no campo \"Preço Stop Limit\".  O nível stop é colocado abaixo do atual preço Bid e o preço Stop Limit é colocado acima do nível stop.  ### Take Profit  Expectativa de obtenção de lucro ao ser atingido o preço.  Leva ao fechamento total da posição.  Está sempre ligada à posição aberta ou à ordem pendente.  A ordem pode ser colocada juntamente com uma ordem de mercado ou pendente.  Para posições longas é usado o preço Bid (a ordem sempre se encontra acima do atual preço Bid).  Para posições curtas é utilizado o preço Ask (a ordem sempre se encontra abaixo do atual preço Ask).  {{% note %}} Se a ordem não puder se executada quando tinha condições (p.e. rejeitada pela bolsa) ela não é removida. E começará a funciona novamente após um novo tick que garanta as condições da ordem. {{% /note %}}   ### Stop Loss  Expectativa de minimizar as perdas no caso do preço se movimentar na direção de perda.  Se o preço atingir este nível a posição se fecha por completo automaticamente.  Está sempre ligada à posição aberta ou ordem pendente.  Para posições longas é usado o preço Bid (a ordem sempre se encontra abaixo do atual preço Bid).  Para posições curtas é usado o preço Ask (a ordem sempre se encontra acima do preço atual Ask).  {{% note %}} Se a ordem não puder se executada quando tinha condições (p.e. rejeitada pela bolsa) ela não é removida. E começará a funciona novamente após um novo tick que garanta as condições da ordem. {{% /note %}}  ## Termos de herança de Stop Loss e Take Profit (compensação):   * Quando aumenta o volume da posição, e também quando reverte, os níveis Take Profit e Stop Loss são colocados segundo a última ordem (de mercado ou da pendente ativada). Em outras palavras, os níveis stop são substituídos pelos anteriores em cada última ordem segundo uma posição. Além disso, se na ordem for exibido um valor de zero, Stop Loss e Take Profit são excluídos. * Se houver um fechamento parcial da posição, Stop Loss e Take Profit não são alterados para uma nova ordem. * Quando houver fechamento total de posições, os níveis Stop Loss e Take Profit serão excluídos, pois estão ligados à posição aberta e não podem existir sem ela. * Ao executar uma negociação segundo um símbolo pelo qual já existe uma posição, na janela de colocação de ordens são automaticamente colocados os valores atuais de Stop Loss e Take Profit da posição aberta. Isso se destina a que você não apague acidentalmente a atual ordem stop. * Ao executar uma negociação em um clique (através da Barra no gráfico ou da Observação de mercado) segundo um símbolo, pelo qual já há posição, os valores atuais de Stop Loss e Take Profit da posição aberta não se alteram. * No mercado de balcão (Forex, Futures), ao transferir uma posição para o dia de negociação seguinte (swap), e mesmo o caminho de reabertura, os níveis Stop Loss e Take Profit são salvos. * No mercado de bolsa, ao transferir uma posição para o dia de negociação seguinte (swap), ou transferir para outra conta ou fornecer uma, os níveis Stop Loss e Take Profit são apagados. * Termos da herança de Stop Loss e Take Profit (cobertura): * Se houver um fechamento parcial da posição, Stop Loss e Take Profit não são alterados para uma nova ordem. * Quando houver fechamento total de posições, os níveis Stop Loss e Take Profit serão excluídos, pois estão ligados à posição aberta e não podem existir sem ela. * Ao executar uma operação de negociação em um clique (através da barra no grafico ou no Livro de ofertas), não são colocados Stop Loss e Take Profit. * Esses termos são váildos tanto para a negociação manual como para a colocação de ordens por experts (programas MQL5).  {{% note %}} * Para automatizar a deslocação da ordem Stop Loss seguindo o preço, você pode utilizar o Trailing Stop. * A ativação de ordens Take Profit e Stop Loss leva ao total fechamento da posição. * Para instrumentos com modo de cálculos Exchange Stocks, Exchange Futures e Futures Forts, todos os tipos de ordens Stop Loss e Take Profit são executados de acordo com as regras no mercado de bolsa, onde é realizada a operação. Comumente é usado o preço Last (preço da última transação). Em outras palavras, uma ordem stop funciona uma vez que o preço Last roçar o preço indicado. No entanto, você deve levar em conta que a compra ou venda realizada como resultado da execução de ordens stop, ocorre, em qualquer caso, segundo os preços Bid e Ask. {{% /note %}}  ## Trailing Stop  \"Stop Loss\" é projetado para minimizar as perdas, se o preço de um instrumento financeiro começar a se mover em uma direção desfavorável. Quando a posição aberta se torna rentável, o \"Stop Loss\" pode ser movido manualmente para um nível favorável. Para automatizar esse processo é usado o Trailing Stop. Esse instrumento é particularmente útil quando existe um forte movimento do preço em uma direção, e nos casos em que não é possível acompanhar de perto a evolução do estado do mercado.  O Trailing Stop está sempre associado a uma posição aberta ou a uma ordem pendente. Ele é executado na plataforma de negociação, e não no servidor, como \"Stop Loss\". Para o instalar, clique em \"Trailing stop\" no menu de contexto da posição ou ordem na guia \"Negociação\":  ## Referências * [Princípios gerais](https://www.metatrader5.com/pt/terminal/help/trading/general_concept) ","title":"Trader - ordens"},{"id":130,"location":"/til/git-gitmoji.html","tags":["git","emoji","gitmoji"],"text":" ## Mensagem padrão de commit  Para definir um modelo para as mensagens de commit use:  ```shell git config commit.template /absolute/path/to/file git config commit.template relative-path-from-repository-root git config commit.template ~/commit.template.txt ```  ## Emojis selecionados  * ✨ `sparkles` Novas funcionalidades * 💄 `lipstick` Atualização de UI e arquivos de estilo * 🎉 `tada` Commit inicial * 🐛 `bug` Correção de bug * ⚡️ `zap` Melhoria de performance * ✅ `white_check_mark` Testes adicionados * 🚑 `ambulance` Hotfix crítico * 🚀 `rocket` Deploy * 🚧 `construction` trabalho em progresso * 🏁 `checkered_flag` Feature implementada * 🙈 `see_no_evil` Atualizando .gitignore * 📝 `memo` Documentação * 🔧 `wrench` Mudança em arquivos de configuração * ✏️  `pencil2` Corrigindo ortografia * ♻️  `recycle` Refactoring code * 🚚 `truck` Movendo ou renomeando arquivos * 👽 `alien` Atualizando código devido a mudança de API externa  ## Outro emojis  * 🎨 `art` Improving structure / format of the code. * 🔥 `fire` Removing code or files. * 🔒 `lock` Fixing security issues. * 🍎 `apple` Fixing something on macOS. * 🐧 `penguin` Fixing something on Linux. * 🍏 `green_apple` Fixing something on iOS. * 🔖 `bookmark` Releasing / Version tags. * 🚨 `rotating_light` Removing linter warnings. * 💚 `green_heart` Fixing CI Build. * ⬇️  `arrow_down` Downgrading dependencies. * ⬆️  `arrow_up` Upgrading dependencies. * 📌 `pushpin` Pinning dependencies to specific versions. * 👷 `construction_worker` Adding CI build system. * 📈 `chart_with_upwards_trend` Adding analytics or tracking code. * 🐳 `whale` Work about Docker. * ➕ `heavy_plus_sign` Adding a dependency. * ➖ `heavy_minus_sign` Removing a dependency. * 🌐 `globe_with_meridians` Internationalization and localization. * 💩 `hankey` Writing bad code that needs to be improved. * ⏪ `rewind` Reverting changes. * 🔀 `twisted_rightwards_arrows` Merging branches. * 📦 `package` Updating compiled files or packages. * 📄 `page_facing_up` Adding or updating license. * 💥 `boom` Introducing breaking changes. * 🍱 `bento` Adding or updating assets. * 👌 `ok_hand` Updating code due to code review changes. * ♿️ `wheelchair` Improving accessibility. * 💡 `bulb` Documenting source code. * 🍻 `beers` Writing code drunkenly. * 💬 `speech_balloon` Updating text and literals. * 🔇 `mute` Removing logs. * 👥 `busts_in_silhouette` Adding contributor(s). * 🚸 `children_crossing` Improving user experience / usability. * 📱 `iphone` Working on responsive design. * 🥚 `egg` Adding an easter egg. * 🔍 `mag` Improving SEO  ## Não suportado pelo gogs  * ⚗  `alembic` Experimenting new things * 🏗 `building_construction` Mudanças arquiteturais * 📸 `camera_flash` Adding or updating snapshots * 🗃 `card_file_box` Performing database related changes. * 🤡 `clown_face` Mocking things. * 🔊 `loud_sound` Adding logs. * 🤖 `robot` Fixing something on Android.  ## Outros  * 🎨 improving structure / format of the code. * ⚡️ improving performance. * 🔥 removing code or files. * 🐛 fixing a bug. * 🚑 critical hotfix. * ✨ introducing new features. * 📝 writing docs. * 🚀 deploying stuff. * 💄 updating the ui and style files. * 🎉 initial commit. * ✅ adding tests. * 🔒 fixing security issues. * 🍎 fixing something on macos. * 🐧 fixing something on linux. * 🏁 fixing something on windows. * 🤖 fixing something on android. * 🍏 fixing something on ios. * 🔖 releasing / version tags. * 🚨 removing linter warnings. * 🚧 work in progress. * 💚 fixing ci build. * ⬇️ downgrading dependencies. * ⬆️ upgrading dependencies. * 📌 pinning dependencies to specific versions. * 👷 adding ci build system. * 📈 adding analytics or tracking code. * ♻️ refactoring code. * 🐳 work about docker. * ➕ adding a dependency. * ➖ removing a dependency. * 🔧 changing configuration files. * 🌐 internationalization and localization. * ✏️ fixing typos. * 💩 writing bad code that needs to be improved. * ⏪ reverting changes. * 🔀 merging branches. * 📦 updating compiled files or packages. * 👽 updating code due to external api changes. * 🚚 moving or renaming files. * 📄 adding or updating license. * 💥 introducing breaking changes. * 🍱 adding or updating assets. * 👌 updating code due to code review changes. * ♿️ improving accessibility. * 💡 documenting source code. * 🍻 writing code drunkenly. * 💬 updating text and literals. * 🗃 performing database related changes. * 🔊 adding logs. * 🔇 removing logs. * 👥 adding contributor(s). * 🚸 improving user experience / usability. * 🏗 making architectural changes. * 📱 working on responsive design. * 🤡 mocking things. * 🥚 adding an easter egg. * 🙈 adding or updating a .gitignore file * 📸 adding or updating snapshots * ⚗ experimenting new things * 🔍 improving seo * ☸️ work about kubernetes * 🏷️ adding or updating types (flow, typescript)  ## CLI  ```shell npm i -g gitmoji-cli ```  ## Referências  * https://gitmoji.carloscuesta.me/ * https://gist.github.com/parmentf/035de27d6ed1dce0b36a * https://stackoverflow.com/questions/21998728/how-to-specify-a-git-commit-message-template-for-a-repository-in-a-file-at-a-rel * https://github.com/stormslowly/git-emoji-commit-message-template/blob/master/emoji.git.commit.message.txt * https://hackernoon.com/using-github-as-a-team-the-holy-grail-of-commit-messages-f5b10c925d62   ","title":"Como inserir emojis na mensagem de commit"},{"id":131,"location":"/til/git-log.html","tags":["git"],"text":" ```shell $ git log --pretty=format:\"%h - %an, %ar : %s\" 7e3b253 - Geraldo Ribeiro, 4 days ago : git diff 8ec026a - Geraldo Ribeiro, 4 days ago : git b341291 - Geraldo Luis Da Silva Ribeiro, 3 weeks ago : Mode de exibição com 1 ou 3 imagens 3b9ca24 - Geraldo Luis Da Silva Ribeiro, 3 weeks ago : Diff de imagem a8a92a7 - Geraldo Ribeiro, 5 weeks ago : C++ constexpr, jwt, packt 00d5dce - Geraldo Ribeiro, 7 weeks ago : keycloak; covid 490f763 - Geraldo Luis Da Silva Ribeiro, 7 weeks ago : Dart start b37beb4 - Geraldo Ribeiro, 7 weeks ago : keycloak ce29e4f - Geraldo Ribeiro, 8 weeks ago : keycloak 1c14961 - Geraldo Ribeiro, 8 weeks ago : Keycloak 8b8a2b5 - Geraldo Ribeiro, 10 weeks ago : Design mode e atualização covid f18e6d2 - Geraldo Ribeiro, 3 months ago : Descrição d9bb267 - Geraldo Ribeiro, 3 months ago : Refactoração ```  ```shell $ git log --all --graph --decorate --oneline --abbrev-commit * 7e3b253 (HEAD -> master, origin/master, origin/HEAD) git diff * 8ec026a git * b341291 Mode de exibição com 1 ou 3 imagens * 3b9ca24 Diff de imagem * a8a92a7 C++ constexpr, jwt, packt * 00d5dce keycloak; covid * 490f763 Dart start * b37beb4 keycloak * ce29e4f keycloak * 1c14961 Keycloak * 8b8a2b5 Design mode e atualização covid * f18e6d2 Descrição * d9bb267 Refactoração ```  `--all` lista commit de todos os branches  ```shell $ git log --oneline --all 7e3b253 (HEAD -> master, origin/master, origin/HEAD) git diff 8ec026a git b341291 Mode de exibição com 1 ou 3 imagens 3b9ca24 Diff de imagem a8a92a7 C++ constexpr, jwt, packt 00d5dce keycloak; covid 490f763 Dart start b37beb4 keycloak ce29e4f keycloak 1c14961 Keycloak 8b8a2b5 Design mode e atualização covid f18e6d2 Descrição d9bb267 Refactoração  ```  ## Referências  * []()  ","title":"git log"},{"id":132,"location":"/til/cpp_cracking-the-c++-interview.html","tags":["C++"],"text":" Estudar  ## Referências  * [Cracking the C++ Interview — Part 1](https://medium.com/c-programming-language/cracking-the-c-interview-part-1-1b01879779e9) * [Cracking the C++ Interview — Part 2](https://medium.com/c-programming-language/cracking-the-c-interview-part-2-1e35d0e3fa83) ","title":"Cracking the C++"},{"id":133,"location":"/til/git-remover-arquivos-e-preservar-copia-local.html","tags":["git"],"text":" As vezes é necessário remover arquivos apenas do controle de versão preservando cópia local do arquivo.  1. Acrescente o arquivo ao `.gitignore` 2. Remova do **git** com `git rm --cached nome/do/arquivo`  A flag `--cached` vai manter a cópia local.  ## Referências  * [How To Remove Committed Files From Git Version Control](https://betterprogramming.pub/how-to-remove-committed-files-from-git-version-control-b6533b8f9044) ","title":"Como remover arquivos do controle de versão preservando cópia local"},{"id":134,"location":"/til/trader-simbolos.html","tags":["trader"],"text":" ## Variante 1  O preço tomou uma direção e voltou ao nível do preço de abertura. Assim, a barra terá apenas o valor High (o preço mais alto) ou apenas o valor Low (o preço mais baixo).  ![tick_generation_1_variant_down.webp](/til/tick_generation_1_variant_down.webp)  ![tick_generation_1_variant_up.webp](/til/tick_generation_1_variant_up.webp)  ## Variante 2  O preço tomou uma direção e voltou, atingindo o nível de abertura. Nesse caso, a barra terá apenas o valor High (o preço mais alto) ou apenas o valor Low (o preço mais baixo), embora os preços de abertura e de fechamento não sejam iguais.  ![tick_generation_2_variant_down.webp](/til/tick_generation_2_variant_down.webp)  ![tick_generation_2_variant_up.webp](/til/tick_generation_2_variant_up.webp)  ## Variante 3  O preço tomou uma direção, mas não atingiu o preço de abertura ao regressar.  ![tick_generation_3_variant_down.webp](/til/tick_generation_3_variant_down.webp)  ![tick_generation_3_variant_up.webp](/til/tick_generation_3_variant_up.webp)  ## Variante 4  O preço deslocou-se apenas alguns pontos para um lado. Nesse caso, a barra não terá os valores High e Low.  ![tick_generation_4_variant_down.webp](/til/tick_generation_4_variant_down.webp)  ![tick_generation_4_variant_up.webp](/til/tick_generation_4_variant_up.webp)  ## x  ![tick_generation_candle.webp](/til/tick_generation_candle.webp)  ## Vela altista ideal  Descrever pontos de apoio  ![tick_generation_ideal_bull.webp](/til/tick_generation_ideal_bull.webp)  ## Vela baixista ideal  Descrever pontos de apoio  ![tick_generation_ideal_bear.webp](/til/tick_generation_ideal_bear.webp)  ## Velas doji  (Close = Open)  ![tick_generation_doji.webp](/til/tick_generation_doji.webp)  ## Referências  * [Ticks reais e gerados](https://www.metatrader5.com/pt/terminal/help/algotrading/tick_generation)  ","title":"Símbolos para traders"},{"id":135,"location":"/til/vim-argdo.html","tags":["vim","args","argdo"],"text":" O editor vim nos ajuda muito quando precisamos editar uma grande quantidade de arquivos para realizar uma refatoração ou realizar modificações em lote.  ## Carregamento de arquivos por condição  Carregar todos os arquivos `md`.  ``` :args `find . -name '*.md'` ```  Carregar todos os arquivos que são rastreados pelo controle de versão que contenham a palavra `Apple`.  ``` :args `git grep -l Apple` ```  o `-l` do `git-grep` faz listar somente os arquivos sem o texto que faz match.  ## Operar nos arquivos carregados  Vai executar o `comando` em cada arquivo aberto!  ``` :argdo %s/Apple/Orange/gc ```  ","title":"Vim args, argdo"},{"id":136,"location":"/til/vim-with-python.html","tags":["vim"],"text":" ```shell apt install vim-nox ou apt install vim-gtk ```  ","title":"Vim com python habilitado"},{"id":137,"location":"/til/como-instalar-o-flameshot-no-debian-stable.html","tags":["backports","flameshot","screenshot","annotation","debian","linux"],"text":" O `flameshot` é um excelente utilitário para tirar screenshots e já realizar as anotações no mesmo momento.  ![Demonstração de uso do flameshot](https://github.com/lupoDharkael/flameshot/raw/master/img/preview/animatedUsage.gif)  ::: info **Atualização:** Agora que o **Debian 10** foi lançado não é mais necessário recorrer ao **backports**, então basta usar `apt install flameshot`.  O `flameshot` já está disponível no `Debian 10`, mas enquanto aguardamos a versão nova do Debian ser lançada é preciso utilizar a versão do `stretch-backports`.  Primeiramente vamos acrescentar o repositório backports:  ```shell echo \"deb http://deb.debian.org/debian stretch-backports main\" \\      >> /etc/apt/sources.list.d/backports.list ```  Atualizar a lista de pacotes disponíveis:  ```shell apt update ```  Instalar usando a opção `-t stretch-backports` para indicar que deve ser utilizado o repositório backports:  ```shell apt install -t stretch-backports flameshot ```  ## Referências  * [Github do projeto flameshot](https://github.com/lupoDharkael/flameshot) * [Tool to add shapes, annotations and text using templates to images](https://askubuntu.com/questions/3578/tool-to-add-shapes-annotations-and-text-using-templates-to-images/3584) ","title":"Como instalar o flameshot no Debian stretch"},{"id":138,"location":"/til/diferencas-entre-mtime-ctime-atime.html","tags":["find","mtime","ctime","atime"],"text":" Adaptado de um post do [Quora](https://www.quora.com/What-is-the-difference-between-mtime-atime-and-ctime).  O comando `find` pode parecer um pouco complicado se alguns conceitos não forem entendidos antes de sua utilização. Quando procuramos por arquivos com **critérios de tempo** é fundamental saber a diferença entre `mtime`, `atime` e `ctime`.  De maneira muito breve:  * `mtime` é o momento de modificação do conteúdo * `atime` é o momento que o arquivo foi acessado (lido) * `ctime` é o momento que o arquivo teve algum atributo modificado  ## `mtime`  `mtime` (*modification time*) indica o momento que o conteúdo do arquivo mudou. Mas atenção, **somente alteração do conteúdo** vai mudar o `mtime`. Mudanças nos atributos ou nos metadados não alteram o `mtime`, somente o `ctime`.  ## `atime`  atime atime (access time) is the timestamp that indicates the time that a file has been accessed. The file may have been opened by you, or may have been accessed by some other program or a remote machine. Anytime a file has been accessed, its access time changes.  ctime ctime (change time) is the timestamp of a file that indicates the time that it was changed. Now, the modification can be in terms of its content or in terms of its attributes. Whenever anything about a file changes (except its access time), its ctime changes.  Let me demonstrate it by the following example. On a Unix-like system, lets create a file and check its atime, mtime and ctime. We can see, all the timestamps are same.  Now, let us print its contents. Since the text file was blank, it didn't print anything. But looking at its stats, we see the access time has changed, while the others remain unchanged.  Now, let us write something into the file. Notice how all of its timestamps have changed! Since the file had to be accessed to modify it, the atime has changed. And since the contents of the file changed, its mtime and ctime both changed.  Now, instead of contents, what happens if we change its attributes? Say, file permissions? We added the 'execute' permission to the file and see how its atime and ctime changes! As is obvious, to make any changes to the file, you have to access it. Hence the changes to atime. Also, since only the attributes were changed and not the contents, the ctime changed while mtime remained as it is.  In general, this is how the timestamps behave:                                      mtime <= ctime <= atime    ","title":"Diferenças entre mtime ctime atime"},{"id":139,"location":"/til/eclipse-java-window-listener.html","tags":["java","dispose-window"],"text":" ## Referências  * [Dispose](https://www.guj.com.br/t/dispose/103690)   ```java import java.awt.event.WindowEvent; import java.awt.event.WindowListener;  import javax.swing.JFrame; import javax.swing.JOptionPane;  public class Teste extends JFrame implements WindowListener{ \tpublic Teste(){ \t\tsuper(\"algo\"); \t\tsetSize(200,200); \t\tsetVisible(true); \t\tsetLocationRelativeTo(null); \t\tsetDefaultCloseOperation(EXIT_ON_CLOSE); \t\taddWindowListener(this); \t}  \tpublic void windowClosing(WindowEvent arg0) { \t\tJOptionPane.showMessageDialog(null, \t\t\t\t\"A janela está fechando!\", \t\t\t\t\"Dúvida\", \t\t\t\tJOptionPane.ERROR_MESSAGE); \t} \t \tpublic void windowOpened(WindowEvent arg0){ \t\tJOptionPane.showMessageDialog(null, \t\t\t\t\"A janela abriu!\", \t\t\t\t\"Dúvida\", \t\t\t\tJOptionPane.ERROR_MESSAGE); \t}  \tpublic void windowClosed(WindowEvent arg0) {}  \tpublic void windowIconified(WindowEvent arg0) {}  \tpublic void windowDeiconified(WindowEvent arg0) {}  \tpublic void windowActivated(WindowEvent arg0) {}  \tpublic void windowDeactivated(WindowEvent arg0) {} \t \tpublic static void main(String[] args) { \t\tnew Teste(); \t} } ```  Entendeu? Lembrando que você pode criar outra classe que implemente WindowListener e nela você definir os comandos necessários. Exemplo:  ```java import java.awt.event.WindowEvent; import java.awt.event.WindowListener; import javax.swing.JFrame;  public class Tal implements WindowListener {  \tJFrame []s; \tpublic Tal(JFrame [] s){ \t\tthis.s = s; \t} \t \tpublic void windowOpened(WindowEvent arg0) {}  \tpublic void windowClosing(WindowEvent arg0) { \t\tfor(int i=0;i<s.length;i++) \t\t\ts[i].dispose(); \t}  \tpublic void windowClosed(WindowEvent arg0) {}  \tpublic void windowIconified(WindowEvent arg0) {}  \tpublic void windowDeiconified(WindowEvent arg0) {}  \tpublic void windowActivated(WindowEvent arg0) {}  \tpublic void windowDeactivated(WindowEvent arg0) {}  } ```  Aí você faz no construtor da sua janela:  addWindowListener(new Tal(arrayDeJframes)); sendo que arrayDeJFrames são as janelas que você deseja que fechem após fechar essa principal.  Espero ter ajudado. Abraço   ","title":"Dispose window"},{"id":140,"location":"/til/grafana-reset-senha-do-admin.html","tags":["grafana","docker"],"text":" Iniciar os containers  ```shell cd /opt/docker/docker-compose-influxdb-grafana docker-compose up -d ```  Localizar o id do container do '/run.sh'  ```shell docker ps -a CONTAINER ID IMAGE                  COMMAND                  CREATED       ... 265059f8820a grafana/grafana:latest \"/run.sh\"                6 seconds ago ... 637c3d25845f chronograf:latest      \"/entrypoint.sh chro…\"   6 seconds ago ... 21b3a8d77cae influxdb:latest        \"/entrypoint.sh infl…\"   7 seconds ago ... ```  Abrir um shell no container do `run.sh` (`265059f8820a`)  ```shell docker exec -ti 265059f8820a bash ```  Trocar a senha usando o `grafana-cli`  ```shell     bash-5.0$ grafana-cli admin reset-admin-password aqui-vai-a-nova-senha INFO[01-03|16:34:42] Connecting to DB      logger=sqlstore dbtype=sqlite3 INFO[01-03|16:34:42] Starting DB migration logger=migrator  Admin password changed successfully ✔ ```  ## Referências  * [Reset Grafana password when running in Docker on Raspberry Pi](https://community.grafana.com/t/reset-grafana-password-when-running-in-docker-on-raspberry-pi/7070)  ","title":"Grafana --- Reset da senha do admin"},{"id":141,"location":"/til/java-reflection.html","tags":["java"],"text":" `SomeClass.class` obtém o tipo `Class<SomeClass>` que é um objeto que representa o nome da classe em tempo de execução e é o mesmo objeto retornado pelo `getClass`.  ```java NombreClase obj = new NombreClase(); System.out.println(NombreClase.class.getName()); System.out.println(obj.getClass().getName()) ```  ## Referências  * [What does .class mean after a class name](https://stackoverflow.com/questions/15101794/what-does-class-mean-after-a-class-name)  ","title":"Java Reflection"},{"id":142,"location":"/til/cpp_thread.html","tags":["C++","thread"],"text":" ## Thread com função sem argumentos  ```c++ void foo() {   cout << \"Corpo da função: \" << this_thread::get_id() << endl; }  void run () {   thread t1( foo );   // Algum processamento...   t1.join(); } ```  ## Thread com função passando parâmetros por valor  ```c++ void fooByRef( int & a ) {   while( true ) {     cout << \"O valor é \" << a << endl;     this_thread::sleep_for( chrono::milliseconds( 1000 ) );   } }  void run () {   int p = 9;   thread t2( fooByRef, std::ref( p ) ); // usar o wrapper ref para não passar por valor   // Algum processamento...   this_thread::sleep_for( chrono::milliseconds( 5000 ) );   p = 30;   t1.join(); } ```  ## Thread com função passando parâmetros por referência  ```c++ void foo( int a, int b ) { }  void run () {   int p = 9;   int q = 8;   thread t1( foo, p, q );   // Algum processamento...   t1.join(); } ```  ## Thread com classe callable  ```c++ class CallableClass {   public:     void operator()() {       cout << \"Corpo da função: \" << this_thread::get_id() << endl;     } };  void run() {   CallableClass obj;   thread t2( obj );   // Algum processamento...   t2.join(); } ```  ## Thread com lambda  ```c++ // Sintaxe // [capture-list]( params ) /*mutable*/ /*constexpr*/ /*exception attribute*/ -> ret { body } // [capture-list]( params ) -> ret { body } // [capture-list]( params ) { body } // [capture-list]{ body }  void run() {   thread t3( []{     cout << \"Corpo da função: \" << this_thread::get_id() << endl;   } );   // Algum processamento...   t3.join(); } ```  ## Join, detach e terminate  * Uma thread representa um objeto de execução em nível de hardware e está num estado chamado *joinable* * A opções no estado *joinable* são:   * `join` - introduz um ponto de sincronismo e bloqueia a execução   * `detach` - faz a execução continuar em modo independente * Após esta escolha a thread se torna *non joinable* * Se esquecer de realizar o join ou detach a função `std::terminate` será chamada pelo destrutor * Um programa com `std::terminate` é considerado não seguro.  ## Tratamento de exceção  Para evitar problemas caso uma exceção for lançada antes do `join` use **RAII - Resource acquisition is initialization**.  RAII:  * *Construtor adquire os recursos* * *Destrutor libera os recursos*  Exemplo de código com problema:  ```c++ void run() {   thread t4( foo );   throw runtime_error( \"Algum erro antes do join/detach\" );   t4.join(); // esta linha nunca vai ser executada } ```  A classe `ThreadGuard` fornece um auxiliar para garantir que o `join` será sempre executado quando o objeto sair do contexto.   ```c++ {hl_lines=[6,9]} class ThreadGuard {   thread & mThread;    public:     // garantir que não haverá conversões implícitas     explicit ThreadGuard( thread & t ) : mThread( t ) {  }      // realiza o join pelo destrutor     ~ThreadGuard() { if( mThread.joinable() ) { mThread.join(); } }      // não permite o uso dos contrutores de cópia e atribuição     ThreadGuard( const ThreadGuard & ) = delete;     ThreadGuard & operator= ( const ThreadGuard & ) = delete; };  void run() {   thread t4( foo );   ThreadGuard tg( t4 ); // quando sair do escopo o join será chamado   throw runtime_error( \"Este erro não afeta a thread acima\" ); } ```  ## Transferindo a posse das threads  ```c++ void foo() { } void bar() { }  void run() {   thread t1( foo );   // thread t2 = t1; // Se fizer isso vai gerar erro de compilação    // usar move para transferir a posse da thread   thread t2 = std::move( t1 ); // t1 não é mais dono da thread   t1 = thread( bar ); // t1 tem nova thread    t1.join();   t2.join(); } ```  ## thread::get_id()  * retorna um id único para cada thread ativa em execução * retorna 0 para todas as threads não ativas  ```c++ void run() {   thread t1( foo );   thread t2( foo );   thread t3;    cout << t1.get_id() << endl; // 1234   cout << t2.get_id() << endl; // 5678   cout << t3.get_id() << endl; // 0    t1.join();   t2.join();    cout << t1.get_id() << endl; // 0   cout << t2.get_id() << endl; // 0 } ```  ## sleep_for  ## `std::this_thread::yield()`  * retorna a fatia de tempo * reinsere a thread na fila de execução  ## `std::thread::hardware_concurrency()`  * retorna o número de thread concorrentes suportado pela implementação do sistema * considere este valor apenas como uma dica * é usualmente o número de cores lógicos    ## Referências  * [Modern C++ Concurrency in Depth](https://www.udemy.com/course/modern-cpp-concurrency-in-depth/)  ","title":"Thread em C++"},{"id":143,"location":"/til/yad-yet-another-dialog.html","tags":["yad","zenity","tui","dialog"],"text":"  ```shell action=$(yad \\     --width 300 --entry --title \"System Logout\" \\     --image=gnome-shutdown                      \\     --button=\"_Switch User:2\"                   \\     --button=\"gtk-ok:0\"                         \\     --button=\"gtk-close:1\"                      \\     --text \"Choose action:\"                     \\     --entry-text                                \\     \"Power Off\" \"Reboot\" \"Suspend\" \"Logout\")  # Captura o status do último comando ret=$?  [[ $ret -eq 1 ]] && exit 0  if [[ $ret -eq 2 ]]; then   gdmflexiserver --startnew &   exit 0 fi  case $action in   Power*)   cmd=\"sudo /sbin/poweroff\" ;;   Reboot*)  cmd=\"sudo /sbin/reboot\" ;;   Suspend*) cmd=\"sudo /bin/sh -c 'echo disk > /sys/power/state'\" ;;   Logout*)     case $(wmctrl -m | grep Name) in       *Openbox)  cmd=\"openbox --exit\" ;;       *FVWM)     cmd=\"FvwmCommand Quit\" ;;       *Metacity) cmd=\"gnome-save-session --kill\" ;;       *) exit 1 ;;     esac ;;   *) exit 1 ;; esac  eval exec $cmd ```  ![img](/til/yad-01.webp)   ```shell yad --form                                              \\     --image logo-dicas-l.webp                            \\     --image-on-top                                      \\     --title \"Dicas-L/Livra-TE ensino profissional\"      \\     --text \"Demo do YAD para Livra-TE/Dicas-L\"          \\     --field Nome 'Juliana'                              \\     --field Nascimento:DT 01/01/2000                    \\     --field \"Há quantos anos usa Linux:NUM\" '1!0..25!1' \\     --field \"Sites preferidos:CB\"                       \\         'BR-Linux!^Dicas-l!Viva o Linux!Outros'         \\     --field \"Vou passar a usar o yad:CHK\" TRUE          \\     --field \"Vou continuar usando zenity:CHK\" ```  ![img](/til/yad-02.webp)  * `DT` abre um calendário * `NUM` define uma spinbox * `CB` define um combobox   * `^` valor default   * `!` separador   Lançador de aplicações  ```shell yad --icons                            \\     --read-dir=/usr/share/applications \\     --width 670 --height 400           \\     --no-buttons ```  Clique em algum ícone para lançar a aplicação  ![img](/til/yad-03.webp)  ```shell yad exval=$? case $exval in    1) echo \"You pressed Cancel\";;    0) echo \"You pressed OK\";;    252) echo \"You pressed ESCAPE key or closed the window.\";; esac ```  ```shell # Collect the YAD options cmd=$(     yad --center --borders=20     --title=\"YAD Custom Dialog Buttons\"     --button=\"Browser\":\"firefox\"     --button=\"Announce\":\"bash -c announce\"     --button=\"Exit\" )  export -f announce \"${cmd[@]}\" unset announce ```  ## Referências  Tem mais exemplos no yaddemo  Importar dos dois primeiros links  * [The buttons of YAD](https://www.thelinuxrain.com/articles/the-buttons-of-yad) * [YAD Button Processing](https://cjungmann.github.io/yaddemo/docs/yadbuttons.html) * [yad - Examples.wiki](https://code.google.com/archive/p/yad/wikis/Examples.wiki) * [YAD - Yet Another Dialog](https://www.dicas-l.com.br/arquivo/yad_yet_another_dialog.php)  ","title":"YAD - Yet Another Dialog"},{"id":144,"location":"/til/clangd.html","tags":["clangd"],"text":" ```shell echo -e 'deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch-8 main\\ndeb-src http://apt.llvm.org/stretch/ llvm-toolchain-stretch-8 main\\n' \\   > /etc/apt/sources.list.d/llvm-toolchain.list  apt install clang-8 clang-tools-8 clang-format-8 apt install libc++-8-dev libclang-8-dev libc++abi-8-dev update-alternatives --install /usr/bin/clang clang /usr/bin/clang-8 100 update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-8 100 update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-8 100 update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-8 100 ```  ## Referências  * [Install Clang-8 on Debian Stretch](https://gist.github.com/binshengliu/3d3fba46471d1fa42fa5a2070abf52e0)  ","title":"Clangd + vim"},{"id":145,"location":"/til/vim-run-tests.html","tags":["vim"],"text":" Test driven development thrives on a tight feedback loop but switching from the editor to the shell to manually run specs is inefficient.  Tools such as `autotest` and `guard` run specs whenever a file gets saved. Although an improvement over a manual workflow, those approaches often run the suite when not needed and run too many or too few specs.  Enter [vim-rspec], a lightweight Vim plugin that runs specs directly from within Vim with the press of a key.  [vim-rspec]: https://github.com/thoughtbot/vim-rspec  It exposes methods such as `RunNearestSpec()`, `RunCurrentSpecFile()`, and `RunLastSpec()`, which can be bound to a key mapping of your choice. In [thoughtbot/dotfiles][dotfiles], we bind those methods to `<Leader>s`, `<Leader>t`, and `<Leader>l`.  [dotfiles]: https://github.com/thoughtbot/dotfiles/blob/master/vimrc  Cursor over any line within an RSpec spec like this:  ```ruby describe RecipientInterceptor do   it 'overrides to/cc/bcc fields' do     Mail.register_interceptor RecipientInterceptor.new(recipient_string)      response = deliver_mail      expect(response.to).to eq [recipient_string]     expect(response.cc).to eq []     expect(response.bcc).to eq []   end end ```  Type `<Leader>s`:  ``` rspec spec/recipient_interceptor_spec.rb:4 .  Finished in 0.03059 seconds 1 example, 0 failures ```  The screen is overtaken by a shell that runs only the focused spec. Developers using tmux with vim-rspec and tslime sometimes send the output to a nearby shell so the code and spec output display on the screen at the same time.  Feeling good that this new spec passes, run the whole file's specs with `<Leader>t` to make sure the class's entire functionality is still intact:  ``` rspec spec/recipient_interceptor_spec.rb ......  Finished in 0.17752 seconds 6 examples, 0 failures ```  Red, green, refactor. From within the application's or library's code:  ```ruby def delivering_email(message)   add_custom_headers message   add_subject_prefix message   message.to = @recipients   message.cc = []   message.bcc = [] end ```  Run `<Leader>l` without having to switch back to the spec:  ``` rspec spec/recipient_interceptor_spec.rb ......  Finished in 0.17752 seconds 6 examples, 0 failures ```  These tight feedback loops make Test-Driven Development easier by eliminating the switching cost between editor to the shell when running specs.  ","title":"Run Tests in Vim"},{"id":146,"location":"/til/vim-abolish.html","tags":["vim"],"text":" * <https://github.com/tpope/vim-abolish>  * `crm` - `MixedCase` * `crc` - `camelCase` * `crs` - `snake_case` * `cru` - `UPPER_CASE` * `cr-` - `dash-case` * `cr.` - `dot.case` * `cr<space>` - `space case` * `crt` - `Title Case`  ","title":"Vim plugin coersion: snake_case, MixedCase, camelCase, UPPER_CASE, dash-case, dot.case, space case, Title Case"},{"id":147,"location":"/til/cpp_sort.html","tags":["C++","ordenação","sort"],"text":" ## Estatísticas  Método               | Comparações | Swaps     | Escrita   | Escrita auxiliar | Tempo ms ---------------------|------------:|-----------|-----------|------------------|------ Bubble sort          |   2.096.128 | 1.001.372 | 2.002.744 | 0                | 110 Cocktail Shaker sort |   2.097.152 | 1.010.635 | 2.021.270 | 0                | 109 Gnome sort           |   2.002.322 | 1.000.141 | 2.000.282 | 0                | 106 Odd-Even sort        |   2.057.262 | 1.047.262 | 2.094.524 | 0                | 112 Comb sort            |      58.752 |    10.198 |    20.396 | 0                |   6  Os dados desta tabela forma tirados do vídeo https://www.youtube.com/watch?v=FZ8FaztJGEo   ## Bubble sort  {{% youtube lyZQPjUT5B4 %}}  ## Quick sort  {{% youtube ywWBy6J5gz8 %}}  ## Select sort  {{% youtube Ns4TPTC8whw %}}  ## Shell sort  {{% youtube CmPA7zE8mx0 %}}  ## Merge sort  {{% youtube XaqR3G_NVoo %}}   ## Insert sort  {{% youtube ROalU379l3U %}}  ## Heap sort  {{% youtube Xw2D9aJRBY4 %}}   ## Binary search  {{% youtube iP897Z5Nerk %}}  ## Comparação  {{% youtube DSMCZZGbZo4 %}}  ## Referências  * [Fast and stable sort algorithm that uses O(1) memory. Public domain.](https://github.com/BonzaiThePenguin/WikiSort)  ","title":"C++ - Ordenação"},{"id":148,"location":"/til/xfce-xfconf-query.html","tags":["xfce","debian","linux","composite"],"text":" ## Referências  xfconf-query -c xfwm4 -p /general/use_compositing  xfconf-query -c xfwm4 -p /general/use_compositing -t bool --toggle xfconf-query -c xfwm4 -p /general/use_compositing -s true xfconf-query -c xfwm4 -p /general/use_compositing -s false   * [Alternando o compositor do Xfce via script em shell](https://www.youtube.com/watch?v=jR9NtwMDASU) ","title":"Habilitando e desabilitando o modo composite no Xfce"},{"id":149,"location":"/til/windows-key.html","tags":["windows"],"text":" To find your original Windows 10 product key from Linux:  1. Open the terminal application. 2. You must run the Linux command as the root user. 3. Type ‘sudo strings /sys/firmware/acpi/tables/MSDM‘ to print Windows 10 or Windows 8 OEM product key 4. You can also use the acpidump command to get the same information under Linux.  Let us see all the commands and examples in detail.  ```shell strings /sys/firmware/acpi/tables/MSDM  ```  ```shell MSDMU ACRSYSACRPRDCT 1025 00000-00000-00000-00000-XD4FC ```   ## Referências  * [Linux find Windows 10 OEM product key command](https://www.cyberciti.biz/faq/linux-find-windows-10-oem-product-key-command/)  ","title":"Obtendo key do windows a partir do linux"},{"id":150,"location":"/til/socialsizeio.html","tags":["social"],"text":" ## Referências  * [Image and Video sizes for Social Media. Templates for Sketch, Figma, Adobe XD & Photoshop.](https://socialsizes.io/) ","title":"Tamanhos de imagens e vídeos para redes sociais"},{"id":151,"location":"/til/pdfjs.html","tags":["pdfjs"],"text":" ## Referências  * [Custom PDF Rendering in JavaScript with Mozilla's PDF.Js](https://www.sitepoint.com/custom-pdf-rendering/) * [How to Enable Annotations in PDF.JS](https://usefulangle.com/post/94/javascript-pdfjs-enable-annotation-layer) * [How to Display PDF in HTML Page using Javascript PDF.JS Library](https://usefulangle.com/post/20/pdfjs-tutorial-1-preview-pdf-during-upload-wih-next-prev-buttons) ","title":"Pdf.js"},{"id":152,"location":"/til/como-trocar-hostname-sem-reiniciar.html","tags":["sysadmin","linux","debian","hostname"],"text":" Como um **Administrador de Sistemas**, as vezes, você precisa alterar o nome da máquina. Seja porque digitou o nome errado durante a instalação, ou se a política de nomes da empresa mudou ou se o nome já estava sendo utilizado por outra máquina.  **Nota:** O procedimento que veremos a seguir vale para as distribuições Linux derivadas do [Debian](https://www.debian.org), tais como [Mint](https://linuxmint.com), [Ubuntu](https://www.ubuntu.com), e outras 130 (segundo o [distrowatch](https://distrowatch.com/search.php?basedon=Debian)).  O arquivo de sistema que guarda o nome da máquina para ser usado a cada boot é o `/etc/hostname`, então basta trocar seu conteúdo que no **próximo boot** a máquina terá outro nome.  Uma opção bem simples de edição, já que o conteúdo deste arquivo é somente uma palavra, é enviar através do comando `echo` o novo nome para o arquivo `/etc/hostname`:  ```shell echo \"novo-nome\" > /etc/hostname ```  **Para o próximo boot está tudo OK!**  Se verificarmos a configuração a com o comando `hostname` veremos que ainda mostra o nome antigo. Mas a máquina já está rodando e não posso parar os serviços agora para fazer o reboot, então precisamos alterar o *kernel* em execução.  Sem pânico! Felizmente existe um modo muito simple editar variáveis do *kernel*. Ele expõe muitas de suas configurações através de um *sistema de arquivos* montado em `/proc/sys/kernel`. Vamos usar o mesmo comando `echo` para alterar o arquivo `/proc/sys/kernel/hostname`.  ```shell echo \"novo-nome\" > /proc/sys/kernel/hostname ```  Agora se lançarmos o comando `hostname` novamente veremos o novo nome e sem que seja preciso reiniciar a máquina.  Verifique se no arquivo `/etc/hosts` não existe nenhuma menção ao antigo nome, se existir atualize este arquivo. Para atualizar o `/etc/hosts` pela linha de comando faça o seguinte:  ```shell sed -i \"s/antigo-nome/novo-nome/g\" /etc/hosts ```  O `sed` é um editor de fluxo de texto que utiliza expressões regulares para editar textos de forma automatizada. Uma explicação muito breve sobre o comando acima:  * `-i`: modo de edição `inline` (abre, edita e fecha o arquivo) * `s`: comando de substituição no formato `/de/para/` * `g`: substitui todas as ocorrências de `antigo-nome` por `novo-nome`  ","title":"Como trocar o nome do servidor sem reiniciar"},{"id":153,"location":"/til/bash-trap.html","tags":["bash","trap"],"text":" ## EXIT  ```bash #!/bin/bash -x  # O arquivo será removido quando o script finalizar tempfile=/tmp/tmpdata trap \"rm -f $tempfile\" EXIT  # ...  echo \"Fim\" ```   ```bash #!/bin/bash -x  tempfile=/tmp/tmpdata  # Função chamada quando o script finalizar function cleanup {   rm -f $tempfile }  trap cleanup EXIT  # ...  echo \"Fim\" ```    ## Referências  Tem muita coisa para extrair deste artigo * [The Bash Trap Command](https://www.linuxjournal.com/content/bash-trap-command)  ","title":"Bash - trap"},{"id":154,"location":"/til/sbe.html","tags":["sbe","zeromq","nanomsg"],"text":" * ~25X greater throughput than Google Protocol Buffers (GPB) with very low and predictable latency. * A typical market data message can be encoded, or decoded, in ~25ns compared   to ~1000ns for the same message with GPB on the same hardware. XML and FIX   tag value messages are orders of magnitude slower again.  NOTE: Parece que o artigo do Mechanical Sympathy está melhor revisado  ## Referências  * [github: Simple Binary Encoding (SBE) - High Performance Message Codec](https://github.com/real-logic/simple-binary-encoding) * [DZone: Simple Binary Encoding](https://dzone.com/articles/simple-binary-encoding) * [Mechanical Sympathy: Simple Binary Encoding](https://mechanical-sympathy.blogspot.com/2014/05/simple-binary-encoding.html) * [Cap'n Proto, FlatBuffers, and SBE](https://capnproto.org/news/2014-06-17-capnproto-flatbuffers-sbe.html) ","title":"SBE - Simple Binary Encoding"},{"id":155,"location":"/til/eclipse-swtbot.html","tags":["swtbot"],"text":" ## Referências  * [Building Reusable Eclipse UI Test Automation Framework with SWTBot](https://www.ibm.com/developerworks/community/blogs/c914709e-8097-4537-92ef-8982fc416138/entry/building_reusable_eclipse_ui_test_automation_framework_with_swtbot?lang=en)  ","title":"SWTBot"},{"id":156,"location":"/til/corba.html","tags":["corba","IDL","C++","Python"],"text":" ::: toc  ## Introdução  ### O que é CORBA?  * é o acrônimo para **Common Object Request Broker Architecture** * é um framework para construção de sistemas distribuídos orientados a objetos * é multiplataforma * é independente de linguagem * é um padrão aberto e extensível definido pela *Object Management Group* * clientes e servidores estão em diferentes máquinas * programas clientes enviam mensagens para servidores remotos como se este estivesse locais (*location transparency*)  ::: adsense_in_article  ### O que é a OMG?  * www.omg.org * fundada em 1989 * somente provê especificações * não provê implementações * todas as especificações são free  ### CORBA vs SOAP/XML-RPC  * `SOAP` e `XML-RPC` são protocolos wire * `CORBA` inclui:   * um protocolo wire   * `GIOP`   * object model   * `IDL`   * mapeamento de linguagem   * serviços   * códigos de cliente e servidor portáveis  entre implementações CORBA  ### CORBA é pesado?  * uma arquitetura mínima requer algumas dezenas de kB (segundo [CORBA? Isn’ t that Obsolete ?][ACCU2003_PDF])  ## ORB - Object Request Broker  * é o núcleo da *Object Management Architecture* * integra:   * diferentes linguagens   * diferentes arquiteturas   * diferentes sistemas operacionais * é responsável por:   * encontrar uma implementação para uma requisição   * preparar implementações para receber requisições   * comunicar dados das requisições   ## Clientes  * possuem referências para objetos e invocam operações nestes objetos * conhecem apenas a interface dos objetos do servidor * não conhecem a implementação dos objetos nem os adaptadores utilizados por estas implementações * invocam interfaces definidas por uma IDL * invocam as implementações através de:   * proxies (*IDL generated stubs*)   * DII (*Dynamic Invocation Interface*)  ## Servidores  * se registram no ORB * se disponibilizam para aceitar requisições * implementam uma IDL  ## IDL  * provê interfaces independente de linguagem e sistema operacional * é puramente declarativa (não provê detalhes de implementação) * é fortemente tipada * especificações podem ser escritas e invocadas em qualquer linguagem  ### IDL Features  * modules * interfaces * operations * attributes * inheritance * basic types * arrays * sequences * struct, enum, union * typedef * consts * exceptions  ### Tipos básicos  * float * double * long * short * unsigned long * unsigned short * char * boolean * octet * any  ### Direções dos parâmetros  * `in` - do cliente para o servidor * `out` - do servidor para o cliente * `inout` - do cliente para o servidor e de volta para o cliente  ### Exceções  CORBA define dois tipos de exceções:  * **system exceptions**: exceções padrões definidas pelo CORBA * **user defined exceptions**: exceções definidas pelo usuário através da IDL  * Implicitamente, todas as operações definidas na IDL podem lançar qualquer uma das exceções padrão do sistema CORBA * Nenhuma referência para exceções padrão devem aparecer na especificação da IDL * para especificar que uma operação **pode** lançar uma exceção definida pelo usuário você deve:   * primeiro definir a estrutura da exceção   * incluir `raises` à definição da operação  * uma exceção da IDL pode conter membros  ```text Interface Bank {   exception Reject {     string reason; // membro da exceção   };   exception TooMany {}; // exceção sem membros    Account newAccount( in string name ) raises (Reject, TooMany); }; ```  ### Operações oneway  ```text Interface Account {   oneway void notice( in string notice ); }; ```  * não bloqueantes * não aceitam parâmetros `out` ou `inout` * não lançam exceções (não aceitam `raise`)  The OMG CORBA specification defines the following exceptions:  * `BAD_CONTEXT` - if a request does not contain a correct context this exception is raised. * `BAD_INV_ORDER` - this exception indicates that operations has been invoked operations in the wrong order, which would cause, for example, a dead-lock. * `BAD_OPERATION` - raised if the target object exists, but that the invoked operation is not supported. * `BAD_PARAM` - is thrown if, for example, a parameter is out of range or otherwise considered illegal. * `BAD_TYPECODE` - if illegal type code is passed, for example, encapsulated in an any data type the 'BAD_TYPECODE' exception will be raised. * `BAD_QOS` - raised whenever an object cannot support the required quality of service. * `CODESET_INCOMPATIBLE` - raised if two ORB's cannot communicate due to different representation of, for example, char and/or wchar. * `COMM_FAILURE` - raised if an ORB is unable to setup communication or it is lost while an operation is in progress. * `DATA_CONVERSION` - raised if an ORB cannot convert data received to the native representation. See also the 'CODESET_INCOMPATIBLE' exception. * `FREE_MEM` - the ORB failed to free dynamic memory and failed. * `IMP_LIMIT` - an implementation limit was exceeded in the ORB at run time. A object factory may, for example, limit the number of object clients are allowed to create. * `INTERNAL` - an internal failure occurred in an ORB, which is unrecognized. You may consider contacting the ORB providers support. * `INTF_REPOS` - the ORB was not able to reach the interface repository, or some other failure relating to the interface repository is detected. * `INITIALIZE` - the ORB initialization failed due to, for example, network or configuration error. * `INVALID_TRANSACTION` - is raised if the request carried an invalid transaction context. * `INV_FLAG` - an invalid flag was passed to an operation, which caused, for example, a connection to be closed. * `INV_IDENT` - this exception indicates that an IDL identifier is incorrect. * `INV_OBJREF` - this exception is raised if an objet reference is malformed or a nil reference (see also corba:create_nil_objref/0). * `INV_POLICY` - the invocation cannot be made due to an incompatibility between policy overrides that apply to the particular invocation. * `MARSHAL` - this exception may be raised by the client- or server-side when either ORB is unable to marshal/unmarshal requests or replies. * `NO_IMPLEMENT` - if the operation exists but no implementation exists, this exception is raised. * `NO_MEMORY` - the ORB has run out of memory. * `NO_PERMISSION` - the caller has insufficient privileges, such as, for example, bad SSL certificate. * `NO_RESOURCES` - a general platform resource limit exceeded. * `NO_RESPONSE` - no response available of a deferred synchronous request. * `OBJ_ADAPTER` - indicates administrative mismatch; the object adapter is not able to associate an object with the implementation repository. * `OBJECT_NOT_EXIST` - the object have been disposed or terminated; clients should remove all copies of the object reference and initiate desired recovery process. * `PERSIST_STORE` - the ORB was not able to establish a connection to its persistent storage or data contained in the the storage is corrupted. * `REBIND` - a request resulted in, for example, a 'LOCATION_FORWARD' message; if the policies are incompatible this exception is raised. * `TIMEOUT` - raised if a request fail to complete within the given time-limit. * `TRANSACTION_MODE` - a transaction policy mismatch detected. * `TRANSACTION_REQUIRED` - a transaction is required for the invoked operation but the request contained no transaction context. * `TRANSACTION_ROLLEDBACK` - the transaction associated with the request has already been rolled back or will be. * `TRANSACTION_UNAVAILABLE` - no transaction context can be supplied since the ORB is unable to contact the Transaction Service. * `TRANSIENT` - the ORB could not determine the current status of an object since it could not be reached. The error may be temporary. * `UNKNOWN` - is thrown if an implementation throws a non-CORBA, or unrecognized, exception.  ### Estruturas  ```text struct PersonalDetails {   string name;   short age; };  interface Bank {   PersonalDetails getPerDet(in string name); }; ```  ### Arrays  * podem ser multidimensionais * precisam ter tamanho fixo (*conhecido em tempo de definição*)  ```text Account bankAccounts[100]; short matrix[10][20]; // 2D array ```  ### Constantes  ```text Interface Bank {   const long MaxAccounts = 10000; }; ```  Contantes dos tipos `long`, `float` e `string` podem ser declarada.   ### Typedef  ```text typedef short size; size i;  typedef Account Accounts[100]; // acho que está invertido aqui Accounts bankAccounts; ```  ### Módulos  ```text Module Finance {   interface Bank { ... };   interface Account { ... }; }; ```  * são usados para agrupar interfaces em unidades lógicas * utilize nomes completos (p.e. `Finance::Account *a;`)  ### Preprocessador  * baseado no preprocessador do C++ * substituição de macro * compilação condicional * inclusão de IDL * `#include` * `#define` * `#if` * `#ifdef` * `#defined`  ### Mapeamento para linguagem  * linguagens *OO* e *non-OO* acessam de modos diferentes * tipos específicos da linguagem * estrutura do *stub* cliente (somente para *non-OO*) * interface de invocação dinâmica * esqueleto de implementação * adaptadores de objeto * interface direta ao ORB  ### Mapeamento de identificadores  * usa o mesmo nome * se for uma palavra reservada do C++ receberá um `_` como prefixo (p.e. `_new`)  ### Mapeamento de interface  * são mapeadas para classes * uma IDL mapeada para uma classe C++ não pode ser instanciada  ```text Interface Account { ... } ```  será mapeado para:  ```c++ class Account : public virtual CORBA::Object { ... } ```  ### Mapeamento de escopo  #### Interface para classe  ```text Interface Bank {   struct Details { ... }; }; ```  será mapeado para:  ```c++ class Bank {   public:     struct Details { ... }; }; ```  #### Module para namespace  ```text Module M {   Interface A { ... };   Interface B { ... }; }; ```  será mapeado para:  ```c++ namespace M {   class A { ... };   class B { ... }; }; ```  Acessíveis via `M::A` e `M::B`.  ### Mapeamento do módulo padrão do CORBA  Será mapeado para:  ```c++ namespace CORBA { ... } ```  Utilize os membros como:  ```c++ CORBA::ORB_init( ... ); ```  ### Mapeamento de tipos  IDL                | C++               | Tamanho e faixa -------------------|-------------------|--------------------------------------------------- short              | CORBA::Short      | 16 bit: $-2^{15} \\ldots +2^{15} - 1$ long               | CORBA::Long       | 32 bit: $-2^{31} \\ldots +2^{31} - 1$ long long          | CORBA::LongLong   | 64 bit: $-2^{63} \\ldots +2^63 - 1$ unsigned short     | CORBA::UShort     | 16 bit: $0 \\ldots 2^{16} - 1$ unsigned long      | CORBA::ULong      | 32 bit: $0 \\ldots 2^{32} - 1$ unsigned long long | CORBA::ULongLong  | 64 bit: $0 \\ldots 2^{64}$ float              | CORBA::Float      | 32 bit IEEE single precision floating point number double             | CORBA::Double     | 64 bit IEEE double precision floating point number long double        | CORBA::LongDouble | -- char               | CORBA::Char       | 8 bit wchar              | CORBA::WChar      | -- (Wide Char) string             | CORBA::char *     | -- wstring            | CORBA::WChar *    | -- boolean            | CORBA::Boolean    | true/false octet              | CORBA::Octet      | (unsigned char)  8 bit raw. Sem conversão any                | CORBA::Any        | Arbitrary   ## Repositório de interfaces  * provê armazenamento para informações da IDL * um programa pode referenciar objetos cuja interface será conhecida em tempo de execução * estas informações podem ser usadas pelo ORB para realizar requisições * pode armazenar outras informações sobre interfaces:   * debugging   * info   * browser routines  ## Repositório de implementação  * informações que o ORB utiliza para localizar e ativar implementações de um servidor de objetos * armazena informações de ativação:   * máquina onde um servidor pode ser iniciado a partir de uma requisição do cliente  ## Dynamic Invocation Interface  * Em vez de chamar um stub específico de uma operação, é possível especificar um objeto, operação e parâmetros para através de uma chamada ou sequência de chamadas * o cliente precisa fornecer os tipos dos parâmetros passados  ## Interoperabilidade  * suporta rede de objetos distribuídos em múltiplos ORBs (heterogêneos) * *InterORBability* * `GIOP`: (General Inter-ORB Protocol) sintaxe padrão de transferência e conjunto de formato de mensagens * ESIOP: (Environment Specific Inter-ORB Protocol) protocolo especializado * `IIOP`: mapeamento `TCP/IP` para `GIOP`  ## COSS - Common Object Service Specification  * naming * events * life cycle * time * transactions * concurrency * persistence * query * security * licensing * relationships * properties * externalization * collection  ## OA - Object Adapter  * Conectam implementações de objetos ao ORB * Ativam os múltiplos objetos implementados por um servidor * Encaminhamento de requisições de serviço * Geram *object references*   * Para ter o status de **CORBA Object** o objeto deve ser registrado com o adaptador  ## BOA - Basic Object Adapter  * Presente na especificação CORBA até a revisão 2.1 * CORBA 2.2 substituiu o BOA pelo POA * ORB com BOA significa que os servidores não são portáveis  ## POA Portable Object Adapter  * O POA (*Portable Object Adapter*) auxilia o ORB (*Object Request Broker*) na   passagem das requisições do clientes para a implementação do servidor   (servant). * O POA interpreta a requisição, empacota a passagem de parâmetros e então   localiza o servant e os tratadores de recuperação erros e de segurança. * Isto habilita portabilidade, independência de fabricantes e extensibilidade   compatível com a especificação da OMG (Object Management Group) * POA também habilita a persistência de objetos bem como dá suporte a ciclo de   vida do serviço * Identificadores de objetos automaticamente gerados ou especificados pelo usuário * Ativação explícita ou por demanda * Relação: um servant <-> um ou mais objetos CORBA * Aplicação tem total controle sobre o comportamento e sobre a existência dos objetos CORBA * *Servants* podem usar esqueletos estáticos ou dinâmicos  ### Identificador de Objeto  * Valor usado para identificar um objeto no contexto de um POA   * Não é um identificador globalmente único! * Pode ser determinado pela aplicação ou gerado pelo POA   * `typedef sequence<octet> ObjectID;` * O POA coloca esse valor no campo *object id* da IOR  ### O Campo Object Id da IOR  ![](/til/corba-ior-object-id.webp)   ## Instalação do omniORB no Debian  ```shell apt install libomniorb4-dev omniidl omniorb omniorb-doc omniorb-nameserver omniidl-python python-omniorb ```  ## Iniciar o servidor de nomes  ### OmniORB  Incluir no arquivo `/etc/omniORB.cfg` a seguinte linha:  ```text InitRef = OmniNameService=corbaname::localhost ```  ::: note O nome **OmniNameService** deve ser conhecido pelo **servidor** e pelo **cliente**.  Para iniciar o servidor de nomes do **OmniORB** use:  ```shell omniNames -start ```  Exemplo de saída do comando acima:  ```text omniNames: (0) 2019-12-30 15:36:29.516974: Data file: '/var/lib/omniorb/omninames-erebo.dat'. omniNames: (0) 2019-12-30 15:36:29.517058: Starting omniNames for the first time. omniNames: (0) 2019-12-30 15:36:29.517348: Wrote initial data file '/var/lib/omniorb/omninames-erebo.dat'. omniNames: (0) 2019-12-30 15:36:29.517444: Read data file '/var/lib/omniorb/omninames-erebo.dat' successfully. omniNames: (0) 2019-12-30 15:36:29.517529: Root context is IOR:010000002b00000049444c3a6f6d672e6f72672f436f734e616d696e672f4e616d696e67436f6e746578744578743a312e300000010000000000000070000000010102000d0000003139322e3136382e302e31330000f90a0b0000004e616d6553657276696365000300000000000000080000000100000000545441010000001c000000010000000100010001000000010001050901010001000000090101000354544108000000ad430a5e010075e0 omniNames: (0) 2019-12-30 15:36:29.517600: Checkpointing Phase 1: Prepare. omniNames: (0) 2019-12-30 15:36:29.517703: Checkpointing Phase 2: Commit. omniNames: (0) 2019-12-30 15:36:29.517802: Checkpointing completed. ```  A porta padrão é a `2809`.  Os arquivos de controle serão criados por padrão no diretório `/var/lib/omniorb/`:  * `/var/lib/omniorb/omninames-nome-da-maquina.dat` * `/var/lib/omniorb/omninames-nome-da-maquina.bak`  Para especificar um diretório diferente use a opção `-logdir`:  ```shell omniNames -logdir /tmp -start ```  ### MICO  Para iniciar o servidor de nomes do **MICO** use:  ```shell nsd -ORBIIOPAddr inet:localhost:2809 ```  Veja exemplo em [Connecting 3 ORBs][CONNECTING_3_ORBS].   ## Exemplo  ![Componentes do exemplo](/til/corba-01.webp)  ### Criando a IDL  Arquivo de interface `Data.idl`:  ```c++ {linenos=true} #ifndef __DATADIST_IDL__ #define __DATADIST_IDL__ module Data {   interface ServiceA {     boolean CallServiceRoutineA (         in    long num1,         inout long num2,         out   long retNum );     boolean CallServiceRoutineB (         inout long num1,         inout long num2);   }; }; #endif ```  ### Gerando backend a partir da IDL  Use a opção `-b` para escolher o `backend` a ser gerado.  ```shell omniidl -bcxx    Data.idl omniidl -bpython Data.idl omniidl -bdump   Data.idl ```  #### Gerando Python  ```shell omniidl -bpython Data.idl ```  Os arquivos abaixo são criados:  * `Data_idl.py` * `Data__POA/__init__.py` * `Data/__init__.py`  ::: fixme Descrever os arquivos **gerados** em `python`.  ::: warning lorem ipsum  ::: tip lorem ipsum  ::: info lorem ipsum  ::: note lorem ipsum  #### Gerando C++  Ao executar o seguinte comando:  ```shell omniidl -bcxx Data.idl ```  os arquivos abaixo são criados:  * `Data.hh` - cabeçalho que será usado pelo cliente e pelo servidor * `DataSK.cc` - deve ser compilado e lincado com o programa que proverá a infraestrutura de comunicação  Contendo os seguintes items:  * classe `ServiceA` contendo funções estáticas e definições de tipos * `ServiceA_ptr` - um ponteiro para o tipo do objeto de referência * `ServiceA_var` - um helper para gerenciamento de memória usado por `ServiceA_ptr` * classe `POA_Service!` - a classe esqueleto para o servidor  ##### Data.hh  ```c++ {show-line-numbers data-ln-start-from=85}   // interface ServiceA   class ServiceA {   public:     // Declarations for this interface type.     typedef ServiceA_ptr _ptr_type;     typedef ServiceA_var _var_type;     static _ptr_type _duplicate(_ptr_type);     static _ptr_type _narrow(::CORBA::Object_ptr);     static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);     static _ptr_type _nil(); ```  ##### DataSK.cc  ```c++ // This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.  #include \"Data.hh\" #include <omniORB4/IOP_S.h> #include <omniORB4/IOP_C.h> #include <omniORB4/callDescriptor.h> #include <omniORB4/callHandle.h> #include <omniORB4/objTracker.h>  OMNI_USING_NAMESPACE(omni) ... ```  ## Criando o servidor  ### Server.cc  Código do servidor:  1. Iniciar o ORB 2. Obter a referência para o POA raiz para registra-se 3. Vincular com o serviço de nomes 4. Iniciar o servidor de objetos  ```c++ // Server.cc  #include <assert.h> #include <iostream> #include <signal.h> #include <stdlib.h> #include <string> #include <unistd.h> #include \"CServiceA_i.hh\" #include \"Data.hh\"  using namespace std;  int main( int argc, char **argv ) {   try { ```  ```c++ {show-line-numbers data-ln-start-from=17}     // (1) Iniciar o ORB     CORBA::ORB_var orb = CORBA::ORB_init( argc, argv ); ```  ```c++ {show-line-numbers data-ln-start-from=19}     // (2) Obter a referência para o POA raiz para registra-se para ficar disponível para os clientes     CORBA::Object_var       obj  = orb->resolve_initial_references( \"RootPOA\" );     PortableServer::POA_var _poa = PortableServer::POA::_narrow( obj.in() ); ```  ```c++ {show-line-numbers data-ln-start-from=22}     // As operações definidas na interface são invocadas pelo objeto de referência.     // Um instância de CRequestSocketStream_i é iniciada     PortableServer::Servant_var<CServiceA_i> myRequestServiceA = new CServiceA_i(); ```  ```c++ {show-line-numbers data-ln-start-from=25}     // o servidor e objetos é ativado no RootPOA     PortableServer::ObjectId_var myRequestServiceA_oid = _poa->activate_object( myRequestServiceA ); ```  ```c++ {show-line-numbers data-ln-start-from=27}     // Obtêm o objeto de referência do servidor e registra no servidor de nome     CORBA::Object_var SA_obj = myRequestServiceA->_this(); ```  ```c++ {show-line-numbers data-ln-start-from=29}     // Obtêm uma referência para o objeto e imprime seu IOR como string     CORBA::String_var sior( orb->object_to_string( SA_obj.in() ) );     cerr << \"'\" << (char *)sior << \"'\" << endl; ```  ::: note Aqui você deve utilizar o mesmo nome do servidor de nomes definido no arquivo `/etc/omniORB.cfg`.  ```c++ {show-line-numbers data-ln-start-from=32}     // (3) Vincular com o serviço de nomes     // o serviço é definido pela diretiva InitRef e pelo identificador     // \"OmniNameService\" no arquivo omniORB.cfg     CORBA::Object_var obj1 = orb->resolve_initial_references( \"OmniNameService\" );     assert( !CORBA::is_nil( obj1.in() ) ); ```  ```c++ {show-line-numbers data-ln-start-from=37}     CosNaming::NamingContext_var nc = CosNaming::NamingContext::_narrow( obj1.in() );     assert( !CORBA::is_nil( nc.in() ) ); ```  ```c++ {show-line-numbers data-ln-start-from=39}     CosNaming::Name name;     name.length( 1 );     name[0].id = CORBA::string_dup( \"DataServiceName1\" );     nc->rebind( name, SA_obj.in() ); ``` ```c++ {show-line-numbers data-ln-start-from=43}     //========================================================================     myRequestServiceA->_remove_ref();     //     PortableServer::POAManager_var pmgr = _poa->the_POAManager();     pmgr->activate();     // (4) Iniciar o servidor de objetos para aceitar requisições dos clientes     orb->run();     //     // Se o ORB deixar o loop de tratamento de eventos     // Atualmente está configurado para nunca dar timeout     orb->destroy();     //     free( name[0].id ); // str_dup realiza um malloc internamente   } ```  Tratar as exceções:  ```c++ {show-line-numbers data-ln-start-from=57}   catch( CORBA::TRANSIENT & ) {     cerr << \"Caught system exception TRANSIENT -- unable to contact the server.\" << endl;   }   catch( CORBA::OBJECT_NOT_EXIST & ) {     cerr << \"Caught system exception OBJECT_NOT_EXIST\" << endl;   }   catch( CORBA::SystemException & ) {     cerr << \"Caught CORBA::SystemException.\" << endl;   }   catch( CORBA::Exception & ) {     cerr << \"Caught CORBA::Exception.\" << endl;   }   catch( omniORB::fatalException &fe ) {     cerr << \"Caught omniORB::fatalException:\" << endl;     cerr << \"  file: \" << fe.file() << endl;     cerr << \"  line: \" << fe.line() << endl;     cerr << \"  mesg: \" << fe.errmsg() << endl;   }   catch( ... ) {     cerr << \"Caught unknown exception.\" << endl;   }    return 0; } ```  ## Implementação do Servant  São denotados pelo sufixo `_i`.  ### CServiceA_i.hh  ```c++ // CServiceA_i.hh #include \"Data.hh\"  class CServiceA_i : public POA_Data::ServiceA, public PortableServer::RefCountServantBase { public:   CServiceA_i();   virtual ~CServiceA_i();   virtual CORBA::Boolean CallServiceARoutineA(     /*in*/    CORBA::Long num1,     /*inout*/ CORBA::Long &num2,     /*out*/   CORBA::Long &retNum );   virtual CORBA::Boolean CallServiceARoutineB(     /*inout*/ CORBA::Long &num1,     /*inout*/ CORBA::Long &num2 ); }; ```  ### CServiceA_i.cc  ```c++ // CServiceA.cc  #include <fstream> #include <iostream> #include <stdio.h> #include <stdlib.h> #include <string.h> #include <string> #include <sys/types.h> #include <unistd.h> #include <vector>  #include \"CServiceA_i.hh\"  using namespace Data;  #include <sys/wait.h>  CServiceA_i::CServiceA_i() { }  CServiceA_i::~CServiceA_i( void ) { }  CORBA::Boolean CallServiceARoutineA(     /*in*/    CORBA::Long num1,     /*inout*/ CORBA::Long &num2,     /*out*/   CORBA::Long &retNum ) {   num2   = num2 + num1;   retNum = 10;   return true; }  CORBA::Boolean CallServiceARoutineB(     /*inout*/ CORBA::Long &num1,     /*inout*/ CORBA::Long &num2 ) {   num1++;   num2++;   return true; } ```  ## Cliente CORBA  ![Cliente CORBA](/til/corba-client.webp)  ### Client.cc  ```c++ // Client.cc #include \"CRequestServiceA.hh\"  int main( int argc, char **argv ) {   // O construtor estabelece o link como o servidor CORBA.   CRequestServiceA requestServiceA;    if( requestServiceA.RequestServiceARoutineA() ) {     cout << \"ServiceA RoutineA: True\" << endl;   }   if( requestServiceA.RequestServiceARoutineB() ) {     cout << \"ServiceA RoutineB: True\" << endl;   }   return 0; } ```  ### CRrquestServiceA.hh  ```c++ // CRrquestServiceA.hh #include \"Data.hh\" #include <cassert> #include <fstream> #include <iostream>  using namespace std;  class CRequestServiceA { public:   CRequestServiceA();   ~CRequestServiceA();   bool RequestServiceARoutineA();   bool RequestServiceARoutineB();    CosNaming::Name m_corbaCosName;    // CORBA ORB   CORBA::ORB_var m_orb;    CORBA::Object_var m_obj;  // ORB Object   CORBA::Object_var m_obj1; // Resolved id to object reference    // Resolved and narrowed CORBA object for proxy calls   Data::ServiceA_var m_Data; };  class DS_ServerConnectionException { public:   DS_ServerConnectionException()   {     cerr << \"CORBA COMM_FAILURE\" << endl;   }; };  class DS_SystemException { public:   DS_SystemException()   {     cerr << \"CORBA Exception\" << endl;   }; };  class DS_FatalException { public:   DS_FatalException()   {     cerr << \"CORBA Fatal Exception\" << endl;   }; };  class DS_Exception { public:   DS_Exception()   {     cerr << \"Exception\" << endl;   }; }; ```  ### CRequestServiceA.cc  ```c++ // CRequestServiceA.cc  #include \"CRequestServiceA.hh\" using namespace Data;  CRequestServiceA::CRequestServiceA() {   try {     // Inicia o objeto ORB     int            argc = 0; // Variáveis dummy.     char **        argv = 0;     CORBA::ORB_var orb  = CORBA::ORB_init( argc, argv );      // Vincula o objeto ORB ao servidor de nome     // Deve ser o mesmo nome definido em /etc/omniORB.cfg     CORBA::Object_var obj = orb->resolve_initial_references( \"OmniNameService\" );     assert( !CORBA::is_nil( obj.in() ) );      CosNaming::NamingContext_var nc = CosNaming::NamingContext::_narrow( obj.in() );     assert( !CORBA::is_nil( nc.in() ) );      CosNaming::Name _corbaCosName;     _corbaCosName.length( 1 );     _corbaCosName[0].id = CORBA::string_dup( \"DataServiceName1\" );      CORBA::Object_var obj1 = nc->resolve( _corbaCosName );     assert( !CORBA::is_nil( obj1.in() ) );      m_Data = ServiceA::_narrow( obj1.in() );     if( CORBA::is_nil( m_Data.in() ) ) {       cerr << \"IOR is not an SA object reference.\" << endl;     }   }   catch( CORBA::COMM_FAILURE &ex ) {     cerr << \"Caught system exception COMM_FAILURE -- unable to contact the \"          << \"object.\" << endl;     throw DS_ServerConnectionException();     return;   }   catch( CORBA::SystemException & ) {     cerr << \"Caught a CORBA::SystemException.\" << endl;     throw DS_SystemException();     return;   }   catch( CORBA::Exception & ) {     cerr << \"Caught CORBA::Exception.\" << endl;     throw DS_Exception();     return;   }   catch( omniORB::fatalException &fe ) {     cerr << \"Caught omniORB::fatalException:\" << endl;     cerr << \"  file: \" << fe.file() << endl;     cerr << \"  line: \" << fe.line() << endl;     cerr << \"  mesg: \" << fe.errmsg() << endl;     throw DS_FatalException();     return;   }   catch( ... ) {     cerr << \"Caught unknown exception.\" << endl;     throw DS_Exception();     return;   }   return; }  CRequestServiceA::~CRequestServiceA() {   // ... }  bool CRequestServiceA::RequestServiceARoutineA() {   CORBA::Long num1 = 4;   CORBA::Long num2 = 5;   CORBA::Long retNum;    cout << \"Valores de entrada para a rotina A do serviço A: \" << num1 << \" \" << num2 << \" \" << retNum << endl;    // Esta chamada CORBA será executada remotamente   if( m_Data->CallServiceRoutineA( num1, num2, retNum ) ) {     cout << \"Valores retornados pelo serviço A: \" << num1 << \" \" << num2 << \" \" << retNum << endl;     return true;   }   return false; }  bool CRequestServiceA::RequestServiceARoutineB() {   CORBA::Long num1 = 0;   CORBA::Long num2 = 50;    cout << \"Valores de entrada para a rotina B do serviço A: \" << num1 << \" \" << num2 << endl;    // Esta chamada CORBA será executada remotamente   if( m_Data->CallServiceRoutineB( num1, num2 ) ) {     cout << \"Valores retornados pelo serviço B: \" << num1 << \" \" << num2 << endl;     return true;   }   return false; } ```  ## Makefile  ```makefile # Makefile LDFLAGS+=-lomniORB4 -lomnithread -lomniDynamic4 CXXFLAGS+=-Wall  all: server client  server: DataSK.o CServiceA_i.o Server.o \t$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS)  client: DataSK.o Client.o CRequestServiceA.o \t$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS)  clean: \trm -f *.o \trm -f server \trm -f client ```   This is the value of CORBA. This is why we use CORBA. Look at how simple the program looks. The constructor establishes the link with the CORBA server. The subsequent calls to Routine A and B are processed remotely on the CORBA server but called like any other local function call.  ## Todo  * https://www.grisby.org/presentations/py10tut.pdf * https://www.grisby.org/presentations/CORBAControls2002.pdf * https://xennis.org/wiki/CORBA <- tutorial que parece muito interessante * http://www.mario-konrad.ch/blog/programming/connect_orbs.html * https://docs.oracle.com/cd/E13203_01/tuxedo/tux100/pdf/naming.pdf  ## Referências  * [Introduction to Distributed Computing using CORBA](https://www.cse.iitb.ac.in/~rkj/talks/corba-tutorial.pdf) * [CORBA, C++ and Linux](http://www.yolinux.com/TUTORIALS/CORBA.html) * [O Adaptador de Objetos e Interoperabilidade CORBA](https://www.cin.ufpe.br/~cagf/sdgrad/aulas/POA+GIOP.pdf) * [CORBA Tutorial: Connecting 3 ORBs][CONNECTING_3_ORBS] * [CORBA? Isn’ t that Obsolete ?][ACCU2003_PDF] * (local) [The omniORB IDL Compiler](file:///usr/share/doc/omniorb-doc/omniidl.html) * (local) [The omniNames CORBA Naming Service](file:///usr/share/doc/omniorb-doc/omniNames.html) * (local) [The OMNI Thread Abstraction](file:///usr/share/doc/omniorb-doc/omnithread.html) * (local) [The omniORB utilities](file:///usr/share/doc/omniorb-doc/utilities.html) * (local) [The omniORB version 4.2 Users’ Guide](file:///usr/share/doc/omniorb-doc/omniORB/index.html) * [Mapping of OMG IDL Statements to C++](https://docs.oracle.com/cd/E13211_01/wle/cref/member.htm) * [Raising Exceptions in IDL Operations](http://www.cs.rpi.edu/~musser/dsc/idl/idl-overview_5.html) * [O Portable Object Adapter](https://www.ime.usp.br/~reverbel/SMW-07/Slides/POA.pdf) * [CORBA System and User Defined Exceptions](http://erlang.org/documentation/doc-5.7/lib/orber-3.6.11/doc/html/ch_exceptions.html)  [CONNECTING_3_ORBS]: http://www.mario-konrad.ch/blog/programming/connect_orbs.html [ACCU2003_PDF]: https://www.grisby.org/presentations/accu2003.pdf ","title":"CORBA"},{"id":157,"location":"/til/cpp_clant-tidy.html","tags":["C++","clang-tidy"],"text":" ## Instalação  ```shell apt-get install clang-tidy ```  ## Verificadores disponíveis  ```shell clang-tidy --list-checks -checks='*' | grep \"modernize\"     modernize-avoid-bind     modernize-deprecated-headers     modernize-loop-convert     modernize-make-shared     modernize-make-unique     modernize-pass-by-value     modernize-raw-string-literal     modernize-redundant-void-arg     modernize-replace-auto-ptr     modernize-replace-random-shuffle     modernize-return-braced-init-list     modernize-shrink-to-fit     modernize-unary-static-assert     modernize-use-auto     modernize-use-bool-literals     modernize-use-default-member-init     modernize-use-emplace     modernize-use-equals-default     modernize-use-equals-delete     modernize-use-noexcept     modernize-use-nullptr     modernize-use-override     modernize-use-transparent-functors     modernize-use-uncaught-exceptions     modernize-use-using ```  ## Uso  ```shell clang-tidy -checks='modernize-use-override' -fix test.cpp -- -std=c++11 ```  ## Referências  * [Extra Clang Tools 10 documentation - CLANG-TIDY](http://clang.llvm.org/extra/clang-tidy/) * [How to use Clang Tidy to automatically correct code](https://github.com/KratosMultiphysics/Kratos/wiki/How-to-use-Clang-Tidy-to-automatically-correct-code) ","title":"Otimizando código com clang-tidy"},{"id":158,"location":"/til/fontconfig.html","tags":["font","fontconfig"],"text":" Após a instalação do LaTeX muitas fontes matemáticas e algumas muito estranhas ficaram sendo listadas no inkscape, libreoffice, ...  É possível especificar quais fontes devem ser listadas pelos programas através do arquivo `~/.config/fontconfig/fonts.conf`.  Para obter o caminho das fontes para remoção use `fc-list | grep -i \"parte do nome da fonte\"`.  ```shell $ fc-list | grep -i \"noto\" /home/geraldo/.fonts/Noto/Noto-Mono-for-Powerline.ttf: Noto Mono for Powerline:style=Regular /usr/share/fonts/truetype/noto/NotoSans-Bold.ttf: Noto Sans:style=Bold /usr/share/fonts/truetype/noto/NotoSans-Italic.ttf: Noto Sans:style=Italic /usr/share/fonts/truetype/noto/NotoSerif-Regular.ttf: Noto Serif:style=Regular /usr/share/fonts/truetype/noto/NotoSerif-Italic.ttf: Noto Serif:style=Italic /usr/share/fonts/truetype/noto/NotoMusic-Regular.ttf: Noto Music:style=Regular /usr/share/fonts/truetype/noto/NotoSerif-BoldItalic.ttf: Noto Serif:style=Bold Italic /usr/share/fonts/truetype/noto/NotoSans-BoldItalic.ttf: Noto Sans:style=Bold Italic /usr/share/fonts/truetype/noto/NotoMono-Regular.ttf: Noto Mono:style=Regular /usr/share/fonts/truetype/noto/NotoSerif-Bold.ttf: Noto Serif:style=Bold /usr/share/fonts/truetype/noto/NotoColorEmoji.ttf: Noto Color Emoji:style=Regular /usr/share/fonts/truetype/noto/NotoSans-Regular.ttf: Noto Sans:style=Regular ```  ## Meu fonts.conf  ```xml <?xml version='1.0'?> <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'> <!--  # Como pesquisar os caminhos das fontes  fc-list | less fc-list | grep -i \"kacs\" fc-match 'Font Name'  # Comando para limpeza do cache  fc-cache -f -v  --> <selectfont>   <rejectfont>     <!-- FONTES QUE NÃO SERÃO LISTADAS MAIS -->     <glob>/usr/share/fonts/truetype/*/GFS*</glob>     <glob>/usr/share/fonts/opentype/ipafont*</glob>     <glob>/usr/share/fonts/truetype/fonts-ukij-uyghur/*</glob>     <glob>/usr/share/fonts/opentype/mathjax/*</glob>     <glob>/usr/share/fonts/opentype/stix*</glob>     <glob>/usr/share/fonts/truetype/arphic/*</glob>     <glob>/usr/share/fonts/truetype/fonts-bpg-georgian/*</glob>     <glob>/usr/share/fonts/truetype/kacst/*</glob>     <glob>/usr/share/fonts/truetype/khmeros/*</glob>     <glob>/usr/share/fonts/truetype/lohit-*</glob>     <glob>/usr/share/fonts/truetype/lyx/*</glob>     <!-- FONTES DO TeX -->     <glob>/usr/share/texlive/*</glob>     <glob>/usr/share/texmf/*</glob>     <!-- REMOVE UM CENTENA DE NOTOS -->     <glob>/usr/share/fonts/truetype/noto/NotoKufi*</glob>     <glob>/usr/share/fonts/truetype/noto/NotoNaskh*</glob>     <glob>/usr/share/fonts/truetype/noto/NotoNastaliq*</glob>     <glob>/usr/share/fonts/truetype/noto/NotoSans*</glob>     <glob>/usr/share/fonts/truetype/noto/NotoSerif*</glob>   </rejectfont>   <acceptfont>     <!-- PERMITE APENAS ALGUMAS NOTOS FILTRADOS ACIMA -->     <glob>/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf</glob>     <glob>/usr/share/fonts/truetype/noto/NotoSans-Bold.ttf</glob>     <glob>/usr/share/fonts/truetype/noto/NotoSans-BoldItalic.ttf</glob>     <glob>/usr/share/fonts/truetype/noto/NotoSans-Italic.ttf</glob>     <glob>/usr/share/fonts/truetype/noto/NotoSerif-Regular.ttf</glob>     <glob>/usr/share/fonts/truetype/noto/NotoSerif-Bold.ttf</glob>     <glob>/usr/share/fonts/truetype/noto/NotoSerif-BoldItalic.ttf</glob>     <glob>/usr/share/fonts/truetype/noto/NotoSerif-Italic.ttf</glob>     <glob>/usr/share/fonts/noto/NotoSans-*</glob>     <glob>/usr/share/fonts/noto/NotoSerif-*</glob>   </acceptfont> </selectfont> ```  ## Referências  * [Reject all fonts from a directory except one with fontconfig](https://unix.stackexchange.com/questions/534284/reject-all-fonts-from-a-directory-except-one-with-fontconfig) * [How to disable unwanted fonts on Linux](https://phoikoi.io/2018/04/27/disable-unwanted-fonts-linux.html)   ","title":"Fontconfig - escondendo fontes"},{"id":159,"location":"/til/vim-substituicao-de-texto-avancada.html","tags":["vim"],"text":" ## Como substituir texto em todos os buffers abertos  ``` :bufdo %s/pattern/replace/ge | update ```  * O `e` server para não gerar erro quando o padrão não for encontrado em algum dos buffers. * o comando `update` salva os buffers modificados.  ## Como substituir texto em um padrão  ``` :arg *.cpp :argadd ../include/*.hpp ... :argdo %s/search/replace/ge | update ```  ## Referências  * [Search and replace in multiple buffers](http://vim.wikia.com/wiki/Search_and_replace_in_multiple_buffers)  ","title":"Substituição de texto avançada no Vim"},{"id":160,"location":"/til/git-limpeza.html","tags":["git"],"text":" Para listar todos os branch locais que já formam mergeados no `dev`:  ``` git branch --merged dev   ajuste-cabecalho-inclui-guarda-de-formatacao   dev   fix-270B   fix-86   fix-gitignore   fix-wakeup   hotfix-import-faltando * test-naming-service   testar-xml-gerado-contra-dtd   teste-funcional   teste-funcional-com-geracao-de-screenshot   update-documentation-from-testlink ```  Nota: O branch marcado com `*` é o branch atual e não deve ser removido se estiver dentro dele.  ``` $ git branch --merged dev | egrep -v \"\\*\"   ajuste-cabecalho-inclui-guarda-de-formatacao   dev   fix-270B   fix-86   fix-gitignore   fix-wakeup   hotfix-import-faltando   testar-xml-gerado-contra-dtd   teste-funcional   teste-funcional-com-geracao-de-screenshot   update-documentation-from-testlink ```  Passando esta lista para um `xargs` fica fácil executar o `git branch -d` para cada um dos branches mergeados.  ``` $ git branch --merged dev | egrep -v \"\\*\" | xargs git branch -d Deleted branch ajuste-cabecalho-inclui-guarda-de-formatacao (was 712f81f5). Deleted branch dev (was d4ab4ffd). Deleted branch fix-270B (was 93b8a3c2). Deleted branch fix-86 (was 65a930a7). Deleted branch fix-gitignore (was 459db686). Deleted branch fix-wakeup (was eda4a648). Deleted branch hotfix-import-faltando (was d17fe5ae). Deleted branch testar-xml-gerado-contra-dtd (was 1d3b0381). Deleted branch teste-funcional (was 0967bcdd). Deleted branch teste-funcional-com-geracao-de-screenshot (was 0967bcdd). Deleted branch update-documentation-from-testlink (was cae58772). ```  ## Referências  * [Git Tip: Deleting Old Local Branches](https://erikaybar.name/git-deleting-old-local-branches) * [Git Tips #5 - Prune branches to keep your repro in good shape](https://www.kevinkuszyk.com/2016/08/17/git-tips-5-prune-branches-to-keep-your-repro-in-good-shape/) * [How can I delete all Git branches which have been merged?](https://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged)  ","title":"Git - Limpando o repositório"},{"id":161,"location":"/til/como-programar-para-nxt-no-debian.html","tags":["debian","linux","lego","nxt"],"text":" TBD ","title":"Como programar para Lego NXT no Debian - parte 1"},{"id":162,"location":"/til/deb-empacotamento.html","tags":["debian"],"text":" Tem muito material para assistir aqui  ## Referências  * [TBD](http://eriberto.pro.br/wiki/index.php?title=Algumas_coisas_sobre_Debian...)  ","title":"Empacotamento no Debian"},{"id":163,"location":"/til/vim-webvim.html","tags":["vim"],"text":" TODO: Estudar webvim https://github.com/vim-dist/webvim  ","title":"Webvim"},{"id":164,"location":"/til/sca-corba.html","tags":["sca"],"text":" A bem estabelecida tecnologia **CORBA** permitiu ao **SCA** atingir portabilidade e independência de plataforma.  CORBA foi desenvolvido para sistemas distribuídos consistindo de centenas ou até milhares de nós que podem estar entrando e saindo do domínio a qualquer momento. CORBA foi projetado para trabalhar num ambiente de comunicação assíncrona e fracamente acoplado no tempo.  De outro lado, os software de radio tipicamente são executados num número limitado de nós e até pouco tempo as DSPs e FPGAs não eram capazes de executar CORBA. Os nós são estaticamente definidos dentro do ciclo de funcionamento.  O discurso original do SCA prevaga que habilitaria qualquer aplicação a rodar em qualquer arquitetura com uma portabilidade extrema. Executaar uma aplicação para realizar uma impressão em batch é bem diferente de executar uma aplicação que precisa multiplexar várias mensagens em um frame de 40ms do TDMA.     ## Referências  * Livro *Software Defined Radio: The Software Communication Architecture*  ","title":"SCA e CORBA"},{"id":165,"location":"/til/vim-single-instance.html","tags":["vim"],"text":" * <http://unix.stackexchange.com/questions/23162/how-to-run-gvim-in-a-single-instance> * <http://www.phacks.net/open-multiple-text-files-as-tabs-gvim-kde4/>   ","title":"VIM single instance"},{"id":166,"location":"/til/hugo-adsense.html","tags":["adsense","hugo"],"text":" ## Referências  * [Adding Google Analytics and AdSense to a Hugo website](https://bash-prompt.net/guides/custom-html-jugo/)  ","title":"Adicionando adsense no hugo"},{"id":167,"location":"/til/nginx-cgi.html","tags":["nginx","cgi","debian","linux"],"text":" apt-get install fcgiwrap  Fcgiwrap is another CGI wrapper that should work also for complex CGI scripts and - like Simple CGI - can be used for shared hosting environments because it allows each vhost to use its own cgi-bin directory.  After the installation, the fcgiwrap daemon should already be started; its socket is /var/run/fcgiwrap.socket. If it is not running, you can use the /etc/init.d/fcgiwrap script to start it.  Now open your vhost configuration file...  vi /etc/nginx/sites-enabled/www.example.com.vhost ... and add a location /cgi-bin {} section to the server {} container:  server { [...]    location /cgi-bin/ {      # Disable gzip (it makes scripts feel slower since they have to complete      # before getting gzipped)      gzip off;      # Set the root to /usr/lib (inside this location this means that we are      # giving access to the files under /usr/lib/cgi-bin)      root  /var/www/www.example.com;      # Fastcgi socket      fastcgi_pass  unix:/var/run/fcgiwrap.socket;      # Fastcgi parameters, include the standard ones      include /etc/nginx/fastcgi_params;      # Adjust non standard parameters (SCRIPT_FILENAME)      fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;    } [...] } Reload nginx:  /etc/init.d/nginx reload Next we create our cgi-bin directory - /var/www/www.example.com/cgi-bin because we defined root /var/www/www.example.com; in the location /cgi-bin {} container:  mkdir /var/www/www.example.com/cgi-bin Now we place our CGI scripts in it and make them executable. For testing purposes I will create a small Hello World Perl script (instead of hello_world.cgi you can also use the extension .pl -> hello_world.pl):  vi /var/www/www.example.com/cgi-bin/hello_world.cgi #!/usr/bin/perl -w      # Tell perl to send a html header.      # So your browser gets the output      # rather then <stdout>(command line      # on the server.) print \"Content-type: text/html\\n\\n\";      # print your basic html tags.      # and the content of them. print \"<html><head><title>Hello World!! </title></head>\\n\"; print \"<body><h1>Hello world</h1></body></html>\\n\"; chmod 755 /var/www/www.example.com/cgi-bin/hello_world.cgi Open a browser and test the script:  http://www.example.com/cgi-bin/hello_world.cgi If all goes well, you should get the following output:  https://www.howtoforge.com/images/serving_cgi_scripts_with_nginx_debian_squeeze_ubuntu_11.04/1.png  ## Referências  * [Serving CGI Scripts With Nginx On Debian Squeeze/Ubuntu 11.04 - Page 3] (https://www.howtoforge.com/serving-cgi-scripts-with-nginx-on-debian-squeeze-ubuntu-11.04-p3)  ","title":"Servindo CGI com NGINX no Debian"},{"id":168,"location":"/til/nnn.html","tags":["nnn"],"text":" ## Referências  * [nnn – Fast, Free and Friendly Terminal File Browser for Linux](https://www.fossmint.com/nnn-linux-terminal-file-browser/)  ","title":"Gerenciador de arquivos nnn"},{"id":169,"location":"/til/vim-makeprg.html","tags":["vim","makepkg","metatrader"],"text":" ## Configurando comando com espaços  ```vim set makeprg=cd\\ cmt\\ &&\\ make \" ou let &makeprg = \"cd cmt && make\" ```  ## Baseado no tipo de arquivo  ```vim autocmd Filetype foo setlocal makeprg=/bin/foo_compiler % ```  ## Metatrader  ```vim \" Vim compiler file \" Compiler:     MQL4 \" Maintainer: Me \" Last Change:  2017 Apr 20  if exists(\"current_compiler\")   finish endif let current_compiler = \"mql4\"  CompilerSet makeprg=mkmql4\\ %  let &errorformat='%f(%l\\,%c) : %m'  let &cpo = s:cpo_save unlet s:cpo_save  \" vim: sw=2 ts=2 et ```  Onde o comando mkmql4 é  ```shell path=\"Z:${1//\\//\\\\}\" wine /mt4/metaeditor.exe /compile: $path /log:\"Z:\\mt4\\errors.log\" ```  ## Referências  * [Vim makeprg with multiple commands (cd + make)](https://superuser.com/questions/839516/vim-makeprg-with-multiple-commands-cd-make) * [How to set makeprg based on filetype in Vim](https://codeyarns.com/2015/05/04/how-to-set-makeprg-based-on-filetype-in-vim/) * [Does anyone use Vim for mql development?](https://www.mql5.com/ru/forum/191819) ","title":"vim makepkg"},{"id":170,"location":"/til/testlink.html","tags":["testlink"],"text":" ## Referências  * [TestLink Tutorial: A Layman’s Guide To TestLink Test Management Tool (Tutorial #1)](https://www.softwaretestinghelp.com/testlink-tutorial-1/) * [How To Manage Requirements, Execute Test Cases And Generate Reports Using TestLink – Tutorial #2](https://www.softwaretestinghelp.com/testlink-tutorial-2/) * [How To Update TestLink Test Case Execution Status Remotely Through Selenium – Tutorial #3](https://www.softwaretestinghelp.com/testlink-tutorial-3/) * [TestLink Tutorial 4 – Test Metrics, Keyword Management, Custom Fields And Test Report Charts](https://www.softwaretestinghelp.com/testlink-tutorial-4/) * [Integração Selenium e Testlink](http://sembugs.blogspot.com/2010/10/integracao-selenium-e-testlink.html) ","title":"Testlink"},{"id":171,"location":"/til/figma-xfce-alt-disable.html","tags":["xfce","figma"],"text":" ## Introdução  O Figma utiliza a tecla alt para copiar elementos e o xfce4 também utiliza a mesma tecla para mover janelas.  ### Alterando comportamento do alt pela interface gráfica  Para liberar a tecla **Alt** para uso pelo **Figma** acesse o painel de **Configurações** e depois vá em **Ajustes do gerenciador de janelas**:  ![Painel de Configurações](/til/xfce-disable-alt-01.webp)  Na aba **Acessibilidade** escolha **None** para a tecla de captura de janelas:  ![Escolher none para tecla de captura.](/til/xfce-disable-alt-02.webp)  ### Alterando comportamento do alt pelo terminal  ```shell xfconf-query -c xfwm4 -p /general/easy_click -s none ```  Para retornar o **Alt** use:  ```shell xfconf-query -c xfwm4 -p /general/easy_click -s Alt ```  ## Referências  * [How do I disable window move with alt + left mouse button in Xubuntu?](https://askubuntu.com/questions/270032/how-do-i-disable-window-move-with-alt-left-mouse-button-in-xubuntu#:~:text=1%20Answer&text=If%20you%20go%20to%20the,be%20just%20what%20you%20want.) ","title":"Liberando o alt do xfce para o figma"},{"id":172,"location":"/til/wget-ignorar-certificado-invalido.html","tags":["wget","bash"],"text":" ## Exemplo do problema  ```shell wget https://softwarepublico.gov.br/social/articles/0000/5871/Cortex_-_Anatomia_de_um_Framework_-_v1_1.pdf --2020-10-06 11:55:36--  https://softwarepublico.gov.br/social/articles/0000/5871/Cortex_-_Anatomia_de_um_Framework_-_v1_1.pdf Resolvendo softwarepublico.gov.br (softwarepublico.gov.br)... 189.9.151.64 Conectando-se a softwarepublico.gov.br (softwarepublico.gov.br)|189.9.151.64|:443... conectado. ERRO: O certificado de “softwarepublico.gov.br” não é confiável. ERRO: O certificado de “softwarepublico.gov.br” expirou. O certificado expirou ```  ## Solução  Basta acrescentar a opção `--no-check-certificate`:  ```shell wget --no-check-certificate https://softwarepublico.gov.br/social/articles/0000/5871/Cortex_-_Anatomia_de_um_Framework_-_v1_1.pdf  --2020-10-06 11:57:35--  https://softwarepublico.gov.br/social/articles/0000/5871/Cortex_-_Anatomia_de_um_Framework_-_v1_1.pdf Resolvendo softwarepublico.gov.br (softwarepublico.gov.br)... 189.9.151.64 Conectando-se a softwarepublico.gov.br (softwarepublico.gov.br)|189.9.151.64|:443... conectado. AVISO: O certificado de “softwarepublico.gov.br” não é confiável. AVISO: O certificado de “softwarepublico.gov.br” expirou. O certificado expirou A requisição HTTP foi enviada, aguardando resposta... 200 OK Tamanho: 953355 (931K) [application/pdf] Salvando em: “Cortex_-_Anatomia_de_um_Framework_-_v1_1.pdf”  Cortex_-_Anatomia_de_um_Framework_-_v1_1.pd 100%[================================================>] 931,01K   279KB/s    em 3,3s  2020-10-06 11:57:40 (279 KB/s) - “Cortex_-_Anatomia_de_um_Framework_-_v1_1.pdf” salvo [953355/953355] ```  ## Referências  * [Skip Certificate Checks with Wget](https://www.jamescoyle.net/how-to/2510-skip-certificate-checks-with-wget)  ","title":"Download com certificado inválido no wget"},{"id":173,"location":"/til/zeromq.html","tags":["zeromq"],"text":" * orientado a transporte de bytes (mensagens) * inspirado no sistema de atores do erlang para trocar mensagens e evitar problemas comuns na programação concorrente * resolve o problema de carregar bytes de um lugar para outro * não é apenas um modelo de socket crú * oferece alguns modelos de programação em cima de uma API baseada em socket   * publish/subscribe   * push/pull   * dealer-router * comunicação entre threads * suporta IPC * suporta TCP * suporta multicast UDP * pattern match * modelo de transporte eficiente * escrito em C++ com API no estilo C * push é um dos modelos mais rápidos, mas é o que demanda mais controle * push usa round-robin para distribuir   * um publisher pode fazer bind com mais de um protocolo a mesmo tempo, assim um único send envia para dois ou mais protocolos   * `publisher_socker.bind(\"tcp://*:60001\");`   * `publisher_socker.bind(\"ipc://pub.ipc\");` * prefira usar um socket só para enviar e outro só para receber * defina afinidades para cada socket * incluir explicação sobre ZMQ_ROUTER_HANDOVER no tempo 40:27  ### Socket types  * **Request/Reply pattern**: usado para enviar uma requisição e receber posteriormente a resposta para cada mensagem enviada. * **Publish/Subscribe pattern**: usado para distribuir dados de um único processo (publisher) para múltiplos destinatários (subscribers). * **Pipeline Pattern**: Usado para distribuir dados entre nós conectados * **Exclusive Pair Pattern**: Usado para conectar dois nós  * REQ: request client * REP: replay server  * PUSH: server * PULL: client (worker)  * DEALER: client * ROUTER: server  ## Tipo de transporte  * In-Process (INPROC): Local (in-process) communication transport. * Inter-Process (IPC): Local (inter-process) communication transport. * TCP: Unicast communication transport using TCP. * PGM: Multicast communication transport using PGM.  ## Veja também  * [nanomsg](/til/nanomsg.html) * [sbe - Simple Binary Encoding](/til/sbe.html)  ## nnd  ## SBE simple binary encoding  * https://github.com/real-logic/simple-binary-encoding * muito usado no mercado financeiro (stock exchanges) * protocolo para mensagens de negócio * Martin Tompson (especialista em desempenho dem JVM)   ## MessagePack  * serializador de alto desempenho   ## Referências  * [Mensagens distribuídas com alto desempenho: ZeroMQ e aplicações financeiras em larga escala](https://www.infoq.com/br/presentations/mensagens-distribuidas-com-alto-desempenho-zeromq-e-aplicacoes-financeiras/) * [Código de exemplo da palestra do Fabio Galuppo](https://github.com/fabiogaluppo/samples/tree/master/events/qconsp2017/code) * [Video: ZeroMQ (ØMQ) Crash Course](https://youtu.be/UrwtQfSbrOs) * [A tour of CPPZMQ, the C++ bindings to libzmq](https://brettviren.github.io/cppzmq-tour/) * [Using ZeroMQ Security (Part 1)](https://jaxenter.com/using-zeromq-security-part-1-119346.html) * [How To Work with the ZeroMQ Messaging Library](https://www.digitalocean.com/community/tutorials/how-to-work-with-the-zeromq-messaging-library) ","title":"ZeroMQ"},{"id":174,"location":"/til/git-auto-formatart-antes-do-commit.html","tags":["git","gitattributes","format"],"text":" Escrever um arquivo `.gitattributes` contendo:  ```text *.java filter=clang-format-java ```  Acrescentar os operações `clean` e `smudge`  ```shell git config --global filter.clang-format-java.clean 'clang-format -assume-filename=test.java' git config --global filter.clang-format-java.smudge cat ```  * `clean` ocorre quando os arquivos são enviados para o `stage` * `smudge` quando os arquivos são enviados para o workspace (checkout)  Quando os arquivos são enviados para *stage* (`git add`) são passados via *stdin* então não dá para saber qual o tipo do arquivo. O uso da opção `-assume-filename=test.java` faz com que o `clang-format` saiba como proceder.   ## Referências  * [clang-format as a git filter](https://ngeor.com/2019/01/27/clang-format-git-filter.html)  ","title":"Formatando o código automaticamente antes do commit"},{"id":175,"location":"/til/lxc.html","tags":["lxc","linux","container"],"text":" ## How to install LXD  ```shell apt install snap snap install lxd ```  http://www.panticz.de/lxd  ## Features  * device pass-through capabilities     * assign hardware directly to the lxc containers * network and storage management capabilities     * storage pooling * snapshot of running container * live migration of running containers between hosts * LXD can also integrate with cloud platform, such OpenStack * improved control over compute resources * clustering  ","title":"LXC - Linux Container"},{"id":176,"location":"/til/rabbitmq.html","tags":["rabbitmq"],"text":" ## Referências  * [Vídeo RabbitMQ in 5 Minutes](https://www.youtube.com/watch?v=deG25y_r6OY) ","title":"RabbitMQ"},{"id":177,"location":"/til/hugo-formatacao.html","tags":["hugo"],"text":"  {{% note %}} Aqui **vai** uma nota com título padrão. {{% /note %}}   {{% note title=\"Título da nota\" %}} Aqui **vai** uma nota com título personalizado. {{% /note %}}   {{% alert %}} Aqui **vai** um alerta com título padrão. {{% /alert %}}  {{% alert title=\"Título do alerta\" %}} Aqui **vai** um alerta com título personalizado. {{% /alert %}}  {{% warning %}} Aqui **vai** um warning com título padrão. {{% /warning %}}  {{% warning title=\"Título do aviso\" %}} Aqui **vai** um warning com título personalizado. {{% /warning %}}   ## Referências   ","title":"Hugo --- formatação"},{"id":178,"location":"/til/cvs-binary.html","tags":["cvs"],"text":" 1. Obter uma cópia do `CVSROOT`  ```shell cvs co CVSROOT ```  2. Editar o `CVSROOT/cvswrappers` para indicar as extensões binárias.  ```shell *.GIF   -k 'b' -m 'COPY' *.JPG   -k 'b' -m 'COPY' *.avi   -k 'b' -m 'COPY' *.bin   -k 'b' -m 'COPY' ```  3. Comitar as mudanças  ```shell cvs commit -m\"added common binary files\" ```  ## Referências  * [Handling Binary Files](https://durak.org/cvswebsites/howto-cvs/node38.html) ","title":"CVS - controlando arquivos binários"},{"id":179,"location":"/til/boleto.html","tags":["boleto","CNAB"],"text":" ## Boletos sem registro  * o boleto precisa estar registrado na Instituição Financeira para permitir a consulta e validação na base centralizada no momento do pagamento * os boletos que não forem encontrados na base centralizada por falta de registro no banco terão seu pagamento recusado na rede bancária. * os boletos que já foram emitidos sem registro podem ser registrados, basta enviar as informações impressas ao banco por arquivo remessa. * o CPF/CNPJ do pagador agora é obrigatório  ## CNAB  CNAB é uma abreviação para Centro Nacional de Automação Bancária, isto é, uma interface para troca de informações entre o emitente de boleto e o banco.  ## Referências  * [Itau - Boletos sem registro serão aceitos?](https://www.itau.com.br/atendimento-itau/para-empresas/cobranca/nova-plataforma-de-cobranca/boletos-sem-registro-serao-aceitos.html) * [CNAB 240 E CNAB 400: ENTENDA OS PADRÕES DE REMESSA E DE RETORNO DOS BOLETOS](https://blog.tecnospeed.com.br/padroes-de-remessa-e-de-retorno/)  ","title":"Boleto"},{"id":180,"location":"/til/widgets.html","tags":["academic","hugo"],"text":" Homepage widgets display as sections on the homepage. They can be enabled/disabled and configured as desired. Academic has the following widgets available to use:  - About/biography - Selected publications - Recent publications - Recent news/blog posts - Projects - Selected talks - Recent talks - Contact - Tag cloud - Custom widget (demonstrated with the *teaching* example)  The example site that you copied to create your site uses all the different types of widget (except talks), so you can generally just delete the widgets you don't need and customize the parameters of the widgets you wish to keep.  The parameters for each widget vary. They can be found in the preamble/frontmatter (between the pair of `---`) for each widget installed in the `content/home/` folder.  GLSR criei um shortcode note  {{% alert note %}} By default, publications will be displayed in a simple list. If you prefer a more detailed list with abstract and image, you can enable the detailed publication list on the homepage by setting `list_format = 2` in `content/home/publications.md`. {{% /alert %}}  ## Add a widget to the homepage  To add a widget manually, copy the relevant widget from `themes/academic/exampleSite/content/home/` to your `content/home/` folder.   Widget identifiers are set to their respective filenames, so a `content/home/about.md` widget can be linked from the navigation bar by setting the relevant URL as `\"#about\"` in `config.toml`.  This means that if you want to use multiple instances of a widget, each widget will be assigned a unique ID based on the filename that you set. You can then use that ID for linking, like in the above example.  ## Using the custom widget  You can use the custom widget to create your own home page sections.  Simply duplicate (copy/paste) and rename the example *teaching* file at `content/home/teaching.md`. Then edit the section title, weight (refer to *Ordering sections* below), and content as desired.  You may also wish to add a navigation link to the top of the page that points to the new section. This can be achieved by adding something similar to the following lines to your `config.toml`, where the URL will consist of the first title word in lowercase:      [[menu.main]]         name = \"Research\"         url = \"#research\"         weight = 10  ## Remove a widget from the homepage  If you do not require a particular widget, you can simply delete any associated files from the `content/home/` folder.  To remove a navigation link from the top of the page, remove the associated `[[menu.main]]` entry in `config.toml`.  ## Ordering widgets  The order that the homepage widgets are displayed in is defined by the `weight` parameter in each of the files in the `content/home/` directory. The widgets are displayed in ascending order of their `weight`, so you can simply edit the `weight` parameters as desired. ","title":"Customizing the homepage with widgets"},{"id":181,"location":"/til/vim-fast-search-vim.html","tags":["vim"],"text":" Projects can be searched for specific text within Vim:  ``` :grep sometext ```  Can we `grep` faster?  ## Override to use The Silver Searcher  `grep` is a built-in command of Vim. By default, it will use the system's `grep` command. We can overwrite it to use [The Silver Searcher](https://github.com/ggreer/the_silver_searcher)'s `ag` command by putting this in [our `~/.vimrc`](https://github.com/statusok/statusok/blob/master/dotfiles/editor/vimrc):  ```vim \" The Silver Searcher if executable('ag')   \" Use ag over grep   set grepprg=ag\\ --nogroup\\ --nocolor    \" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore   let g:ctrlp_user_command = 'ag %s -l --nocolor -g \"\"'    \" ag is fast enough that CtrlP doesn't need to cache   let g:ctrlp_use_caching = 0 endif ```  ## Search for the word under the cursor  This searches for the text under the cursor and shows the results in a \"quickfix\" window:  ```vim \" bind K to grep word under cursor nnoremap K :grep! \"\\b<C-R><C-W>\\b\"<CR>:cw<CR> ```  It looks like this when `K` is typed with the cursor over `SubscriptionMailer`:  {{< img src=\"images/quickfix-under-cursor.webp\" alt=\"''\" >}}  Cursor over each search result, hit `Enter`, and the file will be opened.  ## Using `ag` arguments  This defines a new command `Ag` to search for the provided text and open a \"quickfix\" window:  ```vim \" bind \\ (backward slash) to grep shortcut command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw! ```  Map it to any character, such as `\\`:  ```vim nnoremap \\ :Ag<SPACE> ```  When `\\` is pressed, Vim waits for input:  ```vim :Ag ```  Standard `ag` arguments may be passed in at this point:  ```vim :Ag -i Stripe app/models ```  Hitting `Enter` results in:  {{< img src=\"images/quickfix-custom-command.webp\" alt=\"''\" >}}  ","title":"Fast Search in Vim"},{"id":182,"location":"/til/app-djinni.html","tags":["C++","Djinni"],"text":" ## Referências  * [Bindings Languages Cross-Platform](https://www.dropbox.com/s/k1b214bsqgpx4e6/Djinni%20Talk%20-%20CppCon%202015.pdf?dl=0) * [Desenvolvendo Aplicativos Mobile com C++ para Android e iOS](https://www.udemy.com/course/desenvolvendo-aplicativos-mobile-com-cpp-para-android-e-ios/) ","title":"Desenvolvendo em C++ para mobile com Djinni"},{"id":183,"location":"/til/npm-check-updates.html","tags":["npm","npm-check-updates"],"text":" ```shell npm install -g npm-check-updates ```  ```shell ncu -u ```  ```shell npm install ``` ","title":"Update all the node.js dependencies to their last version"},{"id":184,"location":"/til/salario-autonomo.html","tags":["salary"],"text":" ## Engenharia  * custo fixo 3500 * salário mínimo 1.039 * min 8,5 salários mínimos para jornada de 8h (CREA) 8831,50 * acrescentar 70% para riscos, FGTS, ... 20.963,55 * 160h mensais x 75% de taxa de ocupação = 120h * valor da hora sem imposto ~ 174.69 * imposto 18% + 3% ISS = 21% * valor da hora com imposto ~ 125,11/(1-0.21) = 221.12 * 5 horas para orçamento * 16 horas para cálculos * 16 horas para detalhamento * 10 horas visitas * ...   ## Referências  * [QUANTO COBRAR POR SERVIÇOS DE ENGENHARIA?](http://calculistadeaco.com.br/quanto-cobrar-por-servicos-de-engenharia/)  ","title":"Salário equivalente para autônomo"},{"id":185,"location":"/til/kafka-intro.html","tags":["kafka"],"text":" ## Introdução  O Apache Kafka é uma **Plataforma distribuída de streaming**.  De forma distribuída ele consegue processar uma grande quantidade de dados entregar em tempo real aos seus consumidores.  Características:  * plataforma * banco de dados * extremamente rápido e baixíssima latência * utiliza o disco ao invés da memória para processar os dados * não é apenas um sistema tradicional de mensageiria como o RabbitMQ * publish & subscriber * processamento em tempo real * armazenamento de streams em um modo seguro, distribuído e replicável * producer * consumer * topic - onde os dados são transmitidos  ## Topic  * é um stream de dados que atua com um banco de dados * um tópico possui diversas partições * diversos consumidores podem ler de modo independente, cada um num offset diferente  ## Cluster  * conjunto de brokers (intermediários) * cada broker é um server * cada broker é responsável por armazenar os dados de uma partição * replication factory  ## Producer  * envia mensagem para os brokers   ## Referências  * [Apache Kafka: Trabalhando com Mensageria e Real Time](https://www.youtube.com/watch?v=LX19wk2B5Ak)  ","title":"Introdução ao Apache Kafka"},{"id":186,"location":"/til/eclipse-emf-xml.html","tags":["eclipse","EMF","XML"],"text":" EMF é uma API Java que permite definir modelos, criar, salvar e carregar suas instâncias em vários formatos (EMF, UML, XSD).  A principal diferença para o Java é que os modelos podem ser definidos tanto estaticamente quanto dinamicamente em tempo de execução.  EMF suporta múltiplos formatos para o modelo e para input e output das intâncias do modelo.  EMF é uma API do tipo reflection e pode ser facilmente utilizada para gerar editores para seus modelos.  O meta-modelo para definição do modelo consiste dos seguintes elementos:  * `EClass` * `EAttribute` * `EOperation` * etc  Estes elementos são agrupados em `EPackages` identificados unicamente por uma URI de namespace que pode ser conhecida através do XSD.  Instâncias do modelo são compostas de `EObjects` (e classes de suporte como `EList`).  Cada um destes elementos é representado por uma classe Java.  ## Configuração do EMF e namespace  Existem três opções:  * namespace com prefixo explícito * namespace sem prefixo (declarado como padrão) * sem namespace  ### Elemento raiz do XML no namespace com prefixo (`xmlns:ns=”…”>`)  ```xml <myRootElement xmlns:ns=\"http://example.com/myXml\" someAttribute=\"value\">    <myAnotherElement anotherAttribute=\"value 2\"/> <myRootElement> ```  Use a API `Resource.save(...)`  ### Elemento raiz do XML no namespace padrão (`<elm xmlns=”…”>`)  ```xml <myRootElement xmlns=\"http://example.com/myXml\" someAttribute=\"value\">    <myAnotherElement anotherAttribute=\"value 2\"/> </myRootElement> ```  Veja esta [dica](http://www.eclipse.org/forums/index.php?t=tree&th=129347&S=4a71b44b5931c4dbe7bac446b6ee10c6)  ### Nenhuma informação sobre namespace no the XML (`<elm>`)  Este é o pior caso pois o XML de entrada não se descreve suficientemente e você precisa conhecer ou chutar o `EPackage` correto para realizar o parser.  Certamente seria melhor se você tivesse informação do namespace. Mas algumas vezes você não terá como influenciar a entrada a ser lida com o EMF.  ```xml <myRootElement someAttribute=\"value\">    <myAnotherElement anotherAttribute=\"value 2\"/> </myRootElement> ```  Se o elemento raiz do XML não possuir prefixo nem namespace então o EMF não será capaz de realizar o match com o `EPackage` e consequentemente não será capaz de carregar apropriadamente a menos que você registre um `EPackage` alvo com o `ResourceSet` global com uma URI nula.  ```java for (EPackage ePackage: eCorePackages) { \tresourceSet.getPackageRegistry().put(null, ePackage); \t// alternatively could call EPackage.Registry.INSTANCE.put(..) } ```  De acordo com a [dica do forum](https://www.eclipse.org/forums/index.php/mv/msg/128831/#msg_397577) você não pode injetar a declaração faltante do XMLNS no XML, mas pode especificar `null` para o namespace e o pacote específico para mapear usando o pacote de registro do `ResourceSet`.  ## Notas gerais sobre salvar e carregar XML pelo EMF  Quando carregar do XML ou salvar para o XML você precisa passar algumas das seguintes opções para os métodos `save` ou `load`:  ```java Map<String, Object> options = new HashMap<String, Object>(); options.put(XMLResource.OPTION_EXTENDED_META_DATA, Boolean.TRUE); // options.put(XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE); options.put(XMLResource.OPTION_ENCODING, \"UTF-8\"); ```  * `OPTION_EXTENDED_META_DATA` - cria elementos aninhados em vez de atributos. Não estou certo se isto influencia no carregamento * `OPTION_RECORD_UNKNOWN_FEATURE` - quando um elemento desconhecido for encontrado no carregamento não será lançada uma exceção de `unknown feature` e o campo será apenas pulado * `OPTION_ENCODING` – é o encoding para geração do XML, onde o padrão é ASCII. Não estou certo se isto influencia no carregamento  Ver capítulo 13 do livro   ## Referências  * [EMF: Reading a Model from XML - How to Correctly Declare the Namespace](https://dzone.com/articles/emf-reading-model-xml-%E2%80%93-how) * [EMF: Reading a model from XML - how to correctly declare its namespace - variants](https://blog.jakubholy.net/2011/01/03/emf-reading-a-model-from-xml-how-to-correctly-delcare-a-namespace-variants/) ","title":"Eclipse Modeling Framework - Lendo e escrevendo XML"},{"id":187,"location":"/til/git-como-limpar-submodulos.html","tags":["git"],"text":" ```shell git submodule foreach --recursive git clean -xfd ```  Para dar reset no repositório e seus submódulos use:  ```shell git clean -xfd git submodule foreach --recursive git clean -xfd git reset --hard git submodule foreach --recursive git reset --hard git submodule update --init --recursive ```  Dependendo da configuração pode ser necessário incluir mais um `-f`  > If the Git configuration variable `clean.requireForce` is not set to false, `git clean` will refuse to delete files or directories unless given `-f`, `-n` or `-i`. Git will refuse to delete directories with `.git` sub directory or file unless a second `-f` is given. > Use force twice to clean directorise with `.git` subdirectories: `git clean -xfdf`. I had some tangling submodules that would not get deleted with just `git clean -xfd`.  ## Referências  * [Cleans and resets a git repo and its submodules](https://gist.github.com/nicktoumpelis/11214362)   ","title":"git - como limpar submódulos"},{"id":188,"location":"/til/vim-formatar-xml.html","tags":["vim"],"text":" ``` :'<,'>!xmllint --format - ```  ","title":"Formatar XML no vim"},{"id":189,"location":"/til/virtualbox.html","tags":["virtualbox","debian","linux"],"text":" O VirtualBox foi removido dos repositórios Debian Buster no dia 15/04/2019.  ```shell # Passo um atualizar o seu sistema apt update apt upgrade apt autoremove  echo \"deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian bionic contrib\" \\   > /etc/apt/sources.list.d/virtualbox.list  wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- \\   | apt-key add -  wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- \\   | apt-key add -  apt update  # Para listar as versões disponíveis apt search virtualbox-  apt install dkms linux-headers-$(uname -r) apt install virtualbox-6.1  cd ~/ wget https://download.virtualbox.org/virtualbox/6.1.2/Oracle_VM_VirtualBox_Extension_Pack-6.1.2.vbox-extpack  # uma vez baixado clique no arquivo (ver procedimento no link 2) ```  ## Referências  * [VirtualBox no Debian 10 Buster](https://linuxdicasesuporte.blogspot.com/2019/04/virtualbox-no-debian-10-buster.html) * [How To Install VirtualBox 6 on Debian 10 (Buster)](https://computingforgeeks.com/install-virtualbox-ubuntu-debian/) ","title":"Instalando virtualbox no debian 10"},{"id":190,"location":"/til/fzf.html","tags":["bash","fzf","fuzzy"],"text":" ## Escolhendo um item  ```shell $ echo -e \"Um\\nDois\\nTrês\" | fzf ```  ![Exemplo 01](/til/fzf-01.webp)   ## Formatação avançada  ```bash  format_info() {   echo xxxx }  # para disponibilizar função para subshell export -f format_info  local opts='--reverse -e -i --tiebreak=begin --prompt=: ' local pwin='--preview-window=down:%40' fzf $opts $pwin --preview='format_info \"$(file {})\"' <<< $(dir_contents $1) ```   ## Referências  * [Além do Bash - #23 - Opções do fzf e preview de informações dos arquivos](https://www.youtube.com/watch?v=dfGQYx-4H1c) * [Vim universe. fzf - command line fuzzy finder](https://youtu.be/qgG5Jhi_Els)  ","title":"Fuzzy finder"},{"id":191,"location":"/til/nanomsg.html","tags":["zeromq","nanomsg"],"text":" ## nanomsg  * olhar nanomsg https://nanomsg.org/gettingstarted/pipeline.html nanomsg   library is MIT-licensed. What it means is that, unlike with ZeroMQ, you can   modify the source code and re-release it under a different license, as   a proprietary product, etc. More reasoning about the licensing can be found   here.  https://staysail.github.io/nng_presentation/nng_presentation.html SCALABILITY PROTOCOLS (nanomsg, nng, mangos, and other critters) February 13, 2018 Importar esta apresentação  ","title":"nanomsg"},{"id":192,"location":"/certificate/1989-09-29_SantaMargarida_Datilografia.html","tags":["typewriting"],"text":" Datilografia ","title":"Datilografia"},{"id":193,"location":"/certificate/1992-12-30_SENAI_Curso_de_Aprendizagem_Industrial.html","tags":["mechanic"],"text":" ``` \f ```  ","title":"Curso de Aprendizagem Industrial"},{"id":194,"location":"/certificate/1997-02-01_IESC_Tecnólogo_em_Mecânica_Modalidade_Projetos.html","tags":["mechanic"],"text":" ``` Nome: GERALDO LUIS DA SILVA RIBEIRO Instituição: FIC FACULDADES INTEGRADAS DE CRUZEIRO Curso: CST MECANICA MODALIDADE PROJETOS Data de Registro: 02/03/1998 Status: Diploma Registrado ```  https://www.sg.unicamp.br/rd/consultar-situacao-de-diplomas?nome=GERALDO+LUIS+DA+SILVA+RIBEIRO ","title":"IESC Tecnólogo em Mecânica Modalidade Projetos"},{"id":195,"location":"/certificate/1997-09-15_INPE_5Ss_uma_opção_para_o_desenvolvimento_profissional.html","tags":["soft-skill","5S"],"text":"  ","title":"5Ss uma opção para o desenvolvimento profissional"},{"id":196,"location":"/certificate/1998-02-09_Curso_de_Operadores_de_Caldeira.html","tags":["combustion"],"text":" ```  ```  ","title":"Curso de Operadores de Caldeira"},{"id":197,"location":"/certificate/2001-11-05_INPE_Curso_de_Combustão_I_INPE.html","tags":["combustion"],"text":" ``` \f ```  ","title":"INPE Curso de Combustão I INPE"},{"id":198,"location":"/certificate/2002-10-15_ENCIT_Combustão_Básica.html","tags":["combustion"],"text":" ```  ```  ","title":"ENCIT Combustão Básica"},{"id":199,"location":"/certificate/2005-02-21_HOFR_Requisitos_Gerais_para_Competência_de_Laboratórios_de_Ensaio_e_Calibração_ABNT_ISO_IEC_17025.html","tags":["iso","iso-17025","17025","measure","laboratory","calibration"],"text":" ","title":"Requisitos Gerais para Competência de Laboratórios de Ensaio e Calibração ABNT ISO IEC 17025"},{"id":200,"location":"/certificate/2005-03-01_HOFR_Ciclo_PDCA_e_as_Ferramentas_para_Melhoria_da_Qualidade.html","tags":["quality","pdca"],"text":" ```  ```  ","title":"HOFR Ciclo PDCA e as Ferramentas para Melhoria da Qualidade"},{"id":201,"location":"/certificate/2005-06-25_microsoft_Supporting_Users_Running_the_Microsoft_Windows_XP_Operating_System.html","tags":["microsoft","windows"],"text":" ```  ```  ","title":"Supporting Users Running the Microsoft Windows XP Operating System"},{"id":202,"location":"/certificate/2005-07-01_microsoft_Supporting_users_running_applications_on_a_Microsoft_Windows_XP_Operation_System.html","tags":["microsoft","windows"],"text":" ```  ```  ","title":"Supporting users running applications on a Microsoft Windows XP Operation System"},{"id":203,"location":"/certificate/2005-12-02_4Linux_Pen-Test_Analise_e_Testes_de_Vulnerabilidades_em_Redes_Corporativas.html","tags":["security","pentest"],"text":" ```  ```  ","title":"Pen Test Analise e Testes de Vulnerabilidades em Redes Corporativas"},{"id":204,"location":"/certificate/2006-05-04_INPE_LIT_Cálculo_de_Incerteza_de_Medições.html","tags":["measurement","uncertainty"],"text":" ``` \f ```  ","title":"Cálculo de Incerteza de Medições"},{"id":205,"location":"/certificate/2006-11-28_REMESP_Cálculo_de_incerteza_de_Medições.html","tags":["measurement","uncertainty"],"text":" ``` \f ```  ","title":"Cálculo de incerteza de Medições"},{"id":206,"location":"/certificate/2007-05-13_LPI_LPIC-1.html","tags":["linux"],"text":" ```  ```  ","title":"LPIC 1"},{"id":207,"location":"/certificate/2008-08-08_ESSS_Técnicas_de_Otimização_de_Projetos_de_Engenharia_usando_o_Software_modeFrontier.html","tags":["optimization","modefrontier"],"text":" ```  ```  ","title":"Técnicas de Otimização de Projetos de Engenharia usando o Software modeFrontier"},{"id":208,"location":"/certificate/2008-09-06_TempoReal_Nagios.html","tags":["nagios"],"text":" ```  ```  ","title":"Nagios"},{"id":209,"location":"/certificate/2008-10-31_PLM_Introduction_to_Pro_Engineer_Wildfire_4.0.html","tags":["ptc","pro-engineer"],"text":" ```  ```  ","title":"PLM Introduction to Pro Engineer Wildfire 4.0"},{"id":210,"location":"/certificate/2008-11-10_PLM_Detailing_with_Pro_Engineer_Wildfire_4.0.html","tags":["pro-engineer","ptc"],"text":" ```  ```  ","title":"PLM Detailing with Pro Engineer Wildfire 4.0"},{"id":211,"location":"/certificate/2009-01-12_PLM_Advanced_Assembly_Management_with_Pro_Engineer_Wildfire_4.0_e_Top_Down_Design_with_Pro_Engineer_Wildfire_3.0.html","tags":["ptc","pro-engineer"],"text":" ```  ```  ","title":"PLM Advanced Assembly Management with Pro Engineer Wildfire 4.0 e Top Down Design with Pro Engineer Wildfire 3.0"},{"id":212,"location":"/certificate/2009-08-18_ESSS_Técnicas_de_Otimização_de_Projetos_de_Engenharia_usando_o_Software_modeFrontier.html","tags":["optimization","modefrontier"],"text":" ```  ```  ","title":"Técnicas de Otimização de Projetos de Engenharia usando o Software modeFrontier"},{"id":213,"location":"/certificate/2010-01-12_INPE_LIT_Curso_de_Engenharia_de_Sistemas.html","tags":["system-engineering"],"text":" ``` \f ```  ","title":"Curso de Engenharia de Sistemas"},{"id":214,"location":"/certificate/2010-02-22_Applied_Systems_Engineering.html","tags":["system-engineering"],"text":" ``` \f ```  ","title":"Applied Systems Engineering"},{"id":215,"location":"/certificate/2010-08-14_TempoReal_7o_Encontro_de_programadores_C++_Brasil.html","tags":["C++"],"text":" ```  ```  ","title":"7o Encontro de programadores C++ Brasil"},{"id":216,"location":"/certificate/2011-08-25_QPB_FMEA_Analise_de_modo_e_efeitos_de_falha.html","tags":["fmea"],"text":" ```  ```  ","title":"QPB FMEA Analise de modo e efeitos de falha"},{"id":217,"location":"/certificate/2013-06-05_UFRJ_Curso_de_Extensão_Programação_de_GPU_utilizando_CUDA.html","tags":["nvidia","gpu"],"text":" ``` \f ```  ","title":"UFRJ Curso de Extensão Programação de GPU utilizando CUDA"},{"id":218,"location":"/certificate/2013-09-10_VALE_Curso_de_Motores.html","tags":["engine","combustion"],"text":" ```  ```  ","title":"VALE Curso de Motores"},{"id":219,"location":"/certificate/2014-02-15_TempoReal_Analise_Mapeamento_e_Modelagem_de_Processos_de_Negocio.html","tags":["process","mapping"],"text":" ```  ```  ","title":"TempoReal Analise Mapeamento e Modelagem de Processos de Negocio"},{"id":220,"location":"/certificate/2016-05-01_mectron_OOD_Object_Oriented_Design_UML.html","tags":["uml"],"text":" ``` \f ```  ","title":"OOD Object Oriented Design UML"},{"id":221,"location":"/certificate/2018-07-12_linkedin_CPP_Move_Semantics.html","tags":["C++"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   C++: Move Semantics Course completed on Jul 12, 2018 at 09:57PM UTC • 32 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AcHOaGj2zwg9fcljWS5hxRR1iH4A  ```  ","title":"CPP Move Semantics"},{"id":222,"location":"/certificate/2018-07-14_linkedin_CPP_Smart_Pointers.html","tags":["C++"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   C++: Smart Pointers Course completed on Jul 14, 2018 at 10:24PM UTC • 29 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AXj_9FqQSYhZogq2h9Gg49vV2nVL  ```  ","title":"CPP Smart Pointers"},{"id":223,"location":"/certificate/2018-07-26_linkedin_Developing_a_Style_Guide_2012.html","tags":["adobe-illustrator"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Developing a Style Guide (2012) Course completed on Jul 26, 2018 at 06:54PM UTC • 23 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: Aa28Vwh1bbLFFCayD_4c6R0rdjId  ```  ","title":"Developing a Style Guide 2012"},{"id":224,"location":"/certificate/2018-10-28_Introdução_a_linguagem_Javascript.html","tags":["javascript"],"text":" ```   Geraldo Luis da Silva Ribeiro                                   CONCLUIU O CURSO                 Introdução à linguagem JavaScript                          COM CARGA HORÁRIA DE 1H                                 NA DATA DE 28/10/2018     U3HSRZ  ```  ","title":"Introdução a linguagem Javascript"},{"id":225,"location":"/certificate/2018-10-28_Programação_em_Perl.html","tags":["perl"],"text":" ```   Geraldo Luis da Silva Ribeiro                                 CONCLUIU O CURSO                    Curso de programação com Perl                         COM CARGA HORÁRIA DE 2H                               NA DATA DE 28/10/2018     9RYNHK  ```  ","title":"Programação em Perl"},{"id":226,"location":"/certificate/2018-10-30_treinaweb_Facebook_Marketing_Como_colocar_sua_empresa_no_Facebook.html","tags":["marketing","facebook"],"text":" ```                                          Geraldo Luis da Silva Ribeiro                                                  portador(a) do CPF                                                 055.593.028-99                                              participou e concluiu o curso                           Facebook Marketing - Como colocar sua empresa no facebook    com carga horária de                                                                   no período de    4 horas                                                                   30/10/2018 a 27/04/2020     Código: HAQEVRYSBTKK  ```  ","title":"Facebook Marketing Como colocar sua empresa no Facebook"},{"id":227,"location":"/certificate/2018-10-30_treinaweb_Marketing_Digital_Fundamentos.html","tags":["marketing"],"text":" ```                            Geraldo Luis da Silva Ribeiro                                    portador(a) do CPF                                   055.593.028-99                                participou e concluiu o curso                           Marketing Digital - Fundamentos    com carga horária de                                                     no período de    10 horas                                                    30/10/2018 a 30/10/2018     Código: ZOHDQUMSPIS2  ```  ","title":"Marketing Digital Fundamentos"},{"id":228,"location":"/certificate/2018-10-31_treinaweb_Digital_Ocean_Gerenciamento_de_Servidores_e_Servicos.html","tags":["digitalocean"],"text":" Geraldo Luis da Silva Ribeiro portador(a) do CPF xxx.xxx.xxx-xx participou e concluiu o curso **Digital Ocean - Gerenciamento de Servidores e Serviços** com carga horária de 16 horas no período de 31/10/2018 a 01/11/2018  Código: O7T61SXRKXHE ","title":"Digital Ocean Gerenciamento de Servidores e Serviços"},{"id":229,"location":"/certificate/2018-10-31_treinaweb_Facebook_Ads_Como_anunciar,_monitorar_e_potencializar_suas_campanhas.html","tags":["marketing","facebook"],"text":" ```                                        Geraldo Luis da Silva Ribeiro                                                portador(a) do CPF                                               055.593.028-99                                            participou e concluiu o curso                   Facebook Ads - Como anunciar, monitorar e potencializar suas campanhas    com carga horária de                                                                    no período de    6 horas                                                                  31/10/2018 a 31/10/2018     Código: BFSOJYQYZXJM  ```  ","title":"Facebook Ads Como anunciar, monitorar e potencializar suas campanhas"},{"id":230,"location":"/certificate/2018-10-31_treinaweb_RxJS_Programação_reativa.html","tags":["rxjs"],"text":" ```                           Geraldo Luis da Silva Ribeiro                                   portador(a) do CPF                                  055.593.028-99                               participou e concluiu o curso                           RxJS - Programação reativa    com carga horária de                                                    no período de    12 horas                                                   31/10/2018 a 31/10/2018     Código: LEXSAW8WUCND  ```  ","title":"RxJS Programação reativa"},{"id":231,"location":"/certificate/2018-11-01_treinaweb_Certificado_Tributação_para_desenvolvedores_na_NFe_4.0.html","tags":["money"],"text":" ```                                  Geraldo Luis da Silva Ribeiro                                          portador(a) do CPF                                         055.593.028-99                                      participou e concluiu o curso                           Tributação para desenvolvedores na NFe 4.0    com carga horária de                                                             no período de    10 horas                                                            01/11/2018 a 01/11/2018     Código: NJIT7SYLVZKX  ```  ","title":"Certificado Tributação para desenvolvedores na NFe 4.0"},{"id":232,"location":"/certificate/2019-08-02_stefanini_Design_Thinking.html","tags":["design-thinking"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:                DESIGN THINKING                   Concluído em:                  2/Agosto/2019  ```  ","title":"Design Thinking"},{"id":233,"location":"/certificate/2020-02-17_linkedin_Go_Essential_Training.html","tags":["go"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Go Essential Training Course completed on Feb 17, 2021 at 02:14AM UTC • 1 hour 56 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AVNcsD3GVxpak-Ot_RW4_TyHIla7  ```  ","title":"Go Essential Training"},{"id":234,"location":"/certificate/2020-03-30_stefanini_Steftalk.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:                   STEFTALKS                   Concluído em:                  30/Março/2020  ```  ","title":"Steftalk"},{"id":235,"location":"/certificate/2020-05-23_linkedin_Flutter_Part_03_Flutter_Widgets.html","tags":["flutter"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Flutter: Part 03 Flutter Widgets Course completed on May 23, 2020 at 02:55PM UTC • 1 hour 30 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AZirtpDMHi41U3MzqwehDQbIMwhk  ```  ","title":"Flutter Part 03 Flutter Widgets"},{"id":236,"location":"/certificate/2020-05-23_linkedin_Flutter_Part_04_Building_an_App_with_State_br.html","tags":["flutter"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Flutter: Part 04 Building an App with State Curso concluído em mai 23, 2020 at 03:43PM UTC • 1 hora 38 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AQvsvp-n0SrupH0mZilHFNG4icvb  ```  ","title":"Flutter Part 04 Building an App with State br"},{"id":237,"location":"/certificate/2020-05-23_linkedin_Flutter_Part_04_Building_an_App_with_State.html","tags":["flutter"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Flutter: Part 04 Building an App with State Course completed on May 23, 2020 at 03:43PM UTC • 1 hour 38 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AQvsvp-n0SrupH0mZilHFNG4icvb  ```  ","title":"Flutter Part 04 Building an App with State"},{"id":238,"location":"/certificate/2020-05-23_linkedin_Flutter_Part_05_Flutter_and_Dart_Packages.html","tags":["flutter"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Flutter: Part 05 Flutter and Dart Packages Curso concluído em mai 23, 2020 at 06:02PM UTC • 1 hora 26 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                      LinkedIn Learning Líder de Estratégia de                            1000 W Maude Ave Conteúdo, Learning                                Sunnyvale, CA 94085     Código do certificado: AZkX6H7vaibhHMGvMbbkdr2KDb8J  ```  ","title":"Flutter Part 05 Flutter and Dart Packages"},{"id":239,"location":"/certificate/2020-05-23_linkedin_Flutter_Part_06_Modularizing_and_Organizing_Flutter_Code.html","tags":["flutter"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Flutter: Part 06 Modularizing and Organizing Flutter Code Curso concluído em mai 23, 2020 at 07:09PM UTC • 2 horas 44 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AQtVvXVFE1-Esf3aes4_iuY1gZVZ  ```  ","title":"Flutter Part 06 Modularizing and Organizing Flutter Code"},{"id":240,"location":"/certificate/2020-09-14_nodestudio_criando_sites_profissionais.html","tags":["html"],"text":" ``` Node Studio Treinamentos tem a honra de conferir a                  Geraldo Luis Da Silva Ribeiro            O certificado por sua participação no        Criando Sites Profissionais                           Carga horária: 2 hora(s)                              Data: 14/09/2020     O presente certificado poderá ser validado no endereço: http://www.nodestudio.com.br              Para realizar a validação, informe o código do certificado: 58783259  ```  ","title":"criando sites profissionais"},{"id":241,"location":"/certificate/2020-09-14_nodestudio_design_responsivo.html","tags":["responsive-design"],"text":" ``` Node Studio Treinamentos tem a honra de conferir a                  Geraldo Luis Da Silva Ribeiro            O certificado por sua participação no      Curso de Design Responsivo                           Carga horária: 1 hora(s)                              Data: 14/09/2020     O presente certificado poderá ser validado no endereço: http://www.nodestudio.com.br              Para realizar a validação, informe o código do certificado: 58783257  ```  ","title":"design responsivo"},{"id":242,"location":"/certificate/2020-11-10_linkedin_Developing_Distributed_Applications_with_Cshap_and_ZeroMQ.html","tags":["csharp","zeromq"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Developing Distributed Applications with C# and ZeroMQ Course completed on Nov 10, 2020 at 09:59PM UTC • 1 hour 1 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AUy_mv706tzMDHB_39OJKuyuO5Ys  ```  ","title":"Developing Distributed Applications with Cshap and ZeroMQ"},{"id":243,"location":"/certificate/2020-11-10_linkedin_Flutter_Part_02_Building_Apps.html","tags":["flutter"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Flutter: Part 02 Building Apps Course completed on Nov 10, 2020 at 07:00PM UTC • 1 hour 23 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AT1mxF2pw2LtJcjSkuuNACWL-XkD  ```  ","title":"Flutter Part 02 Building Apps"},{"id":244,"location":"/certificate/2020-11-10_linkedin_Flutter_Part_07_Building_the_UI_or_Flutter_Part_07_Building_UIs_br.html","tags":["flutter"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Flutter: Part 07 Building the UI or Flutter: Part 07 Building UIs Curso concluído em nov 10, 2020 at 05:57PM UTC • 4 horas 23 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: Ad8vys4HC0ZcTdRuxa7-Mrx0a788  ```  ","title":"Flutter Part 07 Building the UI or Flutter Part 07 Building UIs br"},{"id":245,"location":"/certificate/2020-11-10_linkedin_Flutter_Part_07_Building_the_UI_or_Flutter_Part_07_Building_UIs.html","tags":["flutter"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Flutter: Part 07 Building the UI or Flutter: Part 07 Building UIs Course completed on Nov 10, 2020 at 05:57PM UTC • 4 hours 23 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: Ad8vys4HC0ZcTdRuxa7-Mrx0a788  ```  ","title":"Flutter Part 07 Building the UI or Flutter Part 07 Building UIs"},{"id":246,"location":"/certificate/2020-11-10_linkedin_Learning_RabbitMQ.html","tags":["rabbitmq"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Learning RabbitMQ Course completed on Nov 10, 2020 at 08:26PM UTC • 1 hour 22 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AUreFFyuIkBynvpJk2IcSh2dTBmn  ```  ","title":"Learning RabbitMQ"},{"id":247,"location":"/certificate/2020-11-11_linkedin_Learning_JUnit_5.html","tags":["junit","testing"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Learning JUnit 5 Course completed on Nov 11, 2020 at 08:41PM UTC • 1 hour 5 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: ATJToE4o3tH8e-fAYio-FRS1mL6I  ```  ","title":"Learning JUnit 5"},{"id":248,"location":"/certificate/2020-11-11_linkedin_Software_Architecture_DomainDriven_Design.html","tags":["ddd"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Software Architecture: Domain-Driven Design Course completed on Nov 11, 2020 at 07:57PM UTC • 1 hour 19 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AZzJJs2fNa7Nb4L63gnwLT5sWkVR  ```  ","title":"Software Architecture DomainDriven Design"},{"id":249,"location":"/certificate/2020-11-13_linkedin_Learning_Java_8.html","tags":["java"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Learning Java 8 Course completed on Nov 13, 2020 at 09:46PM UTC • 3 hours 9 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AaRn0KHvOnCD_dVRnBKijnlOFRNM  ```  ","title":"Learning Java 8"},{"id":250,"location":"/certificate/2020-11-25_RLSystem_Flutter_primeiros_passos.html","tags":["flutter"],"text":" ```  ```  ","title":"RLSystem Flutter primeiros passos"},{"id":251,"location":"/certificate/2020-11-25_RLSystem_VueJS_primeiros_passos.html","tags":["vue"],"text":" ```  ```  ","title":"RLSystem VueJS primeiros passos"},{"id":252,"location":"/certificate/2020-11-26_stefanini_Antifrágil.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:                   ANTIFRÁGIL                   Concluído em:                26/Novembro/2020  ```  ","title":"Antifrágil"},{"id":253,"location":"/certificate/2020-11-28_linkedin_Como_Escutar_de_Forma_Eficaz.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Como Escutar de Forma Eficaz Curso concluído em nov 28, 2020 at 08:15PM UTC • 1 hora 9 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: ASqZHVXHt_8DZST9qVlI9c_cpz0Z  ```  ","title":"Como Escutar de Forma Eficaz"},{"id":254,"location":"/certificate/2020-11-28_linkedin_Construindo_Confiança_en.html","tags":["soft-skill"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Construindo Confiança Course completed on Nov 28, 2020 at 08:54PM UTC • 1 hour 0 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AWBTMKZwkH67hluFKQcZXLdUDLUD  ```  ","title":"Construindo Confiança en"},{"id":255,"location":"/certificate/2020-11-28_linkedin_Construindo_Confiança_pt.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Construindo Confiança Curso concluído em nov 28, 2020 at 08:54PM UTC • 1 hora 0 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                     LinkedIn Learning Líder de Estratégia de                           1000 W Maude Ave Conteúdo, Learning                               Sunnyvale, CA 94085     Código do certificado: AWBTMKZwkH67hluFKQcZXLdUDLUD  ```  ","title":"Construindo Confiança pt"},{"id":256,"location":"/certificate/2020-11-28_linkedin_Demonstrating_Accountability_as_a_Leader.html","tags":["soft-skill"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Demonstrating Accountabilty as a Leader Course completed on Nov 28, 2020 at 07:10PM UTC • 15 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AdrlVZ_vdZBHPgj44Olxwcz18qWo  ```  ","title":"Demonstrating Accountability as a Leader"},{"id":257,"location":"/certificate/2020-11-28_linkedin_Designing_RESTful_APIs.html","tags":["rest"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Designing RESTful APIs Course completed on Nov 28, 2020 at 06:52PM UTC • 1 hour 24 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AUxEKMZ_pUGHmpMyssqdhA4OdvhX  ```  ","title":"Designing RESTful APIs"},{"id":258,"location":"/certificate/2020-11-28_linkedin_Transforme-se_com_a_Inovação_Disruptiva.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Transforme-se com a Inovação Disruptiva Curso concluído em nov 28, 2020 at 07:26PM UTC • 24 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                      LinkedIn Learning Líder de Estratégia de                            1000 W Maude Ave Conteúdo, Learning                                Sunnyvale, CA 94085     Código do certificado: ATQosyQQCpFPEwtayMrQfSpBPPOS  ```  ","title":"Transforme se com a Inovação Disruptiva"},{"id":259,"location":"/certificate/2020-11-28_linkedin_Web_Security_OAuth_and_OpenID_Connect.html","tags":["security"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Web Security: OAuth and OpenID Connect Course completed on Nov 28, 2020 at 05:47PM UTC • 1 hour 44 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AcrpqMxNnErzDjdwh6DgxHAvxEjv  ```  ","title":"Web Security OAuth and OpenID Connect"},{"id":260,"location":"/certificate/2020-12-05_linkedin_Fundamentos_de_Liderança.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Fundamentos de Liderança Curso concluído em dez 05, 2020 at 08:13PM UTC • 1 hora 24 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AZKriuoj5h3MjOg36AcGR_F1_9ll  ```  ","title":"Fundamentos de Liderança"},{"id":261,"location":"/certificate/2020-12-05_linkedin_Gestão_Ágil_no_Trabalho_Como_Tornar_as_Reuniões_Ágeis_mais_Produtivas.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Gestão Ágil no Trabalho: Como Tornar as Reuniões Ágeis mais Produtivas Curso concluído em dez 05, 2020 at 07:12PM UTC • 1 hora 8 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: Af0_z__U8_swgm3g4Yl7sxkXiJFv  ```  ","title":"Gestão Ágil no Trabalho Como Tornar as Reuniões Ágeis mais Produtivas"},{"id":262,"location":"/certificate/2020-12-06_linkedin_Desenvolvendo_sua_Filosofia_de_Liderança.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Desenvolvendo sua Filosofia de Liderança Curso concluído em dez 06, 2020 at 06:09PM UTC • 1 hora 23 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AT-B80r4MojZJuu4KsE8Al8eUHnO  ```  ","title":"Desenvolvendo sua Filosofia de Liderança"},{"id":263,"location":"/certificate/2020-12-15_linkedin_Como_Dar_Feedback_aos_Funcionários.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Como Dar Feedback aos Funcionários Curso concluído em dez 15, 2020 at 12:49PM UTC • 1 hora 7 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                      LinkedIn Learning Líder de Estratégia de                            1000 W Maude Ave Conteúdo, Learning                                Sunnyvale, CA 94085     Código do certificado: AbhQ_Q8PaZYkWesh3nj0HkWex36F  ```  ","title":"Como Dar Feedback aos Funcionários"},{"id":264,"location":"/certificate/2020-12-15_linkedin_Como_Passar_De_Gerente_a_Lider.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Como Passar De Gerente a Líder Curso concluído em dez 15, 2020 at 12:49PM UTC • 1 hora 0 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AeyeRjmlzHVz6K4kaXvUxSP-xEa2  ```  ","title":"Como Passar De Gerente a Lider"},{"id":265,"location":"/certificate/2020-12-15_linkedin_Desenvolvimento_da_Inteligencia_Intercultural.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Desenvolvimento da Inteligência Intercultural Curso concluído em dez 15, 2020 at 12:50PM UTC • 1 hora 14 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                     LinkedIn Learning Líder de Estratégia de                           1000 W Maude Ave Conteúdo, Learning                               Sunnyvale, CA 94085     Código do certificado: AccJg0S5ST5D1yWpUMikzsRawmNH  ```  ","title":"Desenvolvimento da Inteligencia Intercultural"},{"id":266,"location":"/certificate/2020-12-15_linkedin_Liderança_com_Inteligencia_Emocional.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Liderança com Inteligência Emocional Curso concluído em dez 15, 2020 at 12:49PM UTC • 1 hora 46 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AYhLx7GF_zqYsimN5NGNyjEn1Hxl  ```  ","title":"Liderança com Inteligencia Emocional"},{"id":267,"location":"/certificate/2020-12-15_linkedin_Liderança_Inclusiva.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Liderança Inclusiva Curso concluído em dez 15, 2020 at 12:50PM UTC • 59 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AbyaBWYtyMI8RZvJkhYlAt5Fq5wY  ```  ","title":"Liderança Inclusiva"},{"id":268,"location":"/certificate/2020-12-15_linkedin_Liderança_sem_Autoridade_Formal.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Liderança sem Autoridade Formal Curso concluído em dez 15, 2020 at 12:50PM UTC • 1 hora 4 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AY_1TCmuG1z-CG-h1SZ9xfqxvMIo  ```  ","title":"Liderança sem Autoridade Formal"},{"id":269,"location":"/certificate/2020-12-15_linkedin_Liderando_Mudanças.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Liderando Mudanças Curso concluído em dez 15, 2020 at 12:49PM UTC • 1 hora 44 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                      LinkedIn Learning Líder de Estratégia de                            1000 W Maude Ave Conteúdo, Learning                                Sunnyvale, CA 94085     Código do certificado: Af8MqODomttVNvEaMfQ89Nuc1HN-  ```  ","title":"Liderando Mudanças"},{"id":270,"location":"/certificate/2020-12-15_linkedin_O_Poder_do_Coaching_no_Desenvolvimento_dos_Colaboradores.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   O Poder do Coaching no Desenvolvimento dos Colaboradores Curso concluído em dez 15, 2020 at 12:49PM UTC • 1 hora 4 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AeOvNu05pv6g8nYXe90nhxVk6NyR  ```  ","title":"O Poder do Coaching no Desenvolvimento dos Colaboradores"},{"id":271,"location":"/certificate/2020-12-15_linkedin_Transforme-se_num_Líder_Disruptivo.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Transforme-se num Líder Disruptivo Rota de aprendizagem concluída em dez 15, 2020 at 12:50PM UTC • 15 horas 23 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.  Principais competências abordadas Inteligência emocional, Liderança, Desenvolvimento pessoal                                                       LinkedIn Learning Líder de Estratégia de                            1000 W Maude Ave Conteúdo, Learning                                Sunnyvale, CA 94085     Código do certificado: ATmPvXTRmssMqd8_WtIf9WnKv6Qr  ```  ","title":"Transforme se num Líder Disruptivo"},{"id":272,"location":"/certificate/2020-12-15_rocketseat_dowhile.html","tags":["javascript"],"text":" ```                                 /certificado     Rocketseat parabeniza   Geraldo Luis da Silva Ribeiro pela participação no evento DoWhile2020, que aconteceu nos dias 14 e 15 de dezembro de 2020 e incluiu palestras, workshops, painéis e talks sobre o ecossistema de tecnologia, com carga horária de 16 horas.  ```  ","title":"dowhile"},{"id":273,"location":"/certificate/2020-12-16_linkedin_Code_Clinic_CPP.html","tags":["C++"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Code Clinic: C++ Curso concluído em dez 16, 2020 at 06:56PM UTC • 1 hora 39 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AVqcCPw2IC_Fx-2IakZYODuCyZY7  ```  ","title":"Code Clinic CPP"},{"id":274,"location":"/certificate/2020-12-16_linkedin_CPP_Best_Practices_for_Developers.html","tags":["C++"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   C++ Best Practices for Developers Course completed on Dec 16, 2020 at 10:09PM UTC • 50 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AeiGnjm5zCCiM75IbMp23lUw2cH2  ```  ","title":"CPP Best Practices for Developers"},{"id":275,"location":"/certificate/2020-12-16_linkedin_Introducing_Functional_Programming_in_CPP.html","tags":["C++"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Introducing Functional Programming in C++ Course completed on Dec 17, 2020 at 12:59AM UTC • 1 hour 15 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AQyg6uoBo2tkThZP18_FxNc_BFke  ```  ","title":"Introducing Functional Programming in CPP"},{"id":276,"location":"/certificate/2020-12-16_linkedin_Web_Servers_and_APIs_using_CPP.html","tags":["C++","crowcpp","webserver"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  Web Servers and APIs using C++ Course completed on Dec 16, 2020 at 08:57PM UTC • 2 hours 34 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                 LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate Id: AYXsOB0CYZKat4BgLJaCDIq--g72 ```  C++ has re-emerged as a go-to language for developing high-performance websites and web applications. C++ compiles to machine code, making it faster to start up and execute. For users, this means less time waiting for a site to render. This course teaches developers how to build a website powered by a MongoDB database and deploy it with a Heroku cloud server, all with C++. Instructor Troy Miles—a senior software developer—shows how to build and deliver HTML webpages; upload, download, and parse JSON data; make RESTful API calls; and even do real-time communication using WebSockets. Along the way, he shows how to resolve one of the main challenges of C++ web development—a complex toolchain that must be synced in development and production—using Docker containers.  ##  Learning objectives  * Working with [Crow](https://crowcpp.org/), the C++ micro web framework * Deploying containers to Heroku * Building websites and webpages * Accessing data from a database * Accessing data via RESTful APIs * Creating API endpoints * Running WebSockets on Heroku  ","title":"Web Servers and APIs using CPP"},{"id":277,"location":"/certificate/2020-12-17_linkedin_Code_Clinic_CPP.html","tags":["C++"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Code Clinic: C++ (2014) Course completed on Dec 17, 2020 at 07:27PM UTC • 2 hours 4 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AaZzbCmo6GxfFLYawB2WsH4m-mg0 \f ```  ","title":"Code Clinic CPP"},{"id":278,"location":"/certificate/2020-12-19_linkedin_Learning_COBIT.html","tags":["cobit"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Learning COBIT Course completed on Dec 19, 2020 at 09:13PM UTC • 1 hour 32 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AUDM73TmLYwoEIyG_JA51CP56Dxq  ```  ","title":"Learning COBIT"},{"id":279,"location":"/certificate/2020-12-31_linkedin_Agile_at_Work_Building_Your_Agile_Team.html","tags":["agile"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Agile at Work: Building Your Agile Team Curso concluído em dez 31, 2020 at 01:21PM UTC • 55 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                     LinkedIn Learning Líder de Estratégia de                           1000 W Maude Ave Conteúdo, Learning                               Sunnyvale, CA 94085     Código do certificado: AbE2JtzW9vWuN1o3GB1RYhExdQM4  ```  ","title":"Agile at Work Building Your Agile Team"},{"id":280,"location":"/certificate/2020-12-31_linkedin_Agile_at_Work_Building_Your_Agile_Team_PMI.html","tags":["agile"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Agile at Work: Building Your Agile Team Curso concluído em dez 31, 2020 at 01:21PM UTC  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                                     LinkedIn Learning Líder de Estratégia de                                           1000 W Maude Ave Conteúdo, Learning                                               Sunnyvale, CA 94085                        A logomarca da PMI Registered Education Provider é marca registrada do Project Management Institute, Inc.     Programa: PMI® Registered Education Provider | Proveedor ID: nº4101 Nº do certificado: AbE2JtzW9vWuN1o3GB1RYhExdQM4 PDUs/ContactHours: 1.00 | Actividad #: 4101X1JZKX  ```  ","title":"Agile at Work Building Your Agile Team PMI"},{"id":281,"location":"/certificate/2020-12-31_linkedin_Agile_at_Work_Planning_with_Agile_User_Stories_PMI.html","tags":["agile"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Agile at Work: Planning with Agile User Stories Curso concluído em dez 31, 2020 at 01:40PM UTC  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                                     LinkedIn Learning Líder de Estratégia de                                           1000 W Maude Ave Conteúdo, Learning                                               Sunnyvale, CA 94085                        A logomarca da PMI Registered Education Provider é marca registrada do Project Management Institute, Inc.     Programa: PMI® Registered Education Provider | Proveedor ID: nº4101 Nº do certificado: AQ7PS0Su-E8lnYhUuVf4JG8tyP4e PDUs/ContactHours: 1.00 | Actividad #: 4101ECBBFV  ```  ","title":"Agile at Work Planning with Agile User Stories PMI"},{"id":282,"location":"/certificate/2021-01-29_linkedin_Microservices_Asynchronous_Messaging.html","tags":["microservice"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Microservices: Asynchronous Messaging Course completed on Jan 29, 2021 at 01:13AM UTC • 1 hour 43 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: Aca7lL-0BbElEf6v71stKTa3mS77  ```  ","title":"Microservices Asynchronous Messaging"},{"id":283,"location":"/certificate/2021-02-15_linkedin_Técnicas_de_Persuasão_em_Vendas.html","tags":["sell","marketing","soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Técnicas de Persuasão em Vendas Curso concluído em fev 26, 2021 at 02:12AM UTC • 1 hora 0 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AThtPMbBuXxgkvC3cP3Vt9HW4j-G  ```  ","title":"Técnicas de Persuasão em Vendas"},{"id":284,"location":"/certificate/2021-02-24_linkedin_Com_Fazer_Perguntas_Poderosas_para_Vendas.html","tags":["sell","marketing","soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Como Fazer Perguntas Poderosas para Vendas Curso concluído em fev 24, 2021 at 11:22PM UTC • 27 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: Adz7-nDnMZuFipuB4fX1o4P0d-te  ```  ","title":"Com Fazer Perguntas Poderosas para Vendas"},{"id":285,"location":"/certificate/2021-02-24_linkedin_Como_Melhorar_a_Prospecção_de_Vendas.html","tags":["sell","marketing","soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Como Melhorar a Prospecção de Vendas Curso concluído em fev 25, 2021 at 01:02AM UTC • 33 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                      LinkedIn Learning Líder de Estratégia de                            1000 W Maude Ave Conteúdo, Learning                                Sunnyvale, CA 94085     Código do certificado: AT4Vd70NTOARkTDmdGRheikQEeLy  ```  ","title":"Como Melhorar a Prospecção de Vendas"},{"id":286,"location":"/certificate/2021-02-24_linkedin_Técnicas_de_Comunicação_Interpessoal.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Técnicas de Comunicação Interpessoal Curso concluído em fev 24, 2021 at 07:05PM UTC • 36 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                      LinkedIn Learning Líder de Estratégia de                            1000 W Maude Ave Conteúdo, Learning                                Sunnyvale, CA 94085     Código do certificado: AR707uKOOQS1DDx1HFXZ8srzmqe0  ```  ","title":"Técnicas de Comunicação Interpessoal"},{"id":287,"location":"/certificate/2021-02-25_linkedin_A_Ciência_das_Vendas.html","tags":["sell","marketing","soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   A Ciência das Vendas Curso concluído em fev 25, 2021 at 07:11PM UTC • 58 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                      LinkedIn Learning Líder de Estratégia de                            1000 W Maude Ave Conteúdo, Learning                                Sunnyvale, CA 94085     Código do certificado: Ad_7qyX5npIh7Rd7mhrUBmBxsyb5  ```  ","title":"A Ciência das Vendas"},{"id":288,"location":"/certificate/2021-02-25_linkedin_Fundamentos_de_Vendas.html","tags":["sell","marketing","soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Fundamentos de Vendas Curso concluído em fev 26, 2021 at 01:37AM UTC • 58 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AXk6Ej525vyZIa5l_Ij1fnP4dC01  ```  ","title":"Fundamentos de Vendas"},{"id":289,"location":"/certificate/2021-02-25_linkedin_Técnicas_de_Fechamento_de_Vendas.html","tags":["sell","marketing","soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Técnicas de Fechamento de Vendas Curso concluído em fev 26, 2021 at 02:37AM UTC • 38 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: ASW5r0E73vREIjh8QlpxP-o1a3nN  ```  ","title":"Técnicas de Fechamento de Vendas"},{"id":290,"location":"/certificate/2021-02-26_linkedin_Técnicas_de_Fechamento_de_Vendas.html","tags":["sell","marketing","soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Técnicas de Fechamento de Vendas Curso concluído em fev 26, 2021 at 02:37AM UTC • 38 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: ASW5r0E73vREIjh8QlpxP-o1a3nN  ```  ","title":"Técnicas de Fechamento de Vendas"},{"id":291,"location":"/certificate/2021-02-26_stefanini_Estrategia_Emocional.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:30 horas o curso:            ESTRATÉGIA EMOCIONAL                    Concluído em:                 26/Fevereiro/2021  ```  ","title":"Estrategia Emocional"},{"id":292,"location":"/certificate/2021-02-26_stefanini_Métricas_Ágeis.html","tags":["agile"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:                  Métricas Ágeis                    Concluído em:                 26/Fevereiro/2021 DESCRIÇÃO   Apresentar como as métricas ágeis podem ajudar na análise dos resultados e entender a evolução das entregas.     Apresentar o que é a metodologia XP.              Apresentação Conceitos Pode onde começar Manifesto das Métricas Ágeis Por onde começar a medir Lead Time Throughput WIP  ```  ","title":"Métricas Ágeis"},{"id":293,"location":"/certificate/2021-02-26_stefanini_Resiliência.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:                  RESILIÊNCIA                    Concluído em:                 26/Fevereiro/2021  ```  ","title":"Resiliência"},{"id":294,"location":"/certificate/2021-02-27_linkedin_O_Poder_das_Historias_no_Contexto_das_Vendas_Parte_2_Historias_que_Fazem_Sucesso.html","tags":["sell","marketing","soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   O Poder das Histórias no Contexto das Vendas, Parte 2: Histórias que Fazem Sucesso Curso concluído em fev 28, 2021 at 01:26AM UTC • 1 hora 29 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AfwMF6RRDK3icMor9hQzRIZRiO_1  ```  ","title":"O Poder das Historias no Contexto das Vendas Parte 2 Historias que Fazem Sucesso"},{"id":295,"location":"/certificate/2021-02-27_linkedin_Poder_das_Historias_no_Contexto_das_Vendas.html","tags":["sell","marketing","soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   O Poder das Histórias no Contexto das Vendas Curso concluído em fev 27, 2021 at 08:36PM UTC • 1 hora 17 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                    LinkedIn Learning Líder de Estratégia de                          1000 W Maude Ave Conteúdo, Learning                              Sunnyvale, CA 94085     Código do certificado: ASCwmpmZs986P7KazHGRDdR99nnD  ```  ","title":"Poder das Historias no Contexto das Vendas"},{"id":296,"location":"/certificate/2021-02-27_linkedin_Quarta_Revolução_Industrial_Novos_Modelos_de_Vendas.html","tags":["sell","marketing","soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Quarta Revolução Industrial: Novos Modelos de Vendas Curso concluído em fev 27, 2021 at 11:23PM UTC • 49 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AdX0pF67DVwrnBsnL6bhJGax1wz8  ```  ","title":"Quarta Revolução Industrial Novos Modelos de Vendas"},{"id":297,"location":"/certificate/2021-02-27_linkedin_Torne-se_um_Profissional_de_Vendas.html","tags":["sell","marketing","soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Torne-se um Profissional de Vendas Rota de aprendizagem concluída em fev 28, 2021 at 01:26AM UTC • 7 horas 23 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.  Principais competências abordadas Processo de venda, Eficácia de vendas, Vendas, Narração de histórias, Negociação                                                           LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: Ac6MAt0dCZlnR0FPwH5Y8Fdb8zX_  ```  ","title":"Torne se um Profissional de Vendas"},{"id":298,"location":"/certificate/2021-02-28_linkedin_Como_Preparar_e_Fazer_Apresentações_de_Negócios.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Como Preparar e Fazer Apresentações de Negócios Curso concluído em mar 01, 2021 at 12:55AM UTC • 1 hora 32 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: Adqc1mnireWXxtw9AlXSRm2ggf8z  ```  ","title":"Como Preparar e Fazer Apresentações de Negócios"},{"id":299,"location":"/certificate/2021-02-28_linkedin_Designing_a_Letterhead_System.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Designing a Letterhead System Curso concluído em fev 28, 2021 at 04:26PM UTC • 23 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: Ac-rTCitV0CalTHK8VqrtKQbw5hv  ```  ","title":"Designing a Letterhead System"},{"id":300,"location":"/certificate/2021-03-09_udemy_vim_moderno_e_VimScript.html","tags":["vim","vimscript"],"text":" ```  ```  ","title":"vim moderno e VimScript"},{"id":301,"location":"/certificate/2021-04-05_certiprof_Cyber_Security_Foundation_certiprof.html","tags":["security"],"text":" ``` Geraldo Luis da Silva Ribeiro                 April 5, 2021                 60977531                April 5, 2023 ```  ","title":"Cyber Security Foundation certiprof"},{"id":302,"location":"/certificate/2021-04-05_linkedin_Comunicação_na_Liderança_4.0_O_Poder_da_Síntese.html","tags":["soft-skill","leadership"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Comunicação na Liderança 4.0: O Poder da Síntese Course completed on Apr 05, 2021 at 10:33PM UTC • 56 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AeMbG05o9AieUeHkKTXcUb3HL-zp  ```  ","title":"Comunicação na Liderança 4.0 O Poder da Síntese"},{"id":303,"location":"/certificate/2021-04-13_stefanini_Como_a_Inteligencia_Artificial_aprende_e_onde_ela_pode_chegar.html","tags":["artificial-intelligence"],"text":" ```  ```  ","title":"Como a Inteligencia Artificial aprende e onde ela pode chegar"},{"id":304,"location":"/certificate/2021-04-16_stefanini_como_dar_e_receber_feedback.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:       COMO DAR E RECEBER FEEDBACK                   Concluído em:                  16/Abril/2021  ```  ","title":"como dar e receber feedback"},{"id":305,"location":"/certificate/2021-04-16_stefanini_comunicação.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:                 COMUNICAÇÃO                   Concluído em:                  16/Abril/2021  ```  ","title":"comunicação"},{"id":306,"location":"/certificate/2021-04-16_stefanini_foco_no_resultado_sustentável.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:     FOCO NO RESULTADO SUSTENTÁVEL                   Concluído em:                  16/Abril/2021  ```  ","title":"foco no resultado sustentável"},{"id":307,"location":"/certificate/2021-04-16_stefanini_influencia_e_negociação.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:           INFLUÊNCIA E NEGOCIAÇÃO                   Concluído em:                  16/Abril/2021  ```  ","title":"influencia e negociação"},{"id":308,"location":"/certificate/2021-04-16_stefanini_INSTITUCIONAL_STEFANINI.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:            INSTITUCIONAL STEFANINI                   Concluído em:                  16/Abril/2021  ```  ","title":"INSTITUCIONAL STEFANINI"},{"id":309,"location":"/certificate/2021-04-16_stefanini_marketing_pessoal.html","tags":["soft-skill","marketing"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:             MARKETING PESSOAL                   Concluído em:                  16/Abril/2021  ```  ","title":"marketing pessoal"},{"id":310,"location":"/certificate/2021-04-16_stefanini_TRANSFORMAÇÃO_DIGITAL_E_CULTURAL_DO_PAPEL_A_PRÁTICA.html","tags":["soft-skill"],"text":" ```                      Certificamos que:                Geraldo Luis Da Silva Ribeiro        Concluiu com carga horária de 01:00 horas o curso: TRANSFORMAÇÃO DIGITAL E CULTURAL: DO PAPEL À PRÁTICA                        Concluído em:                       16/Abril/2021  ```  ","title":"TRANSFORMAÇÃO DIGITAL E CULTURAL DO PAPEL A PRÁTICA"},{"id":311,"location":"/certificate/2021-05-09_linkedin_Agile_Software_Development_Dealing_with_Legacy_Code_and_Technical_Debt.html","tags":["agile"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Agile Software Development: Dealing with Legacy Code and Technical Debt Course completed on May 09, 2021 at 09:41PM UTC • 1 hour 2 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AT_fy7bEyR_YJ8qwi9mqA4PB3bj_  ```  ","title":"Agile Software Development Dealing with Legacy Code and Technical Debt"},{"id":312,"location":"/certificate/2021-05-12_linkedin_End-to-End_JavaScript_Testing_with_Cypress.io.html","tags":["testing","javascript","cypress"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   End-to-End JavaScript Testing with Cypress.io Course completed on May 12, 2021 at 08:28PM UTC • 1 hour 29 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AZrKnqh_i8b5QrgOmMu8T05quZIw  ```  ","title":"End to End JavaScript Testing with Cypress.io"},{"id":313,"location":"/certificate/2021-05-13_linkedin_Como_Conciliar_o_Trabalho_Remoto_com_a_Vida_Familiar_em_Tempos_de_Crise.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Como Conciliar o Trabalho Remoto com a Vida Familiar em Tempos de Crise Curso concluído em mai 13, 2021 at 06:16PM UTC • 1 hora 3 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: Ab_grwEY-wDXUHy0T-ttKsBhvswO  ```  ","title":"Como Conciliar o Trabalho Remoto com a Vida Familiar em Tempos de Crise"},{"id":314,"location":"/certificate/2021-05-13_linkedin_Computação_em_Nuvem_Noções_Básicas.html","tags":["cloud"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Computação em Nuvem: Noções Básicas Curso concluído em mai 13, 2021 at 03:08AM UTC • 1 hora 43 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                      LinkedIn Learning Líder de Estratégia de                            1000 W Maude Ave Conteúdo, Learning                                Sunnyvale, CA 94085     Código do certificado: ARoQ0zStEObf4uNwH-pCuRDCvFGJ  ```  ","title":"Computação em Nuvem Noções Básicas"},{"id":315,"location":"/certificate/2021-05-14_linkedin_Secure_Coding_in_Java.html","tags":["security","java"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Secure Coding in Java Curso concluído em mai 15, 2021 at 02:07AM UTC • 59 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AdmI4war4PASmiqzXL8Xe_e_H1YZ  ```  ","title":"Secure Coding in Java"},{"id":316,"location":"/certificate/2021-05-15_linkedin_Fundamentos_de_Comunicação.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Fundamentos de Comunicação Curso concluído em mai 16, 2021 at 12:40AM UTC • 1 hora 23 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AXKfRjKzSNRKrdhdSyD3tJNqKGj9  ```  ","title":"Fundamentos de Comunicação"},{"id":317,"location":"/certificate/2021-05-16_linkedin_Como_Desenvolver_a_Resiliência.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Como Desenvolver a Resiliência Curso concluído em mai 16, 2021 at 06:55PM UTC • 41 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: Af0gQEabbZOaMYZXXru1LogXzPfH  ```  ","title":"Como Desenvolver a Resiliência"},{"id":318,"location":"/certificate/2021-05-19_linkedin_Descubra_o_CSS.html","tags":["css"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Descubra o CSS Curso concluído em mai 19, 2021 at 06:44PM UTC • 1 hora 37 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AYokcfDACZI5dIO9IAGgV_ZMb6Dh  ```  ","title":"Descubra o CSS"},{"id":319,"location":"/certificate/2021-05-27_linkedin_Vue.js_3_Essential_Training.html","tags":["vue"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Vue.js 3 Essential Training Course completed on May 27, 2021 at 04:27PM UTC • 5 hours 8 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AWWCYNO8qqjOy21YuQ3K3szevD82  ```  ","title":"Vue.js 3 Essential Training"},{"id":320,"location":"/certificate/2021-05-28_linkedin_Training_Neural_Networks_in_C++.html","tags":["C++","neural-network"],"text":" ## Course description  > Learn about the purpose, structure, and training process of neural networks to improve your machine learning skills. In this project-based course, instructor Eduardo Corpeño teaches you how to create an intelligent system with a neural network from scratch in C++, as well as how to choose the right neural network architecture and training method for each problem. Eduardo starts by explaining the difference between a neural network and other programming tools. He goes over why this course uses C++ and how to add different types of neural networks to your toolbox. The inspiration for artificial neural networks is the brain, and Eduardo relates parts of a biological neuron to C++ elements, then shows how to use activation functions and perceptrons in building neuron models. Eduardo covers the steps you will need to build and train your network. He explains segment display recognition, then guides you through designing and training your own SDR neural network.  ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Training Neural Networks in C++ Course completed on May 29, 2021 at 01:58AM UTC • 1 hour 46 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AQF18zTVsP4He8hR7B5iNRzwMgBs  ```  ","title":"Training Neural Networks in C++"},{"id":321,"location":"/certificate/2021-05-29_stefanini_Technical_Meeting_Stefanini.html","tags":["soft-skill"],"text":" ```  ```  ","title":"Technical Meeting Stefanini"},{"id":322,"location":"/certificate/2021-06-01_linkedin_Project_Management_Simplified.html","tags":["project-management"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Project Management Simplified Course completed on Jun 02, 2021 at 12:45AM UTC  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                                      LinkedIn Learning                                                                    1000 W Maude Ave Head of Content Strategy, Learning                                 Sunnyvale, CA 94085                         The PMI Registered Education Provider logo is a registered mark of the Project Management Institute, Inc.     Program: PMI® Registered Education Provider | Provider ID: #4101 Certificate No: ARe7Cpjx3DB_c9YlCASAbXUBk8Gi PDUs/ContactHours: 1.50 | Activity #: 4101W7SDCV  ```  ","title":"Project Management Simplified"},{"id":323,"location":"/certificate/2021-06-02_linkedin_Learning_Vue.js.html","tags":["vue"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Learning Vue.js Course completed on Jun 03, 2021 at 12:04AM UTC • 1 hour 41 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AYqVCm1rZxKonXvdwcg8LKAsSVI6  ```  ","title":"Learning Vue.js"},{"id":324,"location":"/certificate/2021-06-03_linkedin_Building_Vue_and_Node_Apps_with_Authentication.html","tags":["vue"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Building Vue and Node Apps with Authentication Course completed on Jun 03, 2021 at 12:50PM UTC • 2 hours 18 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AQ6enwEIbpm1DXJCJvN99GiH3pbT  ```  ","title":"Building Vue and Node Apps with Authentication"},{"id":325,"location":"/certificate/2021-06-03_linkedin_Project_Management_Simplified_PMI.html","tags":["project-management"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Project Management Simplified Course completed on Jun 02, 2021 at 12:45AM UTC  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                                      LinkedIn Learning                                                                    1000 W Maude Ave Head of Content Strategy, Learning                                 Sunnyvale, CA 94085                         The PMI Registered Education Provider logo is a registered mark of the Project Management Institute, Inc.     Program: PMI® Registered Education Provider | Provider ID: #4101 Certificate No: ARe7Cpjx3DB_c9YlCASAbXUBk8Gi PDUs/ContactHours: 1.50 | Activity #: 4101W7SDCV  ```  ","title":"Project Management Simplified PMI"},{"id":326,"location":"/certificate/2021-06-18_udemy_Aprenda_a_criar_indicadores_técnicos_de_investimentos_MQL5.html","tags":["mql5","money"],"text":" ```  ```  ","title":"Aprenda a criar indicadores técnicos de investimentos MQL5"},{"id":327,"location":"/certificate/2021-06-18_udemy_Robôs_de_investimentos_MQL5_tópicos_avançados.html","tags":["mql5","money"],"text":" ```  ```  ","title":"Robôs de investimentos MQL5 tópicos avançados"},{"id":328,"location":"/certificate/2021-06-21_udemy_Analise_Técnica_para_investidores_e_analistas_quant.html","tags":["money","investing"],"text":" ```  ```  ","title":"Analise Técnica para investidores e analistas quant"},{"id":329,"location":"/certificate/2021-09-12_linkedin_C++_Design_Patterns_Behavioral.html","tags":["C++"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   C++ Design Patterns: Behavioral Course completed on Sep 12, 2021 at 02:10PM UTC • 3 hours 29 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AVlC7C7QEO5C19Av4e2mojyWOu_X  ```  ","title":"C++ Design Patterns Behavioral"},{"id":330,"location":"/certificate/2021-09-12_linkedin_Design_Patterns_Creational.html","tags":["design-pattern"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Design Patterns: Creational Course completed on Sep 12, 2021 at 02:59PM UTC • 48 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AYwjWh1IlumBtYDwE2Q1svt2jcaL  ```  ","title":"Design Patterns Creational"},{"id":331,"location":"/certificate/2021-09-14_linkedin_Choosing_a_CrossPlatform_Development_Tool.html","tags":["development"],"text":" Certificate of Completion  Congratulations, Geraldo Ribeiro  Choosing a Cross-Platform Development Tool  Course completed on Sep 14, 2021 at 02:56PM UTC • 40 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.  Head of Content Strategy, Learning  LinkedIn Learning 1000 W Maude Ave Sunnyvale, CA 94085  Certificate Id: AXEshNtUCX0Ne0exiDd-jZI0EyuT  ","title":"Choosing a Cross-Platform Development Tool"},{"id":332,"location":"/certificate/2021-09-17_linkedin_Vue.js_Testing_and_Debugging.html","tags":["vue"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Vue.js: Testing and Debugging Course completed on Sep 17, 2021 at 04:11PM UTC • 1 hour 19 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AQuhda57WlP_g7XY3o9o44oHl5P4  ```  ","title":"Vue.js Testing and Debugging"},{"id":333,"location":"/certificate/2021-10-10_TryHackMe_Badge_webbed.html","tags":["security"],"text":" ``` 10/10/2021 15:51                                                              TryHackMe | User Badge                                                                                                            254166                                                            geraldolsribeiro                             Rank                                                                  was awarded a badge                                                                                                          1                                                                                                         Level                                                                         Webbed                                                    Understands how the world wide web works                                                           Come learn all things security at TryHackMe     https://tryhackme.com/geraldolsribeiro/badges/web-fund                                                          1/2 10/10/2021 15:51                                         TryHackMe | User Badge     https://tryhackme.com/geraldolsribeiro/badges/web-fund                            2/2  ```  ","title":"TryHackMe Badge webbed"},{"id":334,"location":"/certificate/2021-10-18_stefanini_aprendendo_a_lidar_com_as_mudanças.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:  APRENDENDO A LIDAR COM AS MUDANÇAS                   Concluído em:                 18/Outubro/2021  ```  ","title":"aprendendo a lidar com as mudanças"},{"id":335,"location":"/certificate/2021-10-18_stefanini_Growth_Mindset.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:               GROWTH MINDSET                   Concluído em:                 18/Outubro/2021  ```  ","title":"Growth Mindset"},{"id":336,"location":"/certificate/2021-10-19_stefanini_AGILE_2.0.html","tags":["agile"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:                    AGILE 2.0                   Concluído em:                 19/Outubro/2021  ```  ","title":"AGILE 2.0"},{"id":337,"location":"/certificate/2021-10-19_stefanini_ERGONOMIA_EM_HOME_OFFICE.html","tags":["soft-skill","ergonomia","home-office"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:         ERGONOMIA EM HOME OFFICE                   Concluído em:                 19/Outubro/2021 Descrição:     Orientações de ergonomia voltado para trabalho home office.   Objetivo:   Orientar os profissionais quanto a ergonomia no seu ambiente home office.     Conteúdo Programático:   •   O que é ergonomia; •   Dicas de ergonomia; •   Como se adaptar em ambiente home office; •   Dicas de alongamento.  ```  ","title":"ERGONOMIA EM HOME OFFICE"},{"id":338,"location":"/certificate/2021-10-19_stefanini_EXCEL_2013-CURSO_BÁSICO.html","tags":["excel","office"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 02:00 horas o curso:          EXCEL 2013 - CURSO BÁSICO                   Concluído em:                 19/Outubro/2021  ```  ","title":"EXCEL 2013 CURSO BÁSICO"},{"id":339,"location":"/certificate/2021-10-19_stefanini_EXCEL_2013-CURSO_INTERMEDIÁRIO.html","tags":["excel","office"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 02:00 horas o curso:     EXCEL 2013 - CURSO INTERMEDIÁRIO                   Concluído em:                 19/Outubro/2021  ```  ","title":"EXCEL 2013 CURSO INTERMEDIÁRIO"},{"id":340,"location":"/certificate/2021-10-19_stefanini_INTRODUÇÃO_AO_SCRUM.html","tags":["scrum"],"text":" ``` 2                        Certificamos que:              Geraldo Luis Da Silva Ribeiro      Concluiu com carga horária de 04:00 horas o curso:                INTRODUÇÃO AO SCRUM                       Concluído em:                     19/Outubro/2021  ```  ","title":"INTRODUÇÃO AO SCRUM"},{"id":341,"location":"/certificate/2021-10-19_stefanini_METODOLOGIA_ÁGIL.html","tags":["agile"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:              METODOLOGIA ÁGIL                   Concluído em:                 19/Outubro/2021  ```  ","title":"METODOLOGIA ÁGIL"},{"id":342,"location":"/certificate/2021-10-19_stefanini_ORIENTAÇÃO_PARA_CLIENTES.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:          ORIENTAÇÃO PARA CLIENTES                   Concluído em:                 19/Outubro/2021  ```  ","title":"ORIENTAÇÃO PARA CLIENTES"},{"id":343,"location":"/certificate/2021-10-19_stefanini_ORIENTAÇÃO_PARA_RESULTADOS.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:       ORIENTAÇÃO PARA RESULTADOS                   Concluído em:                 19/Outubro/2021  ```  ","title":"ORIENTAÇÃO PARA RESULTADOS"},{"id":344,"location":"/certificate/2021-10-20_stefanini_A_agilidade_da_Cloud_no_mundo_Digital.html","tags":["cloud"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:      A agilidade da Cloud no mundo Digital                   Concluído em:                 20/Outubro/2021  ```  ","title":"A agilidade da Cloud no mundo Digital"},{"id":345,"location":"/certificate/2021-10-20_stefanini_COMUNICAÇÃO_DE_ALTO_IMPACTO.html","tags":["soft-skill"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 06:00 horas o curso:       COMUNICAÇÃO DE ALTO IMPACTO                   Concluído em:                 20/Outubro/2021  ```  ","title":"COMUNICAÇÃO DE ALTO IMPACTO"},{"id":346,"location":"/certificate/2021-10-20_stefanini_POWERPOINT_2013-CURSO_BÁSICO.html","tags":["powerpoint","office"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 02:00 horas o curso:      POWERPOINT 2013 - CURSO BÁSICO                   Concluído em:                 20/Outubro/2021  ```  ","title":"POWERPOINT 2013 CURSO BÁSICO"},{"id":347,"location":"/certificate/2021-10-20_stefanini_POWERPOINT_2013-CURSO_INTERMEDIÁRIO.html","tags":["powerpoint","office"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 02:00 horas o curso:  POWERPOINT 2013 - CURSO INTERMEDIÁRIO                   Concluído em:                 20/Outubro/2021  ```  ","title":"POWERPOINT 2013 CURSO INTERMEDIÁRIO"},{"id":348,"location":"/certificate/2021-10-22_stefanini_Testes_Automatizados_WEB.html","tags":["testing","devops"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 02:00 horas o curso:            Testes Automatizados WEB                   Concluído em:                 22/Outubro/2021 Descrição     Objetivo     Conteúdo  ```  ","title":"Testes Automatizados WEB"},{"id":349,"location":"/certificate/2021-11-03_stefanini_Fundamentos_do_GIT_Testes_de_API.html","tags":["git","testing","devops"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:        Fundamentos do GIT Testes de API                    Concluído em:                 3/Novembro/2021 Descrição     Aprenda os principais comandos para o GIT e teste API, monitore e crie documentações.     Objetivo     Demonstrar os objetivos do GIT, principais comandos e criar um projeto de testes automatizados de API com POSTMAN.     Conteúdo     •   Fundamentos e conceitos do GIT •   O que é uma API? •   O que é um Swagger? •   O que são testes de API? •   Como fazer testes de API? •   Postman •   Utilizando o swagger para os testes de API •   Verificando os relatórios  ```  ","title":"Fundamentos do GIT Testes de API"},{"id":350,"location":"/certificate/2021-11-04_stefanini_Tutorial_Sophie_ChatBot.html","tags":["chatbot"],"text":" ```               Certificamos que:         Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 00 horas a trilha:            Tutorial Sophie ChatBot                  Concluído em:  ```  ","title":"Tutorial Sophie ChatBot"},{"id":351,"location":"/certificate/2021-11-14_linkedin_Da_Vitimização_a_Ação.html","tags":["soft-skill"],"text":" ``` Certificado de conclusão Parabéns, Geraldo Ribeiro   Da Vitimização à Ação: Como Assumir o Controle Curso concluído em nov 14, 2021 at 06:05PM UTC • 56 min  Com essa rota de aprendizagem, você expandiu suas habilidades, aperfeiçoou suas competências e ampliou suas perspectivas de carreira.                                                          LinkedIn Learning Líder de Estratégia de                                1000 W Maude Ave Conteúdo, Learning                                    Sunnyvale, CA 94085     Código do certificado: AStee14lyOt1GqO7aIbRsp_lOsKA  ```  ","title":"Da Vitimização a Ação"},{"id":352,"location":"/certificate/2021-11-17_stefanini_Treinamento_SGA_ISO_14001.html","tags":["iso","iso-14001","14001","sga"],"text":" ```                Certificamos que:          Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:           Treinamento SGA ISO 14001                   Concluído em:                17/Novembro/2021     INFORMAÇÕES COMPLEMENTARES  Objetivo:  Dar ciência aos profissionais da Stefanini sobre seus objetivos ambientais.  Conteúdo Programático: •   Politica Ambiental •   Aspectos e Impactos Ambientais dos controles operacionais •   Objetivos e metas ambientais •   Requisitos Legais •   Riscos e Oportunidades  Instrutor:  Washington Andre De Souza ```  ","title":"Treinamento SGA ISO 14001"},{"id":353,"location":"/certificate/2022-01-11_stefanini_Integração_SMS.html","tags":["soft-skill"],"text":" ```                Certificamos que:           Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 02:00 horas o curso:                  Integração SMS                   Concluído em:                  11/Janeiro/2022 Objetivo: Apresentar o setor de SMS e orientar todos os profissionais recém-contratados sobre as noções básicas de saúde, segurança do trabalho, meio ambiente e inclusão social.     Conteúdo:     • Conhecendo a política de saúde e segurança do trabalho; • Conhecendo a política de meio ambiente; • Conhecendo a comunidade do SMS; • Conhecendo o portal de governança; • Objetvo; • Conhecendo o SMS; • PCMSO; • Fluxograma de realização dos exames ocupacionais; • Procedimento de entrega de atestado médico; • Controle de atestado -CID; • PPRA; • Acidentes de trabalho, e ocorrências em vias públicas; • Segurança no escritório; • Segurança em home office; • Circulação e procedimentos de emergência; • Proteção contra incêndio; • Ergonomia; • Treinamento e capacitação; • Home office: como se adaptar; • Consumo de água, e consumo de papel; • Consumo de energia elétrica; • Redução de emissão de CO2; • Coleta seletiva; • Objetivo da inclusão social; • Acessibilidade; • Telefones de emergência. Instrutor : Paulo Henrique Spercel  ```  ","title":"Integração SMS"},{"id":354,"location":"/certificate/2022-01-11_stefanini_NR1_Ordem_de_Serviço.html","tags":["soft-skill"],"text":" ```                Certificamos que:           Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:           NR 01 - ORDEM DE SERVIÇO                   Concluído em:                  11/Janeiro/2022 Objetivo: Orientar todos os profissionais recém contratados sobre as noções básicas de saúde e segurança do trabalho.   Conteúdo Programático     •   Objetivo da norma; •   Direitos e Deveres; •   Ordem de Serviço; •   Exames Médicos; •   Aplicação da NR; •   EPI; •   Ato faltoso; •   Capacitação e treinamento em Segurança e Saúde do Trabalho  ```  ","title":"NR1 Ordem de Serviço"},{"id":355,"location":"/certificate/2022-04-02_refactoring.guru_certificate-refactoring.html","tags":["development","refactoring","devops"],"text":" ``` CERTIFICATE of COMPLETION  Geraldo Ribeiro on April 2nd, 2022 successfully completed the course “Dive Into Refactoring”                  2022-04-02          Author & Instructor               #000092870          Alexander Shvets  Certificate URL: refactoring.guru/cert/r/OTI4NzA  ```  ","title":"Dive into Refactoring"},{"id":356,"location":"/certificate/2022-06-02_stefanini_AFL_Academia_de_Formação_de_Líderes.html","tags":["leadership","soft-skill"],"text":" ```                 Certificamos que:            Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 34:40 horas a trilha: AFL - Academia de Formação de Líderes Necxt 2022                    Concluído em:                    02/06/2022  ```  ","title":"AFL Academia de Formação de Líderes"},{"id":357,"location":"/certificate/2022-06-02_stefanini_Crucial_Role_of_Penetration_Testing_and_Vulnerability_Assessments_in_Cybersecurity.html","tags":["security","pentest","owasp"],"text":" ```                     This certificate is proudly presented to:                         Geraldo Luis Da Silva Ribeiro                                   Has completed Crucial role of Penetration Testing & Vulnerability Assessments in Cybersecurity                                       On:                                  Junho/2/2022  ```  ","title":"Crucial Role of Penetration Testing and Vulnerability Assessments in Cybersecurity"},{"id":358,"location":"/certificate/2022-06-02_stefanini_Squads.html","tags":["development","devops"],"text":" ```                  Certificamos que:         Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:                     SQUADS                    Concluído em:                  2/Junho/2022 DESCRIÇÃO:     Apresentar os conceitos de Squads, as suas características, diferenças entre grupo e squads e suas vantagens.   OBJETIVO     Apresentar os conceitos de Squads, as suas características, diferenças entre grupo e squads e suas vantagens.   CONTEÚDO PROGRMÁTICO   Introdução   Squads   Diferença entre Grupos e Squads   Caracteristicas   Vantagens  ```  ","title":"Squads"},{"id":359,"location":"/certificate/2022-06-14_linkedin_AWS_for_Developers_PayPal_Payment_Processing_with_Lambdas.html","tags":["aws","lambda","money"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   AWS for Developers: PayPal Payment Processing with Lambdas Course completed on Jun 14, 2022 at 06:53PM UTC • 1 hour 4 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AW_d_BKD8xtq1B4iJ7sRO-YgD39q  ```  ","title":"AWS for Developers PayPal Payment Processing with Lambdas"},{"id":360,"location":"/certificate/2022-06-23_linkedin_Advanced_SEO_Developing_an_SEO_Friendly_Website.html","tags":["seo"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Advanced SEO: Developing an SEO-Friendly Website Course completed on Jun 23, 2022 at 09:29PM UTC • 2 hours 38 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: Ac7O-RXIMWJQmtz-6mc4SUddRrdr  ```  ","title":"Advanced SEO Developing an SEO Friendly Website"},{"id":361,"location":"/certificate/2022-06-23_linkedin_HTML_Metadata_in_the_Head.html","tags":["html","seo"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   HTML: Metadata in the Head Course completed on Jun 23, 2022 at 07:23PM UTC • 1 hour 25 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: Af_TpF67WzBO8Z-av88uuABEfS9n  ```  ","title":"HTML Metadata in the Head"},{"id":362,"location":"/certificate/2022-06-23_linkedin_HTML_Structured_Semantic_Data.html","tags":["html","seo"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   HTML: Structured Semantic Data Course completed on Jun 23, 2022 at 06:38PM UTC • 1 hour 34 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: Af8GGNmJyrSx4Xh7oTNoajoxSoCf  ```  ","title":"HTML Structured Semantic Data"},{"id":363,"location":"/certificate/2022-06-27_linkedin_Advanced_SEO_Search_Factors.html","tags":["seo"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Advanced SEO: Search Factors Course completed on Jun 27, 2022 at 07:54PM UTC • 1 hour 11 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: ATbcfCTKPe5Q2gxRtq13hp--Ftdn  ```  ","title":"Advanced SEO Search Factors"},{"id":364,"location":"/certificate/2022-06-27_linkedin_Improve_SEO_for_Your_Website.html","tags":["seo"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Improve SEO for Your Website Course completed on Jun 27, 2022 at 08:32PM UTC • 1 hour 10 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AfMkxqrWygJUdrYSljWnNyB3E57a  ```  ","title":"Improve SEO for Your Website"},{"id":365,"location":"/certificate/2022-07-01_kultivi_Oratória_de_alta_performance.html","tags":["oratory"],"text":" ```  CERTIFICADO DE PARTICIPAÇÃO    Geraldo Ribeiro   Concluiu com sucesso o curso Oratória de alta                                                                                      Data de emissão: 01/07/2022 14:27 performance, com carga horária estimada de 3h.                                                                                        efbcf7f3-feab-4353-8a15-03ff9953713d                                   KULTIVI - PRODUCAO E EDICAO DE CONTEUDO LTDA - CNPJ: 28.186.806/0001-35  ```  ","title":"Oratória de alta performance"},{"id":366,"location":"/certificate/2022-07-20_appsecengineer_DevSecOps_SAST_and_Code_Review_for_DevSecOps.html","tags":["sast","security","devsecops","code-review","testing"],"text":" ```  ```  ","title":"DevSecOps SAST and Code Review for DevSecOps"},{"id":367,"location":"/certificate/2022-07-20_linkedin_Build_Your_Own_Professional_Training_Quick_Start_Guide.html","tags":["soft-skill"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Build Your Own Professional Training: Quick Start Guide Course completed on Jul 20, 2022 at 06:26PM UTC • 38 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AVTOAoEGttSTa9v7HwdtngXFZSuu  ```  ","title":"Build Your Own Professional Training Quick Start Guide"},{"id":368,"location":"/certificate/2022-07-20_linkedin_Creating_Fun_and_Engaging_Video_Training_The_How.html","tags":["soft-skill","video"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Creating Fun and Engaging Video Training: The How Course completed on Jul 20, 2022 at 05:33PM UTC • 29 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AeeXXV17KfcUDi4--qFnFlGVbqY5  ```  ","title":"Creating Fun and Engaging Video Training The How"},{"id":369,"location":"/certificate/2022-07-20_linkedin_Creating_Fun_and_Engaging_Video_Training_The_Why.html","tags":["soft-skill","video"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Creating Fun and Engaging Video Training: The Why Course completed on Jul 20, 2022 at 05:53PM UTC • 21 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AV9NK5Yw8RMuOnFOKcg6AR2BonbR  ```  ","title":"Creating Fun and Engaging Video Training The Why"},{"id":370,"location":"/certificate/2022-07-20_linkedin_Dynamic_Application_Security_Testing_DAST.html","tags":["dast","security","testing","devsecops"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Dynamic Application Security Testing (DAST) Course completed on Jul 20, 2022 at 07:30PM UTC • 3 hours 19 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AXQC262e1KAeXzepJeiutVrgJg2T  ```  ","title":"Dynamic Application Security Testing DAST"},{"id":371,"location":"/certificate/2022-07-21_linkedin_CSSLP_Cert_Prep_4_Secure_Software_Implementation.html","tags":["ISC","CSSLP","security","devsecops"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   CSSLP Cert Prep: 4 Secure Software Implementation Course completed on Jul 21, 2022 at 07:38PM UTC • 1 hour 29 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: Aan7EeLSTAuB2dsQFTTr9abtoemC  ```  ","title":"CSSLP Cert Prep 4 Secure Software Implementation"},{"id":372,"location":"/certificate/2022-07-22_linkedin_CSSLP_Cert_Prep_The_Basics.html","tags":["ISC","CSSLP","security","devsecops"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  CSSLP Cert Prep: The Basics Course completed on Jul 22, 2022 at 04:36PM UTC • 1 hour 10 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate Id: AUuMLDI05LWf4ASs3RK2Y0CALZ3i ```  ","title":"CSSLP Cert Prep The Basics"},{"id":373,"location":"/certificate/2022-07-25_linkedin_CSSLP_Cert_Prep_2_Secure_Software_Requirements.html","tags":["ISC","CSSLP","security","devsecops"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  CSSLP Cert Prep: 2 Secure Software Requirements Course completed on Jul 25, 2022 at 09:17PM UTC • 1 hour 31 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate Id: ATYHXEVyPpxz-NDKFHlaJHLd0pJf ```  ","title":"CSSLP Cert Prep 2 Secure Software Requirements"},{"id":374,"location":"/certificate/2022-07-27_linkedin_CSSLP_Cert_Prep_3_Secure_Software_Design.html","tags":["ISC","CSSLP","security","devsecops"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   CSSLP Cert Prep: 3 Secure Software Design Course completed on Jul 27, 2022 at 07:49PM UTC • 2 hours 6 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: Ac2pXj0j7LpHPLVqvgtiauQdm3hu  ```  ","title":"CSSLP Cert Prep 3 Secure Software Design"},{"id":375,"location":"/certificate/2022-07-30_linkedin_Learning_Nuxt.js.html","tags":["nuxt","vue"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Learning Nuxt.js Course completed on Jul 30, 2022 at 11:54PM UTC • 1 hour 32 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: ATSKd9gB_jQpQ7szU19Duy_ipvIq  ```  ","title":"Learning Nuxt.js"},{"id":376,"location":"/certificate/2022-07-30_linkedin_Learning_Vuex.html","tags":["vue"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Learning Vuex Course completed on Jul 30, 2022 at 03:29PM UTC • 1 hour 15 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AYgNzv-VR49yXui1UGOA4gHVq9Kt  ```  ","title":"Learning Vuex"},{"id":377,"location":"/certificate/2022-08-04_stefanini_Nuxt.js_2.html","tags":["nuxt","vue"],"text":" ```              Certificamos que:        Geraldo Luis da Silva Ribeiro  Concluiu com carga horária de 5 horas o curso:               Curso NuxtJS 2                 Concluído em:               04/Agosto/2022  ```  ","title":"Nuxt.js 2"},{"id":378,"location":"/certificate/2022-08-18_stefanini_Tailwind_CSS_2.html","tags":["tailwind"],"text":" ```              Certificamos que:        Geraldo Luis da Silva Ribeiro  Concluiu com carga horária de 4 horas o curso:               Tailwind CSS 2                 Concluído em:               18/Agosto/2022  ```  ","title":"Tailwind CSS 2"},{"id":379,"location":"/certificate/2022-08-31_stefanini_Golang_para_Web.html","tags":["go"],"text":" ```              Certificamos que:        Geraldo Luis da Silva Ribeiro  Concluiu com carga horária de 5 horas o curso:              GoLang para Web                 Concluído em:               31/Agosto/2022  ```  ","title":"Golang para Web"},{"id":380,"location":"/certificate/2022-08-31_stefanini_Python_Machine_Learning.html","tags":["python","machine-learning"],"text":" ``` Declaramos que Geraldo Luis da Silva Ribeiro atendeu o curso: Python Machine Learning com carga horária de 6 horas na data de 31/08/2022  Parabéns por esta conquista!  ```  ","title":"Python Machine Learning"},{"id":381,"location":"/certificate/2022-09-02_linkedin_Creating_Brand_Identity_Assets.html","tags":["marketing"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Creating Brand Identity Assets Course completed on Sep 03, 2022 at 06:48PM UTC • 1 hour 5 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: ASIa4KYSTKSUwTPv5SpduxvKRjZh  ```  ","title":"Creating Brand Identity Assets"},{"id":382,"location":"/certificate/2022-09-02_stefanini_Desenvolvimento_Seguro.html","tags":["security","owasp","owasp-zap","sonarqube","devsecops"],"text":" ```                  Certificamos que:         Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:            Desenvolvimento Seguro                    Concluído em:                2/Setembro/2022  ```  ","title":"Desenvolvimento Seguro"},{"id":383,"location":"/certificate/2022-09-02_stefanini_Redis.html","tags":["redis"],"text":" ``` Declaramos que Geraldo Luis da Silva Ribeiro atendeu o curso: Redis com carga horária de 1 hora na data de 02/09/2022  Parabéns por esta conquista!  ```  ","title":"Redis"},{"id":384,"location":"/certificate/2022-09-02_stefanini_Segurança_da_Informação.html","tags":["security","owasp","iso","iso-27001","27001"],"text":" ```                  Certificamos que:         Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:        SEGURANÇA DA INFORMAÇÃO                    Concluído em:                2/Setembro/2022 •   Apresentação •   O que acontece no mundo? •   O que é a Segurança da Informação? •   ISO 27001 •   Elementos de Segurança da Informação •   CID (CIA) •   Ameaças •   incidentes de Segurança causam... •   Fontes de vulnerabilidade •   Phishing •   Framework •   Política •   Responsável pelo ISMS •   Fluxo Procedimentos Disciplinar •   Como se proteger?  ```  ","title":"Segurança da Informação"},{"id":385,"location":"/certificate/2022-09-02_stefanini_Terraform_com_AWS.html","tags":["terraform","aws","devops"],"text":" ```              Certificamos que:        Geraldo Luis da Silva Ribeiro  Concluiu com carga horária de 4 horas o curso: Curso de Terraform com AWS em Português                 Concluído em:              02/Setembro/2022  ```  ","title":"Terraform com AWS"},{"id":386,"location":"/certificate/2022-09-03_linkedin_Building_a_Home_IT_Lab_2020.html","tags":["lxc","vmware","virtualbox","proxmox","container"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Building a Home IT Lab (2020) Course completed on Sep 02, 2022 at 06:47PM UTC • 51 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AV-Eu3Gl6wCADPceaGRVycyjuXcB  ```  ","title":"Building a Home IT Lab 2020"},{"id":387,"location":"/certificate/2022-09-04_nodestudio_Materialize_CSS_para_Iniciantes.html","tags":["materializecss"],"text":" ``` Node Studio Treinamentos tem a honra de conferir a                  Geraldo Luis Da Silva Ribeiro            O certificado por sua participação no    Materialize CSS para iniciantes                           Carga horária: 3 hora(s)                              Data: 04/09/2022     O presente certificado poderá ser validado no endereço: http://www.nodestudio.com.br              Para realizar a validação, informe o código do certificado: 58785275  ```  ","title":"Materialize CSS para Iniciantes"},{"id":388,"location":"/certificate/2022-09-05_linkedin_Building_a_Home_IT_Lab_2022.html","tags":["lxc","vmware","virtualbox","proxmox","container"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Building a Home IT Lab Course completed on Sep 05, 2022 at 05:34PM UTC • 2 hours 16 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: Aay-P-pxtICI1PHVN0rIDseERQmg  ```  ","title":"Building a Home IT Lab 2022"},{"id":389,"location":"/certificate/2022-09-09_stefanini_ISO_27001_Segurança_da_Informação.html","tags":["security","iso","iso-27001","27001"],"text":" ```                  Certificamos que:         Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 00:30 horas o curso:     ISO 27001 - Segurança da Informação                    Concluído em:                  9/Setembro/2022 ```  ","title":"ISO 27001 Segurança da Informação"},{"id":390,"location":"/certificate/2022-09-12_linkedin_Docker_for_Developers.html","tags":["docker","container"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Docker for Developers Course completed on Sep 12, 2022 at 06:31PM UTC • 1 hour 15 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AcRSixl2qnGcUFRe9imgdD8sL3O6 ``` ","title":"Docker for Developers"},{"id":391,"location":"/certificate/2022-09-12_linkedin_Introduction_to_Network_Routing.html","tags":["network","routing"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Introduction to Network Routing Course completed on Sep 12, 2022 at 01:52PM UTC • 1 hour 15 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: ATB67QHmYpwruC7ElpJVBiZvS_Pq \f ``` ","title":"Introduction to Network Routing"},{"id":392,"location":"/certificate/2022-09-16_stefanini_Paradigmas_de_Linguagem_de_Programação.html","tags":["programming"],"text":" ```              Certificamos que:        Geraldo Luis da Silva Ribeiro  Concluiu com carga horária de 6 horas o curso: Paradigmas de Linguagem de Programação                 Concluído em:              16/Setembro/2022 \f ``` ","title":"Paradigmas de Linguagem de Programação"},{"id":393,"location":"/certificate/2022-09-28_linkedin_Gulp.js_Web_Project_Workflows.html","tags":["gulp"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Gulp.js: Web Project Workflows Course completed on Sep 28, 2022 at 07:27PM UTC • 59 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: AXri6yZx33-sjVIDRHmV4O-IDbZr ``` ","title":"Gulp.js Web Project Workflows"},{"id":394,"location":"/certificate/2022-09-16_stefanini_Soft_Skill.html","tags":["soft-skill"],"text":" ```              Certificamos que:        Geraldo Luis da Silva Ribeiro  Concluiu com carga horária de 2 horas o curso:                  Soft Skill                 Concluído em:              16/Setembro/2022 ``` ","title":"stefanini Soft Skill"},{"id":395,"location":"/til/gnuplot-como-criar-animacao.html","tags":["gnuplot","gif","animation"],"text":" Algumas vezes uma animação deixa as coisas mais fáceis de serem entendidas.  A partir da versão 4.6 do [gnuplot](http://www.gnuplot.info/) está bem mais fácil criar uma animação.  O segredo está em configurar a saída para `gif animate` no comando `set term`.  ::: include bash src/static_src/til/gnuplot-como-criar-animacao.gnuplot  O arquivo `animate.gnuplot` contêm os seguintes comandos:  ::: include bash src/static_src/til/animate.gp  Note que este arquivo irá se recarregar mais 23 vezes através do `reread` para plotar cada um dos 24 frames da animação.  Ao executar o script obteremos a seguinte animação:  ![Animação do seno feita no gnuplot](/til/animacao_do_seno.webp)   ## Referências  * [Creating gif animation using gnuplot](http://gnuplot-surprising.blogspot.com/2011/09/creating-gif-animation-using-gnuplot.html)  ","title":"Criando um gif animado com o gnuplot"},{"id":396,"location":"/til/english-present-tense.html","tags":["english"],"text":" ## Present Simple  * something that is true in the present * something that happens regularly in the present * something that is always true * we often use *adverbs of frequency* link **sometimes**, **always** and **never** with the present simple * something that is fixed in the future * something in the future after *time words* like **when**, **after**, **before**, **if** and **unless**  ## Present perfect  * `[VERB HAVE] + [PAST PARTICIPLE OF A VERB]` * for something that started in the past and continues in the present * when we are talking about our experience up to the present  ## Present perfect continuous  * `[VERB HAVE] + [-ING FORM]` * we normally use the present perfect continuous to emphasize that something is still continuing in the present  ## Reference  * <https://learnenglish.britishcouncil.org/grammar/english-grammar-reference/present-simple> ","title":"Present Tense"},{"id":397,"location":"/til/xdg-mime.html","tags":["xdg-mime"],"text":" ## Query  ```shell xdg-mime query default inode/directory code.desktop ```  The sample output above indicates that **VS Code** is currently configured as default application to open folders.  ## Set  ```shell xdg-mime default thunar.desktop inode/directory # or xdg-mime default   fman.desktop inode/directory # or xdg-mime default   nemo.desktop inode/directory ```  ## References  * https://www.linuxquestions.org/questions/slackware-14/wrong-application-for-opening-directories-with-xdg-open-4175619886/ ","title":"xdg-mime"},{"id":398,"location":"/til/cpp_libevent.html","tags":["libevent"],"text":"## Asynchronous I/O  ::: youtube id=\"OGJRaUu8_Yw\" title=\"ECE 252 Lecture 29: Asynchronous I/O with libevent\"  ","title":"libevent"},{"id":399,"location":"/til/english-nouns.html","tags":["english","grammar","noun"],"text":"A *noun* is a word used to name a person, place, thing, or idea.  ## Types  * Proper * Common * Concrete * Abstract * Collective * Compound  ::: note **A *noum* can belong to more than one group.** <br> For example, *suntan lotion* is both a common and concrete noun, as well as a compound noun.   ## Singular and Plural  * The plural of most nouns is formed by adding **-s**. * For nouns ending in **s**, **x**, **z**, and **ch**, add **-es**. * Nouns ending in **f** or **fe** form their plural by changing the **f** or   **fe** to **v** and adding **-es**.  ","title":"Nouns"},{"id":400,"location":"/til/update-nginx-on-centos-8.html","tags":["nginx","centos"],"text":" To address the security issue [CVE-2019-20372](https://nvd.nist.gov/vuln/detail/cve-2019-20372) I needed to update the Nginx version to the current stable.  Remove the old nginx:  ```shell sudo systemctl stop nginx sudo dnf remove nginx sudo dnf install dnf-utils ```  Create the repo file:  ```shell cat <<EOF > /etc/yum.repos.d/nginx.repo [nginx-stable] name=nginx stable repo baseurl=http://nginx.org/packages/centos/$releasever/$basearch/ gpgcheck=1 enabled=1 gpgkey=https://nginx.org/keys/nginx_signing.key module_hotfixes=true  [nginx-mainline] name=nginx mainline repo baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/ gpgcheck=1 enabled=0 gpgkey=https://nginx.org/keys/nginx_signing.key module_hotfixes=true EOF ```  Install and enable the nginx again.  ```shell sudo yum-config-manager --enable nginx-mainline sudo dnf install nginx sudo systemctl start nginx sudo systemctl start nginx ```  ## References  * [How to install the latest stable Nginx version on CentOS 8?](https://www.digitalocean.com/community/questions/how-to-install-the-latest-stable-nginx-version-on-centos-8)  ","title":"Update Nginx to the latest stable version on CentOS 8"},{"id":401,"location":"/til/iso-to-usb.html","tags":["iso","dd","boot"],"text":" To install a fresh version of the Debian I need to prepare a bootable USB stick.  First make sure I am writing on the right device. Yes, it is a very old 2GB USB stick.  ```shell fdisk -l | grep sdc Disco /dev/sdc: 1,9 GiB, 2017984000 bytes, 3941375 setores /dev/sdc1   *                0 774143  774144    378M  0 Vazia /dev/sdc2                 4060   9243    5184    2,5M ef EFI (FAT-12/16/32) ```  Then transfer the ISO image bit by bit to the USB stick:  ```shell dd \\    bs=4M \\   if=debian-live-11.5.0-amd64-standard.iso \\   of=/dev/sdc \\   status=progress \\   oflag=sync ```  ## References  * [Create Bootable Debian 10 USB Stick on Linux](https://linuxize.com/post/create-bootable-debian-10-usb-stick-on-linux/)  ","title":"How to create a bootable pendrive from ISO image"},{"id":402,"location":"/til/utterance.html","tags":["comments","github"],"text":" Today I found [utterance](https://utteranc.es/) in the comments section of a blog. Its looks like pretty simple to integrate and I trying it now.  ::: tip All comments will create an [issue at github](https://github.com/geraldolsribeiro/geraldo.dev/issues).  When Utterances loads, the GitHub issue search API is used to find the issue associated with the page based on url, pathname or title. If we cannot find an issue that matches the page, no problem, utterances-bot will automatically create an issue the first time someone comments.  To comment, users must authorize the utterances app to post on their behalf using the GitHub OAuth flow. Alternatively, users can comment on the GitHub issue directly.  ","title":"Utterance"},{"id":403,"location":"/til/vim-utf-character.html","tags":["vim","utf","digraph"],"text":" Use **Ctrl+V** then **u** and the **4 hex numbers** of the character.  Example 1: to type ■ U+25A0 Black square\t \t  ``` ^vu25a0 or ^vu25A0 ```  Example 2: to type · U+00B7 Middle dot  ``` ^vub7<esc> or ^vu00b7 ```    ","title":"How to type Unicode in Vim"},{"id":404,"location":"/til/pentest-ssh.html","tags":["pentest","ssh"],"text":" ```shell nmap -Pn -p22 --script ssh2-enum-algos 127.0.0.1 ```  ``` Starting Nmap 7.70 ( https://nmap.org ) at 2022-10-27 10:56 -03 Nmap scan report for localhost (127.0.0.1) Host is up (0.00018s latency).  PORT   STATE SERVICE 22/tcp open  ssh | ssh2-enum-algos:  |   kex_algorithms: (11) |       curve25519-sha256 |       curve25519-sha256@libssh.org |       ecdh-sha2-nistp256 |       ecdh-sha2-nistp384 |       ecdh-sha2-nistp521 |       diffie-hellman-group-exchange-sha256 |       diffie-hellman-group14-sha256 |       diffie-hellman-group16-sha512 |       diffie-hellman-group18-sha512 |       diffie-hellman-group-exchange-sha1 |       diffie-hellman-group14-sha1 |   server_host_key_algorithms: (5) |       rsa-sha2-512 |       rsa-sha2-256 |       ssh-rsa |       ecdsa-sha2-nistp256 |       ssh-ed25519 |   encryption_algorithms: (7) |       aes256-gcm@openssh.com |       chacha20-poly1305@openssh.com |       aes256-ctr |       aes256-cbc |       aes128-gcm@openssh.com |       aes128-ctr |       aes128-cbc |   mac_algorithms: (8) |       hmac-sha2-256-etm@openssh.com |       hmac-sha1-etm@openssh.com |       umac-128-etm@openssh.com |       hmac-sha2-512-etm@openssh.com |       hmac-sha2-256 |       hmac-sha1 |       umac-128@openssh.com |       hmac-sha2-512 |   compression_algorithms: (2) |       none |_      zlib@openssh.com ```   ## References  * [SSH WEAK KEY EXCHANGE ALGORITHMS ENABLED](https://www.virtuesecurity.com/kb/ssh-weak-key-exchange-algorithms-enabled/) ","title":"Pentesting ssh weak key exchange algorithms"},{"id":405,"location":"/til/english-phonetics.html","tags":["english","phonetics"],"text":" Some tips for better pronunciation:   ::: youtube id=\"QPOjASQau2s\" title=\"[Advanced] English phonetics - voiced and unvoiced sounds, consonants and vowels sounds\"  ::: youtube id=\"QW5CGt_sMTk\" title=\"APRENDE EL IPA Y DOMINARÁS TU PRONUNCIACIÓN EN INGLÉS PARA SIEMPRE - Alfabeto Fonético Internacional\"  ## Vowel  * a, e, i, o and u * 12 sounds  | vowel | IPA | duration | examples  | portuguese sound | |:-----:|:---:|:--------:|:---------:|:----------------:| | a     | ɑ:  | large    | car, far  | a aberta | | a     | æ   | short    | cat       | é nasal | | a     | ʌ   | short    | sun, up   | a | | e     | ɜ:  | large    | bird      | e com bico de o | | e     | e   | short    | pet, bed  | e | | e     | ə   | short    | teacher   | a (schwa)| | i     | i:  | large    | sheep     | i | | i     | I   | short    | ship, fit | i virando é |   | o     | ɔ:  | large    | door      | ó | | o     | ɒ   | short    | on        | ó | | u     | u:  | large    | shoot     | u | | u     | ʊ   | short    | good      | u |  ## Diphthongs  * 8 sounds  | IPA | example | portuguese sound | |:---:|:-------:|:----------------:| | Iə  | here    | ia | | ʊə  | tourist | ua | | eə  | hair    | éa | | əʊ  | show    | ou | | aʊ  | cow     | au | | aI  | my      | ai | | eI  | wait    | ei | | ɔI  | boy     | ói |  ## Consonants  * 24 sounds * voiceless, unvoiced (no vibration) * voiced   ### Unvoiced consonants  | IPA | example | portuguese sound | |:---:|:-------:|:----------------:| | p   | pea     | | | f   | free    | | | ɵ   | thing   | | | t   | tree    | | | s   | see     | | | ʃ   | sheep   | | | ʧ   | cheese  | | | k   | coin    | |  ### Voiced consonants  | IPA | example | portuguese sound | |:---:|:-------:|:----------------:| | b   | boat    | | | v   | video   | | | ð   | this    | | | d   | dog     | | | z   | zoo     | | | ʤ   | joke    | | | ʒ   | television | | | g   | go      | | | m   | mouse   | | | n   | now     | | | ŋ   | thing   | | | h   | hope    | | | w   | we      | | | l   | love    | | | r   | run     | | | j   | you     | |  ### Semivowels  * j you * w won  ## Patterns  ### A_cons_E → /eɪ/  * Jane * cane * plane  ### A_cons → /æ/  * jam * can * plan  ### E_cons_E → /ɪː/  * Pete * delete  ### E_cons → /e/  * pet * let  ### I or Y_cons_E → /ai/  * white * fine * pine * site * byte * Skype  ### I_cons → /i/  * wit * coffin * pin * sit * bit * skip   ### O_cons_E → /əʊ/  * code * woke * hope  ### O_cons → /ɒ/  * cod * wok * hop  ### U_cons_E → /juː/  * cute * tune  ### U_cons → /ʌ/  * cut * tun  ## IPA Extensions - Official Unicode Consortium code chart  <big>  |      |0|1|2|3|4|5|6|7|8|9|A|B|C|D|E|F| |------|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-| |U+025x|ɐ|ɑ|ɒ|ɓ|ɔ|ɕ|ɖ|ɗ|ɘ|ə|ɚ|ɛ|ɜ|ɝ|ɞ|ɟ| |U+026x|ɠ|ɡ|ɢ|ɣ|ɤ|ɥ|ɦ|ɧ|ɨ|ɩ|ɪ|ɫ|ɬ|ɭ|ɮ|ɯ| |U+027x|ɰ|ɱ|ɲ|ɳ|ɴ|ɵ|ɶ|ɷ|ɸ|ɹ|ɺ|ɻ|ɼ|ɽ|ɾ|ɿ| |U+028x|ʀ|ʁ|ʂ|ʃ|ʄ|ʅ|ʆ|ʇ|ʈ|ʉ|ʊ|ʋ|ʌ|ʍ|ʎ|ʏ| |U+029x|ʐ|ʑ|ʒ|ʓ|ʔ|ʕ|ʖ|ʗ|ʘ|ʙ|ʚ|ʛ|ʜ|ʝ|ʞ|ʟ| |U+02Ax|ʠ|ʡ|ʢ|ʣ|ʤ|ʥ|ʦ|ʧ|ʨ|ʩ|ʪ|ʫ|ʬ|ʭ|ʮ|ʯ|  * U+00F0 ð * U+014B ŋ * U+02D0 ː use colon instead  </big>  ## References  * [IPA vowel chart with audio](https://en.wikipedia.org/wiki/IPA_vowel_chart_with_audio) * [Phonetic symbols in Unicode](https://en.wikipedia.org/wiki/Phonetic_symbols_in_Unicode) * [Magic E: \"vowel-consonant-E\" pattern (fate — fat)](https://lingbase.com/en/english/grammar/magic-e) ","title":"English phonetics"},{"id":406,"location":"/til/english-irregular-verbs.html","tags":["english","verb"],"text":" ::: youtube id=\"jJ80IH15PTg\" title=\"Неправильные глаголы английского языка\"  ## References  * [Full list of English irregular verbs with pronunciation](https://lingbase.com/en/english/grammar/complete-list-of-irregular-verbs) ","title":"Irregular verbs"},{"id":407,"location":"/til/pandoc.html","tags":["pandoc","latex","markdown","pdf"],"text":" ## References  * [Converting Markdown to Beautiful PDF with Pandoc](https://jdhao.github.io/2019/05/30/markdown2pdf_pandoc/) ","title":"Converting Markdown to Beautiful PDF with Pandoc"},{"id":408,"location":"/til/term-exa.html","tags":["exa","ls","terminal"],"text":" ## Installation  ```shell apt install exa ```   ","title":"exa - Modern replacement for ls"},{"id":409,"location":"/til/english-third-person.html","tags":["English","third-person"],"text":" ::: toc  ## Writing in Third Person Academically  ### Use third person for all academic writing  For formal writing, such as research and argumentative papers, use the third person. Third person makes writing more objective and less personal. For academic and professional writing, this sense of objectivity allows the writer to seem less biased and, therefore, more credible.  Third person helps the writing stay focused on facts and evidence instead of personal opinion.  ### Use the correct pronouns  Third person refers to people “on the outside.” Either write about someone by name or use third person pronouns.  Third person pronouns include: he, she, it; his, her, its; him, her, it; himself, herself, itself; they; them; their; themselves.  Names of other people are also considered appropriate for third person use.  Example: “Smith believes differently. According to his research, earlier claims on the subject are incorrect.”  ### Avoid first person pronouns  First person refers to a point of view in which the writer says things from his or her personal perspective. This point of view makes things too personal and opinionated. Avoid first person in an academic essay.  First person pronouns include: I, me, my, mine, myself, we, us, our, ours, ourselves.  The problem with first person is that, academically speaking, it sounds too personalized and too subjective. In other words, it may be difficult to convince the reader that the views and ideas being expressed are unbiased and untainted by personal feelings. Many times, when using first person in academic writing, people use phrases like \"I think,\" \"I believe,\" or \"in my opinion.\"  Incorrect example: “Even though Smith thinks this way, I think his argument is incorrect.”  Correct example: “Even though Smith thinks this way, others in the field disagree.”  ### Avoid second person pronouns  Second person refers to point of view that directly addresses the reader. This point of view shows too much familiarity with the reader, by speaking to them directly, as if the writer personally knows his or her reading audience. Second person should never be used in academic writing.  Second person pronouns include: you, your, yours, yourself.  One main problem with second person is that it can sound accusatory. It runs to risk of placing too much responsibility on the shoulders of the reader specifically and presently reading the work.  Incorrect example: “If you still disagree nowadays, then you must be ignorant of the facts.”  Correct example: “Someone who still disagrees nowadays must be ignorant of the facts.”  ### Refer to the subject in general terms  Sometimes, a writer will need to refer to someone in indefinite terms. In other words, they may need to generally address or speak about a person. This is usually when the temptation to slip into the second person “you” comes into play. An indefinite third person pronoun or noun is appropriate here.  Indefinite third person nouns common to academic writing include: the writer, the reader, individuals, students, a student, an instructor, people, a person, a woman, a man, a child, researchers, scientists, writers, experts.  Example: “In spite of the challenges involved, researchers still persist in their claims.”  Indefinite third person pronouns include: one, anyone, everyone, someone, no one, another, any, each, either, everybody, neither, nobody, other, anybody, somebody, everything, someone.  Incorrect example: \"You might be tempted to agree without all the facts.\"  Correct example: “One might be tempted to agree without all the facts.”  ### Watch out for singular and plural pronoun use  One mistake that writers often make when writing in third person is accidentally conjugating a plural pronoun as singular.  This is usually done in an attempt to avoid the gender-specific “he” and “she” pronouns. The mistake here would be to use the “they” pronoun with singular conjugation.  Incorrect example: “The witness wanted to offer anonymous testimony. They was afraid of getting hurt if their name was spread.”  Correct example: “The witness wanted to offer anonymous testimony. They were afraid of getting hurt if their name was spread.”  ## Writing in Third Person Omniscient  ### Shift your focus from character to character  When using third person omniscient perspective, the narrative jumps around from person to person instead of following the thoughts, actions, and words of a single character. The narrator knows everything about each character and the world. The narrator can reveal or withhold any thoughts, feelings, or actions.  For instance, a story may include four major characters: William, Bob, Erika, and Samantha. At various points throughout the story, the thoughts and actions of each character should be portrayed. These thoughts can occur within the same chapter or block of narration.  Writers of omniscient narratives should be conscious of “head-hopping” — that is, shifting character perspectives within a scene. While this does not technically break the rules of Third Person Omniscience, it is widely considered a hallmark of narrative laziness.  This is a good voice to use if you want to remove yourself from the work so the readers don't confuse the narrator for you.  ### Reveal any information you want  With third person omniscient view, the narration is not limited the inner thoughts and feelings of any character. Along with inner thoughts and feelings, third person omniscient point of view also permits the writer to reveal parts of the future or past within the story. The narrator can also hold an opinion, give a moral perspective, or discuss animals or nature scenes where the characters are not present.[7]  In a sense, the writer of a third person omniscient story is somewhat like the “god” of that story. The writer can observe the external actions of any character at any time, but unlike a limited human observer, the writer can also peek into the inner workings of that character at will, as well.  Know when to hold back. Even though a writer can reveal any information he or she chooses to reveal, it may be more beneficial to reveal some things gradually. For instance, if one character is supposed to have a mysterious aura, it would be wise to limit access to that character's inner feelings for a while before revealing his or her true motives.  ### Avoid use of the first person and second person pronouns  Active dialog should be the only time that first person pronouns like “I” and “we” should appear. The same goes for second person pronouns like “you.”  Do not use first person and second person points of view in the narrative or descriptive portions of the text.  Correct example: Bob said to Erika, “I think this is creepy. What do you think?”  Incorrect example: I thought this was creepy, and Bob and Erika thought so, too. What do you think?  ## Writing in Third Person Limited  ### Pick a single character to follow  When writing in third person limited perspective, a writer has complete access to the actions, thoughts, feelings, and belief of a single character. The writer can write as if the character is thinking and reacting, or the writer can step back and be more objective.  The thoughts and feelings of other characters remain an unknown for the writer throughout the duration of the text. There should be no switching back and forth between characters for this specific type of narrative viewpoint.  Unlike first person, where the narrator and protagonist are the same, third person limited puts a critical sliver of distance between protagonist and narrator. The writer has the choice to describe one main character’s nasty habit — something they wouldn’t readily reveal if the narration were left entirely to them.  ### Refer to the character's actions and thoughts from the outside  Even though the focus remains on one character, the writer still needs to treat that character as a separate entity. If the narrator follows the character's thoughts, feelings, and internal dialogue, this still needs to be in third person.[9]  In other words, do not use first person pronouns like “I,” “me,” “my,” “we,” or “our” outside of dialog. The main character's thoughts and feelings are transparent to the writer, but that character should not double as a narrator.  Correct example: “Tiffany felt awful after the argument with her boyfriend.”  Correct example: “Tiffany thought, “I feel awful after that argument with my boyfriend.”  Incorrect example: “I felt awful after the argument with my boyfriend.”  ### Focus on other characters' actions and words, not their thoughts or feelings  The writer is as limited to just the protagonist's thoughts and feelings with this point of view. However, with this point of view, other characters can be described without the protagonist noticing it. The narrator can anything the protagonist can; she just can't get into the other character's head.[10]  Note that the writer can offer insight or guesses regarding the thoughts of other characters, but those guesses must be presented through the perspective of the main character.  Correct example: “Tiffany felt awful, but judging by the expression on Carl's face, she imagined that he felt just as bad if not worse.”  Incorrect example: “Tiffany felt awful. What she didn't know was that Carl felt even worse.”  ### Do not reveal any information your main character would not know  Although the narrator can step back and describe the setting or other characters, it has to be anything the viewpoint character can see. Do not bounce around from one character to one character within one scene. The external actions of other characters can only be known when the main character is present to view those actions.  Correct example: “Tiffany watched from the window as Carl walked up to her house and rang the doorbell.”  Incorrect example: “As soon as Tiffany left the room, Carl let out a sigh of relief.”  ## Writing in Episodically Limited Third Person  ### Jump from character to character  With episodically limited third person, also referred to as third person multiple vision, the writer may have a handful of main characters whose thoughts and perspectives take turns in the limelight. Use each perspective to reveal important information and move the story forward.  Limit the amount of pov characters you include. You don't want to have too many characters that confuse your reader or serve no purpose. Each pov character should have a specific purpose for having a unique point of view. Ask yourself what each pov character contributes to the story.  For instance, in a romance story following two main characters, Kevin and Felicia, the writer may opt to explain the inner workings of both characters at different moments in the story.  One character may receive more attention than any other, but all main characters being followed should receive attention at some point in the story.  ### Only focus on one character's thoughts and perspective at a time  Even though multiple perspectives are included in the overall story, the writer should focus on each character one at a time.  Multiple perspectives should not appear within the same narrative space. When one character's perspective ends, another character's can begin. The two perspectives should not be intermixed within the same space.  Incorrect example: “Kevin felt completely enamored of Felicia from the moment he met her. Felicia, on the other hand, had difficulty trusting Kevin.”   ### Aim for smooth transitions  Even though the writer can switch back and forth between different character perspectives, doing so arbitrarily can cause the narrative to become confusing for the narrative.  In a novel-length work, a good time to switch perspective is at the start of a new chapter or at a chapter break.  The writer should also identify the character whose perspective is being followed at the start of the section, preferably in the first sentence. Otherwise, the reader may waste too much energy guessing.  Correct example: “Felicia hated to admit it, but the roses Kevin left on her doorstep were a pleasant surprise.”  Incorrect example: “The roses left on the doorstep seemed like a nice touch.”  ### Understand who knows what  Even though the reader may have access to information viewed from the perspective of multiple characters, those characters do not have the same sort of access. Some characters have no way of knowing what other characters know.  For instance, if Kevin had a talk with Felicia's best friend about Felicia's feelings for him, Felicia herself would have no way of knowing what was said unless she witnessed the conversation or heard about it from either Kevin or her friend.  ## Writing in Third Person Objective  ### Follow the actions of many characters  When using third person objective, the writer can describe the actions and words of any character at any time and place within the story.  There does not need to be a single main character to focus on. The writer can switch between characters, following different characters throughout the course of the narrative, as often as needed.  Stay away from first person terms like “I” and second person terms like “you” in the narrative, though. Only use first and second person within dialog.  ### Do not attempt to get into directly into a character's head  Unlike omniscient pov where the narrator looks into everyone's head, objective pov doesn't look into anyone's head.  Imagine that you are an invisible bystander observing the actions and dialog of the characters in your story. You are not omniscient, so you do not have access to any character's inner thoughts and feelings. You only have access to each character's actions.  Correct example: “After class, Graham hurriedly left the room and rushed back to his dorm room.”  Incorrect example: “After class, Graham raced from the room and rushed back to his dorm room. The lecture had made him so angry that he felt as though he might snap at the next person he met.”  ### Show but don't tell  Even though a third person objective writer cannot share a character's inner thoughts, the writer can make external observations that suggest what those internal thoughts might be. Describe what is going on. Instead of telling the reader that a character is angry, describe his facial expression, body language, and tone of voice to show that he is mad.  Correct example: “When no one else was watching her, Isabelle began to cry.”  Incorrect example: “Isabelle was too prideful to cry in front of other people, but she felt completely broken-hearted and began crying once she was alone.”  ### Avoid inserting your own thoughts  The writer's purpose when using third person objective is to act as a reporter, not a commentator.  Let the reader draw his or her own conclusions. Present the actions of the character without analyzing them or explaining how those actions should be viewed.  Correct example: “Yolanda looked over her shoulder three times before sitting down.”  Incorrect example: “It might seem like a strange action, but Yolanda looked over her shoulder three times before sitting down. This compulsive habit is an indication of her paranoid state of mind.”  ## References  * [How to Write in Third Person](https://www.wikihow.com/Write-in-Third-Person) ","title":"Writing in third person"},{"id":410,"location":"/til/vim-terminal.html","tags":["vim","terminal"],"text":" * Run a terminal emulator in a Vim window.  The job runs asynchronously from Vim, the window will be updated to show output from the job, also while editing in another window.  ``` :help terminal :term bash :term make myprogram :vertical term ls ```   ## References  * [A Case Study in Vim Script 101: Making a Test Runner](https://8thlight.com/insights/a-case-study-in-vim-script-101-making-a-test-runner) ","title":"vim terminal command"},{"id":411,"location":"/til/vim-vimscript.html","tags":["vim","vimscript"],"text":" ## References  * <https://learnxinyminutes.com/docs/vimscript/> ","title":"Vimscript"},{"id":412,"location":"/certificate/2022-09-05_linkedin_Linux_Foundation_Cert_Prep_Virtualization_Ubuntu.html","tags":["linux","ubuntu","virtualization"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Linux Foundation Cert Prep: Virtualization (Ubuntu) Course completed on Sep 05, 2022 at 12:50PM UTC • 1 hour 11 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate Id: Aekr-K0WwheGyep7AeA0f3gFBb9S ``` ","title":"Linux Foundation Cert Prep Virtualization Ubuntu"},{"id":413,"location":"/certificate/2022-10-18_stefanini_Ergonomia_em_Home_Office.html","tags":["ergonomia","home-office"],"text":" ```                  Certificamos que:         Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso:        ERGONOMIA EM HOME OFFICE                    Concluído em:                 18/Outubro/2022  Descrição:  Orientações de ergonomia voltado para trabalho home office.  Objetivo:  Orientar os profissionais quanto a ergonomia no seu ambiente home office.  Conteúdo Programático:   •   O que é ergonomia; •   Dicas de ergonomia; •   Como se adaptar em ambiente home office; •   Dicas de alongamento. ``` ","title":"Ergonomia em Home Office"},{"id":414,"location":"/certificate/2022-11-19_stefanini_Produtividade_e_Gestão_do_Tempo.html","tags":["soft-skill","productivity","time-management"],"text":" ```              Certificamos que:        Geraldo Luis da Silva Ribeiro  Concluiu com carga horária de 3 horas o curso:     Produtividade & Gestão do Tempo                 Concluído em:              19/Novembro/2022 \f ``` ","title":"Produtividade e Gestão do Tempo"},{"id":415,"location":"/til/bookmarklet.html","tags":["bookmarklets","youtube"],"text":" ```javascritp javascript:document.getElementsByClassName(\"video-stream html5-main-video\")[0].playbackRate = 3.14; ```  No caso do workout não funciona pois está dentro de um frame.  O comando abaixo nao funcionou! ```javascritp javascript:window.frames[0].document.getElementsByClassName(\"video-stream html5-main-video\")[0].playbackRate = 3.14; ```  F12 e selecionar o vídeo para ativar o frame antes de lançar o primeiro comando.  ","title":"Bookmarklet"},{"id":416,"location":"/til/dma.html","tags":["dma","memory"],"text":" ::: toc  DMA (Direct memory access) is an alternative method of communication to I/O ports that permits the device to transfer data directly, without the CPU’s attention. The system can request that the data be fetched into a particular memory region and continue with other tasks until the data is ready. This may result in lower CPU requirements for the I/O activity, which can improve system performance.  ## DMA Channels  To support DMA, the x86 architecture implements several DMA channels. To find out what DMA channels your system uses, you can use the `cat /proc/dma` command:  ```shell cat /proc/dma 2: floppy 4: cascade ```  As you can see from the output above, the DMA channels 2 and 4 are in use.  > https://www.vivaolinux.com.br/topico/Iniciantes-no-Linux/Nao-entendi-a-saida-do-~cat-proc-dma >> Os DMA's são canais de acesso a memória sem intervenção do processador. São praticamente um legado do ISA. Existem 8 canais de DMA que foram implementados ao longo da história. O canal 4, especificamente, funciona com 16 bits e está praticamente relacionado ao DMA1 e ao DMA2. A cascata(cascade) se remete ao mecanismo do canal. Esse mecanismo é que permite que um canal DMA solicite o bus. Uma vez o dispositivo conectado, ele é responsável pela alocação da informação de endereçamento no bus em vez do DMA. É usado na implementação do \"Bus Mastering\". Quando um canal DMA em modo cascade recebe o controle do bus, ele não aloca endereços nem sinais I/O de controle no bus, como geralmente ocorre.  ::: warning DMA addresses should not be shared in order to avoid conflicts.  ::: tip Kernel `include/linux/dmaengine.h`  ## Steps in DMA Transfer  FIXME slide 11  ## Operation modes  ### Burst Mode  Neste modo, o periférico que recebe acesso ao barramento irá transferir as informações necessárias de uma única vez, para então liberar as pistas para a CPU novamente. Ainda que permita que o processo de transferência atinja altas velocidades, a desvantagem desse modo é que o processador deixa de trabalhar até que o envio seja concluído.  ### Cycle Stealing  No \"roubo de ciclo\", em tradução livre, a transferência de dados é realizado lentamente, aguardando a conclusão de cada ciclo de processamento da CPU. Basicamente, o DMAC solicita acesso ao barramento para o processador e, após concedido, um byte de informação é transferido. O controle das pistas é então devolvido à CPU, e uma nova solicitação é realizada a cada ciclo, até que todos os dados sejam enviados.  ### Transparent Mode  Similar ao Burst Mode, o Transparent Mode dá acesso total do barramento ao periférico que enviará ou receberá informações. No entanto, há uma diferença importante: a CPU continuará operando normalmente, em tarefas que não exijam acesso ao barramento. O controle das pistas retorna ao processador assim que a transferência dos dados é finalizada.  ## References  * [DMA (Direct Memory Access)](https://geek-university.com/dma-direct-memory-access/) * [Linux DMA engine](https://www.slideshare.net/pradeep_tewani/linux-dma-engine-249984016) * [O que é DMA — Direct Memory Access?](https://canaltech.com.br/hardware/o-que-e-dma-direct-memory-acess-202990/) ","title":"DMA Direct Memory Access"},{"id":417,"location":"/til/desktop-entry-specification.html","tags":["desktop"],"text":" ## References  * [How can I register a custom protocol with xdg?](https://superuser.com/questions/162092/how-can-i-register-a-custom-protocol-with-xdg) * [Desktop Entry Specification](https://specifications.freedesktop.org/desktop-entry-spec/latest/index.html) ","title":"Custom protocol with Desktop Entry Specification"},{"id":418,"location":"/certificate/2022-12-01_linkedin_CSSLP_Cert_Prep_5_Secure_Software_Testing.html","tags":["ISC","CSSLP","security","devsecops"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   CSSLP Cert Prep: 5 Secure Software Testing Course completed on Dec 01, 2022 at 09:51AM UTC • 1 hour 4 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate ID: AZRiTkc9PtofOCbxEVVZqLJoLWSO \f ``` ","title":"CSSLP Cert Prep 5 Secure Software Testing"},{"id":419,"location":"/certificate/2022-11-28_linkedin_Microsoft_Teams_Automating_with_Bots_Connectors_and_Flows.html","tags":["microsoft-teams","bots-connectors","flows"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Microsoft Teams: Automating with Bots, Connectors, and Flows Course completed on Nov 28, 2022 at 05:23PM UTC • 1 hour 4 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate ID: AfBz1phT0F8AyyydvvULsLVjCl7A \f ``` ","title":"Microsoft Teams Automating with Bots Connectors and Flows"},{"id":420,"location":"/certificate/2022-11-28_linkedin_Managing_Projects_with_Microsoft_365.html","tags":["project-management","microsoft-365"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Managing Projects with Microsoft 365 Course completed on Nov 28, 2022 at 06:17PM UTC  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                                      LinkedIn Learning                                                                    1000 W Maude Ave Head of Content Strategy, Learning                                 Sunnyvale, CA 94085                     The PMI Registered Education Provider logo is a registered mark of the Project Management Institute, Inc.     Program: PMI® Registered Education Provider | Provider ID: #4101 Certificate No: AS_VJk7KcPO21N2Vkyw7lxlXJ3hA PDUs/ContactHours: 0.75 | Activity #: 4101WMD4IX \f ``` ","title":"Managing Projects with Microsoft 365"},{"id":421,"location":"/til/free-domain.html","tags":["domain","free"],"text":" ``` .tk\t .ml\t .ga\t .cf\t .gq ```  ## References  * https://www.freenom.com/en/index.html?lang=en * http://www.point.ml/en/index.html?lang=en  ","title":"Free domain"},{"id":422,"location":"/til/mail-html-attachment.html","tags":["email","html","phishing"],"text":" Use the [cid: URI scheme](https://www.rfc-editor.org/rfc/rfc2392)  ``` --boundary-example 1 Content-Type: Text/HTML; charset=US-ASCII  to the other body part, for example through a statement such as: <IMG SRC=\"cid:foo4*foo1@bar.net\" ALT=\"IETF logo\">  --boundary-example-1  Content-ID: <foo4*foo1@bar.net> Content-Type: IMAGE/GIF Content-Transfer-Encoding: BASE64  R0lGODlhGAGgAPEAAP/////ZRaCgoAAAACH+PUNvcHlyaWdodCAoQykgMTk5 NSBJRVRGLiBVbmF1dGhvcml6ZWQgZHVwbGljYXRpb24gcHJvaGliaXRlZC4A etc...  --boundary-example-1-- ```  ## References  * [Can an HTML email body reference a file sent as an attachment (in the same email)?](https://stackoverflow.com/questions/9983248/can-an-html-email-body-reference-a-file-sent-as-an-attachment-in-the-same-email) * [Content-ID and Message-ID Uniform Resource Locators](https://www.rfc-editor.org/rfc/rfc2392) * [Embedding Images in HTML Email: Have the Rules Changed?](https://mailtrap.io/blog/embedding-images-in-html-email-have-the-rules-changed/)  ","title":"How to embed attachment in email body"},{"id":423,"location":"/til/mailtrap.html","tags":["email"],"text":" * Capture SMTP traffic from staging and dev environments * Automate test flows and scenarios with flexible API * Analyze email content for spam score and validate HTML/CSS * Send email for personal project for free (up to 1000/mo)  ## References  * [mailtrap.io](https://mailtrap.io/) ","title":"Email Sandbox with Mailtrap.io"},{"id":424,"location":"/til/vim-fzf.html","tags":["vim","fzf"],"text":" To make it more convenient, fuzzy completion can be triggered if the word before the cursor ends with the trigger sequence which is by default `**`. For example, type `vim ~/path/**` and press `TAB`.   ```shell vim ~/.dotfiles/** <TAB> ```  ![Preview grabbed from freecodecamp](/til/vim-fzf-01.gif)   ## References  * [Why you should be using fzf, the command line fuzzy finder](https://www.freecodecamp.org/news/fzf-a-command-line-fuzzy-finder-missing-demo-a7de312403ff/) ","title":"Fuzzy completion for vim"},{"id":425,"location":"/til/speedcrunch.html","tags":["calculator"],"text":" * mathematical functions * units * constants ","title":"Speedcrunch calculator"},{"id":426,"location":"/til/crowcpp.html","tags":["webserver","crowcpp","C++"],"text":" Crow is a C++ framework for creating HTTP or WebSocket web services. It uses routing similar to Python's Flask which makes it easy to use. It is also extremely fast, beating multiple existing C++ frameworks as well as non C++ frameworks.   ## References  * [Crow C++, um Framework Web: Fácil e Veloz!](https://youtu.be/5gyQ5MLhVIs) * Linkedin learing [Web Servers and APIs using C++](https://www.linkedin.com/learning/web-servers-and-apis-using-c-plus-plus/) ","title":"Crow — A Fast and Easy to use micro framework for the web"},{"id":427,"location":"/til/devtools-extract-data.html","tags":["devtools","console.log","javascript","browser","spread-operator"],"text":" Sometimes are necessary to extract/collect data from webpages. And its can be done without any special tool. By using the browser you are seeing the page, hitting **F12** key, and typing some **JavaScript** code in the console window.  For example, is needed to produce a list with all heading (H3) in the current page, formatted as **Markdown** bullet list.  Searching for **H3** tags on devtools console:  Lets consider the page <https://geraldo.dev/certificate/tag/security.html> as starting point for data extraction.   ```javascript document.getElementsByTagName(\"h3\") ```  This statement returns:  ``` HTMLCollection(16) [h3, h3, h3, h3, h3, h3, h3, h3, h3, h3, h3, h3, h3, h3, h3, h3] ```  ![HTMLCollection](/til/devtools-extract-data-01.webp)  ::: warning The `HTMLCollection` result is not operable directly by `map` or `forEach` functions.  ::: tip By using the **spread operator** this collection can be converted to an array and the above functions can be called.  The following commands can be used to get a list of **H3** titles, format as markdown, and copy it to the clipboard:  ```javascript myList=\"\"; [...document.getElementsByTagName(\"h3\")].forEach(   e => myList += \"* \" + e.textContent + '\\n' ); copy(myList); ```  After running the previous snippet the clipboard will contains a text like this:  ```markdown * Application Security in DevSecOps * Crucial Role of Penetration Testing and Vulnerability Assessments in Cybersecurity * CSSLP Cert Prep 1 Secure Software Concepts * CSSLP Cert Prep 2 Secure Software Requirements * CSSLP Cert Prep 3 Secure Software Design * CSSLP Cert Prep 4 Secure Software Implementation * CSSLP Cert Prep 5 Secure Software Testing * CSSLP Cert Prep 6 Secure Lifecycle Management * CSSLP Cert Prep 7 Software Deployment Operations and Maintenance * CSSLP Cert Prep 8 Supply Chain and Software Acquisition * CSSLP Cert Prep The Basics * Cyber Security Foundation certiprof * Desenvolvimento Seguro * DevSecOps SAST and Code Review for DevSecOps * Dynamic Application Security Testing DAST * ISO 27001 Segurança da Informação * Pen Test Analise e Testes de Vulnerabilidades em Redes Corporativas * Secure Coding in Java * Segurança da Informação * TryHackMe Badge webbed * Web Security OAuth and OpenID Connect ```  ","title":"Extract data using devtools"},{"id":428,"location":"/certificate/2022-12-10_linkedin_Application_Security_in_DevSecOps.html","tags":["security","devsecops","anchore","constrast","zaproxy"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Application Security in DevSecOps Course completed on Dec 10, 2022 at 10:46AM UTC • 45 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: AY5Caymq1lTh-hP9Xx6fH0Pcz7KB ``` ","title":"Application Security in DevSecOps"},{"id":429,"location":"/certificate/2022-12-10_linkedin_JavaScript_on_the_Go_Choosing_a_Framework.html","tags":["javascript","framework"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  JavaScript on the Go: Choosing a Framework Course completed on Dec 10, 2022 at 01:41PM UTC • 52 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: AXniSiPsUoZ278SL42tQzdwM5NBd ``` ","title":"JavaScript on the Go Choosing a Framework"},{"id":430,"location":"/certificate/2022-07-24_linkedin_CSSLP_Cert_Prep_1_Secure_Software_Concepts.html","tags":["ISC","CSSLP","security","devsecops"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  CSSLP Cert Prep: 1 Secure Software Concepts Course completed on Jul 24, 2022 at 11:05PM UTC • 1 hour 41 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: Ad2xpGK0oVCQO0ZhU0XT7J1uDKXK ``` ","title":"CSSLP Cert Prep 1 Secure Software Concepts"},{"id":431,"location":"/certificate/2022-12-10_linkedin_CSSLP_Cert_Prep_6_Secure_Lifecycle_Management.html","tags":["ISC","CSSLP","security","devsecops"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  CSSLP Cert Prep: 6 Secure Lifecycle Management Course completed on Dec 10, 2022 at 01:59PM UTC • 1 hour 21 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: AYs5BIpuCxmaa1_brjiyUuuCRpO8 ``` ","title":"CSSLP Cert Prep 6 Secure Lifecycle Management"},{"id":432,"location":"/certificate/2022-12-10_linkedin_CSSLP_Cert_Prep_8_Supply_Chain_and_Software_Acquisition.html","tags":["ISC","CSSLP","security","devsecops"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  CSSLP Cert Prep: 8 Supply Chain and Software Acquisition Course completed on Dec 10, 2022 at 05:04PM UTC • 47 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                 LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: AWvvE32LjWF9Pb2B_Ixm_hyH9q1_ ``` ","title":"CSSLP Cert Prep 8 Supply Chain and Software Acquisition"},{"id":433,"location":"/til/CSIRT-tool-kit.html","tags":["security","CSIRT","MIPS","IntelMQ","Hive","NfSen","Wazuh","Packetbeat","Graylog"],"text":" <https://csirt-kit.org/>  ![Components](https://csirt-kit.org/img/components.jpeg)  * The MISP threat sharing platform is a free and open source software helping information sharing of threat intelligence including cyber security indicators. * IntelMQ is a solution for CERTs for collecting and processing security feeds, pastebins, tweets and log files using a message queuing protocol. * The Hive is a scalable, open source and free Security Incident Response Platform designed to make life easier for SOCs, CSIRTs, CERTs and any information security practitioner. * NfSen allows you to keep all the convenient advantages of the command line using nfdump directly and gives you also a graphical overview over your netflow data. * Use Elastic to search, monitor, analyze and visualize machine data. * Wazuh is a free, open source and enterprise-ready security monitoring solution for threat detection, integrity monitoring, incident response and compliance. * Packetbeat is a lightweight network packet analyzer that sends data from your hosts and containers to Logstash or Elasticsearch. * Graylog provides answers to your team’s security, application, and IT infrastructure questions by enabling you to combine, enrich, correlate, query, and visualize all your log data in one place. * N8N move and transform data between different apps and databases without getting caught up in API docs and troubleshooting CORS errors. ","title":"CSIRT - Security Response Toolkit"},{"id":434,"location":"/til/cqs-bertrand-meyer.html","tags":["CQS"],"text":"  O CQS (Command Query Separation) é um pattern introduzido por Bertrand Meyer no livro Object Oriented Software Construction, com a primeira edição publicada em 1988, e a segunda, revisada e expandida em 1997.  A idéia principal é que os métodos de uma aplicação podem ser comandos (commands) ou consultas (queries), mas nunca ambos.  Temos então:  * Commands: métodos que alteram estado (mudam valores) sem retornar nenhum valor, e causam efeitos colaterais no sistema. * Queries: métodos que retornam valores, mas não alteram estado.  É uma excelente abordagem com pouquíssimas exceções.  ## References  * [CQS — Command Query Separation](https://medium.com/tableless/cqs-command-query-separation-4085ec41e3a4) ","title":"CSQ - Bertrand Meyer"},{"id":435,"location":"/til/cpp_cereal_01.html","tags":["C++","serialization","cereal"],"text":" **cereal** is a header-only C++11 serialization library. cereal takes arbitrary data types and reversibly turns them into different representations, such as compact binary encodings, XML, or JSON. cereal was designed to be fast, light-weight, and easy to extend - it has no external dependencies and can be easily bundled with other code or used standalone.   ```cpp // Escolha um deles #include <cereal/archives/binary.hpp> #include <cereal/archives/json.hpp> #include <cereal/archives/portable_binary.hpp> #include <cereal/archives/xml.hpp>  #include <cereal/types/memory.hpp> #include <cereal/types/unordered_map.hpp> #include <fstream> ```   ```cpp using namespace std;  struct MyRecord {   uint8_t x, y;   float   z;    // Informar ao Cereal quais membros serializar   template <class Archive>   void serialize( Archive &ar )   {     ar( x, y, z );   } }; ```   ```cpp struct MyRecord2 {   uint8_t x, y;   float   z;    // Informar ao Cereal quais membros serializar   template <class Archive>   void serialize( Archive &ar )   {     // veja a diferença no json/xml, agora os campos estão nomeados     ar( CEREAL_NVP( x ), CEREAL_NVP( y ), CEREAL_NVP( z ) );   } }; ```   ```cpp struct SomeData {   int32_t                                        id;   shared_ptr<unordered_map<uint32_t, MyRecord>>  data;   shared_ptr<unordered_map<uint32_t, MyRecord2>> data2;   vector<int>                                    vec;    template <class Archive>   void save( Archive &ar ) const   {     ar( data, data2 );   }    template <class Archive>   void load( Archive &ar )   {     static int32_t idGen = 0;     id                   = idGen++;     ar( data, data2 );   } }; ```   ```cpp int main() {   {     ofstream osBin( \"output/cereal_01.bin\", ios::binary );     ofstream osXml( \"output/cereal_01.xml\" );     ofstream osJson( \"output/cereal_01.json\" );      // Cria os arquivos de saída     cereal::BinaryOutputArchive archiveBin( osBin );     cereal::XMLOutputArchive    archiveXml( osXml );     cereal::JSONOutputArchive   archiveJson( osJson );      SomeData myData01;     SomeData myData02;      MyRecord rec;     rec.x = 7;     rec.y = 8;     rec.z = 9;      MyRecord2 rec2;     rec.x = 72;     rec.y = 82;     rec.z = 92;      myData01.data = make_shared<unordered_map<uint32_t, MyRecord>>();     myData01.data->emplace( 1001, rec );     myData01.data->emplace( 1002, rec );     myData01.data->emplace( 1000, rec );      myData01.data2 = make_shared<unordered_map<uint32_t, MyRecord2>>();     myData01.data2->emplace( 1001, rec2 );     myData01.data2->emplace( 1002, rec2 );     myData01.data2->emplace( 1000, rec2 );      int x = myData01.data->at( 1001 ).x;     cout << \"OUT data.x: \" << x << endl;      myData02.vec = { 10, 20, 30, 40 };      archiveBin( myData01, myData02 );     archiveXml( myData01, myData02 );     archiveJson( myData01, myData02 );      // RAII: Precisa sair do contexto para que os arquivos sejam escritos e fechados.   } ```   ```cpp   // Input   {     ifstream                isBin( \"output/cereal_01.xml\" );     cereal::XMLInputArchive inArchiveBin( isBin );      SomeData myData01B;     SomeData myData02B;      myData01B.data = make_shared<unordered_map<uint32_t, MyRecord>>();     inArchiveBin( myData01B, myData02B );      int x = myData01B.data->at( 1001 ).x;     cout << \"IN data.x: \" << x << endl;   }    return 0; } ```  ## Serialized files  ### XML   ```xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <cereal> \t<value0> \t\t<value0> \t\t\t<ptr_wrapper> \t\t\t\t<id>2147483649</id> \t\t\t\t<data size=\"dynamic\"> \t\t\t\t\t<value0> \t\t\t\t\t\t<key>1000</key> \t\t\t\t\t\t<value> \t\t\t\t\t\t\t<value0>72</value0> \t\t\t\t\t\t\t<value1>82</value1> \t\t\t\t\t\t\t<value2>92</value2> \t\t\t\t\t\t</value> \t\t\t\t\t</value0> \t\t\t\t\t<value1> \t\t\t\t\t\t<key>1002</key> \t\t\t\t\t\t<value> \t\t\t\t\t\t\t<value0>72</value0> \t\t\t\t\t\t\t<value1>82</value1> \t\t\t\t\t\t\t<value2>92</value2> \t\t\t\t\t\t</value> \t\t\t\t\t</value1> \t\t\t\t\t<value2> \t\t\t\t\t\t<key>1001</key> \t\t\t\t\t\t<value> \t\t\t\t\t\t\t<value0>72</value0> \t\t\t\t\t\t\t<value1>82</value1> \t\t\t\t\t\t\t<value2>92</value2> \t\t\t\t\t\t</value> \t\t\t\t\t</value2> \t\t\t\t</data> \t\t\t</ptr_wrapper> \t\t</value0> \t\t<value1> \t\t\t<ptr_wrapper> \t\t\t\t<id>2147483650</id> \t\t\t\t<data size=\"dynamic\"> \t\t\t\t\t<value0> \t\t\t\t\t\t<key>1000</key> \t\t\t\t\t\t<value> \t\t\t\t\t\t\t<x>0</x> \t\t\t\t\t\t\t<y>0</y> \t\t\t\t\t\t\t<z>0</z> \t\t\t\t\t\t</value> \t\t\t\t\t</value0> \t\t\t\t\t<value1> \t\t\t\t\t\t<key>1002</key> \t\t\t\t\t\t<value> \t\t\t\t\t\t\t<x>0</x> \t\t\t\t\t\t\t<y>0</y> \t\t\t\t\t\t\t<z>0</z> \t\t\t\t\t\t</value> \t\t\t\t\t</value1> \t\t\t\t\t<value2> \t\t\t\t\t\t<key>1001</key> \t\t\t\t\t\t<value> \t\t\t\t\t\t\t<x>0</x> \t\t\t\t\t\t\t<y>0</y> \t\t\t\t\t\t\t<z>0</z> \t\t\t\t\t\t</value> \t\t\t\t\t</value2> \t\t\t\t</data> \t\t\t</ptr_wrapper> \t\t</value1> \t</value0> \t<value1> \t\t<value0> \t\t\t<ptr_wrapper> \t\t\t\t<id>0</id> \t\t\t</ptr_wrapper> \t\t</value0> \t\t<value1> \t\t\t<ptr_wrapper> \t\t\t\t<id>0</id> \t\t\t</ptr_wrapper> \t\t</value1> \t</value1> </cereal>   ```  ### JSON   ```json {     \"value0\": {         \"value0\": {             \"ptr_wrapper\": {                 \"id\": 2147483649,                 \"data\": [                     {                         \"key\": 1000,                         \"value\": {                             \"value0\": 72,                             \"value1\": 82,                             \"value2\": 92.0                         }                     },                     {                         \"key\": 1002,                         \"value\": {                             \"value0\": 72,                             \"value1\": 82,                             \"value2\": 92.0                         }                     },                     {                         \"key\": 1001,                         \"value\": {                             \"value0\": 72,                             \"value1\": 82,                             \"value2\": 92.0                         }                     }                 ]             }         },         \"value1\": {             \"ptr_wrapper\": {                 \"id\": 2147483650,                 \"data\": [                     {                         \"key\": 1000,                         \"value\": {                             \"x\": 0,                             \"y\": 0,                             \"z\": 0.0                         }                     },                     {                         \"key\": 1002,                         \"value\": {                             \"x\": 0,                             \"y\": 0,                             \"z\": 0.0                         }                     },                     {                         \"key\": 1001,                         \"value\": {                             \"x\": 0,                             \"y\": 0,                             \"z\": 0.0                         }                     }                 ]             }         }     },     \"value1\": {         \"value0\": {             \"ptr_wrapper\": {                 \"id\": 0             }         },         \"value1\": {             \"ptr_wrapper\": {                 \"id\": 0             }         }     } } ```  ","title":"cereal - A C++11 library for serialization - 01"},{"id":436,"location":"/certificate/2022-12-10_linkedin_Learning_SSH.html","tags":["ssh"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  Learning SSH Course completed on Dec 10, 2022 at 10:03PM UTC • 1 hour 36 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                 LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: Aelus-6NbTCcbo4sgftTdDDAIO82 ``` ","title":"Learning SSH"},{"id":437,"location":"/til/cpp_ranges_01.html","tags":["C++","ranges","views","iota_view","iota","sort","all_of","any_of","none_of"],"text":"## Introduction  C++ ranges and views are both library features introduced in C++20 that provide a way to work with sequences of values, such as arrays or containers, in a more expressive and composable way. Here are some of the key differences between ranges and views:  * **Definition:** Ranges are a set of library concepts and utilities   that define a uniform way to access and manipulate sequences   of elements, while views are objects that represent a specific   subset or transformation of a range. * **Composition:** Ranges are designed to be composable, meaning that they   can be combined using various operations such as filtering, mapping,   and slicing, to create new ranges. Views are similarly composable,   but they always operate on an existing range and produce a new view. * **Eager vs Lazy evaluation:** Ranges use eager evaluation,   which means that the entire sequence is computed upfront when   the range is constructed, whereas views use lazy evaluation,   which means that the computation is deferred until the values   are actually accessed. * **Mutability:** Ranges can be either mutable or immutable,   depending on the type of range and the underlying container. Views,   on the other hand, are always read-only, and cannot modify the   underlying range. * **Syntax:** Ranges use a set of standardized library concepts   and utilities, such as `std::ranges::range`, `std::ranges::view`,   and `std::ranges::action`, to define and manipulate ranges. Views   use a similar set of concepts and utilities, such as   `std::ranges::view_interface`, `std::ranges::filter_view`, and   `std::ranges::transform_view`, to define and manipulate views.  In summary, ranges provide a uniform way to access and manipulate sequences of elements, while views provide a composable and lazy way to create subsets or transformations of ranges. Both ranges and views can be useful in different contexts, depending on the requirements of the program or algorithm being implemented.  ## Views  * A view is a non owning range * It’s like a window we can set up to view some real data without   setting up the infrastructure to store data * Views are cheap to copy and pass around as function parameters   by design.  ## Range Algorithm  * Legacy algorithm work on iterator pairs * Range algorithm work on containers directly * C++ 11   * `all_of`   * `any_of`   * `none_of` * C++ 20   * `ranges::all_of`   * `ranges::any_of`   * `ranges::none_of`   * `ranges::sort`   * `ranges::find_if`   * `ranges::copy`  ### Example of legacy algorithm  The operations are made by using iterators.   ```cpp void exampleLegacyAlgorithm() {   int collection[]{2, 6, 8, 40, 64, 70};   if (std::all_of(std::begin(collection), std::end(collection),                   [](int i) { return i % 2 == 0; })) {     std::cout << \"(std::all_of) : All numbers in collection are even\"               << std::endl;   } else {     std::cout << \"(std::all_of) : Not all numbers in collection are even\"               << std::endl;   } } ```   ### Example of range algorithm  The operations are performed directly on collection.   ```cpp void exampleRangeAlgorithm() {   std::vector<int> collection{2, 6, 8, 40, 64, 70};   auto result =       std::ranges::all_of(collection, [](int i) { return i % 2 == 0; });   if (result) {     std::cout << \"All numbers in collection are even\" << std::endl;   } else {     std::cout << \"Not all numbers in collection are even\" << std::endl;   } } ```   ## Struct to exemplify a more complex data type    ```cpp struct Student {   friend std::ostream &operator<<(std::ostream &out, const Student &s) {     out << \"Student [ name: \" << s.m_name << \", age: \" << s.m_age << \"]\";     return out;   }    auto operator<=>(const Student &s) const = default;   std::string m_name;   unsigned int m_age; }; ```   Specialized printing data type   ```cpp template <> struct fmt::formatter<Student> {   // parse is a no-op as we do not need any format specifiers   constexpr auto parse(format_parse_context &ctx) { return ctx.begin(); }    // format function for Student   template <typename FormatContext>   auto format(const Student &s, FormatContext &ctx) {     return format_to(ctx.out(), \"{{ name: '{}', age: {} }}\", s.m_name, s.m_age);   } }; ```    ## Utility to print all collection elements   ```cpp   auto printContainer = [](const auto label, const auto &container) {     fmt::print(\"{:30}: \", label);     for (const auto &i : container) {       fmt::print(\"{} \", i);     }     fmt::print(\"\\n\");   }; ```   ## Utility to print all view elements   ```cpp   auto printView = [](const auto label, auto view) {     fmt::print(\"{:30}: \", label);     for (auto i : view) {  // Computation happens here.       fmt::print(\"{} \", i);     }     fmt::print(\"\\n\");   }; ```   ## Utilities to be used as filter   ```cpp   auto even = [](int i) { return i % 2 == 0; };   auto odd = [](int i) { return i % 2 == 1; };   auto square = [](int i) { return i * i; }; ```   ## Range and view examples of use   ```cpp   exampleLegacyAlgorithm();   exampleRangeAlgorithm(); ```   Loop detect array length   ```cpp   int ints[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};   for ([[maybe_unused]] const auto i : ints) {   }   printContainer(\"ints\", ints); ```      ```cpp   // (4,10] = 4 5 6 7 8 9   for ([[maybe_unused]] int i : std::ranges::iota_view{4, 10}) {   }   printContainer(\"iota_view{4,10}\", std::ranges::iota_view{4, 10}); ```      ```cpp   // (5,10] = 5 6 7 8 9   for ([[maybe_unused]] int i : std::views::iota(5, 10)) {   }   printContainer(\"views::iota(5, 10)\", std::views::iota(5, 10)); ```   * `std::ranges::filter_view` * `std::views::filter` * `std::ranges::transform_view` * `std::views::transform`  Both std::ranges::transform_view and std::views::transform provide a way to lazily apply a transformation to elements of a range, and they have similar syntax and functionality. However, there are some differences in their use cases and performance characteristics.  std::ranges::transform_view is part of the Ranges library introduced in C++20 and is designed to work with ranges that support the Ranges API. It provides a range view that applies a transformation function to each element of a range, producing a new range with the transformed elements. It can be used in conjunction with other Ranges library components to perform complex operations on ranges.  std::views::transform is part of the C++20 Standard Library's view facilities and works with any range, not just those that support the Ranges API. It provides a range adapter that applies a transformation function to each element of a range, producing a new range with the transformed elements. It is simpler to use than std::ranges::transform_view and does not require the use of the Ranges library components.  In terms of performance, there is likely to be little difference between the two algorithms, as they both use lazy evaluation and avoid copying or transforming the range elements until they are actually needed. However, the use of the Ranges library components by std::ranges::transform_view may provide some optimization opportunities in certain cases.  Ultimately, the choice between std::ranges::transform_view and std::views::transform will depend on the specific requirements of your use case. If you are working with ranges that support the Ranges API, std::ranges::transform_view may be the better choice as it provides a more integrated solution. If you are working with ranges that do not support the Ranges API or you want a simpler solution, std::views::transform may be the better choice.   ```cpp   std::vector<int> vint{1, 2, 3, 4, 5, 6, 7, 8, 9};   printContainer(\"vint data\", vint);   std::ranges::filter_view viewEven =       std::ranges::filter_view(vint, even);  // No computation performed here!   // Computation happens in the print function   printView(\"filter_view even\", viewEven);   // Computation on the fly   printView(\"filter_view odd\", std::ranges::filter_view(vint, odd));   fmt::print(\"Transform: \");   for (int i :        vint | std::views::filter(even) | std::views::transform(square)) {     fmt::print(\"{} \", i);   }   fmt::print(\"\\n\");    auto vi = vint | std::views::filter(even);   std::ranges::transform_view v_transformed =       std::ranges::transform_view(vi, [](int i) { return i * 10; });   printView(\"transform_view\", v_transformed); ```   * `std::ranges::views::transform`   ```cpp   std::vector<double> vec{1.1, 2.2, 4.3, 5.6, 2.4};   auto squared1 =       vec | std::ranges::views::transform([](auto const i) { return i * i; });   // auto squared2 = vec | std::ranges::views::transform(std::sqrt);   printContainer(\"squared1\", squared1); ```   * `std::ranges::for_each` * `std::ranges::sort`   ```cpp   // Operate directly on container   std::vector<int> ns{3, 1, 2};   printContainer(\"ns initial\", ns);   std::ranges::for_each(ns, [](int &n) { n *= 5; });   printContainer(\"ns for_each n *= 5\", ns);   std::ranges::sort(ns);   printContainer(\"ns sort\", ns);   std::ranges::sort(ns.begin(), ns.end());  // BAD   printContainer(\"ns sort BAD\", ns); ```   * `std::ranges::find_if`   ```cpp   std::vector<int> collection{2, 6, 8, 40, 64, 70};   auto posMod10 =       std::ranges::find_if(collection, [](auto &i) { return i % 10 == 0; });   if (posMod10 != std::end(collection)) {     fmt::print(\"Collection contains at least one multiple of 10\\n\");   } else {     fmt::print(\"Collection does not contains any multiple of 10\\n\");   } ```   * `std::ranges::copy`   ```cpp   // std::ranges::copy   std::cout << \"ranges::copy \";   std::ranges::copy(collection,                     std::ostream_iterator<int>(std::cout, \" }sep{ \"));   std::cout << \"\\n\"; ```   * `std::ranges::take_view` * `std::ranges::take_while_view` * `std::ranges::drop_view` * `std::ranges::drop_while_view`   ```cpp   std::vector<int> v2 = {1, 11, 23, 131, 2, 3, 4, 5, 6, 7, 8, 9};   printContainer(\"v2\", v2);    // 1 11 23 131 2   std::ranges::take_view v_taken_5 = std::ranges::take_view(v2, 5);   printView(\"take_view 5 elements\", v_taken_5);    // 3 4 5 6 7 8 9   std::ranges::drop_view v_drop_5 = std::ranges::drop_view(v2, 5);   printView(\"drop_view 5 elements\", v_drop_5);    // 1 11 23 131   // number 2 (first not odd) will stop taking   std::ranges::take_while_view v_taken_while =       std::ranges::take_while_view(v2, odd);   printView(\"take_while_view odd\", v_taken_while);    // 2 3 4 5 6 7 8 9   std::ranges::drop_while_view v_drop_while =       std::ranges::drop_while_view(v2, odd);   printView(\"drop_while_view odd\", v_drop_while); ```      ```cpp   using pair = std::pair<int, std::string>;   std::vector<pair> numbers{{1, \"one\"}, {2, \"two\"}, {3, \"tree\"}};    auto k_view = std::views::keys(numbers);    // 1 2 3   auto v_view = std::views::values(numbers);  // one two tree    printView(\"k_view\", k_view);   printView(\"v_view\", v_view); ```      ```cpp   std::vector<Student> class_room{       {\"Mike\", 12}, {\"John\", 17}, {\"Drake\", 14}, {\"Mary\", 16}};    std::cout << \"Students original order:\\n\";   for (auto &s : class_room) {     std::cout << s << std::endl;   }    std::cout << \"Students ordered by age:\\n\";   std::ranges::sort(class_room, std::less<>{}, &Student::m_age);   for (auto &s : class_room) {     std::cout << s << std::endl;   }    printView(\"Student under 15\",             std::views::take_while(                 class_room, [](const Student &s) { return s.m_age < 15; }));  ```   ## Possible output   ```txt (std::all_of) : All numbers in collection are even All numbers in collection are even ints                          : 0 1 2 3 4 5 6 7 8 9  iota_view{4,10}               : 4 5 6 7 8 9  views::iota(5, 10)            : 5 6 7 8 9  vint data                     : 1 2 3 4 5 6 7 8 9  filter_view even              : 2 4 6 8  filter_view odd               : 1 3 5 7 9  Transform: 4 16 36 64  transform_view                : 20 40 60 80  squared1                      : 1.2100000000000002 4.840000000000001 18.49 31.359999999999996 5.76  ns initial                    : 3 1 2  ns for_each n *= 5            : 15 5 10  ns sort                       : 5 10 15  ns sort BAD                   : 5 10 15  Collection contains at least one multiple of 10 ranges::copy 2 }sep{ 6 }sep{ 8 }sep{ 40 }sep{ 64 }sep{ 70 }sep{  v2                            : 1 11 23 131 2 3 4 5 6 7 8 9  take_view 5 elements          : 1 11 23 131 2  drop_view 5 elements          : 3 4 5 6 7 8 9  take_while_view odd           : 1 11 23 131  drop_while_view odd           : 2 3 4 5 6 7 8 9  k_view                        : 1 2 3  v_view                        : one two tree  Students original order: Student [ name: Mike, age: 12] Student [ name: John, age: 17] Student [ name: Drake, age: 14] Student [ name: Mary, age: 16] Students ordered by age: Student [ name: Mike, age: 12] Student [ name: Drake, age: 14] Student [ name: Mary, age: 16] Student [ name: John, age: 17] Student under 15              : { name: 'Mike', age: 12 } { name: 'Drake', age: 14 }   ``` ","title":"C++ Ranges — Part 1"},{"id":438,"location":"/til/cpp_ranges_02.html","tags":["C++","ranges","views","views-reverse","views-drop"],"text":"The input vector:  ```cpp   std::vector vec{ 1, 2, 3, 4, 5, 6 }; ```   A key feature of views is that whatever transformation they apply, they do so at the moment you request an element, not when the view is created.   ```cpp   auto v1 = std::views::reverse( vec ); ```   Here `v1` is a view; creating it neither changes vec, nor does `v1` store any elements. The time it takes to construct `v1` and its size in memory is independent of the size of `vec`.   ```cpp   std::cout << \"v1.begin = \" << *v1.begin() << '\\n';   std::cout << \"vec.rbegin = \" << *vec.rbegin() << '\\n'; ```   This will print `6`, but the important thing is that resolving the first element of v to the last element of vec happens on-demand. This guarantees that views can be used as flexibly as iterators, but it also means that if the view performs an expensive transformation, it will have to do so repeatedly if the same element is requested multiple times.  Changes on vector reflect on views   ```cpp   vec[5] = 60;   std::cout << \"v1.begin = \" << *v1.begin() << '\\n';   std::cout << \"vec.rbegin = \" << *vec.rbegin() << '\\n'; ```   `std::views::reverse` is not the view itself, it’s an adaptor that takes the underlying range (in our case the vector) and returns a view object over the vector. The exact type of this view is hidden behind the auto statement. This has the advantage, that we don’t need to worry about the template arguments of the view type, but more importantly the adaptor has an additional feature: it can be chained with other adaptors!   ```cpp   auto v2 = vec | std::views::reverse | std::views::drop( 2 );   std::cout << \"v2.begin() = \" << *v2.begin() << '\\n'; ```    It will print `4`, because `4` is the 0-th element of the reversed  string after dropping the first two.  ::: tip `vec | foo | bar(3) | baz(7)` is equivalent to `baz(bar(foo(vec), 3), 7)`   ```cpp   auto v3 = vec //             | std::views::filter( []( auto const i ) { return i % 2 == 0; } )             | std::views::transform( []( auto const i ) { return i * i; } );   std::cout << \"v3.begin() = \" << *v3.begin() << '\\n'; // prints 4    vec[1] = 16;                                         // 2 -> 16   std::cout << \"v3.begin() = \" << *v3.begin() << '\\n'; // prints 256 ```   ::: warning Views are not readonly   ```cpp   auto v4 = vec | std::views::reverse | std::views::drop( 2 );    *v4.begin() = 42; // now vec == {1, 2, 3, 42, 5, 6 } !!   std::cout << \"vec[3] = \" << vec[3] << '\\n'; ```  ## Output   ```txt v1.begin = 6 vec.rbegin = 6 v1.begin = 60 vec.rbegin = 60 v2.begin() = 4 v3.begin() = 4 v3.begin() = 256 vec[3] = 42  ```  ## References  * [A beginner's guide to C++ Ranges and Views.](https://hannes.hauswedell.net/post/2019/11/30/range_intro/) * [C++20 Ranges — Complete Guide](https://itnext.io/c-20-ranges-complete-guide-4d26e3511db0) ","title":"C++ Ranges — Part 2"},{"id":439,"location":"/til/clang-16-debian.html","tags":["clang","debian"],"text":" Install key:  ```shell wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add - ```  Create source list file:  ```shell cat <<EOF > /etc/apt/sources.list.d/llvm.list deb http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye main deb-src http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye main # 14  deb http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-14 main deb-src http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-14 main # 15  deb http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-15 main deb-src http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-15 main # 16  deb http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-16 main deb-src http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-16 main EOF ```  Update package list and install  ```shell apt update apt-get install \\   clang-16 \\   clang-tools-16 \\   clang-16-doc \\   libclang-common-16-dev \\   libclang-16-dev \\   libclang1-16 \\   clang-format-16 \\   python3-clang-16 \\   clangd-16 \\   clang-tidy-16 ```  To upgrade to the last version:  ```shell apt-get install clang lld  ```  ","title":"How to install clang 16 on debian"},{"id":440,"location":"/til/cpp_iota.html","tags":["C++","iota"],"text":" ```cpp template <typename T> void print( const string &label, T &container ) {   string separator;   cout << label << \" = [\";   for( const auto &item : container ) {     cout << separator << item;     separator = \", \";   }   cout << \"]\" << endl; } ```   ```cpp   array<int, 4>   ints1;   // array preenchido com valores presentes na memoria (lixo)   array<int, 26>  ints2{}; // array preenchido com zero   array<char, 5>  chars;   array<float, 5> floats{};    print( \"ints1\", ints1 );   print( \"ints2\", ints2 );    iota( ints1.begin(), ints1.end(), 10 ); // ints1 = [10, 11, 12, ..., 35]   print( \"ints1\", ints1 );    iota( ints2.rbegin(), ints2.rend(), 10 ); // ints2 = [35, 34, ..., 10]   print( \"ints2\", ints2 );    iota( chars.begin(), chars.end(), 'a' ); // chars = [a, b, c, d, e]   print( \"chars\", chars );    iota( floats.begin(), floats.end(), 50.3 ); // floats = [ 50.3, 51.3, ... 54.3]   print( \"floats\", floats ); ```  ## Output   ```txt ints1 = [-275090752, 21933, -275099152, 21933] ints2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ints1 = [10, 11, 12, 13] ints2 = [35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10] chars = [a, b, c, d, e] floats = [50.3, 51.3, 52.3, 53.3, 54.3]  ``` ","title":"C++ iota"},{"id":441,"location":"/til/cpp_algorithm_for_each.html","tags":["C++","algorithm","for_each"],"text":"::: toc  ## Lambda vs Object Function  The lambda function `[](const int &e){}` is equivalent to an object function like this:   ```cpp struct FunctionObjectPrinter {   void operator()( const int &e )   {     cout << e << \", \";   } }; ```   The lambda function `[prefix](const int &e){}` is equivalent to an object function like this:   ```cpp struct FunctionObjectPrinterWithPrefix {   explicit FunctionObjectPrinterWithPrefix( const string &prefix ) : mPrefix( prefix )   {   }   void operator()( const int &e )   {     cout << mPrefix << \" \" << e << \", \";   }  private:   string mPrefix; }; ```  ::: note `for_each` does not use the function return value   ```cpp   list<int> v{ 1, 2, 3, 4, 5 }; ```   ## Range operator   ```cpp   for( auto &e : v ) {     cout << e << \", \";   }   cout << \"range operator\" << endl; ```   ## Function object   ```cpp   FunctionObjectPrinter p;   for_each( begin( v ), end( v ), p );   cout << \"function operator\" << endl; ```   ## Inline lambda   ```cpp   for_each( begin( v ), end( v ), []( const int &e ) { cout << e << \", \"; } );   cout << \"inline lambda\" << endl; ```   ## Lambda   ```cpp   auto print = []( const int &n ) { cout << n << \", \"; };   for_each( begin( v ), end( v ), print );   cout << \"lambda\" << endl; ```   ## Range operator + lambda   ```cpp   for( auto &e : v ) {     print( e );   }   cout << \"range operator + lambda\" << endl; ```  ```  ## Output   ```txt 1, 2, 3, 4, 5, range operator 1, 2, 3, 4, 5, function operator 1, 2, 3, 4, 5, inline lambda 1, 2, 3, 4, 5, lambda 1, 2, 3, 4, 5, range operator + lambda  ``` ","title":"C++ for_each"},{"id":442,"location":"/til/microservices.html","tags":["microservice","C++","crow","cpprestsdk","httplib","pistache","restbed","restinio"],"text":" ::: citation author=\"Jack Welch\" Quando o ritmo de mudança dentro da empresa for ultrapassado pelo ritmo da mudança fora dela, o fim está próximo.  ::: figure title=\"Microservice architecture vs monolithic architecture\" src=\"/til/microservice-architecture-01.webp\" cite=\"https://docs.oracle.com/en/solutions/learn-architect-microservice/\"  * smart endpoints and dump pipes * inter process communication   * HTTP (e.g. REST API)   * TCP for binary base protocols   * AMQP (which is also over TCP) * data format   * JSON   * XML   * binary * in many cases, microservices do not require this level of performance,   especially when the service is required to work based on RESTful APIs.   * use languages that simplify coding (e.g. go or javascript) * in many cases when performance is crucial, using a textual API   (such as REST) would not be our first choice.    * use C++ binary services (e.g. with a gRPC protocol)  * frameworks C++   * [Microsoft C++ REST SDK](https://github.com/microsoft/cpprestsdk)   * [Crow](https://github.com/CrowCpp/Crow) fork of [ipkn/Crow](https://github.com/ipkn/crow)   * [httplib](https://github.com/yhirose/cpp-httplib)   * [Pistache](http://pistache.io/)   * [Restbed](https://github.com/Corvusoft/restbed)   * [Restinio](https://stiffstream.com/en/products/restinio.html)   * Other frameworks can be found [here](https://github.com/mfornos/awesome-microservices#c-1)   ## References  * [Microservices and C++ – Exploring the Combination](https://www.incredibuild.com/blog/microservices-and-c-exploring-the-combination)  ","title":"Microservices"},{"id":443,"location":"/til/cpp_numeric_accumulate.html","tags":["C++","accumulate"],"text":" ::: toc  ## Folding  Folding (or reduction) is the process of combining a collection of values together to generate a reduced number of results. Most of the time, we are speaking about a single result. Folding abstracts the process of iterating over structures that are recursive in nature.  The `std::accumulate` function is a perfect example of folding functionality because it combines values in the collection.  Take a look at the following simple example:  ```c++ std::vector<double> elems{1.1, 2.2, 3.3, 4.4, 5.5}; auto sum = std::accumulate(elems.begin(), elems.end(), 0); ```  The last argument to the function is the accumulator. This is the initial value that should be used as the previous value for the first element of the collection.  ::: tip A better alternative to the `std::accumulate` function is the `std::reduce` function.  `reduce()` is similar to `accumulate()`, except it doesn't keep the order of the operation; that is, it doesn't necessarily process the collection elements sequentially. You can pass an execution policy to the `std::reduce` function and change its behavior, say, to processing elements in parallel.  ::: warning Though `std::reduce` seems faster compared to `std::accumulate`, you should be careful when using it with non-commutative binary operations.  ::: info Folding and recursion go hand in hand. Recursive functions also solve a problem by decomposing it into smaller tasks and solving them one by one.   ```cpp template <typename T> struct my_multiplies {   constexpr T operator()( const T &lhs, const T &rhs ) const   {     return lhs * rhs;   } }; ```   ```cpp   vector<int> v{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };    int sum1     = accumulate( v.begin(), v.end(), 0 );   int sum2     = accumulate( v.begin(), v.end(), 0, plus<int>() );   int product1 = accumulate( v.begin(), v.end(), 1, multiplies<int>() );   int product2 = accumulate( v.begin(), v.end(), 1, my_multiplies<int>() );    cout << \"sum1: \" << sum1 << \"\\nsum2: \" << sum2 << '\\n'        << \"product1: \" << product1 << \"\\nproduct2: \" << product2 << '\\n';    auto dash_fold = []( string a, int b ) { return std::move( a ) + '-' + to_string( b ); };    // Concatena separando por traço   // 1-2-3-4-5-6-7-8-9-10   string s = accumulate(       next( v.begin() ), // pula um elemento       v.end(),       to_string( v[0] ), // começa com o primeiro elemento       dash_fold );    cout << \"dash-separated string: \" << s << '\\n';    // Concatena separando por traço (de trás pra frente)   // 10-9-8-7-6-5-4-3-2-1   string rs = accumulate(       next( v.rbegin() ),    // pula um elemento       v.rend(),       to_string( v.back() ), // começa pelo último       dash_fold );    cout << \"dash-separated string (right-folded): \" << rs << '\\n';    // twitter @SimonToth83   // std::inclusive_scan and std::exclusive_scan scan are std::reduce variants that instead of producing a single value,   // emit each partial result. For inclusive_scan the first output value already includes the first input element.    vector<int> scan1;   inclusive_scan( v.begin(), v.end(), back_inserter( scan1 ) );   // implicit init == int{} == 0   cout << \"scan1: \";   for( const auto &i : scan1 ) {     cout << i << \" \";   }    vector<int> scan2;   exclusive_scan( v.begin(), v.end(), back_inserter( scan2 ), 100 );   // init is mandatory for exclusive_scan   cout << \"\\nscan2: \";   for( const auto &i : scan2 ) {     cout << i << \" \";   }    vector<int> scan3;   exclusive_scan( v.begin(), v.end(), back_inserter( scan3 ), 1000, multiplies<>{} );   cout << \"\\nscan3: \";   for( const auto &i : scan3 ) {     cout << i << \" \";   }    cout << endl;  ```  ## Possible output   ```txt sum1: 55 sum2: 55 product1: 3628800 product2: 3628800 dash-separated string: 1-2-3-4-5-6-7-8-9-10 dash-separated string (right-folded): 10-9-8-7-6-5-4-3-2-1 scan1: 1 3 6 10 15 21 28 36 45 55  scan2: 100 101 103 106 110 115 121 128 136 145  scan3: 1000 1000 2000 6000 24000 120000 720000 5040000 40320000 362880000   ``` ","title":"C++ accumulate"},{"id":444,"location":"/til/cpp_numeric_reduce.html","tags":["C++","reduce","accumulate"],"text":"::: toc You need to link against TBB, as it is a dependence of the parallel STD (see [C++17 STL Parallel Algorithms - with GCC 9.1 and Intel TBB on Linux and macOS](https://solarianprogrammer.com/2019/05/09/cpp-17-stl-parallel-algorithms-gcc-intel-tbb-linux-macos/)). ## Basic usage   ```cpp   vector<int> vec{ 0, 1, 2, 3, 4, 5 };    auto sum0 = accumulate( begin( vec ), end( vec ), 0.0 );        // sequential   auto sum1 = reduce( begin( vec ), end( vec ) );                 // sequential   auto sum2 = reduce( execution::seq, begin( vec ), end( vec ) ); // sequential   auto sum3 = reduce( execution::par, begin( vec ), end( vec ) ); // parallel   cout << \"Sum: \" << sum0 << \" \" << sum1 << \" \" << sum2 << \" \" << sum3 << '\\n'; ```   ## Performance  The average time to operate over 10M items normalized by the `accumulate` time is:  * `accumulate`: **100%** * `reduce par`: **37%** * `reduce seq`: **165%**  Though `std::reduce` seems faster compared to `std::accumulate`, you should be careful when using it with non-commutative binary operations.   ```cpp   const vector<double> v( 10'000'007, 0.5 );   map<string, double>  means;    cout << fixed << setprecision( 1 );   const int N = 5;   for( auto i = 0; i < N; ++i ) {     {       const auto                            t1     = chrono::high_resolution_clock::now();       const double                          result = accumulate( v.cbegin(), v.cend(), 0.0 );       const auto                            t2     = chrono::high_resolution_clock::now();       const chrono::duration<double, milli> ms     = t2 - t1;       cout << \"std::accumulate result \" << result << \" took \" << ms.count() << \" ms\\n\";       means[\"accumulate\"] += ms.count() / N;     }      {       const auto                            t1     = chrono::high_resolution_clock::now();       const double                          result = reduce( execution::seq, v.cbegin(), v.cend() );       const auto                            t2     = chrono::high_resolution_clock::now();       const chrono::duration<double, milli> ms     = t2 - t1;       cout << \"std::reduce seq result \" << result << \" took \" << ms.count() << \" ms\\n\";       means[\"reduce seq\"] += ms.count() / N;     }      {       const auto                            t1     = chrono::high_resolution_clock::now();       const double                          result = reduce( execution::par, v.cbegin(), v.cend() );       const auto                            t2     = chrono::high_resolution_clock::now();       const chrono::duration<double, milli> ms     = t2 - t1;       cout << \"std::reduce par result \" << result << \" took \" << ms.count() << \" ms\\n\";       means[\"reduce par\"] += ms.count() / N;     }   }    cout << \"Average time to operate over 10M items:\\n\";   for( const auto &[key, value] : means ) {     cout << key << \": \" << value << \"ms\\n\";   } ```  ## Possible output   ```txt Sum: 15 15 15 15 std::accumulate result 5000003.5 took 92.0 ms std::reduce seq result 5000003.5 took 118.1 ms std::reduce par result 5000003.5 took 24.7 ms std::accumulate result 5000003.5 took 75.9 ms std::reduce seq result 5000003.5 took 117.2 ms std::reduce par result 5000003.5 took 24.7 ms std::accumulate result 5000003.5 took 77.0 ms std::reduce seq result 5000003.5 took 117.8 ms std::reduce par result 5000003.5 took 44.2 ms std::accumulate result 5000003.5 took 78.9 ms std::reduce seq result 5000003.5 took 117.3 ms std::reduce par result 5000003.5 took 24.7 ms std::accumulate result 5000003.5 took 75.9 ms std::reduce seq result 5000003.5 took 118.4 ms std::reduce par result 5000003.5 took 24.6 ms Average time to operate over 10M items: accumulate: 79.9ms reduce par: 28.6ms reduce seq: 117.8ms  ``` ","title":"C++ reduce"},{"id":445,"location":"/til/rhel-firewall.html","tags":["RHEL","firewall","firewall-cmd"],"text":" **firewalld** is the default firewall on [Red Hat Enterprise Linux](https://www.redhat.com).  ::: toc  ## List  ```shell firewall-cmd --list-all ```  Possible output:  ```plaintext public (active)   target: default   icmp-block-inversion: no   interfaces: wlp3s0   sources:    services: dhcpv6-client ssh   ports:    protocols:    forward: no   masquerade: no   forward-ports:    source-ports:    icmp-blocks:    rich rules:  ```   ## Allow  ## Deny  ## Timeout  ::: tip It is possible, especially on remote systems, that an incorrect setting results in a user locking themselves out of a machine. To prevent such situations, use the `--timeout` option. After a specified amount of time, any change reverts to its previous state. Using this options excludes the `--permanent` option.     For example, to add the SSH service for 15 minutes:      ```shell firewall-cmd --add-service=ssh --timeout 15m ```  ## References  * [Concepts and techniques to secure RHEL servers and workstations](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html-single/security_guide/index)   ","title":"RHEL firewall"},{"id":446,"location":"/til/rhel-how-to-install-local-rpm.html","tags":["rhel","yum","rpm","xargs","sh"],"text":" The command to install local **RPMs** using **yum** is:  ```shell yum localinstall /path/to/file.rpm ```  To install some missing package from a local folder I did the following:  ```shell cd /media/cdrom/post/qradar/ sed -n \"s/Looking for '\\(.*\\)': Not found/\\1/p\" \\   /var/log/setup-2020.11.0.20210517144015/qradar_setup.log \\   | xargs -I{} sh -c \"yum localinstall {}*\" ```  ::: tip Use `sh` to expand wildcards in `xargs` argument.  ## References  * [How do I install my local rpm files using yum?](https://access.redhat.com/articles/10054) * [How to use wildcards in a xargs-command?](https://superuser.com/questions/519008/how-to-use-wildcards-in-a-xargs-command) ","title":"How to install local RPM on RHEL"},{"id":447,"location":"/certificate/2022-12-16_linkedin_Linux_Firewalls_and_SELinux.html","tags":["linux","firewalld","firewall","selinux","iptables"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  Linux: Firewalls and SELinux Course completed on Dec 16, 2022 at 09:12PM UTC • 2 hours 22 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: AdsqFoWiO-ro-GWjLp87WyFcUfRg ```  This course takes you through the basics of firewalls on Linux. Sean Colins shows you how to configure Firewalld for local protection, work with SELinux, and troubleshoot firewalls. He also covers iptables, default policies, port blocking, and port forwarding. Learn how to install GUI controls and utilities, manage zones and services, enable servers, set access controls, change ports, move files, and more.  ## Learning objectives  * Working with iptables * Installing Firewalld * Exploring zones and services * Allowing the Apache web server * Allowing FTP and SFTP servers * Installing SELinux utils * Setting discretionary or mandatory access * Installing SELinux man pages * Working with Booleans * Changing context labels * Running sepolicy * Finding SELinux logs * Making domains permissive * Disabling and reenabling SELinux  ","title":"Linux Firewalls and SELinux"},{"id":448,"location":"/til/ngrok.html","tags":["ngrok"],"text":" **ngrok** is a globally distributed reverse proxy fronting your web services running in any cloud or private network, or your machine.  ## Installation  From <https://ngrok.com/download> copy the `apt` command:  ```shell curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc \\   | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null \\   | && echo \"deb https://ngrok-agent.s3.amazonaws.com buster main\" \\   | sudo tee /etc/apt/sources.list.d/ngrok.list \\   | && sudo apt update \\   | && sudo apt install ngrok ```  ## Account  Connecting your account according to <https://dashboard.ngrok.com/get-started/setup>:  ```shell ngrok config add-authtoken 2Ip...BYo Authtoken saved to configuration file: /home/geraldo/.config/ngrok/ngrok.yml ```  ## Basic usage  ### Serving a webpage  Starting a server on localhost:  ```shell http-server ./ ```  Expected output:  ``` Starting up http-server, serving ./  http-server version: 14.0.0  http-server settings:  CORS: disabled Cache: 3600 seconds Connection Timeout: 120 seconds Directory Listings: visible AutoIndex: visible Serve GZIP Files: false Serve Brotli Files: false Default File Extension: none  Available on:   http://127.0.0.1:8080   http://192.168.15.35:8080 Hit CTRL-C to stop the server ```  Piping port 8080:  ```shell ngrok http 8080 ```   ``` Session Status  online Account         Geraldo Ribeiro (Plan: Free) Version         3.1.0 Region          South America (sa) Latency         13ms Web Interface   http://127.0.0.1:4040 Forwarding      https://118c-2804-431-c7db-f2a7-a31-6b93-92ee-3650.sa.ngrok.io -> http://localhost:8080 ```   ## References  * [Microsoft Teams Bot Development/Testing using ngrok](https://www.linkedin.com/learning/microsoft-teams-bot-development/testing-using-ngrok) ","title":"ngrok"},{"id":449,"location":"/til/ventoy.html","tags":["boot","usb"],"text":" * https://www.ventoy.net/en/doc_linux_webui.html * https://askubuntu.com/questions/1025656/how-do-i-boot-an-iso-file-from-my-drive-using-grub2-on-uefi-machines ","title":"Ventoy - ISO boot"},{"id":450,"location":"/certificate/2022-12-18_linkedin_Learning_Tor_and_the_Dark_Web.html","tags":["tor","dark-web"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  Learning Tor and the Dark Web Course completed on Dec 18, 2022 at 05:21PM UTC • 56 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                 LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: ASYHO30cEbk3_s8xd1YAnpEpmPNG ``` ","title":"Learning Tor and the Dark Web"},{"id":451,"location":"/til/c3-common-coding-convetions.html","tags":["code-convetion"],"text":" ::: toc  ::: fixme Create some C++ examples.  ## References  * https://github.com/tum-esi/common-coding-conventions ","title":"C³ -- Common Coding Convention"},{"id":452,"location":"/til/cpp_lambdas.html","tags":["C++","lambda"],"text":" ::: toc  ## Funções de primeira classe  Em programação funcional funções são **cidadães de primeira classe**, o que significa que elas se comportam com dados e suportam quaisquer operações que a linguagem permita.  Algumas características das funções de primeira classe são:  * atribuir uma função a uma variável * passar uma função como parâmetro para outra função * retornar a função como valor de outra função * armazenar a função em uma estrutura de dados  ## Lambdas  Lambdas são funções anônimas (sem um nome) definidas *in-place*.  ```c++ //  1   2                           3                               4    [ ] ( ) { std::cout << \"Hello from C++ Lambda!\" << std::endl; } ( ); ```  Vamos ver o que cada grupo significa:  * 1 `[]` `lambda introducer` ou `lambda closure` * 2 `()` lista de parâmetros (você pode omitir estes parêntes se a função não receber parâmetros). * 3 `{}` corpo da função lambda * 4 `()` executa a função  ## Programação funcional com lambdas  ```cpp // f(x,y) = x² + y² + 2xy; std::function<int(int,int)> fxsquare = [](int x, int y) -> int {   int xsquare = [](int x) -> int { return x * x; }(x);   int ysquare = [](int y) -> int { return y * y; }(y);   int twoxy   = [](int x, int y) -> int { return 2 * x * y; }(x,y);   return xsquare + ysquare + twoxy; }  cout << fxsquare(5,3) << endl; // 64 ```  ## Lambda capture  * `[var]` capture `var` by value * `[&var]` capture `var` by reference * `[=]` capture all by value * `[&]` capture all by reference * `[&, var]` capture all by reference, except capture `var` by value * `[&var, var2]` capture `var` by reference, and `var2` by value  ```cpp   int var = 42;    const auto add_by_value = [var](int x) -> int { return x + var; };   const auto add_by_ref = [&var](int x) -> int { return x + var; };    cout << add_by_value(10) << endl;  // 52   cout << add_by_ref(10) << endl;    // 52 ```   ::: warning The previous value for variable `var` was captured by `add_by_value` in its declaration and will not be updated.   ```cpp   var = 100;   cout << add_by_value(10) << endl;  // 52   cout << add_by_ref(10) << endl;    // 110 ```   ## Polymorphic lambda   ```cpp   double n1 = 42;   float n2 = 42;    auto fp = [](const auto &n) -> auto { return n * 4; };    auto x1 = fp(n1);   auto x2 = fp(n2);    cout << \"value of x1: \" << x1 << \" type of x1: \" << typeid(x1).name() << endl;   cout << \"value of x2: \" << x2 << \" type of x2: \" << typeid(x2).name() << endl; ```  ## Possible output   ```txt 52 52 52 110 value of x1: 168 type of x1: d value of x2: 168 type of x2: f  ```  ## Referências  * [std::array](/til/cpp_array.html) * [Functional Programming in C++](https://www.codeproject.com/Articles/1267996/Functional-Programming-in-Cplusplus) * [Programação Funcional em Javascript — First-Class Function (Funções de Primeira Classe)](https://medium.com/@angelorubin/javascript-first-class-function-fun%C3%A7%C3%B5es-de-primeira-classe-7ebf63d2c83a)  ","title":"C++ Lambdas"},{"id":453,"location":"/til/google-test.html","tags":["C++","TDD","google-test"],"text":" ::: toc  ## Makefile  A minimal `Makefile` to build for **google-test** is shown bellow:  ```makefile LDFLAGS_GTEST+= -lgtest -lgtest_main -lpthread LDFLAGS_GMOCK+= -Lgmock -lgmock_main LDFLAG+= $(LDFLAGS_GTEST) $(LDFLAGS_GMOCK)  all: CheckoutTest  CheckoutTest: CheckoutTest.cpp Checkout.cpp \t$(CXX) $(CXXFLAGS) $^ -o $@ $(LDFLAGS) ```  ## Doubles  Almost all code that gets implemented will depend (i.e. collaborate) on another piece of code in the system.  Those other pieces of code are oftentimes trying to do things or communicate with things that are not available in a unit testing environment or are so slow that they would make our unit tests extremely slow.   Test doubles are the answer to that problem.  They're objects created in the tests to replace the real production system collaborators.   ## Dummies  There are many types of test doubles. Dummy objects are the simplest.  They are simply placeholders that are intended to be passed around but not actually called or used in any real way.  They will often generate exceptions if they are called.  ```c++ class MyDummy : public MyInterface {   public:     void SomeFunction() { throw \"I should't be called!\"; } }; ```  ## Fakes  Fake objects have a different and usually simplified implementation from the production collaborator that makes them usable in the test code but not suitable for production.  ```c++ class MyTestDB : public DBInterface  {   public:     void pushData(int data) { dataItems.push_back(data); }   protected:     vector<int> dataItems; }; ```  ## Stubs  Stubs provide implementations that do expect to be called but respond with basic canned responses.  ```c++ class MyStub : public MyInterface {   public:     int SomeFunction() { return 0; } }; ```  ## Spies  Spies provide implementations that record the values that are passed into them. The tests then can use those recorded values for validating the code on our test.   ```shell class MySpy : public MyInterface {   public:     int savedParam;     void SomeFunction( int param ) { savedParam = param; } }; ```  ## Mocks  Mock objects are the most sophisticated of all the test doubles. They have pre-programmed expectations about the ordering of calls, the number of times functions will be called, and the values that will be passed in.  Mock objects will generate their own exceptions when these pre-programmed expectations are not met.  ```shell class MyMock : public MyInterface {   public:     void SomeFunction( int param ) {       if( 1 != param ) {         throw \"I should't be called!\";       }     } }; ```   <!-- In this slide, I have a simple example of a dummy object. Its implementation throws an exception if it's called, as it never expects to be used. This is a simple example of a stub test double. It returns a canned response when its one method is called. This is an example of a fake object. It provides a working implementation, but the implementation is likely only suitable for the test environment and not for production. In this case, it's an in-memory database. This is an example of a spy test double. It records the value of the parameter that was passed into it in a public member variable. That recorded value can then be validated by the unit test. This is a simple example of a mock object. This mock object has a built-in expectation that a value of one will be passed in for the parameter to the function and will throw an exception if that is not the case. Mock frameworks are libraries that provide easy-to-use APIs for automatically creating any of these types of test doubles at runtime. They provide easy APIs for specifying the mocking expectations in your unit tests. They can be much more efficient than implementing your own custom mock objects, as creating your own custom mock objects can be time-consuming, tedious, and error-prone. Google Mock is a C++ Mocking Framework from Google. It comes bundled with Google Test and works well in the Google Test Framework. That being said, it can also be used with any other C++ Unit Testing Framework. In the next lecture, I'll walk through a simple example using Google Mock. -->  ## References  * Linkedin Learning Course [Test-Driven Development in C++](https://www.linkedin.com/learning/test-driven-development-in-c-plus-plus/google-test) ","title":"Google Test"},{"id":454,"location":"/til/vim-eunuch.html","tags":["vim","tpope","vim-plugin"],"text":" ```vim Plug 'tpope/vim-eunuch' ``` Vim sugar for the UNIX shell commands that need it the most. Features include:  * :Remove: Delete a file on disk without E211: File no longer available. * :Delete: Delete a file on disk and the buffer too. * :Move: Rename a buffer and the file on disk simultaneously. See also :Rename, :Copy, and :Duplicate. * :Chmod: Change the permissions of the current file. * :Mkdir: Create a directory, defaulting to the parent of the current file. * :Cfind: Run find and load the results into the quickfix list. * :Clocate: Run locate and load the results into the quickfix list. * :Lfind/:Llocate: Like above, but use the location list. * :Wall: Write every open window. Handy for kicking off tools like guard. * :SudoWrite: Write a privileged file with sudo. * :SudoEdit: Edit a privileged file with sudo.  ","title":"Vim eunuch"},{"id":455,"location":"/certificate/2022-12-20_linkedin_Test_Driven_Development_in_C++.html","tags":["C++","TDD","gtest","gmock"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  Test-Driven Development in C++ Course completed on Dec 20, 2022 at 05:42PM UTC • 2 hours 21 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: ASTQfxGvnFw3LNIs76O70BFE2wjU ```  ## Course details  Every software developer wants to ship high-quality applications. Test-driven development (TDD) is a key discipline that can help you enhance your development process—and, in turn, your code base—by ensuring that crashes and bugs are addressed early on. In this course, join Richard Wells as he covers unit testing and TDD for C++ projects. Richard provides an overview of both unit testing and TDD, explaining why both are crucial for developers. He also shows how to set up your development environment for TDD and goes over the Google Test C++ unit-testing framework. Throughout the course, he shares best practices and provides examples and test cases that can help you gain a practical understanding of TTD in C++.   ## Learning objectives  * What is test-driven development (TDD)? * Setting up your development environment * Setting up Google Test with Eclipse, Visual Studio, CLion, and Xcode * Working with Google Test * Test doubles * Google Mock library * TDD best practices  ## References  * [Test-Driven Development in C++](https://www.linkedin.com/learning/test-driven-development-in-c-plus-plus/) ","title":"Test Driven Development in C++"},{"id":456,"location":"/certificate/2022-12-19_linkedin_C++_Advanced_Topics.html","tags":["C++","move-semantics","smart-pointer","lambda","unit-test"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  C++: Advanced Topics Course completed on Dec 19, 2022 at 11:03PM UTC • 3 hours 15 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: Aea3LeHDRqlDJuiPU4H98ROQN6Ik ```  ## Course details  Want to deepen your understanding of C++? In this course, explore some of the more complex aspects of this core programming language, from smart pointers to move semantics. Instructor Bill Weinman begins by diving deeper into the subject of classes and objects, including class inheritance. Next, Bill goes over smart pointers, which provide the functionality of a pointer with managed memory allocation. He also covers move semantics, including the copy-and-swap idiom; lambda functions; working with a unit test library; and creating a custom string library. As he wraps up the course, Bill shares practical applications of these concepts, helping you grasp how to leverage your new skills in your own C++ projects.   ## Learning objectives  * Classes and objects * Constructors and conversion operators * Class inheritance * Smart pointers * Move semantics * Lambda syntax * The C preprocessor * Unit tests * Building a custom string library  ## References  * [C++: Advanced Topics](https://www.linkedin.com/learning/c-plus-plus-advanced-topics/advanced-programming-with-c-plus-plus) ","title":"C++ Advanced Topics"},{"id":457,"location":"/certificate/2022-12-10_linkedin_CSSLP_Cert_Prep_7_Software_Deployment_Operations_and_Maintenance.html","tags":["ISC","CSSLP","security","devsecops"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  CSSLP Cert Prep: 7 Software Deployment, Operations, and Maintenance Course completed on Dec 10, 2022 at 04:34PM UTC • 1 hour 21 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                 LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: ATvVkIZYbwa2q0NBgqHmqUXbMiyh ```  ## Course details  The Certified Secure Software Lifecycle Professional (CSSLP) is a globally recognized certification from (ISC)2. In this course, part seven in an eight-part series, instructor Jerod Brennen provides insights and context around the seventh domain of the CSSLP certification exam: Secure Software Deployment, Operations, Maintenance. Jerod teaches you the essential components of an operational risk analysis. He shows you how to securely store and manage credentials, secrets, keys, certificates, and configurations. He covers bootstrapping, environment hardening, and applying the principle of least privilege. Then he steps you through the security testing you should perform post-deployment. He discusses obtaining the security approval needed to operate your production app and performing information security continuous monitoring (ISCM). In conclusion, Jerod walks you through how to maintain your software, including how to scan, track, and triage vulnerabilities.  ## Skills covered  Software Deployment ","title":"CSSLP Cert Prep 7 Software Deployment Operations and Maintenance"},{"id":458,"location":"/til/scrum.html","tags":["scrum"],"text":" ## User Stories  ![INVEST](/til/scrum_user_stories_invest.webp)  ![Statement template](/til/scrum_user_stories_statement.webp)  ![User story example](/til/scrum_user_stories_statement_example.webp)  ![Non functional story](/til/scrum_user_stories_statement_example_non_functional.webp)  ![Acceptance Criteria example](/til/scrum_user_stories_acceptance_criteria_example.webp)   ## Definition of done  Minimum requirements have been met for **all** stories.  ![Definition of done example](/til/scrum_definition_of_done_example.webp)  ![Definition of done example](/til/scrum_definition_of_done_example_02.webp)  ## Stand up discussion questions  * What did you do yesterday? * What are you going to do today? * Is anything blocking your progress?  ## Daily Scrum meeting  The Daily Scrum includes all three Cs, and is the expected **cadence** for **communication** and **collaboration**.  ## Backlog changes  * New features and stories are added * Stories are changed and removed  ## Backlog refinement session  * Lasts 30-60 minutes * Occurs at the sprint's midpoint * At least once per Sprint, the whole Scrum team meets to evaluate the new   items that have come up * Stories can only be added to **future sprints** * Sprint commitment **cannot change** once the sprint begins  ## Capacity  * As a general guide, remember that in an eight-hour working day, people   usually only have about six hours of productive time  ## Information radiator  An information radiator is anything you post on your team sites or walls that helps the team understand the work and its progress.  ## Sprint review  * Unaccepted or incomplete work is reviewed, prioritized, and moved to another   sprint. * Team agrees on what to demonstrate to stakeholders  ## Demo  * meeting that shares the product with stakeholders * the team directly communicates with stakeholders and receive feedback * relationships build between the team and stakeholders * overall progress toward the final goal is shared  ## Retrospective  * meeting focused on team performance at the end of each sprint * safe environment, closed-door session * open dialog * questions:   * What worked well?     * Focus on examples of great collaboration   * What did not work well?     * Focus on what you can change   * What can be improved?     * Focus on one or two items in the next sprint  ","title":"SCRUM"},{"id":459,"location":"/til/cpp_attributes.html","tags":["C++","attributes","nodiscard"],"text":"::: toc  ## Brief  * `[[nodiscard]]` * `[[noreturn]]` * `[[carries_dependency]]` * `[[assume]]` * `noexcept`  ## Attribute `[[nodiscard]]`  * Used to indicate when it is an error to ignore a return value from a   function * Can be applied to constructors as of C++20 * Can have a message to explain the error    * `[[nodiscard(\"Lock objects should never be discarted\")]]` * Should be used extensively. * Any non-mutating (getter/accessor/{eonse) function should be   `[[nodiscard]] * `cos()` * `vector::insert()`: Return an iterator that points to the first of the   newly inserted elements. * Can be checked / enforced with static analysis  ::: warning `filename.cpp:46:3: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`  ### Function   ```cpp [[nodiscard]] int get_zero() { return 0; }  [[nodiscard(\"Some custom message\")]] int get_one() { return 1; }  [[nodiscard(\"XXX find me XXX on warning messages\")]] int unused_function() {   return -1; }  void testFunction() {   fmt::print(stderr, \"testFunction()\\n\");   get_zero();   get_one(); } ```   ### Types   ```cpp struct [[nodiscard]] ErrorType {}; ErrorType get_two() { return {}; }  void testType() {   fmt::print(stderr, \"testType()\\n\");   get_two(); } ```   ### Lambda   ```cpp void testLambda() {   fmt::print(stderr, \"testLambda()\\n\");   auto lm = [] [[nodiscard]] () -> int { return 42; };   lm();  // would emit a warning } ```   ### Constructor   ```cpp struct FDHolder {   [[nodiscard]] FDHolder(int FD){};   FDHolder(){}; };  void testConstructor() {   fmt::print(stderr, \"testConstructor()\\n\");   FDHolder{42};    // warning   FDHolder h{42};  // constructed object not discarded, no warning   FDHolder{};      // defalt constructed, no warning } ```   ## `noexcept`  `noexcept` notifies the user (and compiler) that a function may not throw an exception. If an exception is thrown from that function, `terminate` MUST be called.   ```cpp void testNoExcept() noexcept {   fmt::print(stderr, \"testNoExcept()\\n\");   // required to terminate the program   throw 42; } ```   ```cpp   try {     testFunction();     testLambda();     testConstructor();     testNoExcept();  // terminate is called here     testFunction();  // never called   } catch (...) {     // catch is irrelevant, `terminate` is called   }   fmt::print(stderr, \"End of program\\n\"); ```  ## Error output   ```txt testFunction() testLambda() testConstructor() testNoExcept() terminate called after throwing an instance of 'int'  ```  ## Compilation output   ```txt attributes.cpp:62:3: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]   get_zero();   ^~~~~~~~ attributes.cpp:63:3: warning: ignoring return value of function declared with 'nodiscard' attribute: Some custom message [-Wunused-result]   get_one();   ^~~~~~~ attributes.cpp:75:3: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]   get_two();   ^~~~~~~ attributes.cpp:84:16: warning: an attribute specifier sequence in this position is a C++2b extension [-Wc++2b-extensions]   auto lm = [] [[nodiscard]] () -> int { return 42; };                ^ attributes.cpp:85:5: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]   lm();  // would emit a warning   ~~^~ attributes.cpp:93:30: warning: unused parameter 'FD' [-Wunused-parameter]   [[nodiscard]] FDHolder(int FD){};                              ^ attributes.cpp:99:3: warning: ignoring temporary created by a constructor declared with 'nodiscard' attribute [-Wunused-value]   FDHolder{42};    // warning   ^~~~~~~~~~~~ attributes.cpp:115:3: warning: 'testNoExcept' has a non-throwing exception specification but can still throw [-Wexceptions]   throw 42;   ^ attributes.cpp:112:6: note: function declared non-throwing here void testNoExcept() noexcept {      ^              ~~~~~~~~ 8 warnings generated.  ```  ## References  * [C++23: attribuiies](https://www.sandordargo.com/blog/2022/12/14/cpp23-attributes) * ▶️ [Back to Basics: C++ API Design - Jason Turner - CppCon 2022](https://www.youtube.com/watch?v=zL-vn_pGGgY) ","title":"C++ attributes"},{"id":460,"location":"/til/cpp_metaprogramming_01.html","tags":["C++","metaprogramming"],"text":" ::: toc   ## Traditional recursive factorial   ```cpp int factorial( int n ) {   if( n <= 1 )     return 1;   return n * factorial( n - 1 ); } ```   ## Recursive factorial using metaprogramming   ```cpp template <int N> struct MetaFactorial {   enum { value = N * MetaFactorial<N - 1>::value }; };  template <> struct MetaFactorial<0> {   enum { value = 1 }; }; ```   ## Why metaprogramming?  In the book **Expert C++** *Vardan Grigoryan* and *Shunguang Wu* wrote:  > Why would we bother to write so much code just for a factorial > that we wrote in the previous section in fewer than five lines of > code? The reason is due to its efficiency. While it will take a > little bit more time to compile the code, it is super efficient > compared to the normal factorial function (implemented either > recursively or iteratively). And the reason behind this efficiency is > the fact that the actual calculation of the factorial is happening > at compile time. That is, when the executable is run, the results > are already ready to use. We just used the calculated value when > we run the program; no calculation happens at runtime. If you're > seeing this code for the first time, the following explanation will > make you fall in love with metaprogramming.  ## Very simple speed test   ```cpp   const auto t1_meta = chrono::high_resolution_clock::now();    res1_meta = MetaFactorial<10>::value;   res2_meta = MetaFactorial<11>::value;    const auto t2_meta = chrono::high_resolution_clock::now();    const chrono::duration<double, nano> ns_meta = t2_meta - t1_meta;   cout << \"MetaFactorial\";   cout << \"\\nf(10) = \" << res1_meta;   cout << \"\\nf(11) = \" << res2_meta;   cout << \"\\ntook \" << ns_meta.count() << \"ns\\n\\n\"; ```   ```cpp   const auto t1_recursive = chrono::high_resolution_clock::now();    res1_recursive = factorial( 10 );   res2_recursive = factorial( 11 );    const auto t2_recursive = chrono::high_resolution_clock::now();    const chrono::duration<double, nano> ns_recursive = t2_recursive - t1_recursive;   cout << \"Recursive\";   cout << \"\\nf(10) = \" << res1_recursive;   cout << \"\\nf(11) = \" << res2_recursive;   cout << \"\\ntook \" << ns_recursive.count() << \"ns\\n\\n\"; ```   Then the time consuming ratio between both approaches is about 3 to 5 times (in my box):   ```cpp   cout << \"Ratio: \" << ns_recursive.count() / ns_meta.count() << endl; ```   ## Possible output   ```txt MetaFactorial f(10) = 3628800 f(11) = 39916800 took 112ns  Recursive f(10) = 3628800 f(11) = 39916800 took 336ns  Ratio: 3  ``` ","title":"C++ metaprogramming"},{"id":461,"location":"/til/powershell-linux.html","tags":["powershell","linux"],"text":" ::: toc  ## Installation — github — latest  Download latest version of install package from <https://github.com/PowerShell/PowerShell/releases>.  For **Debian** like distribution use `dpkg -i` to install:  ```shell dpkg -i /tmp/powershell-preview_7.4.0-preview.1-1.deb_amd64.deb  ```  ## Installation — github — stable version  Download stable version of install package from <https://github.com/PowerShell/PowerShell/releases>.  For **Debian** like distribution use `dpkg -i` to install:  ```shell dpkg -i /tmp/powershell_7.2.9-1.deb_amd64.deb ```  ## Installation — Debian repository  ```shell sudo apt update && sudo apt install -y curl gnupg apt-transport-https curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-bullseye-prod bullseye main\" \\   > /etc/apt/sources.list.d/microsoft.list' sudo apt update && sudo apt install -y powershell ```   ## How to run  To launch **PowerShell** use the command `pwsh-preview`, `powershell` or `pwsh` depending on version you have installed:  Preview version:  ```shell $ pwsh-preview  PowerShell 7.4.0-preview.1 PS /home/geraldo>  ```  Stable version:  ```shell $ pwsh PowerShell 7.2.9 PS /home/geraldo> ```  ## Finding Modules  ```powershell PS /home/geraldo> Find-Module *sharepoint*  Version          Name                                Repository  Description -------          ----                                ----------  ----------- 16.0.23109.12000 Microsoft.Online.SharePoint.PowerS… PSGallery   Microsoft SharePoint Online Services Module for Windows PowerShell 3.29.2101.0      SharePointPnPPowerShellOnline       PSGallery   Microsoft 365 Patterns and Practices PowerShell Cmdlets for SharePoint Online 5.3.0            SharePointDSC                       PSGallery   This DSC module is used to deploy and configure SharePoint Server 2013, 2016 and 2019, and co… 0.12.0.0         xSharePoint                         PSGallery   This DSC module is used to deploy and configure SharePoint Server 2013, and convers a wide ra… 3.29.2101.0      SharePointPnPPowerShell2016         PSGallery   Microsoft 365 Patterns and Practices PowerShell Cmdlets for SharePoint 2016 3.29.2101.0      SharePointPnPPowerShell2013         PSGallery   Microsoft 365 Patterns and Practices PowerShell Cmdlets for SharePoint 2013 3.29.2101.0      SharePointPnPPowerShell2019         PSGallery   Microsoft 365 Patterns and Practices PowerShell Cmdlets for SharePoint 2019 1.0.0.98         RED-SharePoint                      PSGallery   SharePoint PowerShell Module, Codename: RED 1.0.7            SharePointOnline.CSOM               PSGallery   This module allows the usage oft the SharePoint Online Client Side Object Model (CSOM) librar… 2.1.0            SCOrchDev-SharePoint                PSGallery   Integration to SharePoint lists using their REST interface 1.2.0            SharePoint.Password.Manager         PSGallery   Update SharePoint service account password and Workflow service account password ... ```  ## Installing modules  ```powershell PS /home/geraldo> Install-Module SharePointPnPPowerShellOnline  PS /home/geraldo> Get-InstalledModule ```  ## Importing modules  ```powershell PS /home/geraldo> Import-Module -DisableNameChecking SharePointPnPPowerShellOnline ```  ## Powershell ISE  * **ISE** — Integrated Scripting environment * Is a host application that assists us to create a script, and to run, test, or debug a command or script. * It can extend the scripting capabilities and provides a Windows-oriented graphical user interface(GUI) where users can run various commands. * Provides numerous features such as saves time, improves debugging and testing, etc.  ## Basic commands  |CMD     |Powershell     |Description           | |--------|---------------|----------------------| |`dir`   |`Get-Children` |List files and folders| |`pwd`   |`Get-Location` |Current folder| |`echo`  |`Write-Output` |print text on screen| |`cls`   |`Clean-Host`   |Clear screen| |`cd`    |`Set-Location` |Change directory|  ## Get-Command  List all *command*, *cmdlet*, *aliases*, *function*, *workflow*, *filter*, and *application* installed on host.  ```powershell Get-Command -Name \"*pattern*\" ```  ## References  * [What is PowerShell ISE(Integrated Scripting Environment)?](https://linuxhint.com/powershell-ise/) ","title":"Using powershell on linux"},{"id":462,"location":"/til/vim-populate-quickfix-window.html","tags":["vim","quickfix"],"text":" Try this on command to fill quickfix with lines which matches function signature:  ```vim :vim /^\\s*\\w\\+\\s\\+\\w\\+\\s*(.*)/ % | cw ```  Use this in `.vimrc`  ```vim map toc :vim /-- #/ % \\| cw <CR> ```  ## References  * [Navigate all C/C++ function entries in Vim](https://stackoverflow.com/questions/19981073/navigate-all-c-c-function-entries-in-vim/19983039) ","title":"How to populate vim quickfix window"},{"id":463,"location":"/til/simd.html","tags":["SIMD"],"text":" ## References  * VIDEO [Instruções SIMD para comparação (código e apresentação) 1/2 - André Tupinambá](https://youtu.be/ddZ4rDQFxxE) * VIDEO [Instruções SIMD para comparação (código e apresentação) 2/2 - André Tupinambá](https://youtu.be/CZx3sTN5Z9Q)  ","title":"SIMD"},{"id":464,"location":"/til/package-manager-c++.html","tags":["C++","conan","hunter","buckaroo","vcpkg","cget","cpm"],"text":" ## Options  * [conan](/til/conan.html) * hunter * buckaroo * vcpkg * cget * cpm  ","title":"Package manager for C++"},{"id":465,"location":"/til/cpp_algorithm_max_element_01.html","tags":["C++","algorithm","std::max_element","std::min_element","std::iter_swap","std::swap"],"text":" ::: toc   ```cpp    vector<int> vec = {18, 21, 42, 17, 0, -1, 21, 10, 10};    auto mx = max_element(begin(vec), end(vec));  // O(N)   auto mn = min_element(begin(vec), end(vec));  // O(N)    cout << \"Max element is \" << *mx << endl;   cout << \"Min element is \" << *mn << endl; ```   Print lambda:   ```cpp   auto print = [](const auto &vec, const string &msg) {     for (const auto &e : vec) {       cout << e << ' ';     }     cout << msg << endl;   }; ```   The `std::swap()` is a built-in function in C++ STL which swaps the value of any two variables passed to it as parameters.   ```cpp   print(vec, \"original vector\");   std::swap(mn, mx);  // swap iterator value, but not its position   cout << \"Max element is \" << *mx << endl;   cout << \"Min element is \" << *mn << endl;   print(vec, \"after swap\"); ```   The `std::iter_swap` swaps the values of the elements the given iterators are pointing to.   ```cpp   std::iter_swap(mn, mx);   print(vec, \"after iter_swap\"); ```  ## Possible output   ```txt Max element is 42 Min element is -1 18 21 42 17 0 -1 21 10 10 original vector Max element is -1 Min element is 42 18 21 42 17 0 -1 21 10 10 after swap 18 21 -1 17 0 42 21 10 10 after iter_swap  ``` ","title":"C++ algorithm max_element and min_element"},{"id":466,"location":"/til/xmake.html","tags":["C++","xmake"],"text":" ::: toc  TBD  ## References  * [COMPILE para C/C++ com XMAKE baseado em LUA](https://youtu.be/ydgcsv-hssY) ","title":"Xmake"},{"id":467,"location":"/til/meson.html","tags":["C++","meson"],"text":" ::: toc  ## What is Meson?  The main design point of Meson is that every moment a developer spends writing or debugging build definitions is a second wasted. So is every second spent waiting for the build system to actually start compiling code.  ## Features  * multiplatform support for Linux, OSX, Windows, Gcc, Clang, Visual Studio and others * supported languages include C, C++, Fortran, Java, Rust * build definitions in a very readable and user friendly non-turing complete DSL * cross compilation for many operating systems as well as bare metal * optimized for extremely fast full and incremental builds without sacrificing correctness * built-in multiplatform dependency provider that works together with distro packages * fun!  ## Installation  ```shell apt install meson ninja-build ```  ## Project initialization  ```shell mkdir testproject meson init --name testproject --build ```  ## Why Meson instead of GNU/Make  Make is a tool which controls the generation of executables and other non-source files of a program from the program's source files.  TBD  ## Why Meson instead of Autoconf    GNU Autoconf is a tool for producing configure scripts for building, installing and packaging software on computer systems where a Bourne shell is available.  TBD  ## Why Meson instead of CMake  CMake is a family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files. CMake generates native makefiles and workspaces that can be used in the compiler environment of your choice.  TBD  ## Why Meson instead of  Maven  Apache Maven is a Java-based tool for build automation and project management (in software development). It is centered around a Project Object Model (POM) described in a XML file that describes the project structure and its dependencies to other components and libraries.  TBD  ## Why Meson instead of Gradle  Gradle is build automation evolved. Gradle can automate the building, testing, publishing, deployment and more of software packages or other types of projects such as generated static websites, generated documentation or indeed anything else.  Gradle combines the power and flexibility of Ant with the dependency management and conventions of Maven into a more effective way to build. Powered by a Groovy DSL and packed with innovation, Gradle provides a declarative way to describe all kinds of builds through sensible defaults. Gradle is quickly becoming the build system of choice for many open source projects, leading edge enterprises and legacy automation challenges.  TBD   ","title":"Meson"},{"id":468,"location":"/til/conan.html","tags":["C++","conan"],"text":" ## Installation  ```shell pip install conan ```  ## Reference  * ▶️[Conan Package Manager for C++ in Practice](https://youtu.be/vAe9k0NJkw8) * 📔[Conan Package Manager for C++ in Practice](https://corecppil.github.io/Meetups/2021-03-24_Core_C++_Spring_Break/IntroToConan_Demo_C++_Meetup.pdf) * ▶️[Bincrafters](https://bincrafters.github.io/) * ▶️[Conan, o gerente de pacotes C++ 1/5](https://youtu.be/BFOS9UFsxxE) * ▶️[Conan, o gerente de pacotes C++ 2/5](https://youtu.be/9ehh2NGT4GE) * ▶️[Conan, o gerente de pacotes C++ 3/5](https://youtu.be/iVZo16X7R3k) * ▶️[Conan, o gerente de pacotes C++ 4/5](https://youtu.be/We9g3EZwlDs) * ▶️[Conan, o gerente de pacotes C++ 5/5](https://youtu.be/GOj2Yxrtw4Y) * JFrog Academy [Introduction to Conan](https://academy.jfrog.com/path/conan/introduction-to-conan)  ","title":"Conan"},{"id":469,"location":"/til/cpp_algorithm_swap_range.html","tags":["C++","algorithm","swap_range"],"text":" ::: toc   ```cpp   std::vector<char> v = {'a', 'b', 'c', 'd', 'e'};   std::list<char> l = {'1', '2', '3', '4', '5'};    auto print = [](auto comment, auto const& seq) {     std::cout << comment;     for (const auto& e : seq) {       std::cout << e << ' ';     }     std::cout << '\\n';   };    print(\"Before swap_ranges:\\nv: \", v);   print(\"l: \", l);    std::swap_ranges(v.begin(), v.begin() + 3, l.begin());    print(\"After swap_ranges:\\nv: \", v);   print(\"l: \", l); ```  ## Possible output   ```txt Before swap_ranges: v: a b c d e  l: 1 2 3 4 5  After swap_ranges: v: 1 2 3 d e  l: a b c 4 5   ``` ","title":"C++ algorithm swap_range"},{"id":470,"location":"/til/cpp_functional_hash.html","tags":["C++","hash"],"text":" ::: toc   A basic struct for demonstration purpose:   ```cpp struct S {   std::string first_name;   std::string last_name; }; bool operator==(const S& lhs, const S& rhs) {   return lhs.first_name == rhs.first_name && lhs.last_name == rhs.last_name; } ```   ::: tip Custom hash can be a standalone function object.   ```cpp struct MyHash {   std::size_t operator()(S const& s) const noexcept {     std::size_t h1 = std::hash<std::string>{}(s.first_name);     std::size_t h2 = std::hash<std::string>{}(s.last_name);     return h1 ^ (h2 << 1);  // combine hashes   } }; ```   ::: tip Custom specialization of std::hash can be injected in namespace std.   ```cpp template <> struct std::hash<S> {   std::size_t operator()(S const& s) const noexcept {     std::size_t h1 = std::hash<std::string>{}(s.first_name);     std::size_t h2 = std::hash<std::string>{}(s.last_name);     return h1 ^ (h2 << 1);  // combine hashes   } }; ```    ```cpp   // size_t will take 32bits on 32bits systems   // size_t will take 64bits on 64bits systems    size_t h1 = hash<string>{}(\"Geraldo\");   size_t h2 = hash<string>{}(\"geraldo\");   size_t h3 = h1 ^ (h2 << 1);   size_t h4 = hash<char>{}('\\n');   size_t h5 = hash<int>{}(10);   size_t h6 = hash<long>{}(10);  ```   ```cpp   S obj = {\"Geraldo\", \"Ribeiro\"};   size_t h7 = hash<S>{}(obj); ```      ```cpp   cout << \"h1 = \" << h1 << '\\n';   cout << \"h2 = \" << h2 << '\\n';   cout << \"h3 = \" << h3 << '\\n';   cout << \"h4 = \" << h4 << '\\n';   cout << \"h5 = \" << h5 << '\\n';   cout << \"h6 = \" << h6 << '\\n';   cout << \"h7 = \" << h7 << '\\n'; ```   ## Possible output   ```txt h1 = 16517155802914804667 h2 = 15968437481030298971 h3 = 6777401911469705485 h4 = 10 h5 = 10 h6 = 10 h7 = 7993227047372965953  ``` ","title":"C++ hash"},{"id":471,"location":"/til/cpp_hash_table.html","tags":["C++","hash_table","unordered_map","map"],"text":" ::: toc  ## What is a hash table?  A Hash Table in C/C++ (Associative array) is a data structure that maps keys to values. This uses a hash function to compute indexes for a key.  Based on the Hash Table index, we can store the value at the appropriate location.  The C++ STL (Standard Template Library) has the `unordered_map()` data structure which implements all these hash table functions.  ## Components  Any Hash Table implementation has the following three components:  * A good Hash function to map keys to values * A Hash Table Data Structure that supports insert, search and delete   operations. * A Data Structure to account for collision of keys  ## `map` vs `unordered_map`  |Property|`map`|`unordered_map`| |:-------|:----|:--------------| | Ordering             | increasing by default                  | no ordering | | Implementation       | self balancing BST like Red-Black tree | Hash table | | Search time          | log(N)                                 | O(1) avarage, O(N) worst case | | Insertion time       | log(N) + rebalance                     | Same as search | | Deletion time        | log(N) + rebalance                     | Same as search |  ## Advantages of BST over Hash Table  * We can get all keys in sorted order by just doing Inorder Traversal of BST.   * This is not a natural operation in Hash Tables and requires extra efforts. * Doing order statistics, finding closest lower and greater elements, doing range queries are easy to do with BSTs   * Like sorting, these operations are not a natural operation with Hash Tables. * BSTs are easy to implement compared to hashing * With BSTs, all operations are garanteed to work in **O(log(N))**   * But with Hashing, **O(1)** is average time and some particular     operations may be costly i.e, **O(n²)**, especially when table     resizing happens. * In BST we can do range searches efficiently but in Hash Table we   cannot do range search efficiently. * BST are memory efficient but Hash table is not.  ## Size  The size of our Hash Table and so the number with which we do our modulo calculation, should be **a prime number** that is only divisible with itself or 1. That way we prevent stacking of many values in one place like 2 when the numbers are even!   ## Very simple hash table implementation   ```cpp class VerySimpleHashTable {   // Table: array of list of integer with 7 buckets   array<list<int>, 7> mTable{};  // must be a prime number   size_t hashFunction(int item) { return item % mTable.size(); }   public:   void insertItem(int item) {     auto index = hashFunction(item);     auto it = find(mTable[index].begin(), mTable[index].end(), item);     if (it == mTable[index].end()) {       mTable[index].push_back(item);     }   }    void deleteItem(int item) {     auto index = hashFunction(item);     auto it = find(mTable[index].begin(), mTable[index].end(), item);     if (it != mTable[index].end()) {       mTable[index].erase(it);     }   }    void print() {     size_t index = 0;     for (const auto& lst : mTable) {       cout << \"Bucket \" << index << \":\";       for (const auto& i : lst) {         cout << ' ' << i;       }       cout << '\\n';       ++index;     }     cout << \"-----------------\\n\";   } }; ```    Example of use   ```cpp   VerySimpleHashTable simpleTable;   simpleTable.print();   int element;   srand(0);   for (int i = 0; i < 50; ++i) {     element = rand() % 100;     simpleTable.insertItem(element);   }   simpleTable.print();    simpleTable.deleteItem(101);    srand(0);   for (int i = 0; i < 45; ++i) {     element = rand() % 100;     simpleTable.deleteItem(element);   }   simpleTable.print();  ```   ## C++ unordered_map example   ```cpp   // Helper function   auto print_unorderd_map = [](const auto& table) {     for (const auto& [key, value] : table) {       cout << \"Key:[\" << key << \"] Value:[\" << value << \"]\\n\";     };     cout << \"-----------------\\n\";   };    unordered_map<string, string> colorTable = {       {\"RED\", \"#FF0000\"}, {\"GREEN\", \"#00FF00\"}, {\"BLUE\", \"#0000FF\"}};    print_unorderd_map(colorTable);    // Add two new entries to the unordered_map   colorTable[\"BLACK\"] = \"#000000\";   colorTable[\"WHITE\"] = \"#FFFFFF\";    // Replace item   colorTable[\"RED\"] = \"#FF6666\";    print_unorderd_map(colorTable);    colorTable.erase(\"RED\");    print_unorderd_map(colorTable);  ```   ## Possible output   ```txt Bucket 0: Bucket 1: Bucket 2: Bucket 3: Bucket 4: Bucket 5: Bucket 6: ----------------- Bucket 0: 77 35 49 21 63 56 42 84 98 70 Bucket 1: 15 92 36 29 22 Bucket 2: 86 93 72 30 23 2 58 37 Bucket 3: 59 73 24 Bucket 4: 11 67 Bucket 5: 26 40 68 82 19 Bucket 6: 83 62 27 90 69 ----------------- Bucket 0: 98 70 Bucket 1: Bucket 2: 37 Bucket 3: 24 Bucket 4: Bucket 5: Bucket 6: ----------------- Key:[BLUE] Value:[#0000FF] Key:[GREEN] Value:[#00FF00] Key:[RED] Value:[#FF0000] ----------------- Key:[WHITE] Value:[#FFFFFF] Key:[BLACK] Value:[#000000] Key:[RED] Value:[#FF6666] Key:[GREEN] Value:[#00FF00] Key:[BLUE] Value:[#0000FF] ----------------- Key:[WHITE] Value:[#FFFFFF] Key:[BLACK] Value:[#000000] Key:[GREEN] Value:[#00FF00] Key:[BLUE] Value:[#0000FF] -----------------  ```  ## Reference  * [Hash Table in C/C++ - A Complete Implementation](https://www.digitalocean.com/community/tutorials/hash-table-in-c-plus-plus) * [Advantages of BST over Hash Table](https://www.geeksforgeeks.org/advantages-of-bst-over-hash-table/)  ","title":"C++ hash table"},{"id":472,"location":"/til/how-to-obtain-the-length-of-string-at-compile-time.html","tags":["C++","constexpr","string","strlen"],"text":" ::: toc  ## Objective  To obtain, **at compile time**, the length of a compile-time string constant.  ::: warning The problem is that the `strlen` function is not `constexpr`.  ## Solution  ```c++ constexpr len1 = std::string::traits_type::length(\"Geraldo\"); // or constexpr len2 = std::char_traits<char>::length(\"Ribeiro\"); ```  ## Reference  * [C++ constexpr parlor tricks: How can I obtain the length of a string at compile time?](https://devblogs.microsoft.com/oldnewthing/20221114-00/?p=107393) ","title":"How can I obtain the length of a string at compile time?"},{"id":473,"location":"/til/BST.html","tags":["C++","BST","tree","red-black-tree"],"text":"::: toc  ## What is Binary Search Tree?  A Binary Search Tree is a node-based binary tree data structure which has the following properties:    * The left subtree of a node contains only nodes with keys lesser than the node’s key. * The right subtree of a node contains only nodes with keys greater than the node’s key. * The left and right subtree each must also be a binary search tree.  * There must be no duplicate nodes.  ::: info BST are guaranteed height of **O(log n)** for **n** items  ::: fixme https://www.geeksforgeeks.org/binary-search-tree-set-1-search-and-insertion/  ::: fixme See [Red-Black Tree](/til/red-black-tree.html)  ## References  * [Binary Search Tree | Set 1 (Search and Insertion)](https://www.geeksforgeeks.org/binary-search-tree-set-1-search-and-insertion/) ","title":"BST - Binary Search Tree"},{"id":474,"location":"/til/cpp_algorithm_count_if_01.html","tags":["C++","algorithm","std::count_if"],"text":" ::: toc   ```cpp   std::array<int, 4> arr{ 1, 2, 3, 4 };    auto res = std::count_if( arr.cbegin(), arr.cend(), []( int x ) { return x == 3; } );   std::cout << \"There are \" << res << \" number of elements equal to 3\" << std::endl; ```  ## Possible output   ```txt There are 1 number of elements equal to 3  ```  ","title":"C++ algorithm count_if"},{"id":475,"location":"/til/red-black-tree.html","tags":["C++","red-black-tree"],"text":" ## Red-black tree  * Invented by Rudolf Bayer in 1972  * A node is either red or black * The root and leaves (NIL) are black * If a node is red, then its children are black * All path from a node to its NIL descendants contains   the same number of black nodes. * Nodes require one storage bit to keep track of color * The longest path (root do farthest NIL) is no more   than twice the length of the shortest path (root to nearest NIL).   * Shortest path: all black nodes   * Longest path: alternating red and black  * Operations are O(log n) time complexity   * Search   * Insert (require rotation)   * Remove (require rotation) * Space complexity are O(n)  ![Left rotation](/til/red_black_tree_rotation_left.webp)  ![Right rotation](/til/red_black_tree_rotation_right.webp)  ## References  * [INE 5408 - Estruturas de Dados - Aula 6.5. Árvores de Busca Rubro-Negras (Red-Black Trees)](https://youtu.be/MZW8PaZbqX8)  ","title":"Red-Black Tree"},{"id":476,"location":"/til/apt-install-from-unsigned-repo.html","tags":["apt","gpg","dockerfile"],"text":" ::: toc  To avoid errors on command `apt update` related to **unsigned** repositories inside `Dockerfile` the option `[trusted=yes]` was added before repository URL on apt list file.  I am not convinced about the security is ok.  ``` $ cat llvm.list  deb [trusted=yes] http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye main deb-src [trusted=yes] http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye main # 14  deb [trusted=yes] http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-14 main deb-src [trusted=yes] http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-14 main # 15  deb [trusted=yes] http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-15 main deb-src [trusted=yes] http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-15 main  deb [trusted=yes] http://www.deb-multimedia.org jessie main ```  ## Reference  * [Force update from unsigned repository](https://askubuntu.com/questions/732985/force-update-from-unsigned-repository) ","title":"Using apt from unsigned repository"},{"id":477,"location":"/til/cpp_protobuf_01.html","tags":["C++","protobuf_01"],"text":" ::: toc    ## Prototype   ```c++ syntax = \"proto2\"; message Sensor {   required string name = 1;   required double temperature = 2;   required int32 humidity = 3;    enum SwitchLevel {     CLOSED = 0;     OPEN = 1;   }   required SwitchLevel door = 5; }  ```  ## Makefile  ```Makefile GRPC_CPP_PLUGIN = grpc_cpp_plugin GRPC_CPP_PLUGIN_PATH ?= `which $(GRPC_CPP_PLUGIN)` %.grpc.pb.cc: %.proto \tprotoc --grpc_out=. --plugin=protoc-gen-grpc=$(GRPC_CPP_PLUGIN_PATH) $<  %.pb.cc: %.proto \tprotoc --cpp_out=. $< ```   Fill the object parameters.   ```cpp   Sensor sensor;   sensor.set_name(\"Laboratory\");   sensor.set_temperature(23.4);   sensor.set_humidity(68);   sensor.set_door(Sensor_SwitchLevel_OPEN); ```   Serialize to a file   ```cpp   ofstream ofs(\"sensor.data\", std::ios_base::out | std::ios_base::binary);   sensor.SerializeToOstream(&ofs);   ofs.close(); ```   Parse parameters from file   ```cpp   Sensor sensor2;   ifstream ifs(\"sensor.data\", ios_base::in | ios_base::binary);   sensor2.ParseFromIstream(&ifs);    cout << \"Temperature: \" << sensor2.temperature() << endl;   cout << \"Humidity: \" << sensor2.humidity() << endl;   cout << \"Door: \" << sensor2.door() << endl; ```  ## Possible output   ```txt Temperature: 23.4 Humidity: 68 Door: 1  ``` ","title":"C++ protobuf"},{"id":478,"location":"/til/tikz.html","tags":["LaTeX","TikZ"],"text":" ::: toc  ## Editors and converters  ```plaintext $ apt-cache search tikz editor ktikz - editor para a linguagem de desenho TikZ - versão KDE qtikz - editor for the TikZ drawing language - Qt version prerex - course prerequisite chart editor for LaTeX/TikZ texlive-pictures - TeX Live: Graphics, pictures, diagrams texlive-latex-extra - TeX Live: LaTeX additional packages tikzit - visual PGF/TikZ graph editor  $ apt-cache search pdf2svg pdf2svg - converte documentos PDF para arquivos SVG (um por página) ```  ## Line thickness  ![Line thickness](/til/tikz_line_thicknes.webp)  ![Line thickness](/til/tikz_thickness.svg)  ## Relative positioning  The `positioning` library allows you to place nodes at a specified direction and distance from other nodes. To load the library, include in your preamble:  ![Positioning](/til/tikz_positioning.svg)  ::: include latex src/static_src/til/tikz_positioning.tikz  ## Example - Linked list  ![Linked list](/til/tikz_linked_list.svg)  ::: include latex src/static_src/til/tikz_linked_list.tikz  ## Circle  ![Circle](/til/tikz_tut_circle.svg)  ::: include latex src/static_src/til/tikz_tut_circle.tikz   ## Package intersections  ![Intersections](/til/tikz_intersections.svg)  ::: include latex src/static_src/til/tikz_intersections.tikz   ## References  * [tikz.net](https://tikz.net/) * [How the inner separation for nodes works and how to use it: Part 2](https://latexdraw.com/how-the-inner-separation-for-nodes-works-and-how-to-use-it-part-2/) * [TikZ arrows](https://latexdraw.com/exploring-tikz-arrows/) * [TikZBlog](https://latexdraw.com/blog/) * [Drawing Neural Networks in TikZ: Short Guide](https://latexdraw.com/drawing-neural-networks-in-tikz-short-guide/) * [How should I draw a singly/double linked list?](https://tex.stackexchange.com/questions/19286/how-should-i-draw-a-singly-double-linked-list) * [LaTeX Graph Paper](https://github.com/mcnees/LaTeX-Graph-Paper) * [crash course to tikz [2 · positioning]](https://rmwu.github.io/tutorial/latex/2019/11/21/positioning/) * Github [awesome-TikZ](https://github.com/maphy-psd/awesome-TikZ) * Github [Examples for the usage of LaTeX](https://github.com/MartinThoma/LaTeX-examples) * Github [Galley of Tikz drawings](https://github.com/walmes/Tikz) ","title":"LaTeX Tikz"},{"id":479,"location":"/til/cpp_big-endian-vs-little-endian.html","tags":["C++","big-endian","little-endian"],"text":" ::: toc  ## Byte significant  * LSB - Less significant byte   * Any change to will cause a small change in this number * MSB - Most significant byte   * Any change to will cause a huge change in this number  ![Big Endian vs Little Endian](/til/big-endian-vs-little-endian-01.webp)   ```cpp   // uint32_t value = 1958516461;   uint32_t value = 0x01234567;   cout << fmt::format(\"Value printed in hex:  {:08x}\", value); ```   Any object in C++ can be reinterpreted as an array of bytes. If you want to actually make a copy of the bytes into a separate array, you can use `std::copy`:   ```cpp   unsigned char bytes[sizeof value];   std::copy(       static_cast<const unsigned char *>(static_cast<const void *>(&value)),       static_cast<const unsigned char *>(static_cast<const void *>(&value)) +           sizeof value,       bytes);    // Print   cout << \"\\nBytes in memory (1): \";   for (const auto &byte : bytes) {     cout << fmt::format(\"{:02x} \", byte);   }    // Print   cout << \"\\nBytes in memory (2): \" << hex;   copy(begin(bytes), end(bytes), std::ostream_iterator<int>(cout, \" \"));  When above program is run on little endian machine, gives “67   //-- When above program is run on little endian machine, gives “67 45 23 01” as output, while if it is run on big endian machine,   //-- 45 23 01” as output, while if it is run on big endian machine, gives “01 23 45 67” as output.   //-- gives “01 23 45 67” as output.  ```   ## How to detect endianness in C   ```cpp   {     unsigned int i = 1;     // i: 01 00 00 00 on little endian machines     // i: 00 00 00 01 on big endian machines     // c: ^^     char *c = (char *)&i;     if (*c) {       cout << \"\\nlittle-endian\";     } else {       cout << \"\\nbig-endian\";     }     // This code is contributed by rathbhupendra   } ```   ## How to detect endianness in C++    ```cpp   // #include <bit>   if constexpr (std::endian::native == std::endian::big) {     std::cout << \"\\nbig-endian\";   } else if constexpr (std::endian::native == std::endian::little) {     std::cout << \"\\nlittle-endian\";   } else {     std::cout << \"\\nmixed-endian\";   } ```  ## Possible output   ```txt Value printed in hex:  01234567 Bytes in memory (1): 67 45 23 01  Bytes in memory (2): 67 45 23 1  little-endian little-endian ``` ","title":"C++ big endian vs little endian"},{"id":480,"location":"/til/google-search-inurl.html","tags":["google-search","inurl"],"text":"  * `inurl:https://media.techtarget.com/digitalguide/images/Misc/EA-Marketing/Eguides/`  ","title":"Google search inurl"},{"id":481,"location":"/til/pagmo.html","tags":["C++","optimization"],"text":" **pagmo** is a C++ scientific library for massively parallel optimization. It is built around the idea of providing a unified interface to optimization algorithms and problems, and to make their deployment in massively parallel environments easy.  ## Reference  * [Pagmo documentation](https://esa.github.io/pagmo2/index.html) * [Pagmo capabilities](https://esa.github.io/pagmo2/overview.html) ","title":"pagmo — C++ scientific library for massively parallel optimization"},{"id":482,"location":"/til/UltiSnips.html","tags":["C++"],"text":" * [An UltiSnips guide for LaTeX workflows](https://www.ejmastnak.com/tutorials/vim-latex/ultisnips/) ","title":"UltiSnip - Snippets for vim"},{"id":483,"location":"/til/cpp_leak_01.html","tags":["C++","memory-leak","AddressSanitizer","ASan"],"text":" ::: toc  **AddressSanitizer** (or **ASan**) is a tool developed by Google detect memory access error such as use-after-free and memory leaks. It can be used on both C and C++ codes. Address Sanitizer uses runtime instrumentation to track memory allocations, which mean you must build your code with Address Sanitizer to take advantage of it's features.  ## Compiler version  AddressSanitizer is currently implemented in:  * Clang >= 3.12 * CGG >= 4.8 * Xcode >= 7 * MSVC >= 16.9  ## Instrumentation cost  On average, the instrumentation increases processing time by **73%** and memory usage by **240%** according to [AddressSanitizer: A Fast Address Sanity Checker ](https://www.usenix.org/system/files/conference/atc12/atc12-final39.pdf).  ## Limitations  AddressSanitizer does not detect any uninitialized memory reads (but this is detected by MemorySanitizer), and only detects some use-after-return bugs.  It is also not capable of detecting all arbitrary memory corruption bugs, nor all arbitrary write bugs due to integer underflow/overflows (when the integer with undefined behavior is used to calculate memory address offsets).  Adjacent buffers in structs and classes are not protected from overflow, in part to prevent breaking backwards compatibility.  ## Makefile  The code instrumentation is made by adding `-fsanitize=address -g -O` to the compilation flags.  The lines below are used to build and run the code used in this article. The compiled files files are `bin/leak_01` and `bin/leak_01.2`  ```Makefile # Build both versions (instrumented and non instrumented) bin/leak_01: leak_01.cpp \t$(CXX) -Wall -fsanitize=address -O -g $^ -o $@ \t$(CXX) -Wall $^ -o $@.2 # non instrumented build  # Save each function output to their respective files output/leak_01.txt: bin/leak_01 \t bin/leak_01 0 > $@.0.i 2>&1 || echo \"Error ouput expected\" \t bin/leak_01 1 > $@.1.i 2>&1 || echo \"Error ouput expected\" \t bin/leak_01.2 0 > $@.0.ni \t bin/leak_01.2 1 > $@.1.ni ```   ## Buggy C++ source code  ### C++ Delete Mismatch  Bad function which does not deallocate 4bytes (sizeof int) on each call.   ```cpp #line 100  // for easy reference the line above in this post void leak() {   int *ptr = new int{42};   cout << \"The value of ptr is \" << *ptr << \" \" << ptr << endl;   // 💩 missing delete call here! } ```   The `main` function will call the `leak` function 10 times leaking 40 bytes (10 $\\times$ `sizeof int`).  The debug information printed on standard error output explain the fault.  ```plaintext Direct leak of 40 byte(s) in 10 object(s) allocated from: ```  #### Instrumented possible output   ```txt The value of ptr is 42 0x602000000010 The value of ptr is 42 0x602000000030 The value of ptr is 42 0x602000000050 The value of ptr is 42 0x602000000070 The value of ptr is 42 0x602000000090 The value of ptr is 42 0x6020000000b0 The value of ptr is 42 0x6020000000d0 The value of ptr is 42 0x6020000000f0 The value of ptr is 42 0x602000000110 The value of ptr is 42 0x602000000130  ================================================================= ==14635==ERROR: LeakSanitizer: detected memory leaks  Direct leak of 40 byte(s) in 10 object(s) allocated from:     #0 0x5559182002fd in operator new(unsigned long) (/data/home/geraldo/git/Intmain/language_cpp/bin/leak_01+0xf22fd) (BuildId: e3be81e16211953e9c0eb772e463da0f3429b315)     #1 0x5559182028dd in leak() /home/geraldo/git/Intmain/language_cpp/leak_01.cpp:101:14     #2 0x7f214de4ad09 in __libc_start_main csu/../csu/libc-start.c:308:16  SUMMARY: AddressSanitizer: 40 byte(s) leaked in 10 allocation(s).  ```  #### Non instrumented possible output   ```txt The value of ptr is 42 0x563a57eb2eb0 The value of ptr is 42 0x563a57eb3ee0 The value of ptr is 42 0x563a57eb3f00 The value of ptr is 42 0x563a57eb3f20 The value of ptr is 42 0x563a57eb3f40 The value of ptr is 42 0x563a57eb3f60 The value of ptr is 42 0x563a57eb3f80 The value of ptr is 42 0x563a57eb3fa0 The value of ptr is 42 0x563a57eb3fc0 The value of ptr is 42 0x563a57eb3fe0  ```  ### Heap use after free   ```cpp #line 200 void heapUseAfterFree() {   int *array = new int[100];   delete[] array;   cout << \"Heap use after free: \" << array[42] << endl;  // 💩 } ```   #### Instrumented possible output   ```txt ================================================================= ==14642==ERROR: AddressSanitizer: heap-use-after-free on address 0x6140000000e8 at pc 0x55ed7456ac4b bp 0x7fff11336a90 sp 0x7fff11336a88 READ of size 4 at 0x6140000000e8 thread T0     #0 0x55ed7456ac4a in heapUseAfterFree() /home/geraldo/git/Intmain/language_cpp/leak_01.cpp:203:38     #1 0x55ed7456b070 in main /home/geraldo/git/Intmain/language_cpp/leak_01.cpp:231:7     #2 0x7ff3a441fd09 in __libc_start_main csu/../csu/libc-start.c:308:16     #3 0x55ed744953f9 in _start (/data/home/geraldo/git/Intmain/language_cpp/bin/leak_01+0x1f3f9) (BuildId: e3be81e16211953e9c0eb772e463da0f3429b315)  0x6140000000e8 is located 168 bytes inside of 400-byte region [0x614000000040,0x6140000001d0) freed by thread T0 here:     #0 0x55ed74568c5d in operator delete[](void*) (/data/home/geraldo/git/Intmain/language_cpp/bin/leak_01+0xf2c5d) (BuildId: e3be81e16211953e9c0eb772e463da0f3429b315)     #1 0x55ed7456aaf8 in heapUseAfterFree() /home/geraldo/git/Intmain/language_cpp/leak_01.cpp:202:3     #2 0x7ff3a441fd09 in __libc_start_main csu/../csu/libc-start.c:308:16  previously allocated by thread T0 here:     #0 0x55ed7456840d in operator new[](unsigned long) (/data/home/geraldo/git/Intmain/language_cpp/bin/leak_01+0xf240d) (BuildId: e3be81e16211953e9c0eb772e463da0f3429b315)     #1 0x55ed7456aaed in heapUseAfterFree() /home/geraldo/git/Intmain/language_cpp/leak_01.cpp:201:16     #2 0x7ff3a441fd09 in __libc_start_main csu/../csu/libc-start.c:308:16  SUMMARY: AddressSanitizer: heap-use-after-free /home/geraldo/git/Intmain/language_cpp/leak_01.cpp:203:38 in heapUseAfterFree() Shadow bytes around the buggy address:   0x613ffffffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x613ffffffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x613fffffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x613fffffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x614000000000: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd =>0x614000000080: fd fd fd fd fd fd fd fd fd fd fd fd fd[fd]fd fd   0x614000000100: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd   0x614000000180: fd fd fd fd fd fd fd fd fd fd fa fa fa fa fa fa   0x614000000200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x614000000280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x614000000300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07    Heap left redzone:       fa   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb ==14642==ABORTING  ```  #### Non instrumented possible output   ```txt Heap use after free: 0  ```  ## Main function  Each bad function can be called individually by passing its number.   ```cpp int main(int argc, char **argv) {   if (argc != 2) {     return 1;   }   switch (stoi(argv[1])) {     case 0:       for (int i = 0; i < 10; i++) {         leak();       }       break;     case 1:       heapUseAfterFree();       break;   }   return 0; } ```   ## References  * [AddressSanitizer](https://en.wikipedia.org/wiki/AddressSanitizer) ","title":"How to detect C/C++ memory leak"},{"id":484,"location":"/til/visualgo.html","tags":["data-structure","visualization"],"text":" ::: tip https://visualgo.net/   ","title":"visualgo - visualising data structures and algorithms through animation"},{"id":485,"location":"/til/cpp_hashids_01.html","tags":["C++","hashids","guid","uuid"],"text":" ::: toc  ## Features  * Generate short unique ids from integers * Create short unique ids from numbers (positive numbers & zero). * Allow custom alphabet as well as salt — so ids are unique only to you. * Incremental input is mangled to stay unguessable. * Code is tiny (~350 lines), fast and does not depend on external   libraries. * Single C++ header   <https://raw.githubusercontent.com/schoentoon/hashidsxx/master/hashids.h>  ## Basic usage  Encoding a single number   ```cpp     hashidsxx::Hashids hash;     std::cout << hash.encode({123}) << std::endl;  // Mj3 ```   Decoding   ```cpp     std::vector<uint64_t> output = hash.decode(\"Mj3\");     for (uint64_t h : output) {       std::cout << h << std::endl;  // 123     } ```   Encoding several numbers with salt   ```cpp     hashidsxx::Hashids hash(\"this is my salt\");     std::string id = hash.encode({1, 2, 3});     std::vector<uint64_t> numbers = hash.decode(id);     for (auto &h : numbers) {       std::cout << h << std::endl;     } ```   Custom salts, alphabets and minimum lengths   ```cpp     hashidsxx::Hashids hash(\"salt\", 16, \"abcdefghijklmnopqrstuvwxyz\");     std::cout << hash.encode({123456789}) << std::endl;  // oavlpogkzrxrkpxd ```   ## Possible output   ```txt Mj3 123 1 2 3 oavlpogkzrxrkpxd  ```  ## References  * [hashids.org](https://hashids.org/) * 🚀[github C++11 hashids](https://github.com/schoentoon/hashidsxx) * 🚀[github .NET hashids](https://github.com/ullmark/hashids.net) * ▶️ [GUIDs and UUIDs are cool, but this is cooler](https://www.youtube.com/watch?v=tSuwe7FowzE) ","title":"hashid — Generate short unique ids from integers"},{"id":486,"location":"/til/cpp_hashids.html","tags":["C++","hashids","guid","uuid"],"text":" ::: toc  ## Features  * Generate short unique ids from integers * Create short unique ids from numbers (positive numbers & zero). * Allow custom alphabet as well as salt — so ids are unique only to you. * Incremental input is mangled to stay unguessable. * Code is tiny (~350 lines), fast and does not depend on external   libraries. * Single C++ header   <https://raw.githubusercontent.com/schoentoon/hashidsxx/master/hashids.h>  ## Basic usage  Encoding   ```cpp     // hashidsxx::Hashids hash;     // std::cout << hash.encode({123}) << std::endl;  // Mj3 ```   Decoding   ```cpp     // std::vector<uint64_t> output = hash.decode(\"Mj3\");     // for (uint64_t h : output) std::cout << h << std::endl;  // 123 ```   With salt   ```cpp     // hashidsxx::Hashids hash(\"this is my salt\");     // std::string id = hash.encode({1, 2, 3});     // std::vector<uint64_t> numbers = hash.decode(id); ```   Custom salts, alphabets and minimum lengths   ```cpp     // hashidsxx::Hashids hash(\"salt\", 16, \"abcdefghijklmnopqrstuvwxyz\");     // std::cout << hash.encode({123456789}) << std::endl;  // oavlpogkzrxrkpxd ```  ## Possible output   ```txt  ```   ## References  * [hashids.org](https://hashids.org/) * [github C++11 hashids](https://github.com/schoentoon/hashidsxx) * [github .NET hashids](https://github.com/ullmark/hashids.net) * [GUIDs and UUIDs are cool, but this is ","title":"hashid — Generate short unique ids from integers"},{"id":487,"location":"/til/cpp_templates_02.html","tags":["C++","template"],"text":" ::: toc   Will be evaluated in execution time:   ```cpp template <typename T> T cube(const T &value) {   return value * value * value; } ```   Will be evaluated in compilation time:  ```cpp template <int toCube> struct Cube {   enum { value = toCube * toCube * toCube }; }; ```   ```cpp   fmt::print(\"8 cubed = {} (execution time)\\n\", int(cube(8)));   fmt::print(\"5 cubed = {} (compilation time)\\n\", int(Cube<5>::value)); ```   ## Possible output   ```txt 8 cubed = 512 (execution time) 5 cubed = 125 (compilation time)  ``` ","title":"C++ templates — compilation time vs execution time"},{"id":488,"location":"/til/cpp_templates_03.html","tags":["C++","template"],"text":" ::: toc    ```cpp int factorial(const int input, const int sum = 1) {   if (input > 1) {     return factorial(input - 1, sum * input);   }   return sum; }  template <int input, int sum = 1> struct Factorial : Factorial<input - 1, input * sum> {};  template <int sum> struct Factorial<1, sum> {   enum { value = sum }; };  int main() {   fmt::print(\"5! = {}\\n\", factorial(5));   fmt::print(\"Factorial<4> = {}\\n\", int(Factorial<4>::value));   fmt::print(\"Factorial<5> = {}\\n\", int(Factorial<5>::value));   return 0; } ```   ## Possible output   ```txt 5! = 120 Factorial<4> = 24 Factorial<5> = 120  ``` ","title":"C++ templates"},{"id":489,"location":"/til/cpp_templates_04.html","tags":["C++","template"],"text":" ::: toc   C++ template can be trick.  ```cpp template <typename T> void print1(T)   { fmt::print(\"Generic\\n\"); } template <typename T> void print1(T *) { fmt::print(\"Overload\\n\"); } template <>           void print1(double *) { fmt::print(\"Specialization\\n\"); }  // Same functions as above, but in diferent order. template <typename T> void print2(T)   { fmt::print(\"Generic\\n\"); } template <>           void print2(double *) { fmt::print(\"Specialization\\n\"); } template <typename T> void print2(T *) { fmt::print(\"Overload\\n\"); } ```   ```cpp   double d = 1.5;   print1(&d);  // Specialization   print2(&d);  // Overload ```   ## Possible output   ```txt Specialization Overload  ``` ","title":"C++ templates — order"},{"id":490,"location":"/til/rust_helloworld.html","tags":["rust","helloworld"],"text":" ::: toc  ## Installation on Debian 11  ### Install dependencies  ```shell sudo apt install curl build-essential gcc make -y ```  ### Install Rust  ```shell curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh ```  ## Install code formatter  ```shell rustup component add rustfmt ```  ## Format code  ```shell cargo fmt # or rustfmt lib.rs main.rs # or echo \"fn     main() {}\" | rustfmt ```   ```rust fn main() {     // Indent four space by convention     println!(\"Hello, rust!\");     //     ^     // the ! indicates you are calling a macro instead a function     let x = 10;     // x = 20; // compilation error because x is immutable      let mut y = 10;     println!(\"x: {} y: {}\", x, y);      y = 20; // ok     println!(\"x: {} y: {}\", x, y); } ```   ## Possible output   ```txt Hello, rust! x: 10 y: 10 x: 10 y: 20  ```  ## References  * [How to Install Rust on Debian 11 Bullseye](https://www.linuxcapable.com/how-to-install-rust-on-debian-11/)  ","title":"Rust helloworld"},{"id":491,"location":"/til/cpp_cast.html","tags":["C++","cast"],"text":" ::: toc   # Conversão de tipos  O C++ é uma linguagem dita strictly typed, termo geralmente traduzido como fortemente tipada, isto significa que o tipo das variáveis é sempre certo e as operações devem ser definidas para tipos específicos. Gerar um objeto de um tipo através de uma expressão de outro tipo envolve uma conversão, ou casting.  ## Conversão estática  `static_cast<novo_tipo>( expressão );`  Esta é a conversão mais comum. É dita estática pois sua validade é **analisada durante a compilação**, as principais possibilidades são:  * Conversão implícita entre os tipos (como float pra int). * Chamar um construtor do novo_tipo através do resultado da expressão. * Usar operador de conversão definido pelo usuário do resultado da   expressão para o novo_tipo. * Converter ponteiros entre hierarquia de classes, desde que as classes   não sejam virtuais. (`static_cast` não verifica a validade da conversão   durante a execução.) * Converter ponteiros void* para qualquer outro tipo de ponteiro.   (resultado indefinido se o alinhamento do ponteiro não for correto.)  ## Conversão dinâmica  `dynamic_cast<novo_tipo>( expressão );`  Esta conversão é especial para referências ou ponteiros de objetos polimórficos (classes contendo funções virtuais). É dita dinâmica pois verifica durante a execução do programa se a conversão é válida quando descendo na hierarquia das classes. Em principal:  * Ao converter ponteiros _pra cima_ na hierarquia (`expressão` é derivada   de `novo_tipo`), comporta-se como uma conversão implícita. * Ao converter ponteiros _pra baixo_ na hierarquia, (`expressão` é base   de `novo_tipo`), verifica se `expressão` originalmente referia-se a um   ponteiro para `novo_tipo` e, se sim, retorna o ponteiro ajustado. Caso   a verificação falhe, retorna `nullptr`. * Conversão entre referências é semelhante, mas gera exceção   `std::bad_cast` em caso de falha.  ## Conversão de constância  `const_cast<novo_tipo>(expressão);`  * Esta conversão tem a única função de adicionar ou remover a propriedade `const`. * Qualquer conversão pode gerar uma referência ou ponteiro para um   objeto para que este seja tratado como constante, mas apenas `const_cast`   pode gerar uma nova referência ou ponteiro para um objeto constante para   que este seja tratado como modificável (*não-constante*). * Esta conversão não gera nenhuma instrução, é apenas uma diretiva para o compilador.  ## conversão por reinterpretação  `reinterpret_cast<novo_tipo>(expressão);`  Esta conversão é que mais se distancia da característica *fortemente tipada* da linguagem C++, pois comanda o compilador a reinterpretar o resultado da `expressão` como se fosse do `novo_tipo`, em geral sem realizar nenhuma operação nem verificação sobre os valores sendo convertidos. A grosso modo, `reinterpret_cast` é forma de dizer ao compilador: _\"Confie em mim, esses números que estou lhe passando são o que digo serem\"_ . Seus principais usos são:  * Converter ponteiro ou referência para qualquer tipo de objeto para   ponteiro ou referência para qualquer outro tipo de objeto. * Converter um ponteiro para um número inteiro. * Converter um número inteiro para ponteiro.  ## Quando usar `static_cast`?  Procure usar a conversão que melhor expressa suas intenções. Como apenas a definição de cada tipo de conversão pode não ser muito elucidativa, seguem exemplos de cada uma:  ```c++ int   i = 5; float x = i; //conversão implícita float y = static_cast<float>(i); //conversão explícita ```  As conversões implícitas facilitam lidar com variáveis numéricas e locais, mas é recomendado sempre explicitar a conversão quando exportando a variável para alguma função. No exemplo abaixo, o resultado com e sem o `cast` é o mesmo (logo depois apontarei um possível problema):  ```c++ int f(int x) { return x*2; }  float x = 1.f; std::cout << \"Sem cast : \" << f(x)                   << std::endl; // Sem cast : 2 std::cout << \"Com cast : \" << f(static_cast<int>(x)) << std::endl; // Com cast : 2 ```  Agora, digamos que seja introduzida uma nova função, sem alterar as partes existentes do código anterior:  ```c++ int f(double x) { return x*5; }  float x = 1.f; std::cout << \"Sem cast : \" << f(x)                   << std::endl; // Sem cast : 5 std::cout << \"Com cast : \" << f(static_cast<int>(x)) << std::endl; // Com cast : 2 ```  O motivo disso é que a conversão implícita de `float` para `double` é preferida ao invés da conversão implícita de `float` para `int`.  Embora requerida em alguns casos (como convertendo ponteiros `void*` para outros tipos) `static_cast` tem uma função que pende mais para boa organização e manutenção do código.  ## Quando usar `dynamic_cast`?  `dynamic_cast` é a forma de verificar em tempo de execução se o tipo de objeto polimórfico passado é de um determinado tipo (para isso o programa faz uso de RTTI, omitirei detalhes). Em um exemplo simplificado, imagine uma classe base com dois tipos de derivadas:   ```cpp struct Base {   virtual ~Base(){}; };  struct DerivadaA : public Base { };  struct DerivadaB : public Base { }; ```   Digamos então que temos uma função que deve lidar com objetos do tipo  ```c++   void f(Base* ponteiro_base) ```  Mas em algum momento a execução deve ser diferente se o objeto passado for `DerivadaA` ou `DerivadaB`. Como `dynamic_cast` retorna `nullptr` em caso de falha, podemos fazer o seguinte:   ```cpp void f( Base *ponteiro_base ) {   // tenta cast para ponteiro do tipo DerivadaA   DerivadaA *objA = dynamic_cast<DerivadaA *>( ponteiro_base );   if( objA != nullptr ) {     std::cout << \"Objeto do tipo A\" << std::endl;     return;   }    // tenta cast para ponteiro do tipo DerivadaB   DerivadaB *objB = dynamic_cast<DerivadaB *>( ponteiro_base );   if( objB != nullptr ) {     std::cout << \"Objeto do tipo B\" << std::endl;     return;   } }  int main() {   DerivadaA A;   DerivadaB B;   Base *    ponteiro_base;    ponteiro_base = &A;   f( ponteiro_base );   ponteiro_base = &B;   f( ponteiro_base ); } ```   ## Quando usar `const_cast`?  Remover a propriedade `const` de um objeto é necessidade rara, e modificar um objeto declarado `const` resulta em comportamento indefinido do programa, então cabe ao programador usar de forma coesa essa conversão.  Um exemplo ilustrativo: Quando deseja-se retornar uma referência a um membro de uma classe (os famosos `setters` e `getters`):   ```cpp class ClasseX {   int X;  public:   // retorna referência a membro da classe   int &getRefX()   {     return X;   }; }; ```   Como a função não altera o estado da classe, posso querer marcá-la `const`:  ```c++ int& getRefX() const ```  Mas daí o código não compila (a assinatura `const` da função torna seus membros `const` dentro desta)...  `error: binding 'const int' to reference of type 'int&' discards qualifiers`  `const_cast` pode ser usado para retornar a referência não-constante:  ```c++       //retorna referência a membro da classe       int& getRefX()       {           //(algum comentário explicando o const_cast)           return const_cast<int&>(X);       }; ```  `const_cast` deve ser usado com muito cuidado, pois alterar o valor de uma variável originalmente constante torna o programa mal formado (undefined behaviour). No exemplo acima, se algum objeto da classe `ClasseX` fosse originalmente constante, a função ainda funcionaria neste, mas o valor de `X` não deveria ser modificado através da referência retornada.  ## Quando usar `reinterpret_cast`?  O `reinterpret_cast` afasta-se da noção de objetos e aproxima-se da noção de bits (informação).  Por exemplo, digamos que você esteja programando um microcontrolador e no manual deste diz que a placa de som lê as informações a partir do endereço `33` na memória:   ```cpp // endereço obtido do manual do microchip static const int ADDR_PLACA_DE_SOM = 33; ```   Para escrever informações nesta área da memória, você precisa converter esta posição para um ponteiro, com `reinterpret_cast` você pode fazê-lo:   ```cpp // cria ponteiro para inteiros na posição dita pelo manual int *som_pt = reinterpret_cast<int *>( ADDR_PLACA_DE_SOM ); ```   Note que a conversão é bem livre, você pode criar um ponteiro para qualquer tipo de dado:   ```cpp // cria ponteiro para chars na posição dita pelo manual char* som_pt_2 = reinterpret_cast<char*>(ADDR_PLACA_DE_SOM); ```   C++ também suporta o _cast_ no estilo da linguagem C, como ele é interpretado pelo compilador?  As _conversões no estilo-C_ são do tipo:  `(novo_tipo)(expressão)`  Um exemplo:  ```c++   //gera um inteiro através do float 3.14   (int)(3.14f) ```  Este tipo de conversão está presente no C++ principalmente por questões de compatibilidade com a linguagem C.  O compilador tenta a seguinte ordem de conversões quando um _cast no estilo-C_ é utilizado:  1. `const_cast`. 2. `static_cast`, ignorando acesso restrito caso usado em hierarquias de classes. 3. `static_cast` seguido de `const_cast` 4. `reinterpret_cast` 5. `reinterpret_cast` seguido de `const_cast`  Ou seja, o compilador tenta **quase tudo** para gerar um objeto do novo tipo, inclusive removendo `const`. Esse tipo de conversão pode gerar conversões indesejadas (até o _não orientado a objetos_ `reinterpret_cast`!) que escondem bugs propagáveis pela lógica do programa.  Esta resposta é uma simplificação. Reitero que compreender bem a conversão de objetos indica boa compreensão do paradigma de orientação a objetos. As principais referências foram:  ## Possible output   ```txt Objeto do tipo A Objeto do tipo B  ```  ## Referências  * [Exemplo](http://coliru.stacked-crooked.com/a/03ad0d5c840a0409) * [static_cast](http://en.cppreference.com/w/cpp/language/static_cast) * [dynamic_cast](http://en.cppreference.com/w/cpp/language/dynamic_cast) * [const_cast](http://en.cppreference.com/w/cpp/language/const_cast) * [reinterpret_cast](http://en.cppreference.com/w/cpp/language/reinterpret_cast) * [Explicit type conversion](http://en.cppreference.com/w/cpp/language/explicit_cast) * [Conversão em C++: Qual a diferença entre static_cast, dynamic_cast, const_cast e reinterpret_cast?](https://pt.stackoverflow.com/questions/185272/convers%C3%A3o-em-c-qual-a-diferen%C3%A7a-entre-static-cast-dynamic-cast-const-cast-e)  ","title":"C++ cast"},{"id":492,"location":"/til/cpp_memory_safe.html","tags":["C++","memory-safe","std::shared_ptr","std::unique_ptr","std::make_shared"],"text":" ::: toc  A base class for our experiments:   ```cpp class MyClass {  public:   MyClass(const std::string &tag) : mTag(tag) {     fmt::print(\"{} - ✅ MyClass constructor was called\\n\", mTag);   }   ~MyClass() { fmt::print(\"{} - ❌ MyClass destructor was called\\n\", mTag); }   private:   std::string mTag;  // helps to identify the output line }; ```   ## RAII — Resource Acquisition Is Initialisatio  RAII is a bad name for the concept.  ::: citation author=\"Bjarne Stroustrup (2012)\" The best example of why I shouldn't be in marketing... I didn't have a good day when I named that \\ A better name is probably: \\ * Constructor Acquires, Destructor Releases * Scope Based Resource Management    ```cpp void raii() {   MyClass m0(\"raii 00\");   { MyClass m(\"raii 01\"); }   {     auto m = new MyClass(\"raii 02\");     delete m;   }   { std::unique_ptr<MyClass> m(new MyClass(\"raii 03\")); }   { std::shared_ptr<MyClass> m(new MyClass(\"raii 04\")); }   {     auto m = std::make_shared<MyClass>(\"raii 05\");     auto m2 = m;   }   {     auto m = std::make_unique<MyClass>(\"raii 06\");     fmt::print(\"raii 06 auto m2 = std::move(m);\\n\");     auto m2 = std::move(m);     fmt::print(\"raii 06 m  is nullptr -> {}\\n\", m == nullptr);     fmt::print(\"raii 06 m2 is nullptr -> {}\\n\", m2 == nullptr);   }   // m0 will be freed here } ```   ## Smart pointers   ## Avoid using dynamic memory and heap    ## Rule of Zero   ## Rule of Five   ## Rule of Three  If you implement a copy constructor, assignment operator, or destructor, you should implement the others, as well   ```cpp   raii(); ```  ## Possible output   ```txt raii 00 - ✅ MyClass constructor was called raii 01 - ✅ MyClass constructor was called raii 01 - ❌ MyClass destructor was called raii 02 - ✅ MyClass constructor was called raii 02 - ❌ MyClass destructor was called raii 03 - ✅ MyClass constructor was called raii 03 - ❌ MyClass destructor was called raii 04 - ✅ MyClass constructor was called raii 04 - ❌ MyClass destructor was called raii 05 - ✅ MyClass constructor was called raii 05 - ❌ MyClass destructor was called raii 06 - ✅ MyClass constructor was called raii 06 auto m2 = std::move(m); raii 06 m  is nullptr -> true raii 06 m2 is nullptr -> false raii 06 - ❌ MyClass destructor was called raii 00 - ❌ MyClass destructor was called  ```  ## References  * [5 techniques for writing memory safe C++](https://www.embedded.com/5-techniques-for-writing-memory-safe-c/)  ","title":"Writing memory safe C++"},{"id":493,"location":"/til/cpp_convert_operator.html","tags":["C++","convert-operator"],"text":" ::: toc  Converting to `Type` works by overloading the `Type()` operator.  ```cpp class MyClass { public:   operator Type() const {     // return something of type Type   } }; ```  For example, we could define a conversion of the `MyVector` to a `bool` to be `false` if the vector is empty and `true` otherwise.   ```cpp    MyVector v;    if (!v) {  // call bool()     fmt::print(\"MyVector is empty\\n\");   }    v.add(42);   if (v) {  // call bool()     fmt::print(\"First value on MyVector is {}\\n\", v[0]);   }    v.add(21);   v.add(7);   v.add(3);    string s = v;    fmt::print(\"MyVector converted to string is '{}'\\n\", s); ```  ## Possible output   ```txt bool() returns false MyVector is empty bool() returns true First value on MyVector is 42 MyVector converted to string is '42, 21, 7, 3'  ```  ## References  * [RAII](https://web.stanford.edu/class/archive/cs/cs106l/cs106l.1192/lectures/lecture15/15_RAII.pdf)  ","title":"C++ convert operator"},{"id":494,"location":"/til/calendar-with-week-number.html","tags":["calendar","gcal"],"text":" ::: toc  ## gcal installation on Debian  ```shell apt install gcal ```  ## Week number  Week stating on Sunday:  ```shell $ gcal -K -s 7  January 2023  Sunday       1  8 15 22 29    Monday       2  9 16 23 30    Tuesday      3 10 17 24 31    Wednesday    4 11 18 25       Thursday     5 12 19 26       Friday       6 13 20 27       Saturday     7 14 21 28        Week      52/0 01 02 03 04    ```  Week starting on Monday:  ```shell $ gcal -K -s 1  January 2023  Monday          2  9 16 23 30 Tuesday         3 10 17 24 31 Wednesday       4 11 18 25    Thursday        5 12 19 26    Friday          6 13 20 27    Saturday        7 14 21 28    Sunday       1  8 15 22 29     Week      52/0 01 02 03 04 05 ```  ## An alias for convenience  ```shell alias cal='gcal -K -s 1' ```  ## Reference  * [Displaying week's number in certain format using ncal or cal](https://unix.stackexchange.com/questions/29434/displaying-weeks-number-in-certain-format-using-ncal-or-cal) * [Gcal the ultra-powerful command line GNU calendar](https://mostlymaths.net/2010/04/gcal-ultra-powerful-command-line-gnu.html/) ","title":"Calendar with week number"},{"id":495,"location":"/til/vpn-linux.html","tags":["vpn","openvpn"],"text":"::: toc  ## Introduction  ## References  * [How to Make Your Own VPN in Linux in 12 Steps](https://www.wizcase.com/blog/steps-to-build-linux-vpn/) ","title":"vpn-linux"},{"id":496,"location":"/til/dnat-vs-snat.html","tags":["DNAT","SNAT"],"text":"::: toc  ## Introduction  ## References  * [DIFERENÇA ENTRE SNAT E DNAT](https://acervolima.com/diferenca-entre-snat-e-dnat/) * [Use a SNAT (Conversão de Endereços de Rede de Origem) para conexões de saída](https://learn.microsoft.com/pt-br/azure/load-balancer/load-balancer-outbound-connections)  ","title":"DNAT vs SNAT"},{"id":497,"location":"/til/c++_salary.html","tags":["C++","salary","cost-of-living"],"text":"::: toc  ## United State  ### Payscale  ::: figure title=\"Average Entry-Level C++ Developer Salary\" \\ src=\"/til/cpp_salary_entry.webp\" \\ cite=\"https://www.payscale.com/research/US/Job=C%2B%2B_Developer/Salary/a1318960/Entry-Level\"  ::: figure title=\"Average Experienced C++ Developer Salary\" \\ src=\"/til/cpp_salary_experienced.webp\" \\ cite=\"https://www.payscale.com/research/US/Job=C%2B%2B_Developer/Salary/9514e6d8/Experienced\"  ### Glassdoor  ::: figure title=\"How much does a Developer C/C++ make?\" \\ src=\"/til/cpp_salary_glassdoor_all.webp\" \\ cite=\"https://www.glassdoor.com/Salaries/c-developer-salary-SRCH_KO0,11.htm\"  ## Brazil  ::: figure title=\"How much does a Developer C/C++ make in Brazil?\" \\ src=\"/til/cpp_salary_brazil.webp\" \\ cite=\"https://www.glassdoor.com/Salaries/brazil-c-developer-salary-SRCH_IL.0,6_IN36_KO7,18.htm\"  ## Netherlandsi/Eindhoven  ### Payscale  ::: figure title=\"Average C++ Software Engineer Salary in Netherlands\" \\ src=\"/til/cpp_salary_eindhoven_payscale.webp\" \\ cite=\"https://www.payscale.com/research/NL/Job=C%2B%2B_Software_Engineer/Salary\"  ### Glassdoor  ::: figure title=\"How much does a Developer C/C++ make in Eindhoven, Netherlands?\" \\ src=\"/til/cpp_salary_eindhoven_glassdoor.webp\" \\ cite=\"https://www.glassdoor.com/Salaries/c-developer-salary-SRCH_IM1106_KO0,11.htm\"  ### Numbeo  ::: figure title=\"Cost of Living in Eindhoven — Summary\" \\ src=\"/til/cost_of_living_summary_eindhoven.webp\" \\ cite=\"https://www.numbeo.com/cost-of-living/in/Eindhoven?displayCurrency=USD\"  ::: figure title=\"Cost of Living in Eindhoven — Distribution of expenses\" \\ src=\"/til/cost_of_living_distribution_eindhoven.webp\" \\ cite=\"https://www.numbeo.com/cost-of-living/in/Eindhoven?displayCurrency=USD\"   ## Across the world  ::: table title=\"C++ Developer Salary by Country\" \\ cite=\"https://web3.career/web3-salaries/c-plus-plus-developer\" |Country             |Avg Yearly Salary|Min Yearly Salary|Max Yearly Salary| |:-------------------|:---------------:|:---------------:|:---------------:| |Puerto Rico         |$130k            |$130k            |$130k            | |Germany             |$115k            |$115k            |$115k            | |Netherlands         |$90k             |$90k             |$90k             | |United States       |$85k             |$60k             |$135k            | |Belarus             |$80k             |$80k             |$80k             | |Singapore           |$70k             |$70k             |$70k             | |Belgium             |$70k             |$70k             |$70k             | |**Remote**          |**$65k**         |**$10k**         |**$120k**        | |Japan               |$60k             |$60k             |$60k             | |France              |$57k             |$15k             |$100k            | |Israel              |$50k             |$50k             |$50k             | |Philippines         |$15k             |$15k             |$15k             | |China               |$15k             |$15k             |$15k             | |Cameroon            |$15k             |$15k             |$15k             | |United Arab Emirates|$10k             |$10k             |$10k             | |Turkey              |$10k             |$10k             |$10k             | |India               |$10k             |$10k             |$90k             |  ## References  * [Complete C++ developer salary data](https://devskiller.com/c-plus-plus-developer-salary/) * [C++ Developer Salary - Jan 2023](https://web3.career/web3-salaries/c-plus-plus-developer) ","title":"C++ Developer Salary"},{"id":498,"location":"/til/cpp_exception_02.html","tags":["C++","std::exception","std::runtime_error"],"text":" ::: toc  ## Strong and weak exception guarantee  When writing any C++ code, we have essentially four options regarding exceptions:  * we can completely ignore exceptions (no exception guarantee) * we can guarantee that our code does not throw exceptions (noexcept) * we can guarantee that if our code throws, it doesn’t violate any invariants   (weak exception guarantee) * we can guarantee that if our code throws, the state doesn’t change (strong   exception guarantee)  The strong exception guarantee is effectively transactional. Either the operation succeeds, or nothing changes.  The weak exception guarantee permits partial changes (that do not violate invariants).  This topic is complex, and was divided into several parts.  * [01 - Default exception handling](/til/cpp_exception_01.html) * [Exception 02](/til/cpp_exception_02.html) * [Exception 03](/til/cpp_exception_03.html)   ```cpp #include <fmt/core.h>  void uh_oh() noexcept {   fmt::print(\"uh_oh() called\\n\");   throw 1; }  int main() {   try {     uh_oh(); // 💩 this program will abort here.   } catch (const int &e) {     fmt::print(\"The exception was thrown\\n\");  // 💩 not called!   } catch (...) {     fmt::print(\"Unknown exception\\n\");  // 💩 not called!   }   return 0; } ```   Compilation warning:   ```txt exception_02.cpp:5:3: warning: 'uh_oh' has a non-throwing exception specification but can still throw [-Wexceptions]   throw 1;   ^ exception_02.cpp:3:6: note: function declared non-throwing here void uh_oh() noexcept {      ^       ~~~~~~~~ 1 warning generated.  ```  ## Possible output  stdout:   ```txt  ```  stderr:   ```txt terminate called after throwing an instance of 'int' Makefile: Failure on bin/exception_02 execution  ```  ## References  * [Daily bit(e) of C++ | Error handling](https://simontoth.substack.com/p/daily-bite-of-c-error-handling)  ","title":"C++ exception — 02"},{"id":499,"location":"/til/cpp_lock_guard_01.html","tags":["C++","std::lock_guard"],"text":" ::: toc     ```cpp std::mutex mtx;  void print_even(int x) {   if (x % 2 == 0)     std::cout << x << \" is even\\n\";   else     throw(std::logic_error(\"not even\")); }  void print_thread_id(int id) {   try {     // using a local lock_guard to lock mtx guarantees unlocking on destruction     // / exception:     std::lock_guard<std::mutex> lck(mtx);     print_even(id);   } catch (std::logic_error&) {     std::cout << \"[exception caught]\\n\";   } }  int main() {   std::thread threads[10];   // spawn 10 threads:   for (int i = 0; i < 10; ++i) {     threads[i] = std::thread(print_thread_id, i + 1);   }    for (auto& th : threads) {     th.join();   }    return 0; } ```   ## Possible output   ```txt 8 is even [exception caught] [exception caught] [exception caught] 10 is even 2 is even 4 is even 6 is even [exception caught] [exception caught]  ```  ## References  * [cplusplus.com -  ","title":"C++ lock_guard"},{"id":500,"location":"/til/gitui.html","tags":["git","gitui","rust"],"text":"::: toc  ## Introduction  Blazing fast terminal-ui for git written in [rust](/til/tag/rust.html).  ![GitUI screenshot](https://raw.githubusercontent.com/extrawurst/gitui/master/demo.gif)  ## Build and install  Install rust:  ```shell curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh ```  Then install gitui:  ```shell cargo install gitui ```  ## References  * [Github gitui](https://github.com/extrawurst/gitui) ","title":"gitui"},{"id":501,"location":"/til/cpp_exception_01.html","tags":["C++","std::exception","std::runtime_error"],"text":" ::: toc  ## Strong and weak exception guarantee  When writing any C++ code, we have essentially four options regarding exceptions:  * we can completely ignore exceptions (no exception guarantee) * we can guarantee that our code does not throw exceptions (noexcept) * we can guarantee that if our code throws, it doesn’t violate any invariants   (weak exception guarantee) * we can guarantee that if our code throws, the state doesn’t change (strong   exception guarantee)  The strong exception guarantee is effectively transactional. Either the operation succeeds, or nothing changes.  The weak exception guarantee permits partial changes (that do not violate invariants).  This topic is complex, and was divided into several parts.  * [01 - Default exception handling](/til/cpp_exception_01.html) * [Exception 02](/til/cpp_exception_02.html) * [Exception 03](/til/cpp_exception_03.html)   ```cpp #include <fmt/core.h>  #include <stdexcept>  void error_maker() { throw std::runtime_error(\"This is a runtime error.\"); }  int main() {   try {     error_maker();   } catch (std::exception& e) {     fmt::print(\"Failed: {}\\n\", e.what());   }   return 0; } ```   ## Possible output   ```txt Failed: This is a runtime error.  ```  ## References  * [Daily bit(e) of C++ | Error handling](https://simontoth.substack.com/p/daily-bite-of-c-error-handling)  ","title":"C++ exception — 01"},{"id":502,"location":"/til/cpp_trick_01.html","tags":["C++","trick"],"text":" ::: toc    ```cpp #include <iostream> int main() {   int a[3] = {10, 11, 12};   std::cout << 2 [a] << '\\n';   return 0; } ```   In general `2[a]` is identical to `a[2]` and this is guaranteed to be equivalent in both C and C++ (assuming no operator overloading), because as you meantioned it translates into `*(2+a)` or `*(a+2)`, respectively. Because the plus operator is commutative, the two forms are equivalent.  ## Possible output   ```txt 12  ```  ## References  * [Can you amaze me with a C++ trick?](https://www.quora.com/profile/Geraldo-Ribeiro/Can-you-amaze-me-with-a-C-trick) * [Accessing arrays by index[array] in C and C++](https://stackoverflow.com/questions/5073350/accessing-arrays-by-indexarray-in-c-and-c)  ","title":"C++ trick 01"},{"id":503,"location":"/til/git_undo_add.html","tags":["git","git-restore","git-add"],"text":"::: toc  ## Introduction  Git does not automatically include changes in a commit: they have to be explicitly added to the next commit, with the git add command.  But sometimes you might change your mind and decide that a certain file should not be part of the next commit. In this short article, we'll answer the question of how to undo adding a change to the staging area, after having used git add before.  Luckily, there's a simple way of undoing a git add: you can simply use the git restore --staged command on the affected file:  ```shell $ git restore --staged index.html ```  This will remove the file from Git's staging area, making sure it is NOT part of the next commit.  If, at the same time, you also want to **discard any local changes** in this file, you can simply omit the --staged flag:  ```shell $ git restore index.html ```  ::: warning This will **undo any modifications** in this file since you last committed it. Please be careful with this command: **undoing uncommitted local changes cannot be undone!**  ## References  * [How to Undo git add](https://www.git-tower.com/learn/git/faq/undo-git-add) ","title":"git undo add"},{"id":504,"location":"/til/rapoo_keyboard.html","tags":["rapoo","wireless-keyboard"],"text":"::: toc  ## Introduction  ::: warning My wireless keyboard rapoo is not working properly yet.  ```shell echo \"options usbcore autosuspend=-1\" \\   > /etc/modprobe.d/20-usb_stop_autosuspend.conf ```  ## References  * https://forums.opensuse.org/t/wireless-keyboard-input-lagging/142898/13 ","title":"rapoo keyboard lag and ignored keystrokes"},{"id":505,"location":"/til/cpp_shared_ptr_with_deleter.html","tags":["C++","std::shared_ptr","custom-deleter","popen","memory-safe"],"text":" ::: toc    The purpose of `Foo` class is to trace the constructor and destructor calls.   ```cpp struct Foo {   int id{0};   Foo(int i = 0) : id{i} { std::cout << \"✅ Foo::Foo(\" << i << \")\\n\"; }   ~Foo() { std::cout << \"❌ Foo::~Foo(), id=\" << id << '\\n'; } }; ```   The `DeleterFunctor` is a custom functor that will be used to release the objects when it goes out of context.   ```cpp struct DeleterFunctor {   void operator()(Foo* p) const {     std::cout << \"❌ Call delete from function object. Foo::id=\" << p->id               << '\\n';     delete p;   } }; ```   This function wrap a POSIX `fclose` function call. It is used for trace purpose only.   ```cpp int myfclose(FILE* stream) {   std::cout << \"❌ myfclose called\\n\";   return fclose(stream); } ```    ## Context block 1   ```cpp   {     std::cout << \"1) constructor with no managed object\\n\";     std::shared_ptr<Foo> sh1;     if (sh1 == nullptr) {       std::cout << \"sh1 == nullptr\\n\";     } else {       std::cout << \"sh1.id = \" << sh1->id << '\\n';  // never called     }     std::cout << \"==> Context block 1 is going out of context here\\n\";   } ```   Output of context block 1   ```txt 1) constructor with no managed object sh1 == nullptr ==> Context block 1 is going out of context here ```   ## Context block 2   ```cpp   {     std::cout << \"\\n2) constructor with object\\n\";     std::shared_ptr<Foo> sh2(new Foo{10});     std::cout << \"sh2.id = \" << sh2->id << '\\n';     std::cout << \"sh2.use_count(): \" << sh2.use_count() << '\\n';     std::shared_ptr<Foo> sh3(sh2);     std::cout << \"sh3.id = \" << sh3->id << '\\n';     std::cout << \"sh2.use_count(): \" << sh2.use_count() << '\\n';     std::cout << \"sh3.use_count(): \" << sh3.use_count() << '\\n';      sh2->id = 123;     std::cout << \"sh3.id = \" << sh3->id << '\\n';     std::cout << \"==> Context block 2 is going out of context here\\n\";   } ```   Output of context block 2   ```txt 2) constructor with object ✅ Foo::Foo(10) sh2.id = 10 sh2.use_count(): 1 sh3.id = 10 sh2.use_count(): 2 sh3.use_count(): 2 sh3.id = 123 ==> Context block 2 is going out of context here ❌ Foo::~Foo(), id=123 ```   ## Context block 3   ```cpp   {     std::cout << \"\\n3) constructor with object and deleter\\n\";     std::shared_ptr<Foo> sh4(new Foo{11}, DeleterFunctor());     std::shared_ptr<Foo> sh5(new Foo{12}, [](auto p) {       std::cout << \"Call delete from lambda... p->id=\" << p->id << \"\\n\";       delete p;     });     std::cout << \"==> Context block 3 is going out of context here\\n\";   } ```   Output of context block 3   ```txt 3) constructor with object and deleter ✅ Foo::Foo(11) ✅ Foo::Foo(12) ==> Context block 3 is going out of context here Call delete from lambda... p->id=12 ❌ Foo::~Foo(), id=12 ❌ Call delete from function object. Foo::id=11 ❌ Foo::~Foo(), id=11 ```   ## Context block 4   ```cpp   {     std::cout << \"\\n4) constructor with pipe object and deleter (POSIX)\\n\";     // Borrowed from GrUtils::exec()     std::array<char, 128> buffer;     std::string result;     std::shared_ptr<FILE> pipe(popen(\"ls -l shared_ptr_with_deleter.cpp\", \"r\"),                                pclose);  // Flawfinder: ignore      if (!pipe) {       throw std::runtime_error(\"popen() failed!\");     }      while (!feof(pipe.get())) {       if (fgets(buffer.data(), 128, pipe.get()) != nullptr)         result += buffer.data();     }     std::cout << \"ls result: \" << result << '\\n';     std::cout << \"==> Context block 4 is going out of context here\\n\";   } ```   Output of context block 4   ```txt 4) constructor with pipe object and deleter (POSIX) ls result: -rw-r--r-- 1 geraldo geraldo 4821 jan 13 12:04 shared_ptr_with_deleter.cpp  ==> Context block 4 is going out of context here ```   ## Context block 5   ```cpp   {     std::cout << \"\\n5) constructor with pipe object and deleter (POSIX)\\n\";     std::shared_ptr<FILE> file1(fopen(\"/tmp/test1.txt\", \"w\"), fclose);     std::shared_ptr<FILE> file2(fopen(\"/tmp/test2.txt\", \"w\"), myfclose);     std::string s{\"Some text\"};     fwrite(s.c_str(), s.size(), 1, file1.get());     fwrite(s.c_str(), s.size(), 1, file2.get());     std::cout << \"==> Context block 5 is going out of context here\\n\";   } ```   Output of context block 5   ```txt 5) constructor with pipe object and deleter (POSIX) ==> Context block 5 is going out of context here ❌ myfclose called ```   ## Possible output   ```txt 1) constructor with no managed object sh1 == nullptr ==> Context block 1 is going out of context here  2) constructor with object ✅ Foo::Foo(10) sh2.id = 10 sh2.use_count(): 1 sh3.id = 10 sh2.use_count(): 2 sh3.use_count(): 2 sh3.id = 123 ==> Context block 2 is going out of context here ❌ Foo::~Foo(), id=123  3) constructor with object and deleter ✅ Foo::Foo(11) ✅ Foo::Foo(12) ==> Context block 3 is going out of context here Call delete from lambda... p->id=12 ❌ Foo::~Foo(), id=12 ❌ Call delete from function object. Foo::id=11 ❌ Foo::~Foo(), id=11  4) constructor with pipe object and deleter (POSIX) ls result: -rw-r--r-- 1 geraldo geraldo 4821 jan 13 12:04 shared_ptr_with_deleter.cpp  ==> Context block 4 is going out of context here  5) constructor with pipe object and deleter (POSIX) ==> Context block 5 is going out of context here ❌ myfclose called  ```  Content of `/tmp/test1.txt`   ```txt Some text ```  Content of `/tmp/test2.txt`   ```txt Some text ```  ## References  * [cppreference shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr/shared_ptr)  ","title":"C++ shared_ptr with custom deleter"},{"id":506,"location":"/til/elemar-jr.html","tags":["elemar-jr"],"text":"::: toc  ## Introduction  Collectanea of some very useful videos and articles from [Elemar Jr](https://eximia.co/elemarjr/).  ## Algorithms  * Private [Hashtable: o que é e como implementar (Live coding)](https://algoritmoseestrutura.club.hotmart.com/t/page/a4RlmpgD7n) * [Hashtable: o que é e como implementar (Live coding)](https://www.youtube.com/watch?v=spLwmCTvJsI) ","title":"Elemar Jr - Selected links"},{"id":507,"location":"/til/leetcode-patterns.html","tags":["C++"],"text":" https://seanprashad.com/leetcode-patterns/ ","title":"Leetcode patterns"},{"id":508,"location":"/til/cpp_asm_fibo_01.html","tags":["C++","asm","constexpr","optimization"],"text":" ::: toc   The compiler optimization will reduce this function to a single integer value.  ```asm main: \t.cfi_startproc \tmov\teax, 6765   # the result of fib(20) \tret ```   ```cpp // All calculation is done in compilation time constexpr int fib(int n) {   if (n == 1 || n == 2) {     return 1;   } else {     return fib(n - 1) + fib(n - 2);   } } ```      ```cpp int main() {   constexpr int fib20 = fib(20);   return fib20; } ```   ## Assembly code generated  The assembly code generation from C++ code can be achieved by using this `Makefile` generic target:  ```Makefile %.s: %.cpp   $(CXX) -std=c++17 -fverbose-asm -masm=intel -S -Os $^ -o $@ ```   ```asm \t.text \t.intel_syntax noprefix \t.file\t\"asm_fibo_01.cpp\" \t.globl\tmain                            # -- Begin function main \t.type\tmain,@function main:                                   # @main \t.cfi_startproc # %bb.0: \tmov\teax, 6765 \tret .Lfunc_end0: \t.size\tmain, .Lfunc_end0-main \t.cfi_endproc                                         # -- End function \t.ident\t\"Debian clang version 16.0.0 (++20230207073035+7fed09b3a673-1~exp1~20230207073217.19)\" \t.section\t\".note.GNU-stack\",\"\",@progbits \t.addrsig  ```  ## References  * [title](link)  ","title":"C++ constexpr optimization"},{"id":509,"location":"/til/cpp_class_size.html","tags":["C++","class-size","data-alignment","alignas"],"text":" ::: toc    ## Introduction  Data alignment is a key feature in computing on modern computer hardware. The CPU reads and writes to memory most efficiently when the data is naturally aligned, which generally means that the data’s memory address is a multiple of the data size. For instance, in a 32-bit architecture, the data may be aligned if the data is stored in four consecutive bytes and the first byte lies on a 4-byte boundary.  In addition to the performance, data alignment is also the assumption of many programming languages. Even though the programming languages try to take care of data alignment for us as much as possible, some low-level programming languages can have misaligned data access while the behavior is undefined.  ## Data alignment  A memory address $a$ is said to be $n$-byte aligned when $a$ is a multiple of $n$ (where $n$ is a power of 2).  Suppose we have a piece of $m$-byte data and a $n$-byte aligned address. If $m$ is not divisible by $n$, the $m$-byte data will be padded to  $$ \\left\\lfloor\\frac{m+n-1}{n}\\right\\rfloor $$  byte data.  Accessing $k_n+1$, $k_n+2$, $\\cdots$, $(k+1)n$ bytes byte data all have the same latency, because the CPU reads data from memory $n$-byte a time and those data will usually be cached in CPU. That is to say, if the data storing on $n$-byte aligned address whose storage size $m$ is not a multiple of the $n$, some of the memory access bandwidth is wasted.  A memory access is said to be aligned when the data being accessed is $n$ bytes long and the datum address is $n$-byte aligned. When a memory access is not aligned, it is said to be misaligned. Note that by definition one-byte memory accesses are always aligned. Theoretically, it is possible to access on a $n$-byte data on a memory address which is not a multiple of $n$, with much more memory access bandwidth wasted.  However, because C and C++ standards assumed aligned memory access, accessing a misaligned address might result in undefined behaviors. ## Helpers  The helper macro `CHECK_SIZE_AND_ALIGNMENT` is used to display the size of a type or object and check its size and alignment.   ```cpp #define CHECK_SIZE_AND_ALIGNMENT(type, size, alignment)                       \\   cout << setw(70) << \"sizeof(\" #type \") = \" << sizeof(type) << \" | \"         \\        << alignment << endl;                                                  \\   static_assert(sizeof(type) == size,                                         \\                 \"The size of \" #type \" should be equal to \" #size);           \\   static_assert(alignof(type) == alignment, \"The align requirement of \" #type \\                                             \" should be equal to \" #alignment) ```   The standard **new** operator is overrided to print the amount of memory allocated on each call.   ```cpp bool is_new_print_enabled = false; void* operator new(size_t size) {   if (is_new_print_enabled) {     cout << \"Allocating \" << size << \" bytes\\n\";   }   return malloc(size); } ```   The standard **delete** operator is overrided to show when it is called.   ```cpp // void operator delete(void* memory) { //   if (is_new_print_enabled) { //     cout << \"Deallocating memory from \" << memory << \"\\n\"; //   } //   free(memory); // } ```   ## Empty class/struct — size: 1, align: 1  Empty `class/struct` must require **ONE** byte of memory to make then distinguishable.   ```cpp   struct EmptyStruct {};   CHECK_SIZE_AND_ALIGNMENT(EmptyStruct, 1, 1);   static_assert(sizeof(EmptyStruct) == 1,                 \"The size of an empty struct should be equal to 1\"); ```      ```cpp   class EmptyClass {};   CHECK_SIZE_AND_ALIGNMENT(EmptyClass, 1, 1);   static_assert(sizeof(EmptyStruct) == 1,                 \"The size of an empty class should be equal to 1\");   EmptyClass ea, eb;   static_assert(&ea != &eb,                 \"The address of two empty class should be distinguishable\"); ```      ```cpp   class EmptyClassWithDefaultConstructor {    public:     EmptyClassWithDefaultConstructor() = default;   };   CHECK_SIZE_AND_ALIGNMENT(EmptyClassWithDefaultConstructor, 1, 1); ```      ```cpp   class EmptyClassWithDefaultConstructorAndDestructor {    public:     EmptyClassWithDefaultConstructorAndDestructor() = default;     ~EmptyClassWithDefaultConstructorAndDestructor() = default;   };   CHECK_SIZE_AND_ALIGNMENT(EmptyClassWithDefaultConstructorAndDestructor, 1, 1); ```      ```cpp   class EmptyClassWithDefaultConstructorAndVirtualDestructor {    public:     EmptyClassWithDefaultConstructorAndVirtualDestructor() = default;     virtual ~EmptyClassWithDefaultConstructorAndVirtualDestructor() = default;   };   CHECK_SIZE_AND_ALIGNMENT(EmptyClassWithDefaultConstructorAndVirtualDestructor,                            8, 8); ```   ::: tip If there are at least one virtual function the 8 bytes of the virtual table will be prepended into the class.   ![Memory usage by EmptyClassWithDefaultConstructorAndVirtualDestructor.](/til/cpp_empty_class_virtual.svg)   ## Union — many attributes on same memory location    ```cpp   typedef union {     char a;     int b;   } a_union_t;   CHECK_SIZE_AND_ALIGNMENT(a_union_t, 4, 4);   cout << \"Offset of a_union_t::a \" << offsetof(a_union_t, a) << endl;  // 0   cout << \"Offset of a_union_t::b \" << offsetof(a_union_t, b) << endl;  // 0 ```   ![Memory usage by a_union_t.](/til/cpp_a_union_t.svg)   ## Default member size alignment   ```cpp   typedef struct {     char a;     int b;   } b_struct_t;   CHECK_SIZE_AND_ALIGNMENT(b_struct_t, 8, 4);    cout << \"Offset of b_struct_t::a \" << offsetof(b_struct_t, a) << endl;  // 0   cout << \"Offset of b_struct_t::b \" << offsetof(b_struct_t, b) << endl;  // 4 ```   ![Memory usage by b_struct_t.](/til/cpp_b_struct_t.svg)     ```cpp   class c_class {    public:     char a;     int b;     int f1() { return 1; }     int f2() { return 2; }     int f3() { return 3; }     int f4() { return 4; }   };   CHECK_SIZE_AND_ALIGNMENT(c_class, 8, 4);   cout << \"Offset of c_class::a \" << offsetof(c_class, a) << endl;  // 0   cout << \"Offset of c_class::b \" << offsetof(c_class, b) << endl;  // 4 ```   ::: tip Functions does not changes the class size.   ![Memory usage by c_class.](/til/cpp_c_class.svg)    ```cpp   class d_class {    public:     char a;     int b;     virtual ~d_class(){};   };   CHECK_SIZE_AND_ALIGNMENT(d_class, 16, 8);   // warning: offset of on non-standard-layout type 'd_class'   // [-Winvalid-offsetof]   // cout << \"Offset of d_class::a \" << offsetof(d_class, a) << endl;  // ?   // cout << \"Offset of d_class::b \" << offsetof(d_class, b) << endl;  // ?   //   // *** Dumping AST Record Layout   //          0 | class d_class   //          0 |   (d_class vtable pointer)   //          8 |   char a   //         12 |   int b   //            | [sizeof=16, dsize=16, align=8,   //            |  nvsize=16, nvalign=8] ```   ::: tip The `virtual` keyword include a virtual table attribute.   ![Memory usage by d_class.](/til/cpp_d_class.svg)      ```cpp   class e_class {    public:     char a;     int b;     ~e_class(){};   };   CHECK_SIZE_AND_ALIGNMENT(e_class, 8, 4);   cout << \"Offset of e_class::a \" << offsetof(e_class, a) << endl;  // ?   cout << \"Offset of e_class::b \" << offsetof(e_class, b) << endl;  // ?   //   // *** Dumping AST Record Layout   //          0 | class e_class   //          0 |   char a   //          4 |   int b   //            | [sizeof=8, dsize=8, align=4,   //            |  nvsize=8, nvalign=4] ```    ![Memory usage by e_class.](/til/cpp_e_class.svg)      ```cpp   class f_class {    public:     char a;   // 4     int b;    // 4     float c;  // 4     ~f_class(){};   };   CHECK_SIZE_AND_ALIGNMENT(f_class, 12, 4);    is_new_print_enabled = true;   {     auto f_class_obj_1 = new f_class;             // Allocating 12 bytes     auto f_class_obj_2 = make_unique<f_class>();  // Allocating 12 bytes     auto f_class_obj_3 = make_shared<f_class>();  // Allocating 32 bytes      cout << \"Offset of f_class::a \" << offsetof(f_class, a) << endl;  // 0     cout << \"Offset of f_class::b \" << offsetof(f_class, b) << endl;  // 4     cout << \"Offset of f_class::c \" << offsetof(f_class, c) << endl;  // 8      delete f_class_obj_1;   }   is_new_print_enabled = false; ```    ![Memory usage by f_class.](/til/cpp_f_class.svg)      ```cpp   class g_class {    public:     char a;     int b;     float c;     double d;     char e;     char f;     ~g_class(){};   };   CHECK_SIZE_AND_ALIGNMENT(g_class, 32, 8);    cout << \"Offset of g_class::a \" << offsetof(g_class, a) << endl;  // 0   cout << \"Offset of g_class::b \" << offsetof(g_class, b) << endl;  // 4   cout << \"Offset of g_class::c \" << offsetof(g_class, c) << endl;  // 8   cout << \"Offset of g_class::d \" << offsetof(g_class, d) << endl;  // 16   cout << \"Offset of g_class::e \" << offsetof(g_class, e) << endl;  // 24   cout << \"Offset of g_class::f \" << offsetof(g_class, f) << endl;  // 25 ```    ![Memory usage by g_class.](/til/cpp_g_class.svg)  ::: tip Is possible to save memory by reorder the attributes on class.    ```cpp   class g2_class {    public:     char a;     char e;     char f;     int b;     float c;     double d;     ~g2_class(){};   };   CHECK_SIZE_AND_ALIGNMENT(g2_class, 24, 8);   cout << \"Offset of g2_class::a \" << offsetof(g2_class, a) << endl;  // 0   cout << \"Offset of g2_class::b \" << offsetof(g2_class, b) << endl;  // 4   cout << \"Offset of g2_class::c \" << offsetof(g2_class, c) << endl;  // 8   cout << \"Offset of g2_class::d \" << offsetof(g2_class, d) << endl;  // 16   cout << \"Offset of g2_class::e \" << offsetof(g2_class, e) << endl;  // 1   cout << \"Offset of g2_class::f \" << offsetof(g2_class, f) << endl;  // 2 ```    ![Memory usage by g2_class.](/til/cpp_g2_class.svg)   ## Force alignment   ```cpp   struct float4_4_t {     float data[4];   };   CHECK_SIZE_AND_ALIGNMENT(float4_4_t, 16, 4);   float4_4_t f4;   for (int i = 0; i < 4; ++i) {     cout << \"Offset float4_4_t[\" << i          << \"] = \" << long(&f4.data[i]) - long(&f4) << endl;   }   // Offset float4_4_t[0] = 0   // Offset float4_4_t[1] = 4   // Offset float4_4_t[2] = 8   // Offset float4_4_t[3] = 12 ```    ![Memory usage by float4_4_t.](/til/cpp_float4_4_t.svg)    ```cpp   // Every object of type float4_32_t will be aligned to 32-byte boundary.   // Might be useful for SIMD instructions.   struct alignas(32) float4_32_t {     float data[4];   };   CHECK_SIZE_AND_ALIGNMENT(float4_32_t, 32, 32);   float4_32_t f32;   for (int i = 0; i < 4; ++i) {     cout << \"Offset float4_32_t[\" << i          << \"] = \" << long(&f32.data[i]) - long(&f32) << endl;   }   // Offset float4_32_t[0] = 0   // Offset float4_32_t[1] = 4   // Offset float4_32_t[2] = 8   // Offset float4_32_t[3] = 12 ```    ![Memory usage by float4_32_t.](/til/cpp_float4_32_t.svg)   ## Memory Allocation  According to the [GNU  the address of a block returned by malloc or realloc in GNU systems is always a multiple of eight (or sixteen on 64-bit systems). The default memory address alignment of array is determined by the alignment requirement of the element.  It is possible to use custom data alignment for allocated static memory and dynamic memory. `alignas(T)` can be used to specify the byte alignment of an static array and aligned_alloc can be used to specify the byte alignment of a buffer on dynamic memory.   ```cpp   struct S1 {     unsigned char buf1[sizeof(int) / sizeof(char)];   };   CHECK_SIZE_AND_ALIGNMENT(S1, 4, 1);   struct S2 {     alignas(int) unsigned char buf2[sizeof(int) / sizeof(char)];   };   CHECK_SIZE_AND_ALIGNMENT(S2, 4, 4); ```   ## Virtual table  For every class that contains virtual functions, the compiler constructs a virtual table, a.k.a vtable. The vtable contains an entry for each virtual function accessible by the class and stores a pointer to its definition. Only the most specific function definition callable by the class is stored in the vtable. Entries in the vtable can point to either functions declared in the class itself, or virtual functions inherited from a base class.    ```cpp   class B {    public:     B() { puts(\"This is B's constructor\"); }     virtual ~B() { puts(\"This is B's destructor\"); }     virtual void bar() { puts(\"This is B's implementation of bar\"); }     virtual void qux() { puts(\"This is B's implementation of qux\"); }   };    class C : public B {    public:     C() { puts(\"This is C's constructor\"); }     virtual ~C() { puts(\"This is C's destructor\"); }     void bar() override { puts(\"This is C's implementation of bar\"); }   };    B* b = new C();   b->bar();   delete b;    // This is B's constructor   // This is C's constructor   // This is C's implementation of bar   // This is C's destructor   // This is B's destructor ```   ![Virtual table example.](/til/cpp_virtual_table_BC.svg)   Note that the vpointer is just another class member added by the compiler and increases the size of every object that has a vtable by sizeof(vpointer).  Hopefully you have grasped how dynamic function dispatch can be implemented by using vtables: when a call to a virtual function on an object is performed, the vpointer of the object is used to find the corresponding vtable of the class. Next, the function name is used as index to the vtable to find the correct (most specific) routine to be executed.  ## Virtual destructor  ::: tip By now it should also be clear why it is always a good idea to make destructors of base classes virtual. Since derived classes are often handled via base class references, declaring a non-virtual destructor will be dispatched statically, obfuscating the destructor of the derived class.   ## Possible output   ```txt                                                 sizeof(EmptyStruct) = 1 | 1                                                  sizeof(EmptyClass) = 1 | 1                            sizeof(EmptyClassWithDefaultConstructor) = 1 | 1               sizeof(EmptyClassWithDefaultConstructorAndDestructor) = 1 | 1        sizeof(EmptyClassWithDefaultConstructorAndVirtualDestructor) = 8 | 8                                                   sizeof(a_union_t) = 4 | 4 Offset of a_union_t::a 0 Offset of a_union_t::b 0                                                  sizeof(b_struct_t) = 8 | 4 Offset of b_struct_t::a 0 Offset of b_struct_t::b 4                                                     sizeof(c_class) = 8 | 4 Offset of c_class::a 0 Offset of c_class::b 4                                                     sizeof(d_class) = 16 | 8                                                     sizeof(e_class) = 8 | 4 Offset of e_class::a 0 Offset of e_class::b 4                                                     sizeof(f_class) = 12 | 4 Allocating 12 bytes Allocating 12 bytes Allocating 32 bytes Offset of f_class::a 0 Offset of f_class::b 4 Offset of f_class::c 8                                                     sizeof(g_class) = 32 | 8 Offset of g_class::a 0 Offset of g_class::b 4 Offset of g_class::c 8 Offset of g_class::d 16 Offset of g_class::e 24 Offset of g_class::f 25                                                    sizeof(g2_class) = 24 | 8 Offset of g2_class::a 0 Offset of g2_class::b 4 Offset of g2_class::c 8 Offset of g2_class::d 16 Offset of g2_class::e 1 Offset of g2_class::f 2                                                  sizeof(float4_4_t) = 16 | 4 Offset float4_4_t[0] = 0 Offset float4_4_t[1] = 4 Offset float4_4_t[2] = 8 Offset float4_4_t[3] = 12                                                 sizeof(float4_32_t) = 32 | 32 Offset float4_32_t[0] = 0 Offset float4_32_t[1] = 4 Offset float4_32_t[2] = 8 Offset float4_32_t[3] = 12                                                          sizeof(S1) = 4 | 1                                                          sizeof(S2) = 4 | 4 This is B's constructor This is C's constructor This is C's implementation of bar This is C's destructor This is B's destructor  ```  ## References  * ▶️[Track MEMORY ALLOCATIONS the Easy Way in C++](https://youtu.be/sLlGEUO_EGE) * ▶️[Classes part 18 - Understanding the vtable (Popular interview question) Modern Cpp Series](https://youtu.be/hS7kPtVB1vI) * 🚀[C++ Data Alignment](https://leimao.github.io/blog/CPP-Data-Alignment/) * 🚀[Understandig Virtual Tables in C++](https://pabloariasal.github.io/2017/06/10/understanding-virtual-tables/)  ","title":"C++ class size"},{"id":510,"location":"/til/cpp_switch_01.html","tags":["C++","switch"],"text":" ::: toc    ## Possible output   ```txt f2() f3()  ```  ## References  * [5 Secrets of the Switch    Statement](https://medium.com/@bartobri/5-secrets-of-the-switch-statement-633953b2e741) * [title](link) * [title](link)  ","title":"C++ switch"},{"id":511,"location":"/til/pikchr.html","tags":["pikchr","pic","dpic","text-driven-diagram","svg","diagram"],"text":"::: toc  ## Introduction  **Pikchr** (pronounced like \"picture\") is a PIC-like markup language for diagrams in technical documentation. Pikchr is designed to be embedded in [fenced code blocks](https://spec.commonmark.org/0.29/#fenced-code-blocks) of Markdown (or in similar mechanisms in other markup languages) to provide a convenient means of showing diagrams.  A **pikchr fork** with some new objects can be found at <https://github.com/geraldolsribeiro/pikchr>:  * `image`: incorporate external files into diagram. * `link`: create a box with hyperlink to an URL  A online editor at <https://pikchr.org/home/pikchrshow>.  ## Sample  ::: pikchr src=\"/til/pikchr_sample.svg\" title=\"Pikchr sample from official documentation.\" topmargin += 1mm margin = 5mm arrow right 200% \"Markdown\" \"Source\" box rad 10px \"Markdown\" \"Formatter\" \"(markdown.c)\" fit arrow right 200% \"HTML+SVG\" \"Output\" arrow <-> down 70% from last box.s box same \"Pikchr\" \"Formatter\" \"(pikchr.c)\" fit  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_sample.pikchr  ## Image  ::: pikchr src=\"/til/pikchr_image.svg\" title=\"Image object.\" FF: image \"/icon/firefox.svg\" width 1 height 1 arrow image \"/icon/chrome.svg\" width 1 height 1 arrow image \"/icon/brave.svg\" width 1 height 1 down arrow down then right until even with FF then up  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_image.pikchr  ## Link  ::: pikchr src=\"/til/pikchr_link.svg\" title=\"Link object.\" box width 1 height 1 link \"id1\" \"Google\" \"https://google.com\" width 64px height 64px  box width 1 height 1 link \"id2\" \"Disney\" \"https://disney.com\" width 32px height 32px box width 1 height 1 link \"id3\" \"Amazon\" \"https://amazon.com\" width 1 height 1 fill blue box width 1 height 1 link \"id4\" \"Geraldo\" \"https://geraldo.dev\"  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_link.pikchr  ## Link with image  ::: pikchr src=\"/til/pikchr_link_02.svg\" title=\"Link object with image object\" FF: image \"/icon/firefox.svg\" \"https://www.mozilla.org/firefox/\" width 1 height 1 arrow image \"/icon/chrome.svg\" \"https://www.google.com/chrome/\" width 1 height 1 arrow image \"/icon/brave.svg\" \"https://brave.com/\" width 1 height 1 down arrow down then right until even with FF then up  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_link_02.pikchr  ## Ark  This is my attempt to provide a more precise `arc` command.  ::: pikchr src=\"/til/pikchr_ark.svg\" title=\"Ark\" margin = 0.1 // Axis line from 0,0 to 0,2 color purple line from 0,0 to 2,0 color purple // Approximate circle with 4 arcs arcrad = 2 arc to 0,2 color red arc to -2,0 color green arc to 0,-2 color orange arc to 2,0 color blue // Macro ark(radius, startAngle, endAngle) define ark {   ArkCenter: text   $arkNumberOfSegments = 5   $arkSegmentAngle = ($3-$2)/$arkNumberOfSegments   ArkP1: line invisible from ArkCenter go $1 heading $2   ArkP2: line invisible from ArkCenter go $1 heading $2+1*$arkSegmentAngle   ArkP3: line invisible from ArkCenter go $1 heading $2+2*$arkSegmentAngle   ArkP4: line invisible from ArkCenter go $1 heading $2+3*$arkSegmentAngle   ArkP5: line invisible from ArkCenter go $1 heading $2+4*$arkSegmentAngle   ArkP6:line invisible from ArkCenter go $1 heading $3   spline from ArkP1.end to ArkP2.end to ArkP3.end to ArkP4.end to ArkP5.end to ArkP6.end $4   move to ArkCenter } // Sample move to 0,0 ark(0.9, 0, 90, color red) ark(0.8, 0, 90) ark(0.7, 0, 90, dashed color green ->) ark(0.6,45,90, <-> thin) ark(1.5,30,60) ark(1.95, 0, 90, color red dotted) ark(1.95, 90, 180, color blue dotted) ark(1.95, 180, 270, color orange dotted) ark(1.95, 270, 360, color green dotted)  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_ark.pikchr  ## Mable diagram  ::: pikchr src=\"/til/pikchr_marble.svg\" title=\"Marble diagram\" circlerad = 0.1 linewid = 0.2 marble_color = red define marble { circle $1 color marble_color } define mark {   LE: last.end;   line from LE + (0,0.05) to LE - (0,0.05) then to LE } define stop {   LE: last.end;   line from LE - (0.05,0.05) to LE + (0.05,0.05);   line from LE - (0.05,-0.05) to LE + (0.05,-0.05);   move to LE } define mc { marble_color = $1 } define mr { marble_color = red; marble $1 } define mg { marble_color = green; marble $1 } define my { marble_color = yellow; marble $1 } // ------ S: dot; line; mr \"1\"; line width 0.6; mg \"3\"; line; mark; arrow // ------ move to S - (0,0.3) dot; line width 0.6; my \"2\"; line width 0.6; stop; arrow // ------ move to S - (0,0.8) dot; line; mr \"1\"; line; my \"2\"; line; mg \"3\"; line; mark; arrow  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_marble.pikchr  ## Filled Polygon  ::: tip The keyword `close` converts the line into a polygon.  ::: pikchr src=\"/til/pikchr_polygon.svg\" title=\"Filled polygon\" margin = 5mm; text \"Start here\"  dot color green width 200% # heading zero == north line thin thin go 6cm heading 60 then down 3cm close fill DarkViolet  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_polygon.pikchr  ::: pikchr src=\"/til/pikchr_triangle.svg\" title=\"Filled polygon fail\" A: (  0, sqrt(3/4)) B: (  0.5, 0) C: ( -0.5, 0) margin = 5mm; line from A to B then to C then to A # fill Brow # 💩 WITHOUT CLOSE IGNORED FILL circle rad 0.1 at A fill Aqua circle rad 0.1 at B fill blue circle rad 0.1 at C fill green  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_triangle.pikchr  ::: tip The `then` keyword continue positioning without drawing a line.  ::: tip The `close` keyword changes the last line `end` position.  ::: pikchr src=\"/til/pikchr_arrow.svg\" title=\"Arrow\" margin = 10mm; dot color blue line right 2cm then down .5cm then up 1cm right 1cm \\    then up 1cm left 1cm then down .5cm then left 2cm \\    close \"with 'close'\" dot color red at last line.end \\ move to 2.5cm south of last line.start line right 2cm then down .5cm then up 1cm right 1cm \\    then up 1cm left 1cm then down .5cm then left 2cm \\    then down 1cm \"without 'close'\" dot color red at last line.end  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_arrow.pikchr  ## Macro  ::: warning <https://pikchr.org/home/forumpost/83e98ec009>: Once created, a macro cannot be redefined. If you attempt to redefine a macro by providing a second \"define\" statement with the same macro name, the macro name will be replaced by the previous macro body definition during lexical analysis, likely resulting in a syntax error.  ::: pikchr src=\"/til/pikchr_macro_flag.svg\" title=\"Pikchr macro flag\" CP: dot invisible; \\ define flag {      line go 1.5 heading $flagAngle \\     then go 0.5 heading $flagAngle + 110 \\     then go 0.5 heading $flagAngle + 250 color $color;     move to CP; } margin = 10mm; $flagAngle = 00; $color=red;   flag; $flagAngle = 30; $color=blue;  flag; $flagAngle = 60; $color=green; flag;  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_macro_flag.pikchr  ::: tip When parameters are present, they are substituted in the macro body in place of `$1`, `$2`, ..., `$9` in the macro body.  ::: pikchr src=\"/til/pikchr_macro_with_parameter.svg\" title=\"Pikchr macro with parameters\" define mybox { move right 10mm; dot color blue;   box width $1 height $2 radius 2mm color $3; box $4 width ($1-3mm) height ($2-3mm) at last box radius 1mm; box width ($1-6mm) height ($2-6mm) at last box; } margin = 10mm mybox(3cm, 4cm, red, \"text1\") mybox(2cm, 1cm, blue, \"text2\") mybox(4cm,4cm, yellow, \"text3\")  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_macro_with_parameter.pikchr  ## UTF-8 characters  ::: pikchr src=\"/til/pikchr_utf_8_character.svg\" title=\"Pikchr UTF-8 character\" margin = 1cm P1: (0,0) P2: (4cm,3cm) P3: (4cm,0) line from P1 to P2 to P3 close dashed thin thin fill purple line invisible from P1 to P2 \"☕☕\" above aligned big line invisible from P2 to P3 \" ✍\" ljust big line invisible from P1 to P3 \"🍕\" below big dot at P1 fill red dot at P2 fill blue dot at P3 fill green box with .sw at (-1cm,-1cm) width 6cm height 5cm thin color brown radius 2mm move to (0cm,3cm) Caption: text \"🔵🔴🟠🟡🟢🟣🟤\" \"🟦🟥🟧🟨🟩🟪🟫\" \"🛑🔶🔷🔸🔹🔺🔻\"  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_utf_8_character.pikchr  ## Trigonometric functions  ::: info Zero heading == North  ::: info **sin** and **cos** assumes radian as its argument  ::: pikchr src=\"/til/pikchr_trig.svg\" title=\"Trigonometric functions\" pi = 3.141592  # define a constant a = sin(pi)    # 0 b = cos(pi)    # 1 c = abs(-pi)   # 3.141592 d = int(pi)    # 3 e = sqrt(25)   # 5 \\ define trigCircle {   circle radius 1 color gray   arrow from (0,-1.2) to (0,1.2) color gray   arrow from (-1.2,0) to (1.2,0) color gray } \\ define angHor  {   arrow from (0,0) to (sin((90-$1)*pi/180),cos((90-$1)*pi/180)) color purple   text $2 color purple } \\ define angVert {   arrow from (0,0) to (sin($1*pi/180),cos($1*pi/180)) color green thin thin   text $2 above rjust color green } \\ trigCircle angHor( 30, \"30⁰ = 60 from N\" ) angHor( 20, \"20⁰ = 70 from N\" ) angHor( 10, \"10⁰ = 80 from N\" ) angVert( 10, \"10⁰\" ) angVert( 20, \"20⁰\" ) angVert( 30, \"30⁰\" ) angVert( 40, \"40⁰\" ) angVert( 50, \"50⁰\" ) \\ arrow from (0,0) to (b,a) \"Pi\" above color red thick thick  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_trig.pikchr  ::: pikchr src=\"/til/pikchr_circle_chop.svg\" title=\"Pikchr circle chop\" margin =  1cm circlerad = 3mm circle \"a\" color brown circle \"b\" at 1st circle + (-0.4, -0.6) color green circle \"c\" at 1st circle + (0.4, -0.6) color cyan arrow from 1st circle to 2nd circle chop color purple arrow from 1st circle to 3rd circle chop color purple  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_circle_chop.pikchr  ::: pikchr src=\"/til/pikchr_path_division.svg\" title=\"Pikchr path division\" margin = 1cm box width 1cm height 3cm arrow right from 0 <last box.ne, last box.se> color red \"0\" small small above arrow right from 1/3 of the way between last box.ne and last box.se color orange \"1/3\" small small above arrow right from 2/3 <last box.ne, last box.se> color blue \"2/3\" small small above arrow right from 1 <last box.ne, last box.se> color green \"1\" small small above \\ P1: (3cm,-15mm) P2: (4cm,1.5cm) P3: (8cm,-15mm) P4: (4.5cm,1.5cm) \\ dot at P1 \"P1\" below rjust dot at P2 \"P2\" above rjust dot at P3 \"P3\" below ljust dot at P4 \"P4\" above ljust \\ L1: line from P1 to P2 L2: line from P3 to P4 \\ arrow from 1/3 <P1, P2> to 1/3 <P3, P4> color blue arrow from 2/3 <P1, P2> to 2/3 <P3, P4> color orange  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_path_division.pikchr  ::: pikchr src=\"/til/pikchr_spline.svg\" title=\"Pikchr spline\" margin = 1cm line dashed right 1 then down .5 left 1 then right 1 thin thin spline from start of last line right 1 then down .5 left 1 then right 1 color orange  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_spline.pikchr  ::: pikchr src=\"/til/pikchr_block.svg\" title=\"Pikchr block\" box \"1\" width 4cm height 4mm A: [   box \"2\" height 6mm width 2cm color green;    arrow \"3\" above width 1cm   box \"4\" width 4cm height 1cm color blue   arrow right 1cm down 1cm \"5\" above ] with .n at last box.s - (0,15mm) \\ dot at last [].w \"w \" rjust  color red dot at last [] \"c\" below  color red dot at last [].e \" e\" ljust color red dot at last [].n \"n\" above color red dot at last [].s \"s\" below color red dot at last [].sw \"sw\" below color red dot at last [].nw \"nw\" above color red dot at last [].se \"se\" below color red dot at last [].ne \"ne\" above color red \\ box with .sw at A.sw - (5mm,5mm) width (A.width + 10mm) height (A.height + 10mm) thin thin color orange dotted  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_block.pikchr  ::: pikchr src=\"/til/pikchr_sub_block.svg\" title=\"Pikchr sub-block\" margin = 1cm X: [   Y: [     down     R: box width 5mm height 5mm color red      G: box width 5mm height 5mm color green     B: box width 5mm height 5mm color blue   ]   Z: [     move right 8cm up 0mm     # up last direction     A: box width 2cm height 5mm color orange \"X.Z.A\"     move up 1mm     B: box width 2cm height 5mm color brown \"X.Z.B\"     move up 1mm     C: box width 2cm height 5mm color orange \"X.Z.C\"   ]   W: [     move right 16cm down 0mm     A: box width 2cm height 5mm color orange \"X.W.A\"     move down 1mm     B: box width 2cm height 5mm color brown \"X.W.B\"     move down 1mm     C: box width 2cm height 5mm color orange \"X.W.C\"   ] ] \\ arrow from X.Y.R right \"R\" above arrow from X.Y.G left \"G\" above arrow from X.Y.B down \" B\" ljust \\ arrow from X.Y.B to X.Z.A chop color purple arrow from X.Y.B to X.Z.C.w chop color purple arrow from X.Z.C.e right 5mm then down until even with X.Z.B.e then to X.Z.B.e  \\ line from X.Z.C to X.W.C thin thin dotted arrow <-> from X.Z.A to X.W.A color blue chop  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_sub_block.pikchr  ::: pikchr src=\"/til/pikchr_arc.svg\" title=\"Pikchr arc\" define r { line 50%; arc; line; arc cw; line; arc cw; line; arc; line 50% } color = blue r  color = green r color = red r color = orange r color = purple spline -> from (0,0) then to (4,1) then to (8,0) spline -> from (0,0) then to (4,1.5) then to (8,0) spline -> from (0,0) then to (4,2) then to (8,0)  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_arc.pikchr  ## Some digrams on internet  ::: pikchr src=\"/til/pikchr_tailscale_diagram.svg\" title=\"Pikchr tailscale diagram. Adapted from https://zellyn.com/2022/02/tailscale-diagram-in-pikchr/\" topmargin = 1 fontscale = 3 color = 0xc65835 # Orange \\ define $boxlet {   oval at -0.18,0 height 0.75 width 0.33 color none fill 0xd6d6d6   box same as last at -0.12,0.28 height 0.2 width 0.2 radius 0   box at 0,0 height 1 width 1 color none fill 0x343433 radius 0.2 behind last box } \\ define $wall {   box at 0,0 height 3.1 width 0.76 color none fill 0x496495   line from -0.38*$1,0.34 to $1*0.38,0.16 to $1*0.38,-0.16 to -0.38*$1,-0.34 close color none fill 0xaec0e0 } \\ define $wall_info {   text at last.n + (0.0, 0.5) color 0x496495 $2 bold   circle at last.n + (0.0,0.3) radius 0.25 thickness 0.05 color 0x5a79a6   line from (last.x-$1*0.11,last circle.c.y) \\     right $1*0.22 then \\     up $1*0.11 left $1*0.11 then \\     down $1*0.11 right $1*0.11 then \\     down $1*0.11 left $1*0.11 then \\     up $1*0.11 right $1*0.11 \\     color 0x496495 thickness 0.05 } \\ define $area {   box at ($1,$2) width $3 height $4 color none fill 0xf9f9f8 radius 0.2 } \\ # Servers \\ $area(0.55,0,5.2,3.1) \\ WS1: [ $boxlet() ] at (0, 0) text at last.n + (0.0, 0.1) color 0x595857 \"VPN Client\" above text at last.s - (0.0, 1) color 0x030303 $2 \"Workstation\" below \\ $area(0,-5.25,4.1,3.1) $area(2.83,-5.25,0.8,3.1) \\ WS2: [ $boxlet() ] at (0, -5.25) text at last.n + (0.0, 0.1) color 0x595857 \"VPN Client\" above text at last.s - (0.0, 1) color 0x030303 \"Workstation\" below \\ $area(8.3,-2.3,6,5.25) \\ HUB: [ $boxlet() ] at (8.3, -2.4) text at last.n + (0.0, 0.1) color 0x595857 \"VPN Hub\"  above text at last.s - (0.0, 1.78) color 0x030303 \"Server\" below \\ $area(16.10,HUB.c.y,4.1,3.1) $area(13.27,HUB.c.y,0.8,3.1) \\ WS3: [ $boxlet() ] at (16.10, HUB.c.y) text at last.n + (0.0, 0.1) color 0x595857 \"VPN Client\"  above text at last.s - (0.0, 1) color 0x030303 \"EC2 VM\" below \\ [ $wall(1) ] at (3.20,0) $wall_info(1, \"Windows Firewall\") \\ [ $wall(1) ] at (3.2,-5.25) $wall_info(1, \"Office Firewall\") \\ [ $wall(-1) ] at (12.9,HUB.c.y) $wall_info(-1, \"AWS\" bold \"Security Group\" bold \"\") \\ dot at WS1.e radius 0.05 dot at WS2.e radius 0.05 dot at WS3.w radius 0.05 \\ line from WS1.e right 4 then down until even with (0,HUB.y+0.2) right 2.3 then right until even with (HUB.w-0.03,0) thickness 0.04 radius 1 line up 0.15 left 0.15 down 0.15 right 0.15 down 0.15 left 0.15 up 0.15 right 0.15 thickness 0.04 \\ line from WS2.e right 4 then up until even with (0,HUB.y-0.2) right 2.3 then right until even with (HUB.w-0.03,0) thickness 0.04 radius 1 line up 0.15 left 0.15 down 0.15 right 0.15 down 0.15 left 0.15 up 0.15 right 0.15 thickness 0.04 \\ line from WS3.w to 0.03 right of HUB.e thickness 0.04 line up 0.15 right 0.15 down 0.15 left 0.15 down 0.15 right 0.15 up 0.15 left 0.15 thickness 0.04  The figure above was generated by the following code:  ::: include shell src/static_src/til/pikchr_tailscale_diagram.pikchr  ## References  * 🚀 <https://github.com/geraldolsribeiro/pikchr> * [Pikchr User Manual](https://pikchr.org/home/doc/trunk/doc/userman.md) * [In Praise of Pic (and pikchr)](https://janert.me/guides/praise-of-pic/) * [HTML colors](https://geraldo.dev/til/html-colors.html) ","title":"pikchr"},{"id":512,"location":"/til/cpp_move_semantics.html","tags":["C++","move_semantics","std::move"],"text":" ::: toc     ```cpp   string s1{\"Content of s1 variable\"};   string s2{\"Content of s2 variable\"};   string s3{\"Content of s3 variable\"};    auto prints = [&](const string &title) {     cout << '\\n' << title << '\\n';     cout << \"s1: \" << s1 << '\\n';     cout << \"s2: \" << s2 << '\\n';     cout << \"s3: \" << s3 << endl;   };    prints(\"Initial state\");   s1 = s2;   prints(\"s1 = s2\");    s1 = std::move(s3);   prints(\"s1 = std::move(s3)\");    // equivalent to move assigment   s1 = static_cast<string &&>(s2);   prints(\"s1 = static_cast<string&&>(s2)\"); ```     ```cpp   class Data {    private:     // a raw pointer to my data     int *data;     string trackId;     public:     Data(int d, string tId) {       data = new int;  // heap allocation       *data = d;       trackId = tId;       fmt::print(\"Data Constructor {} {}\\n\", *data, trackId);     }      ~Data() {       if (data != nullptr) {         fmt::print(\"Data Destructor {} {}\\n\", *data, trackId);         delete data;       } else {         fmt::print(\"Data Destructor nullptr\");       }     }      // unnecessary copy and inefficiently memory management     Data(const Data &source) : Data{*source.data, \"copy-constructor\"} {       fmt::print(\"Data Copy Constructor {} {}\\n\", *data, trackId);     }   }; ```     ```cpp   {     puts(\"================\");     vector<Data> myData;     puts(\"myData.push_back(Data{10,\\\"push-back\\\"});\");     myData.push_back(Data{10, \"push-back\"});      puts(\"myData.push_back(Data{20,\\\"push-back\\\"});\");     myData.push_back(Data{20, \"push-back\"});      puts(\"Out of scope\");   } ```    ```cpp   class DataWithMove {    private:     // a raw pointer to my data     int *data;     string trackId;     public:     DataWithMove(int d, string tId) {       data = new int;  // heap allocation       *data = d;       trackId = tId;       fmt::print(\"DataWithMove Constructor {} {}\\n\", *data, trackId);     }      ~DataWithMove() {       if (data != nullptr) {         fmt::print(\"DataWithMove Destructor {} {}\\n\", *data, trackId);         delete data;       } else {         fmt::print(\"DataWithMove Destructor nullptr\\n\");       }     }      DataWithMove(const DataWithMove &source)         : DataWithMove{*source.data, \"copy-constructor\"} {       fmt::print(\"DataWithMove Copy Constructor {} {}\\n\", *data, trackId);     }      DataWithMove(DataWithMove &&source)         : data{source.data}, trackId{\"move-constructor\"} {       source.data = nullptr;       fmt::print(\"DataWithMove Move constructor {}\\n\", *data);     }   }; ```   ## Possible output   ```txt  Initial state s1: Content of s1 variable s2: Content of s2 variable s3: Content of s3 variable  s1 = s2 s1: Content of s2 variable s2: Content of s2 variable s3: Content of s3 variable  s1 = std::move(s3) s1: Content of s3 variable s2: Content of s2 variable s3:   s1 = static_cast<string&&>(s2) s1: Content of s2 variable s2:  s3:  ================ myData.push_back(Data{10,\"push-back\"}); Data Constructor 10 push-back Data Constructor 10 copy-constructor Data Copy Constructor 10 copy-constructor Data Destructor 10 push-back myData.push_back(Data{20,\"push-back\"}); Data Constructor 20 push-back Data Constructor 20 copy-constructor Data Copy Constructor 20 copy-constructor Data Constructor 10 copy-constructor Data Copy Constructor 10 copy-constructor Data Destructor 10 copy-constructor Data Destructor 20 push-back Out of scope Data Destructor 10 copy-constructor Data Destructor 20 copy-constructor ================ myData.push_back(DataWithMove{10,\"push-back\"}); DataWithMove Constructor 10 push-back DataWithMove Move constructor 10 DataWithMove Destructor nullptr myData.push_back(DataWithMove{20,\"push-back\"}); DataWithMove Constructor 20 push-back DataWithMove Move constructor 20 DataWithMove Constructor 10 copy-constructor DataWithMove Copy Constructor 10 copy-constructor DataWithMove Destructor 10 move-constructor DataWithMove Destructor nullptr Out of scope DataWithMove Destructor 10 copy-constructor DataWithMove Destructor 20 move-constructor  ```  ## References  * ▶️[Introduction to std::move in C++ | Modern Cpp Series](https://youtu.be/2gUqyt5JTtM?list=PLvv0ScY6vfd8j-tlhYVPYgiIyXduu6m-L)  ","title":"C++ move_semantics"},{"id":513,"location":"/til/cpp_ansi.html","tags":["C++","ansi","tui"],"text":" ::: toc    Some ANSI codes:  * `\"\\033[F\"` – move cursor to the beginning of the previous line * `\"\\033[A\"` – move cursor up one line * `\"\\033[2K\\r\"` — clear current line  ```cpp   // These 5 lines will act as a background.   // Here the placeholder is intentionaly more long that the final string.   for (int i = 0; i < 5; ++i) {     cout << \"Line number \" << i << \" with long placeholder.\" << endl;   }    this_thread::sleep_for(seconds(2));   for (int j = 0; j < 10; ++j) {     // Move up 5 lines     cout << \"\\033[F\";     cout << \"\\033[F\";     cout << \"\\033[F\";     cout << \"\\033[F\";     cout << \"\\033[F\";     // Write 5 lines down again     for (int i = 0; i < 5; ++i) {       cout << \"Line number \" << i + j << \" final.\"            << \"\\n\";       this_thread::sleep_for(milliseconds(20));     }   } ```   ![Output with mixed lines.](/til/cpp_ansi_01.webp)  You noticed the line mixed content. This is because no cleaning of current line was done.   ```cpp   this_thread::sleep_for(seconds(2));   for (int j = 0; j < 10; ++j) {     // Move up 5 lines     cout << \"\\033[F\";     cout << \"\\033[F\";     cout << \"\\033[F\";     cout << \"\\033[F\";     cout << \"\\033[F\";     // Write 5 lines down again     for (int i = 0; i < 5; ++i) {       // Clear current line from cursor position until the end of line       cout << \"\\033[2K\\r\";       cout << \"Line number \" << i + j << \" final 2.\"            << \"\\n\";       this_thread::sleep_for(milliseconds(20));     }   } ```   ![Output with cleaned lines.](/til/cpp_ansi_02.webp)  ## Possible output   ```txt Line number 0 with long placeholder. Line number 1 with long placeholder. Line number 2 with long placeholder. Line number 3 with long placeholder. Line number 4 with long placeholder. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[FLine number 0 final. Line number 1 final. Line number 2 final. Line number 3 final. Line number 4 final. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[FLine number 1 final. Line number 2 final. Line number 3 final. Line number 4 final. Line number 5 final. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[FLine number 2 final. Line number 3 final. Line number 4 final. Line number 5 final. Line number 6 final. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[FLine number 3 final. Line number 4 final. Line number 5 final. Line number 6 final. Line number 7 final. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[FLine number 4 final. Line number 5 final. Line number 6 final. Line number 7 final. Line number 8 final. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[FLine number 5 final. Line number 6 final. Line number 7 final. Line number 8 final. Line number 9 final. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[FLine number 6 final. Line number 7 final. Line number 8 final. Line number 9 final. Line number 10 final. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[FLine number 7 final. Line number 8 final. Line number 9 final. Line number 10 final. Line number 11 final. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[FLine number 8 final. Line number 9 final. Line number 10 final. Line number 11 final. Line number 12 final. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[FLine number 9 final. Line number 10 final. Line number 11 final. Line number 12 final. Line number 13 final. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[F\u001b[2K\rLine number 0 final 2. \u001b[2K\rLine number 1 final 2. \u001b[2K\rLine number 2 final 2. \u001b[2K\rLine number 3 final 2. \u001b[2K\rLine number 4 final 2. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[F\u001b[2K\rLine number 1 final 2. \u001b[2K\rLine number 2 final 2. \u001b[2K\rLine number 3 final 2. \u001b[2K\rLine number 4 final 2. \u001b[2K\rLine number 5 final 2. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[F\u001b[2K\rLine number 2 final 2. \u001b[2K\rLine number 3 final 2. \u001b[2K\rLine number 4 final 2. \u001b[2K\rLine number 5 final 2. \u001b[2K\rLine number 6 final 2. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[F\u001b[2K\rLine number 3 final 2. \u001b[2K\rLine number 4 final 2. \u001b[2K\rLine number 5 final 2. \u001b[2K\rLine number 6 final 2. \u001b[2K\rLine number 7 final 2. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[F\u001b[2K\rLine number 4 final 2. \u001b[2K\rLine number 5 final 2. \u001b[2K\rLine number 6 final 2. \u001b[2K\rLine number 7 final 2. \u001b[2K\rLine number 8 final 2. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[F\u001b[2K\rLine number 5 final 2. \u001b[2K\rLine number 6 final 2. \u001b[2K\rLine number 7 final 2. \u001b[2K\rLine number 8 final 2. \u001b[2K\rLine number 9 final 2. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[F\u001b[2K\rLine number 6 final 2. \u001b[2K\rLine number 7 final 2. \u001b[2K\rLine number 8 final 2. \u001b[2K\rLine number 9 final 2. \u001b[2K\rLine number 10 final 2. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[F\u001b[2K\rLine number 7 final 2. \u001b[2K\rLine number 8 final 2. \u001b[2K\rLine number 9 final 2. \u001b[2K\rLine number 10 final 2. \u001b[2K\rLine number 11 final 2. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[F\u001b[2K\rLine number 8 final 2. \u001b[2K\rLine number 9 final 2. \u001b[2K\rLine number 10 final 2. \u001b[2K\rLine number 11 final 2. \u001b[2K\rLine number 12 final 2. \u001b[F\u001b[F\u001b[F\u001b[F\u001b[F\u001b[2K\rLine number 9 final 2. \u001b[2K\rLine number 10 final 2. \u001b[2K\rLine number 11 final 2. \u001b[2K\rLine number 12 final 2. \u001b[2K\rLine number 13 final 2.  ```  ## References  * [ANSI escape code](https://en.wikipedia.org/wiki/ANSI_escape_code) * [Is there go up line character? (Opposite of \\n)](https://stackoverflow.com/questions/11474391/is-there-go-up-line-character-opposite-of-n) * [Erase the current printed console line](https://stackoverflow.com/questions/1508490/erase-the-current-printed-console-line)  ","title":"C++ ANSI codes"},{"id":514,"location":"/til/cpp_lvalue_rvalue.html","tags":["C++","lvalue","rvalue"],"text":" ::: toc    ```cpp int GetValue() {   int value = 10;   fmt::print(\"GetValue() {}\\n\", value);   return value; }  int& GetValue2() {   static int value = 10;   fmt::print(\"GetValue2() {}\\n\", value);   return value; }  void SetValue(int value) { fmt::print(\"SetValue({})\\n\", value); }   This function only accept lvalues. //-- This function only accept lvalues.  void SetValue2(int& value) { fmt::print(\"SetValue2({})\\n\", value); }   The `const` changes the behavior here to accept rvalues too. //-- The `const` changes the behavior here to accept rvalues too.  void SetValue3(const int& value) { fmt::print(\"SetValue3({})\\n\", value); }  void PrintName(string& lvalue) {   fmt::print(\"Full name is: {} lvalue\\n\", lvalue); }  void PrintName2(string&& rvalue) {   fmt::print(\"Full name is: {} rvalue\\n\", rvalue); }  ```   ```cpp   int a = GetValue();   fmt::print(\"value returned by GetValue() is {}\\n\", a);    // GetValue() = 10; // this operation is not possible   GetValue2() = 20;  // lvalue is ok   fmt::print(\"Value stored into function GetValue2() is {}\\n\", GetValue2());    int b = 10;    // b is a lvalue  10 is a rvalue   SetValue(b);   // call with lvalue   SetValue(10);  // call with rvalue (temporary object) ```    ::: warning You can't take a reference from a rvalue.    ```cpp   SetValue2(b);  // call with lvalue   // SetValue2(10);  // this operation is not possible   SetValue3(10);  // ok, the compiler will create a temporary variable and get a                   // reference for it.                   // int temp = 10; SetValue(temp); ```    ```cpp   string firstName = \"Geraldo\";   string lastName = \"Ribeiro\";   string fullName = firstName + lastName;    PrintName(fullName);  // ok lvalue   // PrintName(firstName + lastName); // not ok, rvalue   //  again in change the function signature to accept const string& will works   PrintName2(firstName + lastName);  // ok rvalue   // PrintName2(fullName); // not ok, lvalue  ```  ```   ## Possible output   ```txt GetValue() 10 value returned by GetValue() is 10 GetValue2() 10 GetValue2() 20 Value stored into function GetValue2() is 20 SetValue(10) SetValue(10) SetValue2(10) SetValue3(10) Full name is: GeraldoRibeiro lvalue Full name is: GeraldoRibeiro rvalue  ```  ## References  * ▶️[lvalues and rvalues in C++](https://www.youtube.com/watch?v=fbYknr-HPYE) * [title](link)  ","title":"C++ lvalue_rvalue"},{"id":515,"location":"/til/nginx_content_by_lua_block.html","tags":["nginx","content_by_lua_block","lua","ufw"],"text":"::: toc  ## Introduction  Looking for 404 URLs I found some strange patterns. Probably someone are trying to hack or are searching for unprotected information.  ::: fixme This post is incomplete!   ```shell awk '($9 ~ /404/)' /var/log/nginx/access.log | awk '{print $1, $7}' | sort -u ```  Fragment of listing from command above:  ``` 18.202.222.57 //.git/objects/8a/09b213b634828b8d961c413adc6b07db6398a4 18.202.222.57 //.git/objects/8a/4fd59c19669446a8d5a1e5d53c7bdaefd2bc6b 18.223.170.53 //.git/objects/84/fa52145c85452150aec5fe1a75b7773c16e4d5 18.223.170.53 //.git/objects/8a/09b213b634828b8d961c413adc6b07db6398a4 18.223.170.53 //.git/objects/8a/4fd59c19669446a8d5a1e5d53c7bdaefd2bc6b 18.230.157.127 //.git/objects/de/77a2d3a2eee9d86e6c251324a720e94076f72a 18.230.189.76 //.git/objects/ac/524ecec9bcd165433ce2edf49775eab994e8bf 18.230.189.76 //.git/objects/c6/822f2ab1bf34e0dd10d598b200f1088bfb94d1 18.231.136.192 //.git/objects/cd/a4864272388a04a33bb522fde35909355599cd 18.231.136.192 //.git/objects/cd/f921feadacb3158f17e4c576a7e97bc1fe8e55 183.136.225.32 /robots.txt 185.254.196.223 /.env 186.234.80.150 /wp-login.php 191.19.195.199 /favicon.ico 192.241.225.12 /actuator/health 195.191.219.130 /robots.txt 198.199.93.20 /owa/auth/logon.aspx?url=https%3a%2f%2f1%2fecp%2f 198.71.231.82 /style.php?sig=rename 198.71.231.82 /wp-admin/style.php?sig=rename 201.75.187.119 /img/intmain-logo_1024x1024.png 205.185.118.237 /boaform/admin/formLogin 207.180.204.71 /style.php?sig=rename 207.180.204.71 /wp-admin/style.php?sig=rename 209.97.156.111 /ab2g 209.97.156.111 /ab2h 212.23.222.141 /.env 216.218.206.66 /favicon.ico 216.218.206.66 /.git/config 23.251.102.90 /api/jsonws/ ```  ## Block IP who access specific URL  ```nginx location /some-specific-url {   # MIME type determined by default_type:   default_type 'text/plain';    content_by_lua_block {     -- Record IP into a list     local blockip = io.open('/var/www/blockip.txt','a')     blockip:write(ngx.var.remote_addr .. \"\\n\")     blockip:close()      -- Debug message;     ngx.say('Hello, ' .. ngx.var.remote_addr ) --;      -- Execute some script to block;     os.execute(\"date > /tmp/date\") --;   } } ```  ## References  * [Embed the Power of Lua into NGINX HTTP servers](https://github.com/openresty/lua-nginx-module) * [How to parse JSON](https://onelinerhub.com/nginx-lua/how-to-parse-json) * [Setting a Gzip bomb in Nginx without PHP](https://lord.re/en/posts/139-gzip-bomb-nginx/)  ","title":"nginx content_by_lua_block"},{"id":516,"location":"/til/wsl-disable-beep.html","tags":["wsl","beep","visualbell","vim"],"text":"::: toc  ## Introduction  To disable the beep in bash you need to uncomment (or add if not already there) the line `set bell-style none` in your `/etc/inputrc` file.  ::: tip Since it is a protected file you need to be a privileged user to edit it (i.e. launch your text editor with something like `sudo <editor> /etc/inputrc`).  To disable the beep and the visual bell also in vim you need to add the following to your `~/.vimrc` file:  ```vim set visualbell set t_vb= ```  To disable the beep also in less (i.e. also in man pages and when using `git diff`) you need to add `export LESS=\"$LESS -R -Q` in your `~/.profile` file.  ## References  * [Disable beep in WSL terminal on Windows 10](https://stackoverflow.com/questions/36724209/disable-beep-in-wsl-terminal-on-windows-10) ","title":"WSL — disable beep"},{"id":517,"location":"/certificate/2023-01-23_linkedin_Learning_Windows_Subsystem_for_Linux.html","tags":["wsl"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  Learning Windows Subsystem for Linux Course completed on Jan 23, 2023 at 08:40PM UTC • 1 hour 30 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                 LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: ARutVFfyW7RB_v8LKH9pkakTlj6f ```  ## Course details  * [Learning Windows Subsystem for Linux](https://www.linkedin.com/learning/learning-windows-subsystem-for-linux-16134127/windows-subsystem-for-linux) * 1h 30m  * Intermediate * Released: 4/15/2022  Windows Subsystem for Linux provides a Linux environment for developers inside of Windows. Rather than starting a virtual machine or relying on a remote Linux machine for development, WSL provides a Linux kernel and enables you to install various distros within the Windows environment. In this course, Scott Simpson walks you through the basics of WSL, as well as common tasks and procedures for developing with Linux. Scott explains different versions of WSL, then goes over installing a Linux distribution, using the Windows Terminal interface, accessing files, using network services, and more. He shows you how to manage software in Linux, then dives into controlling processes and services, defining automated tasks, tools for software development, and accessing a WSL network service. After covering GUI apps in WSL2, Scott finishes up with useful tips on how to customize and troubleshoot your Linux environments.  ## Skills covered  * Linux  ","title":"Learning Windows Subsystem for Linux — WSL"},{"id":518,"location":"/til/wsl.html","tags":["wsl"],"text":"::: toc  ## Introduction  ::: fixme Draft only!  ![general_rules](/til/wsl_general_rules.webp)  ![enabling_01](/til/wsl_enabling_01.webp)  ![enabling_02](/til/wsl_enabling_02.webp)  ![enabling_03](/til/wsl_enabling_03.webp)  ![enabling_04](/til/wsl_enabling_04.webp)  ![shortcut_01](/til/wsl_shortcut_01.webp)  ![pipe_01](/til/wsl_pipe_01.webp)  ![run_linux_command](/til/wsl_run_linux_command.webp)  ![accessing_files](/til/wsl_accessing_files.webp)  ![accessing_files_02](/til/wsl_accessing_files_02.webp)  ![accessing_files_03](/til/wsl_accessing_files_03.webp)  ![networking_01](/til/wsl_networking_01.webp)  ![networking_02](/til/wsl_networking_02.webp)  ![networking_03](/til/wsl_networking_03.webp)  ![linux_firewall](/til/wsl_linux_firewall.webp)  ![networking_04](/til/wsl_networking_04.webp)  ![usb_01](/til/wsl_usb_01.webp)  ![disk_01](/til/wsl_disk_01.webp)  ![disk_02](/til/wsl_disk_02.webp)  ![path_01](/til/wsl_path_01.webp)  ![path_02](/til/wsl_path_02.webp)  ![services_01](/til/wsl_services_01.webp)  ![services_02](/til/wsl_services_02.webp)  ![crontab_01](/til/wsl_crontab_01.webp)  ![crontab_02](/til/wsl_crontab_02.webp)  ![remote_wsl](/til/wsl_remote_wsl.webp)  ![networking_05](/til/wsl_networking_05.webp)  ![networking_06](/til/wsl_networking_06.webp)  ![graphical_apps_01](/til/wsl_graphical_apps_01.webp)  ![graphical_apps_02](/til/wsl_graphical_apps_02.webp)  ![export_import_01](/til/wsl_export_import_01.webp)  ![export_import_02](/til/wsl_export_import_02.webp)  ![export_import_03](/til/wsl_export_import_03.webp)   ## References  * []() ","title":"WSL — Windows Subsystem for Linux"},{"id":519,"location":"/certificate/2023-01-24_linkedin_Introduction_to_InfluxDB.html","tags":["influxdb"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  Introduction to InfluxDB Course completed on Jan 24, 2023 at 01:29PM UTC • 1 hour 8 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                 LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: AWwLYpA9L0nEiVME6iI6MjbRhmTW ```  ## Course details  * [Introduction to InfluxDB](https://www.linkedin.com/learning/introduction-to-influxdb/continue-your-influxdb-journey) * 1h 8m * Beginner * Released: 5/12/2022  Time series data—a data set that tracks a sample over time—is constantly being generated all around us. From data that powers financial markets and health and science institutions, to our cars, personal technology, and smart home devices, time series data allows us to gain insights into data from moment to moment or aggregate data to learn about trends based on a period of time. In this course, Jess Ingrassellino shows you how to gain insights into time series data by using InfluxDB, a database designed to ingest, analyze, and visualize time series data. Jess shows you how to navigate the InfluxDB cloud UI, covers several methods for bringing your data into InfluxDB, and then explains how to query your data to get meaningful insights.  ## Skills covered  * Data Analysis * InfluxDB  ","title":"Introduction to InfluxDB"},{"id":520,"location":"/til/linkedin_ssi.html","tags":["linkedin","ssi"],"text":"::: toc  ## Introduction  ## Carolina Martins  ### Bloqueios da promoção  * Cultura da empresa * Valorização dos outsiders * Lideranças inseguras  ## Etapas  * Domínio da habilidade demonstrativa   * Efeito outsider reverso   * Saber comunicar o quão bom você é * A realização de um troca de emprego segura, com aumento de salário e crescimento na carreira * Comportamento de crescimento contínuo na empresa  ## Linkedin Social Selling Index  ## References  * [Social Selling Index](https://www.linkedin.com/sales/ssi) * [A COMPETÊNCIA RESPONSÁVEL PELO CRESCIMENTO NA CARREIRA | Imersão: meu crescimento na carreira #03](https://youtu.be/vECcld35DOo) * [Como crescer na carreira em 90 dias | Imersão: meu crescimento na carreira #04](https://www.youtube.com/watch?v=yTbolCGeg70) ","title":"Linkedin SSI"},{"id":521,"location":"/til/cpp_emplace_back.html","tags":["C++","emplace_back","push_back","std::vector"],"text":" ::: toc   ::: tip title=\"You should use push_back when:\" * You already have a copy of the element that you want to insert   into the vector. * The object you want to insert is cheap to copy.  * The object   has a non-explicit copy constructor  ::: tip title=\"You should use emplace_back when:\" * You have the arguments to construct the object, but not the object   itself. * The object is expensive to copy. * The object has a non-explicit constructor that takes the same arguments   as you want to pass to emplace_back  ::: tip title=\"Use emplace_back when building an element in place\" When we need to build an object straight inside the container, we should use `emplace_back()` since it will directly generate an object within the container, eliminating the need for a `move/copy()`.   ```cpp struct Test {   int a, b;   Test(int x, int y) : a(x), b(y) {} }; ```   ```cpp   std::vector<Test> v1;   std::vector<Test> v2;   auto start = std::chrono::high_resolution_clock::now();   // ----------------------------------------------------------------------   for (int i = 0; i < 1000000; ++i) {     v1.push_back(Test(i, i));   }   // ----------------------------------------------------------------------   auto end = std::chrono::high_resolution_clock::now();   auto duration_push_back =       std::chrono::duration_cast<std::chrono::microseconds>(end - start)           .count();    start = std::chrono::high_resolution_clock::now();   // ----------------------------------------------------------------------   for (int i = 0; i < 1000000; ++i) {     v2.emplace_back(i, i);   }   // ----------------------------------------------------------------------   end = std::chrono::high_resolution_clock::now();   auto duration_emplace_back =       std::chrono::duration_cast<std::chrono::microseconds>(end - start)           .count();    fmt::print(\"{:12} took {:5} microseconds\\n\", \"push_back\", duration_push_back);   fmt::print(\"{:12} took {:5} microseconds\\n\", \"emplace_back\",              duration_emplace_back);    return 0; ```  ## Possible output   ```txt push_back    took 67915 microseconds emplace_back took 31383 microseconds  ```  ## References  * [Modern C++ Series — vector push_back or emplace_back??](https://medium.com/@its.me.siddh/modern-c-series-vector-push-back-or-emplace-back-e3a482ab4dcd)  ","title":"C++ emplace_back × push_back"},{"id":522,"location":"/til/hedgedoc.html","tags":["hedgedoc","flowchart","sequence-diagram"],"text":"::: wip  ::: toc  ## Introduction  ## References  * [hedgedoc.org](https://hedgedoc.org) * [Sequence diagram](https://bramp.github.io/js-sequence-diagrams/) * [Flowchart](https://flowchart.js.org/) ","title":"hedgedoc"},{"id":523,"location":"/til/monitoring_nginx_with_collectd_and_influxdb.html","tags":["nginx","influxdb","collectd"],"text":"::: wip  ::: toc  ## Introduction  ## References  * [Complete Nginx Monitoring with Collectd and InfluxDB](https://www.ayush.nz/2017/08/complete-nginx-monitoring-with-collectd-and-influxdb) ","title":"Monitoring NGINX with Collectd and InfluxDB"},{"id":524,"location":"/certificate/2023-01-25_linkedin_Time_Series_Data_Collection_Using_Telegraf.html","tags":["telegraf","influxdb"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro   Time Series Data Collection Using Telegraf Course completed on Jan 25, 2023 at 06:00PM UTC • 53 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                  LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085     Certificate ID: AX5jRWQrcpAPImDd2wYsrGdIuXpk \f ```  ## Course details  * 53m * Intermediate * Released: 9/26/2022  Do you need to learn about time series data and enable the ingestion and collection of that data? The Telegraf tool within InfluxDB can make your life a lot easier, and in this course, verified InfluxDB University Instructor Samantha Wang shows you how. Samantha presents an overview of time series data, then dives into data ingestion and collection using Telegraf. She explains what time series data is, how it’s used, and why it’s important, as well as the benefits of data collection. Samantha introduces you to Telegraf and walks you through how to get started using it. She covers inputting your data and demonstrates Telegraf input plugins and JSON parser configuration. Samantha also goes over how to use Telegraf processors and aggregators to transform your data. Plus, she steps through ways to output your data with Telegraf and shares resources for learning more.  ## Skills covered  * Time Series Analysis * InfluxDB   ","title":"Time Series Data Collection Using Telegraf"},{"id":525,"location":"/til/build2.html","tags":["C++","build2"],"text":"::: wip  ::: toc  ## Introduction  ## References  * ▶️[CppCon 2016: Boris Kolpackov “Using build2, C++ Build Toolchain\"](https://www.youtube.com/watch?v=hHRaZy1LZPA) ","title":"build2"},{"id":526,"location":"/til/qemu_windows_guest.html","tags":["qemu","windows"],"text":"::: wip  ::: toc  ## Introduction  ## QEMU vs KVM  * `QEMU` is a type 2 hypervisor that runs within user space and performs   virtual hardware emulation * `KVM` is a type 1 hypervisor that runs in kernel space, that allows a user   space program access to the hardware virtualization features of various   processors.  ## Image disk creation  ```shell qemu-img create -f qcow2 WindowsVM.img 25G ```  ## Release mouse grabbed by QEMU  ```shell Ctrl+Alt+g ```  ## References  * gentoo [QEMU/Windows guest](https://wiki.gentoo.org/wiki/QEMU/Windows_guest) * [libvirt scripts for various operating systems (KVM instead of QEMU)](https://github.com/sej7278/virt-installs) * [Como instalar o QEMU/KVM no Linux Mint, Ubuntu e outras Distros](https://terminalroot.com.br/2021/02/como-instalar-o-qemu-kvm-no-linux-mint-ubuntu-e-outras-distros.html)  ","title":"QEMU — Windows guest"},{"id":527,"location":"/til/cpp_gumbo.html","tags":["C++","html5","gumbo","gumbo-query"],"text":" ::: toc  ## Introduction   ```cpp void printElementStructure(GumboNode* node, string p) {   fmt::print(\"\\n{} has {} children:\", p, node->v.element.children.length);   for (unsigned int i = 0; i < node->v.element.children.length; ++i) {     auto elem = static_cast<GumboNode*>(node->v.element.children.data[i]);     if (elem->type == GUMBO_NODE_ELEMENT) {       auto tag = gumbo_normalized_tagname(elem->v.element.tag);       fmt::print(\"\\n  {} -> TAG {}\", p, tag);       auto p2 = fmt::format(\"{}/{}\", p, tag);       printElementStructure(elem, p2);     } else if (elem->type == GUMBO_NODE_TEXT) {       fmt::print(\"\\n  {} -> TEXT {}\", p, elem->v.text.text);     }   } }; ```   ```cpp   // GumboOutput* output = gumbo_parse(\"<h1>Hello, <span>World!</span></h1>\");   string markup{\"<h1>Hello, <span>World!</span></h1>\"};   GumboOutput* output = gumbo_parse_with_options(       &kGumboDefaultOptions, markup.data(), markup.length());    assert(output->root->type == GUMBO_NODE_ELEMENT);    // Node types:   // GUMBO_NODE_DOCUMENT,   // GUMBO_NODE_ELEMENT,   // GUMBO_NODE_TEXT,   // GUMBO_NODE_CDATA,   // GUMBO_NODE_COMMENT,   // GUMBO_NODE_WHITESPACE,   // GUMBO_NODE_TEMPLATE    fmt::print(\"\\nRoot element tag: {}\",              gumbo_normalized_tagname(output->root->v.element.tag));  // html    auto children = output->root->v.element.children;   fmt::print(\"\\nRoot element children: {}\", children.length);  // 2: head, body    printElementStructure(output->root, \"html\");    // gumbo.h: extern const GumboOptions kGumboDefaultOptions;   gumbo_destroy_output(&kGumboDefaultOptions, output); ```   ## Possible output   ```txt  Root element tag: html Root element children: 2 html has 2 children:   html -> TAG head html/head has 0 children:   html -> TAG body html/body has 1 children:   html/body -> TAG h1 html/body/h1 has 2 children:   html/body/h1 -> TEXT Hello,    html/body/h1 -> TAG span html/body/h1/span has 1 children:   html/body/h1/span -> TEXT World! ```  ## References  * [Web Scraping With   C++](https://www.scrapingbee.com/blog/web-scraping-c++/) * [An HTML5 parsing library in pure   C99](https://github.com/google/gumbo-parser) * [c++ library to provide jQuery style api for gumbo   library](https://github.com/lazytiger/gumbo-query)  ","title":"C++ gumbo"},{"id":528,"location":"/til/journal_clean.html","tags":["journalctl","clean"],"text":"::: toc  ## Introduction  ## Clean by time  ```shell # journalctl --vacuum-time=10d ```  ## Clean by size  ```shell # journalctl --vacuum-size=2G ```  ## References  * [Limpando o systemd journal](https://imasters.com.br/desenvolvimento/limpando-o-systemd-journal) ","title":"journal clean"},{"id":529,"location":"/til/cpp_dp_creational_builder_01.html","tags":["C++","design-pattern","creational","builder"],"text":" ::: toc     ```cpp // ---------------------------------------------------------------------- // Person.h // ---------------------------------------------------------------------- class PersonBuilder;  class Person {   // address   std::string street_address, post_code, city;    // employment   std::string company_name, position;   int annual_income = 0;    Person() { TRACE; }   public:   ~Person() { TRACE; }    static PersonBuilder create();    // clang-format off   Person( Person &&other ) :     street_address { std::move( other.street_address ) },     post_code      { std::move( other.post_code ) },     city           { std::move( other.city ) },     company_name   { std::move( other.company_name ) },     position       { std::move( other.position ) },     annual_income  { other.annual_income }   {     TRACE;   }   // clang-format on    Person &operator=(Person &&other) {     TRACE;     if (this == &other) return *this;     street_address = std::move(other.street_address);     post_code = std::move(other.post_code);     city = std::move(other.city);     company_name = std::move(other.company_name);     position = std::move(other.position);     annual_income = other.annual_income;     return *this;   }    friend std::ostream &operator<<(std::ostream &os, const Person &obj) {     TRACE;     // clang-format off     return os        << \"street_address: \" << obj.street_address       << \" post_code: \"     << obj.post_code       << \" city: \"          << obj.city       << \" company_name: \"  << obj.company_name       << \" position: \"      << obj.position       << \" annual_income: \" << obj.annual_income;     // clang-format on   }    friend class PersonBuilder;   friend class PersonAddressBuilder;   friend class PersonJobBuilder; }; ```   ```cpp // ---------------------------------------------------------------------- // PersonBuilder.h // ---------------------------------------------------------------------- class PersonAddressBuilder; class PersonJobBuilder;  class PersonBuilderBase {  protected:   Person &person;   explicit PersonBuilderBase(Person &person) : person{person} { TRACE; }   public:   operator Person() const {     TRACE;     return std::move(person);   }    // builder facets    PersonAddressBuilder lives() const;   PersonJobBuilder works() const; };  class PersonBuilder : public PersonBuilderBase {   Person p;   public:   PersonBuilder() : PersonBuilderBase{p} { TRACE; } }; ```   ```cpp // ---------------------------------------------------------------------- // Person.cpp // ---------------------------------------------------------------------- PersonBuilder Person::create() {   TRACE;   return PersonBuilder{}; } ```   ```cpp // ---------------------------------------------------------------------- // PersonAddressBuilder.h // ---------------------------------------------------------------------- class PersonAddressBuilder : public PersonBuilderBase {   typedef PersonAddressBuilder Self;   public:   explicit PersonAddressBuilder(Person &person) : PersonBuilderBase{person} {     TRACE;   }    Self &at(const std::string &street_address) {     TRACE;     person.street_address = street_address;     return *this;   }    Self &with_postcode(const std::string &post_code) {     TRACE;     person.post_code = post_code;     return *this;   }    Self &in(const std::string &city) {     TRACE;     person.city = city;     return *this;   } }; ```   ```cpp // ---------------------------------------------------------------------- // PersonJobBuilder.h // ---------------------------------------------------------------------- class PersonJobBuilder : public PersonBuilderBase {   typedef PersonJobBuilder Self;   public:   explicit PersonJobBuilder(Person &person) : PersonBuilderBase{person} {     TRACE;   }    Self &at(const std::string &company_name) {     TRACE;     person.company_name = company_name;     return *this;   }    Self &as_a(const std::string &position) {     TRACE;     person.position = position;     return *this;   }    Self &earning(int annual_income) {     TRACE;     person.annual_income = annual_income;     return *this;   } }; ```   ```cpp // ---------------------------------------------------------------------- // PersonBuilder.cpp // ---------------------------------------------------------------------- PersonAddressBuilder PersonBuilderBase::lives() const {   TRACE;   return PersonAddressBuilder{person}; }  PersonJobBuilder PersonBuilderBase::works() const {   TRACE;   return PersonJobBuilder{person}; } ```   ```cpp   Person p = Person::create()     .lives()       .at(\"123 London Road\")       .with_postcode(\"SW1 1GB\")       .in(\"London\")     .works()       .at(\"PragmaSoft\")       .as_a(\"Consultant\")       .earning(10e6);   std::cout << \"--------------\" << std::endl;   std::cout << p << std::endl; ```  ## Possible output   ```txt static PersonBuilder Person::create() PersonBuilderBase::PersonBuilderBase(Person &) Person::Person() PersonBuilder::PersonBuilder() PersonAddressBuilder PersonBuilderBase::lives() const PersonBuilderBase::PersonBuilderBase(Person &) PersonAddressBuilder::PersonAddressBuilder(Person &) Self &PersonAddressBuilder::at(const std::string &) Self &PersonAddressBuilder::with_postcode(const std::string &) Self &PersonAddressBuilder::in(const std::string &) PersonJobBuilder PersonBuilderBase::works() const PersonBuilderBase::PersonBuilderBase(Person &) PersonJobBuilder::PersonJobBuilder(Person &) Self &PersonJobBuilder::at(const std::string &) Self &PersonJobBuilder::as_a(const std::string &) Self &PersonJobBuilder::earning(int) Person PersonBuilderBase::operator Person() const Person::Person(Person &&) Person::~Person() -------------- std::ostream &operator<<(std::ostream &, const Person &) street_address: 123 London Road post_code: SW1 1GB city: London company_name: PragmaSoft position: Consultant annual_income: 10000000 Person::~Person()  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ Design Pattern Creational builder 01"},{"id":530,"location":"/til/clean_up_snap.html","tags":["snap","clean"],"text":"::: toc  ## Introduction  ```bash #!/bin/bash #Removes old revisions of snaps #CLOSE ALL SNAPS BEFORE RUNNING THIS set -eu LANG=en_US.UTF-8 snap list --all | awk '/disabled/{print $1, $3}' |   while read -r snapname revision; do     snap remove \"$snapname\" --revision=\"$revision\"   done ```  ## References  * [How to Clean Up Snap Versions to Free Up Disk Space](https://www.debugpoint.com/clean-up-snap/) ","title":"clean up snap"},{"id":531,"location":"/til/cpp_forward_list_01.html","tags":["C++","std::forward_list","std::list"],"text":" ::: toc    ## Introduction  * introduced from C++-11 * singly linked list * can save space compared with `std::list` * cannot be iterated backwards * don't have `push_back`, `pop_back`, `emplace_back`, `size` functions   ```cpp   forward_list<int> flist1;   forward_list<int> flist2;   forward_list<int> flist3;    flist1.assign({1, 2, 3, 4});  // 1, 2, 3, 4   flist2.assign(5, 10);         // (size, default value) 10, 10, 10, 10, 10   flist3.assign(flist1.begin(), flist1.end());  // 1, 2, 3, 4    flist2.push_front(50);     // 50, 10, 10, 10, 10, 10   flist2.emplace_front(60);  // 60, 50, 10, 10, 10, 10, 10   flist3.pop_front();        // 2, 3, 4   flist3.insert_after(++flist3.begin(),                       {200, 300, 400});  // 2, 3, 200, 300, 400, 4   flist3.erase_after(flist3.begin(),                      next(flist3.begin(), 3));             // 2, 300, 400, 4   flist2.remove(10);                                       // 60, 50   flist2.remove_if([](const auto &i) { return i > 55; });  // 50    cout << '\\n';   for (const auto &i : flist1) {     cout << i << \" \";   }    cout << '\\n';   for (const auto &i : flist2) {     cout << i << \" \";   }    cout << '\\n';   for (const auto &i : flist3) {     cout << i << \" \";   }  ```   ## Possible output   ```txt  1 2 3 4  50  2 300 400 4  ```  ## References  * [Forward List in C++ | Set 1 (Introduction and Important  ","title":"Forward List in C++"},{"id":532,"location":"/til/chat-gpt.html","tags":["chat-gpt"],"text":"::: wip  ::: toc  ## Introduction  https://chat.openai.com/chat  ## References  * []() ","title":"Chat GPT"},{"id":533,"location":"/til/linkedin_in_progress.html","tags":["linkedin"],"text":"::: toc  ## Introduction  The goal of this post is to list in progress courses on **linkedin learning** ordered by the remain time to finish.  First you need to access the page <https://www.linkedin.com/learning/me/my-library/in-progress> and scroll down until its end.  Then execute the snippet below in the **Source** tab of Google Chrome browser:  ```javascript courses = []; [...document.getElementsByClassName('in-progress-body__card')].forEach(e=>{     title = '';     author = '';     url = '';     released = '';     remainTime = 0;      h3 = e.getElementsByClassName('lls-card-detail-card-body__headline')[0];     if (h3) {         title = h3.innerText;         url = h3.getElementsByTagName('a')[0].href;     }      ul = e.getElementsByClassName('lls-card-detail-card-body__primary-metadata')[0];     if (ul) {         a = ul.getElementsByTagName('a')[0];         if (a) {             author = a.innerText;         }         released = ul.getElementsByClassName('lls-card-released-on')[0].innerText;         released = released.replace(/\\D/g, \"\");     }      spanremainTime = e.getElementsByClassName('lls-card-duration')[0];     if (spanremainTime) {         remainTimeTxt = spanremainTime.innerText;         console.log(remainTimeTxt);         const remainTimeRE3 = /(?<hour>\\d+)h (?<min>\\d+)m (?<sec>\\d+)s left/;         const remainTimeRE2 = /(?<min>\\d+)m (?<sec>\\d+)s left/;          result = remainTimeTxt.match(remainTimeRE2);         if (result) {             remainTime = parseInt(result[1]);         }          result = remainTimeTxt.match(remainTimeRE3);         if (result) {             remainTime = parseInt(result[1]) * 60;             remainTime += parseInt(result[2]);         }     }      elem = {         released: released,         author: author,         title: title,         link: url,         remainTime: remainTime     }     courses.push(elem); } );  // sort by date desc courses.sort((e1,e2)=>(e1.released < e2.released) ? 1 : (e1.released > e2.released) ? -1 : 0);  // sort by remainTime asc courses.sort((e1,e2)=>(e1.remainTime > e2.remainTime) ? 1 : (e1.remainTime < e2.remainTime) ? -1 : 0);  md = '' courses.forEach(e=>md += `* ${e.remainTime} min | ${e.released} | [${e.title}](${e.link})\\n`); console.log(md); copy(md); ```  After running the code above a list of courses will be on the clipboard.  ## In progress courses  * 0 min | 2019 | [Prepare for the (ISC)² Information Systems Security Professional (CISSP) Certification Exam (2021)](https://www.linkedin.com/learning/paths/0930d8ed-be90-370e-824c-5cfdde530e65) * 0 min | 2019 | [Become a Software Project Manager](https://www.linkedin.com/learning/paths/become-a-software-project-manager) * 0 min | 2019 | [After Effects 2020 New Features](https://www.linkedin.com/learning/after-effects-2020-new-features) * 0 min | 2019 | [Improve Your JavaScript Language Skills](https://www.linkedin.com/learning/paths/improve-your-javascript-language-skills) * 0 min | 2019 | [Advance Your Skills in GIS](https://www.linkedin.com/learning/paths/advance-your-skills-in-gis) * 0 min | 2019 | [Advance Your Skills in the Hadoop/NoSQL Data Science Stack]() * 0 min | 2017 | [Learning C++ Pointers](https://www.linkedin.com/learning/learning-c-plus-plus-pointers) * 0 min | 2013 | [Creating a Responsive Presentation in HTML5](https://www.linkedin.com/learning/creating-a-responsive-presentation-in-html5) * 6 min | 2021 | [Atomic Habits (Blinkist Summary)](https://www.linkedin.com/learning/atomic-habits-blinkist-summary) * 17 min | 2022 | [How to Talk to Anyone (Blinkist Summary)](https://www.linkedin.com/learning/how-to-talk-to-anyone-blinkist-summary) * 18 min | 2020 | [Scrum: The Basics](https://www.linkedin.com/learning/scrum-the-basics) * 22 min | 2017 | [LinkedIn Learning Highlights: Business Strategy and Analysis](https://www.linkedin.com/learning/linkedin-learning-highlights-business-strategy-and-analysis) * 23 min | 2016 | [Linux: Multitasking at the Command Line](https://www.linkedin.com/learning/linux-multitasking-at-the-command-line) * 24 min | 2020 | [Creating Flowcharts for Beginners](https://www.linkedin.com/learning/creating-flowcharts-for-beginners) * 25 min | 2020 | [Continuous Integration: Tools](https://www.linkedin.com/learning/continuous-integration-tools) * 28 min | 2017 | [Advanced SVG Animation]() * 30 min | 2021 | [Secure Coding in Go](https://www.linkedin.com/learning/secure-coding-in-go) * 33 min | 2020 | [Software Testing Foundations: Continuous Testing and DevOps](https://www.linkedin.com/learning/software-testing-foundations-continuous-testing-and-devops) * 35 min | 2022 | [Advanced Techniques for Ethical Hacking](https://www.linkedin.com/learning/advanced-techniques-for-ethical-hacking) * 38 min | 2016 | [Note-Taking for Business Professionals](https://www.linkedin.com/learning/note-taking-for-business-professionals) * 40 min | 2021 | [Inglês Comercial: Como Impressionar em Reuniões On-line](https://www.linkedin.com/learning/ingles-comercial-como-impressionar-em-reunioes-on-line) * 40 min | 2018 | [C++ Standard Template Library](https://www.linkedin.com/learning/c-plus-plus-standard-template-library) * 41 min | 2022 | [Tech on the Go: Avoiding Over-Engineering](https://www.linkedin.com/learning/tech-on-the-go-avoiding-over-engineering) * 42 min | 2021 | [Nail Your C++ Interview](https://www.linkedin.com/learning/nail-your-c-plus-plus-interview) * 44 min | 2020 | [Parallel and Concurrent Programming with C++ Part 2](https://www.linkedin.com/learning/parallel-and-concurrent-programming-with-c-plus-plus-part-2) * 44 min | 2013 | [iBooks Author for Teachers: Creating a Math Lesson](https://www.linkedin.com/learning/ibooks-author-for-teachers-creating-a-math-lesson) * 45 min | 2021 | [Microsoft Power Apps: Using the Dataverse (Formerly the Common Data Service)](https://www.linkedin.com/learning/microsoft-power-apps-using-the-dataverse-formerly-the-common-data-service) * 45 min | 2019 | [Flutter: Part 01 Introduction](https://www.linkedin.com/learning/flutter-part-01-introduction) * 47 min | 2020 | [DevSecOps: Tips for Success](https://www.linkedin.com/learning/devsecops-tips-for-success) * 48 min | 2019 | [Improve SEO for Your Ecommerce Site](https://www.linkedin.com/learning/improve-seo-for-your-ecommerce-site) * 49 min | 2022 | [Java Memory Management: Garbage Collection, JVM Tuning, and Spotting Memory Leaks](https://www.linkedin.com/learning/java-memory-management-garbage-collection-jvm-tuning-and-spotting-memory-leaks) * 49 min | 2020 | [A Linguagem Corporal da Liderança](https://www.linkedin.com/learning/a-linguagem-corporal-da-lideranca) * 51 min | 2022 | [Additive Manufacturing: Metal 3D Printing](https://www.linkedin.com/learning/additive-manufacturing-metal-3d-printing) * 51 min | 2020 | [LinkedIn para Busca de Oportunidades: Impulsione sua Carreira](https://www.linkedin.com/learning/linkedin-para-busca-de-oportunidades-impulsione-sua-carreira) * 53 min | 2022 | [Enterprise Architecture in Practice](https://www.linkedin.com/learning/enterprise-architecture-in-practice) * 53 min | 2020 | [Como Desenvolver sua Inteligência Emocional](https://www.linkedin.com/learning/como-desenvolver-sua-inteligencia-emocional) * 56 min | 2018 | [Web Security: OAuth and OpenID Connect (2018)](https://www.linkedin.com/learning/web-security-oauth-and-openid-connect-2018) * 57 min | 2022 | [Applied Concurrency in Go](https://www.linkedin.com/learning/applied-concurrency-in-go) * 58 min | 2018 | [Git Intermediate Techniques (2018)](https://www.linkedin.com/learning/git-intermediate-techniques-2018) * 64 min | 2019 | [Electron: Building Cross Platform Desktop Apps](https://www.linkedin.com/learning/electron-building-cross-platform-desktop-apps-2) * 65 min | 2020 | [Azure for Developers: Microsoft Graph Development Using the Microsoft Identity Platform](https://www.linkedin.com/learning/azure-for-developers-microsoft-graph-development-using-the-microsoft-identity-platform) * 67 min | 2020 | [Effective Serialization with Python](https://www.linkedin.com/learning/effective-serialization-with-python) * 67 min | 2019 | [Learning FPGA Development](https://www.linkedin.com/learning/learning-fpga-development) * 68 min | 2018 | [DevSecOps: Building a Secure Continuous Delivery Pipeline](https://www.linkedin.com/learning/devsecops-building-a-secure-continuous-delivery-pipeline) * 69 min | 2018 | [Learning Vagrant](https://www.linkedin.com/learning/learning-vagrant) * 71 min | 2018 | [Microsoft Teams Bot Development](https://www.linkedin.com/learning/microsoft-teams-bot-development) * 72 min | 2019 | [Vue.js 2 for Web Designers](https://www.linkedin.com/learning/vue-js-2-for-web-designers) * 72 min | 2019 | [Python: Working with Predictive Analytics](https://www.linkedin.com/learning/python-working-with-predictive-analytics) * 72 min | 2013 | [CSS: Gradients](https://www.linkedin.com/learning/css-gradients) * 73 min | 2020 | [Business Analysis Foundations: Business Process Modeling](https://www.linkedin.com/learning/business-analysis-foundations-business-process-modeling) * 75 min | 2022 | [Advanced C Programming](https://www.linkedin.com/learning/advanced-c-programming) * 75 min | 2018 | [WebAssembly: Accessing C and C++ in Web Applications](https://www.linkedin.com/learning/webassembly-accessing-c-and-c-plus-plus-in-web-applications) * 75 min | 2017 | [React: Testing and Debugging (2017)](https://www.linkedin.com/learning/react-testing-and-debugging-2017) * 77 min | 2017 | [Apache Cordova: Building Cross-Platform Mobile Apps](https://www.linkedin.com/learning/apache-cordova-building-cross-platform-mobile-apps) * 79 min | 2022 | [Building an Event-Driven Application Using Azure Event Grid](https://www.linkedin.com/learning/building-an-event-driven-application-using-azure-event-grid) * 80 min | 2020 | [WordPress: Workflows](https://www.linkedin.com/learning/wordpress-workflows-2) * 80 min | 2018 | [Algorithmic Trading and Stocks Essential Training (2018)](https://www.linkedin.com/learning/algorithmic-trading-and-stocks-essential-training-2018) * 81 min | 2018 | [Learning Google Flutter for Mobile Developers](https://www.linkedin.com/learning/learning-google-flutter-for-mobile-developers) * 82 min | 2020 | [Desenvolvimento Ágil de Software](https://www.linkedin.com/learning/desenvolvimento-agil-de-software) * 87 min | 2021 | [Microsoft Project Management: Choose the Right Tool for the Job](https://www.linkedin.com/learning/microsoft-project-management-choose-the-right-tool-for-the-job) * 88 min | 2022 | [Go Essential Training](https://www.linkedin.com/learning/go-essential-training-16567666) * 97 min | 2019 | [Firewall Administration Essential Training](https://www.linkedin.com/learning/firewall-administration-essential-training-2) * 97 min | 2019 | [Software Design: Modeling with UML](https://www.linkedin.com/learning/software-design-modeling-with-uml) * 98 min | 2018 | [C++ Templates and the STL](https://www.linkedin.com/learning/c-plus-plus-templates-and-the-stl) * 98 min | 2018 | [Interactive Animations with CSS and JavaScript](https://www.linkedin.com/learning/interactive-animations-with-css-and-javascript) * 101 min | 2021 | [Prepare for the AWS Certified Cloud Practitioner (CLF-C01) Certification Exam](https://www.linkedin.com/learning/paths/prepare-for-the-aws-certified-cloud-practitioner-clf-c01-certification-exam) * 104 min | 2017 | [Motion Graphic Design: Composition](https://www.linkedin.com/learning/motion-graphic-design-composition) * 104 min | 2017 | [Learning Vue.js (2017)]() * 104 min | 2014 | [Grammar Foundations](https://www.linkedin.com/learning/grammar-foundations) * 105 min | 2018 | [Building APIs with LoopBack](https://www.linkedin.com/learning/building-apis-with-loopback) * 107 min | 2020 | [Learning the Elastic Stack](https://www.linkedin.com/learning/learning-the-elastic-stack-2) * 108 min | 2021 | [DevOps Foundations: Continuous Delivery/Continuous Integration](https://www.linkedin.com/learning/devops-foundations-continuous-delivery-continuous-integration-14449917) * 109 min | 2020 | [Building a Website with Node.js and Express.js](https://www.linkedin.com/learning/building-a-website-with-node-js-and-express-js-3) * 116 min | 4 | [Microsoft Cybersecurity Architect Expert (SC-100) Cert Prep: 1 Design a Zero Trust Strategy and Architecture](https://www.linkedin.com/learning/microsoft-cybersecurity-architect-expert-sc-100-cert-prep-1-design-a-zero-trust-strategy-and-architecture) * 116 min | 2022 | [Accessibility for Web Design](https://www.linkedin.com/learning/accessibility-for-web-design) * 116 min | 2020 | [Azure Essential Training for Developers](https://www.linkedin.com/learning/azure-essential-training-for-developers) * 117 min | 2022 | [Express Essential Training](https://www.linkedin.com/learning/express-essential-training-14539342) * 119 min | 2019 | [Ionic 4.0 : Deploying Ionic Apps](https://www.linkedin.com/learning/ionic-4-0-deploying-ionic-apps) * 121 min | 2021 | [Fundamentos do Marketing Digital](https://www.linkedin.com/learning/fundamentos-do-marketing-digital) * 122 min | 2020 | [Técnicas para Desbloquear a Criatividade e Estimular a Inovação](https://www.linkedin.com/learning/tecnicas-para-desbloquear-a-criatividade-e-estimular-a-inovacao) * 122 min | 2015 | [After Effects Compositing: 6 Tracking and Stabilization](https://www.linkedin.com/learning/after-effects-compositing-6-tracking-and-stabilization) * 122 min | 2013 | [JavaScript: Enhancing the DOM](https://www.linkedin.com/learning/javascript-enhancing-the-dom) * 123 min | 2021 | [Learning Kubernetes (2018)](https://www.linkedin.com/learning/learning-kubernetes-2018) * 123 min | 2013 | [JavaScript: Events](https://www.linkedin.com/learning/javascript-events) * 132 min | 4 | [Microsoft Power Automate Essential Training](https://www.linkedin.com/learning/microsoft-power-automate-essential-training-2022) * 132 min | 2017 | [Vue.js: Building an Interface (2017)](https://www.linkedin.com/learning/vue-js-building-an-interface-2017) * 134 min | 2017 | [Advanced HTML5 Game Development](https://www.linkedin.com/learning/advanced-html5-game-development) * 142 min | 2017 | [Advanced Mechanics in CG Animation](https://www.linkedin.com/learning/advanced-mechanics-in-cg-animation) * 144 min | 2019 | [Building Laravel and Vue.js 2 Web Apps](https://www.linkedin.com/learning/building-laravel-and-vue-js-2-web-apps) * 155 min | 2017 | [CSS Essential Training 1 (2017)](https://www.linkedin.com/learning/css-essential-training-1-2017) * 157 min | 2019 | [Learning Docker (2018)](https://www.linkedin.com/learning/learning-docker-2018) * 157 min | 2019 | [React: Creating and Hosting a Full-Stack Site (2019)](https://www.linkedin.com/learning/react-creating-and-hosting-a-full-stack-site-2019) * 160 min | 2020 | [Linux Device Drivers](https://www.linkedin.com/learning/linux-device-drivers) * 161 min | 2021 | [Kubernetes: Your First Project](https://www.linkedin.com/learning/kubernetes-your-first-project) * 174 min | 2021 | [C# Algorithms](https://www.linkedin.com/learning/c-sharp-algorithms) * 179 min | 2021 | [Building an Ubuntu Server](https://www.linkedin.com/learning/building-an-ubuntu-server) * 183 min | 2021 | [Tailwind CSS Essential Training](https://www.linkedin.com/learning/tailwind-css-essential-training) * 190 min | 2018 | [Google Sheets: Advanced Formulas and Functions](https://www.linkedin.com/learning/google-sheets-advanced-formulas-and-functions) * 207 min | 2019 | [Motion Control 3D: Bringing Photos to Life in Three Dimensions with After Effects and Photoshop CC (2019)](https://www.linkedin.com/learning/motion-control-3d-bringing-photos-to-life-in-three-dimensions-with-after-effects-and-photoshop-cc-2019) * 217 min | 2020 | [Vue.js: Creating and Hosting a Full-Stack Site](https://www.linkedin.com/learning/vue-js-creating-and-hosting-a-full-stack-site) * 226 min | 2020 | [CompTIA Security+ (SY0-601) Cert Prep: 8 Network Security Design and Implementation](https://www.linkedin.com/learning/comptia-security-plus-sy0-601-cert-prep-8-network-security-design-and-implementation) * 243 min | 2021 | [Rust Essential Training](https://www.linkedin.com/learning/rust-essential-training) * 248 min | 2018 | [React Recipes]() * 267 min | 2019 | [CSS Essential Training](https://www.linkedin.com/learning/css-essential-training-3) * 279 min | 2017 | [Angular: Progressive Web Apps](https://www.linkedin.com/learning/angular-progressive-web-apps) * 297 min | 2018 | [Robot Framework Test Automation: Level 2](https://www.linkedin.com/learning/robot-framework-test-automation-level-2) * 313 min | 2021 | [Inkscape Essential Training](https://www.linkedin.com/learning/inkscape-essential-training-9975138) * 319 min | 2019 | [Getting Started with C++](https://www.linkedin.com/learning/paths/getting-started-with-c-plus-plus) * 367 min | 2020 | [Domine as Competências Pessoais mais requisitadas no Mercado de Trabalho](https://www.linkedin.com/learning/paths/domine-as-competencias-pessoais-mais-requisitadas-no-mercado-de-trabalho) * 375 min | 2019 | [Torne-se um Líder](https://www.linkedin.com/learning/paths/torne-se-um-lider) * 396 min | 2022 | [Red Hat Enterprise Linux 8 Essential Training](https://www.linkedin.com/learning/red-hat-enterprise-linux-8-essential-training) * 452 min | 2016 | [Nuke Essential Training (2014)](https://www.linkedin.com/learning/nuke-essential-training-2014) * 464 min | 3 | [Habilidades Interpessoais para o Trabalho](https://www.linkedin.com/learning/paths/habilidades-interpessoais-para-o-trabalho) * 535 min | 2020 | [Develop Your Skills in Agile Software Development](https://www.linkedin.com/learning/paths/develop-your-skills-in-agile-software-development) * 959 min | 2021 | [Linux Tips Weekly](https://www.linkedin.com/learning/linux-tips-weekly) ","title":"linkedin — in progress courses"},{"id":534,"location":"/til/dijkstra.html","tags":["dijkstra","t2","t3"],"text":"::: toc  ## Introduction  ## References  * []()  ","title":"Dijkstra's algorithm"},{"id":535,"location":"/til/swig.html","tags":["swig","C++","lua","python"],"text":"::: wip  ::: toc  ## Introduction  ## References  * [SWIG Tutorial](https://www.swig.org/tutorial.html) ","title":"SWIG"},{"id":536,"location":"/certificate/2023-02-01_linkedin_Scrum_The_Basics.html","tags":["scrum"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  Scrum: The Basics Course completed on Feb 01, 2023 at 07:26PM UTC • 1 hour 0 min  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                 LinkedIn Learning                                                1000 W Maude Ave Head of Content Strategy, Learning             Sunnyvale, CA 94085  Certificate ID: Ackg33i32zx_KzW8upjSk2PXKRJH ```  ## Course details  * 1h * Beginner + Intermediate  If you've spent any time in the project management world, you've likely heard of scrum—the popular framework for managing complex processes. If this mysterious-sounding framework has piqued your interest, this course can help provide you with a basic understanding of what scrum is and how you can start implementing it at work. Follow scrum expert Kelley O'Connell as she walks through why scrum has taken the business world by storm, and how it asks you to organize your team and work. Plus, she explains how to manage your projects and measure how they're faring, and set manageable improvement goals.  ## Learning objectives  * The scrum approach to project success * Solving project problems with scrum * Establishing your scrum team * Setting the vision for your project * Writing user stories * Setting boundaries for success * Getting stories done in scrum * Assessing the team  ## Skills covered  * Scrum  ","title":"Scrum The Basics"},{"id":537,"location":"/certificate/2023-02-01_linkedin_Scrum_The_Basics_PMI.html","tags":["scrum"],"text":" ``` Certificate of Completion Congratulations, Geraldo Ribeiro  Scrum: The Basics Course completed on Feb 01, 2023 at 07:26PM UTC  By continuing to learn, you have expanded your perspective, sharpened your skills, and made yourself even more in demand.                                                     LinkedIn Learning                                                     1000 W Maude Ave Head of Content Strategy, Learning                  Sunnyvale, CA 94085                  The PMI Registered Education Provider logo is a registered mark                 of the Project Management Institute, Inc.  Program: PMI® Registered Education Provider | Provider ID: #4101 Certificate No: Ackg33i32zx_KzW8upjSk2PXKRJH PDUs/ContactHours: 1.00 | Activity #: 4101PJXRFN ```   ## Course details  * 1h * Beginner + Intermediate  If you've spent any time in the project management world, you've likely heard of scrum—the popular framework for managing complex processes. If this mysterious-sounding framework has piqued your interest, this course can help provide you with a basic understanding of what scrum is and how you can start implementing it at work. Follow scrum expert Kelley O'Connell as she walks through why scrum has taken the business world by storm, and how it asks you to organize your team and work. Plus, she explains how to manage your projects and measure how they're faring, and set manageable improvement goals.  ## Learning objectives  * The scrum approach to project success * Solving project problems with scrum * Establishing your scrum team * Setting the vision for your project * Writing user stories * Setting boundaries for success * Getting stories done in scrum * Assessing the team  ## Skills covered  * Scrum  ","title":"Scrum The Basics PMI"},{"id":538,"location":"/til/mermaid.html","tags":["mermaid","diagram","text-driven"],"text":"::: toc  ## Introduction  ::: mermaid src=\"/til/mermaid_sample.svg\" title=\"Mermaid sample\" flowchart TB     c1-->a2     subgraph one     a1-->a2     end     subgraph two     b1-->b2     end     subgraph three     c1-->c2     end  ::: fixme The links below are not working properly.  ::: mermaid src=\"/til/mermaid_sample_with_link.svg\" title=\"Mermaid sample with link\" flowchart LR     A-->B     B-->C     C-->D[Some text <a href='https://google.com'>Google</a>]     click A callback \"Tooltip for a callback\"     click B \"https://www.github.com\" \"This is a tooltip for a link\"     click A call callback() \"Tooltip for a callback\"     click B href \"https://www.github.com\" \"This is a tooltip for a link\"   ## References  * [MermaidJS: Suppress using HTML tags in SVG documents](https://lightrun.com/answers/yuzutech-kroki-mermaidjs-suppress-using-html-tags-in-svg-documents) * [Flowcharts - Basic Syntax](https://mermaid.js.org/syntax/flowchart.html) * [Command line tool for the Mermaid library](https://github.com/mermaid-js/mermaid-cli) * [Mermaid Cheat Sheet](https://jojozhuang.github.io/tutorial/mermaid-cheat-sheet/) ","title":"Mermaid diagram"},{"id":539,"location":"/til/gunslinger.html","tags":["gunslinger","game"],"text":"::: toc  ## Introduction  ::: fixme TBD  ## Free Game Assets  * [kenney.nl](https://kenney.nl/)  ## References  * [Como Fazer ENGINES & JOGOS em C++! (Framework ÓTIMO!)](https://www.youtube.com/watch?v=NFS4tb4GwdU) * [C99, header-only framework for games and multimedia applications](https://github.com/MrFrenik/gunslinger) * [Gunslinger: C / Opengl Dev Stream - Header Only Game Engine (GFX)](https://youtu.be/UngotkZa3sM) * [Header-Only Game Framework in C | Game Engineering](https://youtu.be/-_HxKDNuCqA) ","title":"gunslinger"},{"id":540,"location":"/til/cpp_heap_vs_stack.html","tags":["C++","memory","heap","stack"],"text":" ::: toc    ![Stack vs Pile vs Heap](/til/cpp_stack_vs_pile_vs_heap.webp)  # Memory structure  ![Memory structure.](/til/cpp_heap_vs_stack_01.svg)   ![Address space](/til/cpp_heap_vs_stack_address_space.webp)  # Stack vs Heap Pros and Cons  ## Stack  * very fast access * don't have to explicitly de-allocate variables * space is managed efficiently by CPU, memory will not become fragmented * local variables only * limit on stack size (OS-dependent) * variables cannot be resized  ## Heap  * variables can be accessed globally * no limit on memory size * (relatively) slower access * no guaranteed efficient use of space, memory may become fragmented over   time as blocks of memory are allocated, then freed * you must manage memory (you're in charge of allocating and freeing   variables) * variables can be resized using realloc()  # Dynamic Memory Allocation in C  C provides the following functions to allocate memory at runtime:  * `malloc`: allocates raw memory on the heap * `calloc`: allocates raw memory and initializes to zero * `realloc`: can change the size of memory block * `free`: releases the memory allocated by other functions  ## Memory Allocation  ![Memory allocation.](/til/cpp_heap_vs_stack_memory_allocation_01.svg)  ![Memory allocation.](/til/cpp_heap_vs_stack_memory_allocation_02.svg) @endpikchr  ## Example of use   ```cpp   int a1;  // stack   int a2;  // stack   int a3;  // stack   int a4;  // stack    int *p1 = new int[5];  // heap   int *p2 = new int[4];  // heap   int *p3 = new int[3];  // heap   int *p4 = new int[2];  // heap   int *p5 = new int[1];  // heap; until p5 takes the next 32 bytes block   int *p6 = new int[7];  // heap; long jump here!!!    cout << &a1 << \" stack a1\\n\";   cout << &a2 << \" stack a2: \" << long(&a2) - long(&a1) << \" bytes from a1\\n\";   cout << &a3 << \" stack a3: \" << long(&a3) - long(&a2) << \" bytes from a2\\n\";   cout << &a4 << \" stack a4: \" << long(&a4) - long(&a3) << \" bytes from a3\\n\";    cout << p1 << \" heap p1\\n\";   cout << &p1[0] << \" heap p1[0]\\n\";   cout << &p1[1] << \" heap p1[1]\\n\";   cout << &p1[2] << \" heap p1[2]\\n\";   cout << &p1[3] << \" heap p1[3]\\n\";   cout << &p1[4] << \" heap p1[4]\\n\";   cout << p2 << \" heap p2: \" << long(p2) - long(p1) << \" bytes from p1\\n\";   cout << &p2[0] << \" heap p2[0]\\n\";   cout << &p2[1] << \" heap p2[1]\\n\";   cout << &p2[2] << \" heap p2[2]\\n\";   cout << &p2[3] << \" heap p2[3]\\n\";   cout << p3 << \" heap p3: \" << long(p3) - long(p2) << \" bytes from p2\\n\";   cout << p4 << \" heap p4: \" << long(p4) - long(p3) << \" bytes from p3\\n\";   cout << p5 << \" heap p5: \" << long(p5) - long(p4) << \" bytes from p4\\n\";   cout << p6 << \" heap p6: \" << long(p6) - long(p5) << \" bytes from p5\\n\";    delete[] p1;   delete[] p2;   delete[] p3;   delete[] p4;   delete[] p5;   delete[] p6;    // The pointer itself is allocated on the stack   // The dynamic memeory is allocated on the heap   // Typical metadata = size & allocation status   // If the size is aligned to > 2 bytes,   // can use bottom bit of size for allocated bit;   auto printHeader = [](auto size) {     int *ptr = static_cast<int *>(calloc(size, sizeof(int)));  // heap     size_t * headerBytePtr = (size_t *)ptr;     headerBytePtr--;     fmt::print(\"{:16b} {:6d} {:6d} {:6d}\\n\", *headerBytePtr, *headerBytePtr, size * sizeof(int), size);     free(ptr);   };    fmt::print(\"sizeof(size_t) = {} bytes\\n\", sizeof(size_t));   for (int i = 1; i <= 32; ++i) {     printHeader(i);   }   printHeader(100);   printHeader(200);   printHeader(1000);   printHeader(10000);  ```  # Possible output   ```txt 0x7ffda4efa8bc stack a1 0x7ffda4efa8b8 stack a2: -4 bytes from a1 0x7ffda4efa8b4 stack a3: -4 bytes from a2 0x7ffda4efa8b0 stack a4: -4 bytes from a3 0x563c15c9b9a0 heap p1 0x563c15c9b9a0 heap p1[0] 0x563c15c9b9a4 heap p1[1] 0x563c15c9b9a8 heap p1[2] 0x563c15c9b9ac heap p1[3] 0x563c15c9b9b0 heap p1[4] 0x563c15c9b9c0 heap p2: 32 bytes from p1 0x563c15c9b9c0 heap p2[0] 0x563c15c9b9c4 heap p2[1] 0x563c15c9b9c8 heap p2[2] 0x563c15c9b9cc heap p2[3] 0x563c15c9b9e0 heap p3: 32 bytes from p2 0x563c15c9ba00 heap p4: 32 bytes from p3 0x563c15c9ba20 heap p5: 32 bytes from p4 0x563c15c9b2e0 heap p6: -1856 bytes from p5 sizeof(size_t) = 8 bytes           100001     33      4      1           100001     33      8      2           100001     33     12      3           100001     33     16      4           100001     33     20      5           100001     33     24      6           110001     49     28      7           110001     49     32      8           110001     49     36      9           110001     49     40     10          1010001     81     44     11          1000001     65     48     12          1000001     65     52     13          1000001     65     56     14          1010001     81     60     15          1010001     81     64     16          1010001     81     68     17          1010001     81     72     18          1100001     97     76     19          1100001     97     80     20          1100001     97     84     21          1100001     97     88     22          1110001    113     92     23          1110001    113     96     24          1110001    113    100     25          1110001    113    104     26         10000001    129    108     27         10000001    129    112     28         10000001    129    116     29         10000001    129    120     30         10010001    145    124     31         10010001    145    128     32        110100001    417    400    100       1100110001    817    800    200     111110110001   4017   4000   1000 1001110001010001  40017  40000  10000  ```  # References  * [How does free know how much to free?](https://stackoverflow.com/questions/1518711/how-does-free-know-how-much-to-free) * [Implementing malloc CS 351: Systems Programming](https://moss.cs.iit.edu/cs351/slides/slides-malloc.pdf) * [CS 351: Systems Programming](https://moss.cs.iit.edu/cs351/)  ","title":"C++ heap vs stack"},{"id":541,"location":"/til/cpp_mosquitto_01.html","tags":["C++","mosquitto","libpaho-mqtt-dev"],"text":" | Target              | Description | |---------------------|-------------| | paho-mqtt3a         | asynchronous, no encryption | | paho-mqtt3as        | asynchronous with SSL/TLS support | | paho-mqtt3c         | synchronous, no encryption | | paho-mqtt3cs        | synchronous with SSL/TLS support | | paho-mqtt3a-static  | asynchronous, no encryption, static linkage | | paho-mqtt3as-static | asynchronous with SSL/TLS support, static linkage | | paho-mqtt3c-static  | synchronous, no encryption, static linkage | | paho-mqtt3cs-static | synchronous with SSL/TLS support, static linkage |  ```cpp void publishMessages() {   int rc;   struct mosquitto *mosq;    this_thread::sleep_for(chrono::seconds(1));    // called on subscribeTopic function   // mosquitto_lib_init();    mosq = mosquitto_new(\"publisher-test\", true, NULL);    rc = mosquitto_connect(mosq, \"localhost\", 1883, 60);   if (rc != 0) {     fmt::print(\"PUB: Client could not connect to broker! Error Code: {}\\n\", rc);     mosquitto_destroy(mosq);     return;   }   fmt::print(\"PUB: We are now connected to the broker!\\n\");    for (int i = 0; i < 5; ++i) {     auto msg = fmt::format(\"Hello from C++ #{}\", i);     fmt::print(\"PUB: mosquitto_publish #{}\\n\", i);     mosquitto_publish(mosq, NULL, test_topic, msg.size(), msg.data(), 0, false);     this_thread::sleep_for(chrono::seconds(1));   }    this_thread::sleep_for(chrono::seconds(2));   fmt::print(\"PUB: mosquitto_disconnect\\n\");   mosquitto_disconnect(mosq);   fmt::print(\"PUB: mosquitto_destroy\\n\");   mosquitto_destroy(mosq);   // mosquitto_lib_cleanup(); } ```     ```cpp void SubOnConnect(struct mosquitto *mosq, void *obj, int rc) {   fmt::print(\"SUB: OnConnect: ID: {} RC: {}\\n\", *(int *)obj, rc);   if (rc) {     fmt::print(\"SUB: OnConnect: Error with result code:\", rc);     exit(-1);   }   mosquitto_subscribe(mosq, NULL, test_topic, 0); }  void SubOnMessage(struct mosquitto *mosq, void *obj,                const struct mosquitto_message *msg) {   fmt::print(\"SUB: OnMessage: New message with topic {}: {}\\n\", msg->topic,              (char *)msg->payload); } ```    ```cpp void subscribeTopic() {   int rc, id = 12;    mosquitto_lib_init();    struct mosquitto *mosq;    mosq = mosquitto_new(\"subscribe-test\", true, &id);   mosquitto_connect_callback_set(mosq, SubOnConnect);   mosquitto_message_callback_set(mosq, SubOnMessage);    rc = mosquitto_connect(mosq, \"localhost\", 1883, 10);   if (rc) {     fmt::print(\"Could not connect to Broker with return code {}\\n\", rc);     return;   }    fmt::print(\"SUB: mosquitto_loop_start\\n\");   mosquitto_loop_start(mosq);    fmt::print(\"SUB: sleep for 6s\\n\");   this_thread::sleep_for(chrono::seconds(6));    fmt::print(\"SUB: mosquitto_loop_stop\\n\");   mosquitto_loop_stop(mosq, true);    fmt::print(\"SUB: mosquitto_disconnect\\n\");   mosquitto_disconnect(mosq);    fmt::print(\"SUB: mosquitto_destroy\\n\");   mosquitto_destroy(mosq);    fmt::print(\"SUB: mosquitto_lib_cleanup\\n\");   mosquitto_lib_cleanup(); } ```   ```cpp    thread tSub(subscribeTopic);   thread tPub(publishMessages);    tSub.join();   tPub.join();  ```  ::: toc    ## Possible output   ```txt SUB: mosquitto_loop_start SUB: sleep for 6s SUB: OnConnect: ID: 12 RC: 0 PUB: We are now connected to the broker! PUB: mosquitto_publish #0 SUB: OnMessage: New message with topic test_topic: Hello from C++ #0 PUB: mosquitto_publish #1 SUB: OnMessage: New message with topic test_topic: Hello from C++ #1 PUB: mosquitto_publish #2 SUB: OnMessage: New message with topic test_topic: Hello from C++ #2 PUB: mosquitto_publish #3 SUB: OnMessage: New message with topic test_topic: Hello from C++ #3 PUB: mosquitto_publish #4 SUB: OnMessage: New message with topic test_topic: Hello from C++ #4 SUB: mosquitto_loop_stop SUB: mosquitto_disconnect SUB: mosquitto_destroy SUB: mosquitto_lib_cleanup PUB: mosquitto_disconnect PUB: mosquitto_destroy  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ mosquitto_01"},{"id":542,"location":"/til/mongodb.html","tags":["t1","t2","t3"],"text":"::: toc  ## Introduction   https://github.com/LinkedInLearning/introduction-to-mongodb-4315215/codespaces  ## References  * []() ","title":"mongodb"},{"id":543,"location":"/til/normcap.html","tags":["normcap","ocr","image-to-text","screen-capture","screenshot"],"text":"::: toc  ## Introduction  **NormCap** is an OCR powered screen-capture tool to capture information instead of images. For Linux, macOS and Windows.  ## Installation  ```shell $ sudo apt install build-essential \\   tesseract-ocr tesseract-ocr-eng \\   libtesseract-dev libleptonica-dev \\   wl-clipboard  $ pip install normcap ```  ## References  * [OCR powered screen-capture tool to capture information instead of images](https://github.com/dynobo/normcap) ","title":"normcap"},{"id":544,"location":"/til/cpp_gdb_test_01.html","tags":["C++","gdb","debug","nemiver","ddd","rr"],"text":" ::: toc   ## Compilation flags  Use `-ggdb` or `-g3` to include **all** information available to **gdb**.  By using `-g` only a limited amount of information is added to the executable.  See the vídeo [Debugging with Macros (-g3,-ggdb)](https://www.youtube.com/watch?v=dh1mil1ehvE) for good explanation about the debug level flags.  ## Breakpoint  * `[b]reak function_name` * `[b]reak filename:line` * `[b]reak *memory address`  ## Running  Use the command `run` to start the program execution.  ```shell $ gdb bin/gdb_test_01 ```  ```shell $ gdb -tui bin/gdb_test_01 ```  Create breakpoint at function  `my_func_01`:  ```c++ (gdb) break my_func_01(int, float)  Breakpoint 1 at 0x3a74 ```  Execute the program with breakpoint  ```c++ (gdb) run Starting program: /data/home/geraldo/git/Intmain/language_cpp/bin/gdb_test_01  [Thread debugging using libthread_db enabled] Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\". [New Thread 0x7fffd889d700 (LWP 194516)] [New Thread 0x7fffd809c700 (LWP 194517)] [New Thread 0x7fffc789b700 (LWP 194518)] [New Thread 0x7fffc709a700 (LWP 194519)] [New Thread 0x7fffb6899700 (LWP 194520)] [New Thread 0x7fffae098700 (LWP 194521)] [New Thread 0x7fffa5897700 (LWP 194522)]  Thread 1 \"gdb_test_01\" hit Breakpoint 1, 0x0000555555557a74 in my_func_01(int, float) () ```  Continue execution after breakpoint  ```c++ (gdb) cont Continuing. s = 10 + 3.141492 = 13.141492 [Thread 0x7fffa5897700 (LWP 194522) exited] [Thread 0x7fffae098700 (LWP 194521) exited] [Thread 0x7fffb6899700 (LWP 194520) exited] [Thread 0x7fffc709a700 (LWP 194519) exited] [Thread 0x7fffc789b700 (LWP 194518) exited] [Thread 0x7fffd809c700 (LWP 194517) exited] [Thread 0x7fffd889d700 (LWP 194516) exited] [Inferior 1 (process 194512) exited normally] (gdb)  ```  ## Breakpoint condition  * `[condition] <breakpoint #> <condition>`  Updates the breakpoint indicated by the given number so that execution of the program stops at that point only if condition is true.  condition is expressed in C syntax, and can only use variables and functions that are available in the scope of the breakpoint location.  Create the breakpoint #1 at line 112  ```shell (gdb) list 104\t} 105 106\tint my_func_02(int x) { 107\t  return x + 42; 108\t} 109 110\tvoid loop() { 111\t  for( int i=0; i<10; i++) { 112\t    fmt::print(\"i = {}\\n\", i); 113\t  } (gdb) break 112 Breakpoint 1 at 0x3d92: file gdb_test_01.cpp, line 112. ```  Update the breakpoint #1 condition  ```shell (gdb) condition 1 i == 7 ```  Run the program, and the breakpoint only will be actioned for `i == 7`  ```shell (gdb) run Starting program: /data/home/geraldo/git/Intmain/language_cpp/bin/gdb_test_01 [Thread debugging using libthread_db enabled] Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\". [New Thread 0x7fffd889c700 (LWP 490606)] [New Thread 0x7fffd809b700 (LWP 490607)] [New Thread 0x7fffcf89a700 (LWP 490608)] [New Thread 0x7fffbf099700 (LWP 490609)] [New Thread 0x7fffb6898700 (LWP 490610)] [New Thread 0x7fffae097700 (LWP 490611)] [New Thread 0x7fffa5896700 (LWP 490612)] s = 10 + 3.141492 = 13.141492 i = 0 i = 1 i = 2 i = 3 i = 4 i = 5 i = 6  Thread 1 \"gdb_test_01\" hit Breakpoint 1, loop () at gdb_test_01.cpp:112 112\t    fmt::print(\"i = {}\\n\", i); ```  Check backtrace  ```shell (gdb) backtrace  #0  loop() () at gdb_test_01.cpp:112 #1  0x0000555555557edc in main(int, char**) (argc=1, argv=0x7fffffffe3b8) at gdb_test_01.cpp:121 ```  Continue the execution as well  ```shell (gdb) continue Continuing. i = 7 i = 8 i = 9 [Thread 0x7fffa5896700 (LWP 490612) exited] [Thread 0x7fffae097700 (LWP 490611) exited] [Thread 0x7fffb6898700 (LWP 490610) exited] [Thread 0x7fffbf099700 (LWP 490609) exited] [Thread 0x7fffcf89a700 (LWP 490608) exited] [Thread 0x7fffd809b700 (LWP 490607) exited] [Thread 0x7fffd889c700 (LWP 490606) exited] [Inferior 1 (process 490602) exited normally] (gdb) ```  Another option to condition is ignoring an amount of hits on an specific breakpoint. To ignore `1000` hits on breakpont `#2` you can use:  ```shell ignore 2 1000 ```  ## Watchpoint  * [Watchpoints - more than watch and   continue](https://undo.io/resources/gdb-watchpoint/watchpoints-more-than-watch-and-continue/)  ## Time travel (rr record and replay)  ```shell $ sudo apt install rr ```  ```shell $ sudo rr record -n ./prog args ```  ```shell $ sudo rr replay   # last $ sudo rr replay /path/to/file ```  * [Time travel debugging with rr   debugger](https://undo.io/resources/gdb-watchpoint/time-travel-debugging-rr-debugger/)  ## Multiprocess debugging  * [Multiprocess debugging in GDB](https://undo.io/resources/gdb-watchpoint/multiprocess-debugging-gdb/)  ## Disassembly  If you do not have access to the source code of a function and wish to set a breakpoint on a particular instruction, call `disassemble function_name` (where `function_name` is the name of the procedure); this command will allow you to see the memory address of each instruction.  For the following code:  ```c++ int my_func_02(int x) {   return x + 42; } ```  We can get something like:  ``` (gdb) disassemble my_func_02(int) Dump of assembler code for function _Z10my_func_02i:    0x0000000000003d60 <+0>:\tpush   %rbp    0x0000000000003d61 <+1>:\tmov    %rsp,%rbp    0x0000000000003d64 <+4>:\tmov    %edi,-0x4(%rbp)    0x0000000000003d67 <+7>:\tmov    -0x4(%rbp),%eax    0x0000000000003d6a <+10>:\tadd    $0x2a,%eax         ; 0x2a = 42    0x0000000000003d6d <+13>:\tpop    %rbp    0x0000000000003d6e <+14>:\tret End of assembler dump. ```  ## TUI enable  * Type `tui enable` on gdb prompt * `-tui` on command line  ![Text user interface](/til/cpp_gdb_tui_01.webp)  ## Displaying informations  ```shell (gdb) help p print, inspect, p Print value of expression EXP. Usage: print [[OPTION]... --] [/FMT] [EXP] ```  FMT:  * o(octal) * x(hex) * d(decimal) * u(unsigned decimal) * t(binary) * f(float) * a(address) * i(instruction) * c(char) * s(string) * z(hex, zero padded on the left)  ### Print in binary format  ```shell (gdb) p /t 1024 $1 = 10000000000 (gdb) p /t 7 $2 = 111 ```  ### Print in hex format  ```shell (gdb) p /x 1024 $1 = 0x400 (gdb) p /x 7 $2 = 0x7 ```  ## Finishing  * `kill` stop debugging session * `quit` stop gdb  ## Example code   ```cpp void my_func_01( int a, float pi ) {   auto s = fmt::format( \"{} + {} = {}\", a, pi, a + pi );   fmt::print( \"s = {}\\n\", s ); }  int my_func_02( int x ) {   return x + 42; }  void loop() {   for( int i = 0; i < 10; i++ ) {     fmt::print( \"i = {}\\n\", i );   } }  int main( [[maybe_unused]] int argc, [[maybe_unused]] char **argv ) {   int   a  = 10;   float pi = 3.141492;   my_func_01( a, pi );   loop();   return 0; } ```   ## Scripting  * By default during the startup, GDB executes the file `.gdbinit`. * Use `--command=<filename>` to specify a script   ``` set pagination off set logging file gdb.output set logging on  set $var = 0 # yes, you can declare variables ...  break function1 if param1 == 32     command 1     print param2     print param3->member1     continue end  break file.c:142 if x > 4     command 2     print y     call checker_function     continue end  break function2 if $var++ < 3     command 3     print $var     backtrace full     continue end  run  set logging off quit ```   ## Possible output   ```txt s = 10 + 3.141492 = 13.141492 i = 0 i = 1 i = 2 i = 3 i = 4 i = 5 i = 6 i = 7 i = 8 i = 9  ```  ## References  * [How to Debug a C or C++ Program on Linux Using gdb](https://www.maketecheasier.com/debug-program-using-gdb-linux/) * [How to debug a C/C++ program with Nemiver debugger](https://www.xmodulo.com/debug-program-nemiver-debugger.html) * [Scripting GDB](https://sdimitro.github.io/post/scripting-gdb/) * ▶️[Debugging with Macros (-g3,-ggdb)](https://www.youtube.com/watch?v=dh1mil1ehvE)  ","title":"C++ debugging with GDB"},{"id":545,"location":"/til/cpp_realloc_01.html","tags":["C++","realloc_01"],"text":" ::: toc    ```cpp    int *ptr1 = nullptr;   int *ptr2 = nullptr;    auto printPointers = [&](int sz, string title) {     fmt::print(\"\\n{:14} ptr1|{:14} ptr2|{}\\n\", static_cast<void *>(ptr1),                static_cast<void *>(ptr2), title);     for (int i = 0; i < sz; ++i) {       fmt::print(\"{},\", ptr2[i]);     }   };    printPointers(0, \"Initial null\");    ptr2 = (int *)realloc(ptr1, sizeof(int));   printPointers(1, \"First realloc (non initilized value on memory)\");    // Realloc will copy the previous memory content   for (auto i = 1; i <= 64; ++i) {     ptr2 = (int *)realloc(ptr1, i * sizeof(int));     if (ptr2) {       ptr1 = ptr2;       ptr2[i - 1] = (i - 1) % 10;  // initilize the i-th position       if (i % 4 == 0) {         printPointers(i, fmt::format(\"Realloc {} x sizeof(int)\", i));       }     } else {       fmt::print(\"Failure on realloc\\n\");       break;     }   }    free(ptr2);   // the pointer address remains the same   // the content is destroyed   printPointers(4, \"After free ptr2\" );    ptr1 = ptr2 = nullptr;   printPointers(0, \"After nullptr attribution\" );  ```   ## Possible output   ```txt             0x0 ptr1|           0x0 ptr2|Initial null             0x0 ptr1|0x5579a0b949a0 ptr2|First realloc (non initilized value on memory) -1598469696, 0x5579a0b949c0 ptr1|0x5579a0b949c0 ptr2|Realloc 4 x sizeof(int) 0,1,2,3, 0x5579a0b98860 ptr1|0x5579a0b98860 ptr2|Realloc 8 x sizeof(int) 0,1,2,3,4,5,6,7, 0x5579a0b94260 ptr1|0x5579a0b94260 ptr2|Realloc 12 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1, 0x5579a0b94260 ptr1|0x5579a0b94260 ptr2|Realloc 16 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5, 0x5579a0b948e0 ptr1|0x5579a0b948e0 ptr2|Realloc 20 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9, 0x5579a0b948e0 ptr1|0x5579a0b948e0 ptr2|Realloc 24 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3, 0x5579a0b95070 ptr1|0x5579a0b95070 ptr2|Realloc 28 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7, 0x5579a0b95070 ptr1|0x5579a0b95070 ptr2|Realloc 32 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1, 0x5579a0b95070 ptr1|0x5579a0b95070 ptr2|Realloc 36 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5, 0x5579a0b95070 ptr1|0x5579a0b95070 ptr2|Realloc 40 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9, 0x5579a0b95070 ptr1|0x5579a0b95070 ptr2|Realloc 44 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3, 0x5579a0b95070 ptr1|0x5579a0b95070 ptr2|Realloc 48 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7, 0x5579a0b95070 ptr1|0x5579a0b95070 ptr2|Realloc 52 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1, 0x5579a0b95070 ptr1|0x5579a0b95070 ptr2|Realloc 56 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5, 0x5579a0b95070 ptr1|0x5579a0b95070 ptr2|Realloc 60 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9, 0x5579a0b95070 ptr1|0x5579a0b95070 ptr2|Realloc 64 x sizeof(int) 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3, 0x5579a0b95070 ptr1|0x5579a0b95070 ptr2|After free ptr2 -1598609328,21881,-1604100080,21881,            0x0 ptr1|           0x0 ptr2|After nullptr attribution  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ realloc_01"},{"id":546,"location":"/til/cpp_tasks_01.html","tags":["C++","tasks","async"],"text":" ::: toc   ```cpp #include <fmt/core.h>  #include <chrono> #include <future> #include <iostream> #include <thread> #include <vector>  int main() {   std::cout << \"Main thread id: \" << std::this_thread::get_id() << std::endl;   std::vector<std::future<int>> futures;    auto beg = std::chrono::high_resolution_clock::now();    for (int i = 0; i < 1000; ++i) {     auto fut = std::async([i] {       std::this_thread::sleep_for(std::chrono::seconds(1));       return i;     });     futures.push_back(std::move(fut));   }   std::for_each(futures.begin(), futures.end(),                 [](std::future<int>& fut) { fut.wait(); });    auto end = std::chrono::high_resolution_clock::now();   auto duration = duration_cast<std::chrono::milliseconds>(end - beg);   std::cout << \"Total duration for 1000 tasks of 1s: \" << duration.count()             << \"ms\" << std::endl; } ```    ## Possible output   ```txt Main thread id: 139919055844032 Total duration for 1000 tasks of 1s: 1073ms  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ tasks"},{"id":547,"location":"/til/splunk.html","tags":["splunk","siem","soar","security"],"text":"::: toc  ## Introduction  ## Manual security incident Management  * Review IT help desk tickets * Review logs and network activity * Determine if anomalies exist * Adhere to standard procedures  ## SIEM — Security Information and Event Management  ### SIEM Capabilities  * Centralized security monitoring * Data analytic * Data correlation * Threat detection * Dashboards, alerts, reports  ### SIEM: Detect Malicious Activity  * Centralized data ingestion from a variety of sources  * Data analysis and correlation for threat detection  * User behavior analytic (UBA) to detect anomalies * Free up security analyst time for other relevant, fulfilling tasks  ## SOAR — Security Orchestration, Automation, and Response  ### SOAR Capabilities  * Automated incident response * Playbook workflows * Add-on integration  ### SOAR: Stop Malicious Activity  * Get plugins, applications, and workflow templates from Splunkbase  * Easy procedural consistency through automation * Dashboard visualizations and reports  ### Automate Detection and Containment  * Malware incidents (ransomware, crypto mining) * Analysis of phishing emails and social media messages  * Vulnerability detection and remediation * Automated generation of IT service tickets * Automated actions based on external security advisories  ### Playbook workflow  ::: pikchr src=\"/til/splunk_playbook_workflow.svg\" title=\"Playbook workflow.\" margin = 1cm boxwid = 5cm boxht = 7mm down box \"Endpoint malware alert\" arrow 50% box \"Retrieve malware file hash\" arrow 50% box \"Compare hash to known malware\" fill yellow arrow  \" known hash yes/no\" ljust box \"Sandbox affected device\" arrow 50% box \"Remove malware\" fill green  ## Splunk Use Cases  * Monitor system and application performance * Monitor application-specific details such as the number of widgets sold * Detect potential security problems  * Mitigate verified security threats * Real-time searching  ## Splunk Licenses  * Enterprise * Dev/Test * Developer * Enterprise trial * Sales Trial * Free * Forwarder  ## Splunk Enterprise  * Windows 10 and later, Windows Server 2012 and later (.msi) * Linux (.deb, .tgz, .rpm) * macOS (.tgz, .dmg)  ## Splunk Cloud Platform  * Based on Splunk Enterprise, but platform is hosted in the cloud as a managed service * Splunk Cloud Platform service level agreement (SLA)  * NoCLI as opposed to Splunk Enterprise on-premises * On-premises forwarders collect data and send it for indexing to Splunk Cloud Platform * A welcome email message includes a URL, username, and temporary password  ## Splunk Components  * Splunk Enterprise (Windows, Linux, macOS) * Splunk Cloud Platform * Splunk Enterprise console (port 8000) * Splunk Cloud console (DNS Fully Qualified Domain Name)  ## Splunk Forwarders  * Agent that gets deployed on hosts * On the forwarder:   * Data collection (`inputs.conf`)   * Forward to indexer (`outputs.conf`) * Universal — raw, unfiltered data * Heavy — data can be filtered at source and sent to various destinations  ## Search head  ::: pikchr src=\"/til/splunk_search_head.svg\" title=\"Splunk search head\" margin = 1cm boxwid = 4cm; boxht = 0.8cm; down file \"Data\" \"Sources\" arrow 50% box \"Forwarder\" arrow 50% box \"Indexer\" arrow 50% box \"Search head\" \"http://host:8000\" arrow 50% box \"User\"   ## Splunk Enterprise Installation  Download  ```shell wget -O splunk-9.0.3-dd0128b1f8cd-linux-2.6-amd64.deb \\ \"https://download.splunk.com/products/splunk/releases/9.0.3/linux/splunk-9.0.3-dd0128b1f8cd-linux-2.6-amd64.deb\" ```  Install  ```shell dpkg -i splunk-9.0.3-dd0128b1f8cd-linux-2.6-amd64.deb dpkg --status splunk ```  Start  ```shell /opt/splunk/bin/splunk start --accept-license ```  Accept the EULA, and Configure Splunk to start at boot time  ```shell /opt/splunk/bin/splunk enable boot-start   Init script installed at /etc/init.d/splunk.   Init script is configured to run at boot. ```  ##  Splunk Forwarders Installation  Download  ```shell wget -O splunkforwarder-9.0.3-dd0128b1f8cd-linux-2.6-amd64.deb \\ \"https://download.splunk.com/products/universalforwarder/releases/9.0.3/linux/splunkforwarder-9.0.3-dd0128b1f8cd-linux-2.6-amd64.deb\" ```  Install  ```shell dpkg -i splunkforwarder-9.0.3-dd0128b1f8cd-linux-2.6-amd64.deb ```  Start  ```shell /opt/splunkforwarder/bin/splunk start --accept-license ```  Add  ```shell /opt/splunkforwarder/bin/splunk add forward-server 134.209.212.195:9997 /opt/splunkforwarder/bin/splunk add monitor /var/log/ ```  Configure  ```shell vi /opt/splunkforwarder/etc/apps/search/local/inputs.conf  [monitor:///var/log] disabled = false index = linux_universal_forwarder host = linux_golf ```  Restart  ```shell /opt/splunkforwarder/bin/splunk restart ```  ## Splunk Data Sources  * OS, apps, cloud logs * Microsoft Active Directory * File system and databases * Imported files * TCP/UDP port data * Script input  ## Forwarders and Indexing  * Forwarders are installed on hosts where data is to be collected and forwarded to a Splunk Indexer listening on port 9997 * Universal forwarder - separate download and installation  * Heavy forwarder - Splunk Enterprise instance * Forwarder targets are defined in `outputs.conf` in the `[tcpout]` stanza  ## Splunk Enterprise vs. Splunk Cloud  ### Enterprise  * Manual installation on physical or virtual machines * Amazon Machine Image (AMI) deployment * Full configuration flexibility * CLI support  ### Cloud  * Managed cloud service where installation is already done * Limited configuration flexibility compared to Enterprise * No CLI support  ## SSL  * [Securing Splunk Enterprise](https://docs.splunk.com/Documentation/Splunk/9.0.3/Security/SecureSplunkWebusingasignedcertificate)  Edit `/opt/splunk/etc/system/local/web.conf` and add the following lines:  ```config [settings] enableSplunkWebSSL = 1 privKeyPath=/etc/letsencrypt/live/your-domain/privkey.pem serverCert=/etc/letsencrypt/live/your-domain/fullchain.pem ```   ## References  * [Splunk for Security Analytics and Monitoring](https://www.linkedin.com/learning/splunk-for-security-analytics-and-monitoring) * [Splunk Enterprise — on Digital Ocean Ubuntu 16.x](https://medium.com/@smurf3r5/splunk-enterprise-on-digital-ocean-ubuntu-16-x-95c31c7e7e2c) ","title":"splunk"},{"id":548,"location":"/til/varicad-thread-metric.html","tags":["varicad","thread","metric","3D"],"text":"::: toc  ## Introduction  ![ISO theoretical thread profile](/til/varicad-thread-profile-01.webp)  The theoretical profile of a screw thread in an axial plane defined by theoretical dimensions and angles common to internal and external threads   ## References  * [ISO 68-1:1998(en) ISO general purpose screw threads — Basic profile — Part 1: Metric screw threads](https://www.iso.org/obp/ui/#iso:std:iso:68:-1:ed-1:v1:en) * [Metric M10 - 3D Printable Thread](https://youtu.be/wRh7eq2gEcA) ","title":"varicad — Thread 3D"},{"id":549,"location":"/certificate/2023-02-01_akamai_proteção_para_bancos_e_fintechs.html","tags":["security","pix","bank","fintech"],"text":" ``` CERTIFICADO DE PARTICIPAÇÃO Certificamos que Geraldo Ribeiro participou do evento Proteção para Bancos e Fintechs, no periodo de 01/02/2023 à 01/02/2023, com carga horária total de 5 horas. ``` ","title":"Proteção para bancos e fintechs"},{"id":550,"location":"/til/html-colors.html","tags":["color","css","html","svg","hex-color","rgb-color"],"text":"::: toc  ## Introduction  Modern browsers support 140 named colors, which are listed below. Use them in your HTML and CSS by name, Hex color code or RGB value.  ## Red  * <div class=\"colorbox\" style=\"color:IndianRed\">&#9632;</div><code>IndianRed ##CD5C5C rgb(205, 92, 92)</code> * <div class=\"colorbox\" style=\"color:LightCoral\">&#9632;</div><code>LightCoral ##F08080 rgb(240, 128, 128)</code> * <div class=\"colorbox\" style=\"color:Salmon\">&#9632;</div><code>Salmon ##FA8072 rgb(250, 128, 114)</code> * <div class=\"colorbox\" style=\"color:DarkSalmon\">&#9632;</div><code>DarkSalmon ##E9967A rgb(233, 150, 122)</code> * <div class=\"colorbox\" style=\"color:LightSalmon\">&#9632;</div><code>LightSalmon ##FFA07A rgb(255, 160, 122)</code> * <div class=\"colorbox\" style=\"color:Crimson\">&#9632;</div><code>Crimson ##DC143C rgb(220, 20, 60)</code> * <div class=\"colorbox\" style=\"color:Red\">&#9632;</div><code>Red ##FF0000 rgb(255, 0, 0)</code> * <div class=\"colorbox\" style=\"color:FireBrick\">&#9632;</div><code>FireBrick ##B22222 rgb(178, 34, 34)</code> * <div class=\"colorbox\" style=\"color:DarkRed\">&#9632;</div><code>DarkRed ##8B0000 rgb(139, 0, 0)</code>  ## Pink  * <div class=\"colorbox\" style=\"color:Pink\">&#9632;</div><code>Pink ##FFC0CB rgb(255, 192, 203)</code> * <div class=\"colorbox\" style=\"color:LightPink\">&#9632;</div><code>LightPink ##FFB6C1 rgb(255, 182, 193)</code> * <div class=\"colorbox\" style=\"color:HotPink\">&#9632;</div><code>HotPink ##FF69B4 rgb(255, 105, 180)</code> * <div class=\"colorbox\" style=\"color:DeepPink\">&#9632;</div><code>DeepPink ##FF1493 rgb(255, 20, 147)</code> * <div class=\"colorbox\" style=\"color:MediumVioletRed\">&#9632;</div><code>MediumVioletRed ##C71585 rgb(199, 21, 133)</code> * <div class=\"colorbox\" style=\"color:PaleVioletRed\">&#9632;</div><code>PaleVioletRed ##DB7093 rgb(219, 112, 147)</code>  ## Orange  * <div class=\"colorbox\" style=\"color:LightSalmon\">&#9632;</div><code>LightSalmon ##FFA07A rgb(255, 160, 122)</code> * <div class=\"colorbox\" style=\"color:Coral\">&#9632;</div><code>Coral ##FF7F50 rgb(255, 127, 80)</code> * <div class=\"colorbox\" style=\"color:Tomato\">&#9632;</div><code>Tomato ##FF6347 rgb(255, 99, 71)</code> * <div class=\"colorbox\" style=\"color:OrangeRed\">&#9632;</div><code>OrangeRed ##FF4500 rgb(255, 69, 0)</code> * <div class=\"colorbox\" style=\"color:DarkOrange\">&#9632;</div><code>DarkOrange ##FF8C00 rgb(255, 140, 0)</code> * <div class=\"colorbox\" style=\"color:Orange\">&#9632;</div><code>Orange ##FFA500 rgb(255, 165, 0)</code>  ## Orange  * <div class=\"colorbox\" style=\"color:Gold\">&#9632;</div><code>Gold ##FFD700 rgb(255, 215, 0)</code> * <div class=\"colorbox\" style=\"color:Yellow\">&#9632;</div><code>Yellow ##FFFF00 rgb(255, 255, 0)</code> * <div class=\"colorbox\" style=\"color:LightYellow\">&#9632;</div><code>LightYellow ##FFFFE0 rgb(255, 255, 224)</code> * <div class=\"colorbox\" style=\"color:LemonChiffon\">&#9632;</div><code>LemonChiffon ##FFFACD rgb(255, 250, 205)</code> * <div class=\"colorbox\" style=\"color:LightGoldenrodYellow\">&#9632;</div><code>LightGoldenrodYellow ##FAFAD2 rgb(250, 250, 210)</code> * <div class=\"colorbox\" style=\"color:PapayaWhip\">&#9632;</div><code>PapayaWhip ##FFEFD5 rgb(255, 239, 213)</code> * <div class=\"colorbox\" style=\"color:Moccasin\">&#9632;</div><code>Moccasin ##FFE4B5 rgb(255, 228, 181)</code> * <div class=\"colorbox\" style=\"color:PeachPuff\">&#9632;</div><code>PeachPuff ##FFDAB9 rgb(255, 218, 185)</code> * <div class=\"colorbox\" style=\"color:PaleGoldenrod\">&#9632;</div><code>PaleGoldenrod ##EEE8AA rgb(238, 232, 170)</code> * <div class=\"colorbox\" style=\"color:Khaki\">&#9632;</div><code>Khaki ##F0E68C rgb(240, 230, 140)</code> * <div class=\"colorbox\" style=\"color:DarkKhaki\">&#9632;</div><code>DarkKhaki ##BDB76B rgb(189, 183, 107)</code>  ## Purple  * <div class=\"colorbox\" style=\"color:Lavender\">&#9632;</div><code>Lavender ##E6E6FA rgb(230, 230, 250)</code> * <div class=\"colorbox\" style=\"color:Thistle\">&#9632;</div><code>Thistle ##D8BFD8 rgb(216, 191, 216)</code> * <div class=\"colorbox\" style=\"color:Plum\">&#9632;</div><code>Plum ##DDA0DD rgb(221, 160, 221)</code> * <div class=\"colorbox\" style=\"color:Violet\">&#9632;</div><code>Violet ##EE82EE rgb(238, 130, 238)</code> * <div class=\"colorbox\" style=\"color:Orchid\">&#9632;</div><code>Orchid ##DA70D6 rgb(218, 112, 214)</code> * <div class=\"colorbox\" style=\"color:Fuchsia\">&#9632;</div><code>Fuchsia ##FF00FF rgb(255, 0, 255)</code> * <div class=\"colorbox\" style=\"color:Magenta\">&#9632;</div><code>Magenta ##FF00FF rgb(255, 0, 255)</code> * <div class=\"colorbox\" style=\"color:MediumOrchid\">&#9632;</div><code>MediumOrchid ##BA55D3 rgb(186, 85, 211)</code> * <div class=\"colorbox\" style=\"color:MediumPurple\">&#9632;</div><code>MediumPurple ##9370DB rgb(147, 112, 219)</code> * <div class=\"colorbox\" style=\"color:RebeccaPurple\">&#9632;</div><code>RebeccaPurple ##663399 rgb(102, 51, 153)</code> * <div class=\"colorbox\" style=\"color:BlueViolet\">&#9632;</div><code>BlueViolet ##8A2BE2 rgb(138, 43, 226)</code> * <div class=\"colorbox\" style=\"color:DarkViolet\">&#9632;</div><code>DarkViolet ##9400D3 rgb(148, 0, 211)</code> * <div class=\"colorbox\" style=\"color:DarkOrchid\">&#9632;</div><code>DarkOrchid ##9932CC rgb(153, 50, 204)</code> * <div class=\"colorbox\" style=\"color:DarkMagenta\">&#9632;</div><code>DarkMagenta ##8B008B rgb(139, 0, 139)</code> * <div class=\"colorbox\" style=\"color:Purple\">&#9632;</div><code>Purple ##800080 rgb(128, 0, 128)</code> * <div class=\"colorbox\" style=\"color:Indigo\">&#9632;</div><code>Indigo ##4B0082 rgb(75, 0, 130)</code> * <div class=\"colorbox\" style=\"color:SlateBlue\">&#9632;</div><code>SlateBlue ##6A5ACD rgb(106, 90, 205)</code> * <div class=\"colorbox\" style=\"color:DarkSlateBlue\">&#9632;</div><code>DarkSlateBlue ##483D8B rgb(72, 61, 139)</code> * <div class=\"colorbox\" style=\"color:MediumSlateBlue\">&#9632;</div><code>MediumSlateBlue ##7B68EE rgb(123, 104, 238)</code>  ## Green  * <div class=\"colorbox\" style=\"color:GreenYellow\">&#9632;</div><code>GreenYellow ##ADFF2F rgb(173, 255, 47)</code> * <div class=\"colorbox\" style=\"color:Chartreuse\">&#9632;</div><code>Chartreuse ##7FFF00 rgb(127, 255, 0)</code> * <div class=\"colorbox\" style=\"color:LawnGreen\">&#9632;</div><code>LawnGreen ##7CFC00 rgb(124, 252, 0)</code> * <div class=\"colorbox\" style=\"color:Lime\">&#9632;</div><code>Lime ##00FF00 rgb(0, 255, 0)</code> * <div class=\"colorbox\" style=\"color:LimeGreen\">&#9632;</div><code>LimeGreen ##32CD32 rgb(50, 205, 50)</code> * <div class=\"colorbox\" style=\"color:PaleGreen\">&#9632;</div><code>PaleGreen ##98FB98 rgb(152, 251, 152)</code> * <div class=\"colorbox\" style=\"color:LightGreen\">&#9632;</div><code>LightGreen ##90EE90 rgb(144, 238, 144)</code> * <div class=\"colorbox\" style=\"color:MediumSpringGreen\">&#9632;</div><code>MediumSpringGreen ##00FA9A rgb(0, 250, 154)</code> * <div class=\"colorbox\" style=\"color:SpringGreen\">&#9632;</div><code>SpringGreen ##00FF7F rgb(0, 255, 127)</code> * <div class=\"colorbox\" style=\"color:MediumSeaGreen\">&#9632;</div><code>MediumSeaGreen ##3CB371 rgb(60, 179, 113)</code> * <div class=\"colorbox\" style=\"color:SeaGreen\">&#9632;</div><code>SeaGreen ##2E8B57 rgb(46, 139, 87)</code> * <div class=\"colorbox\" style=\"color:ForestGreen\">&#9632;</div><code>ForestGreen ##228B22 rgb(34, 139, 34)</code> * <div class=\"colorbox\" style=\"color:Green\">&#9632;</div><code>Green ##008000 rgb(0, 128, 0)</code> * <div class=\"colorbox\" style=\"color:DarkGreen\">&#9632;</div><code>DarkGreen ##006400 rgb(0, 100, 0)</code> * <div class=\"colorbox\" style=\"color:YellowGreen\">&#9632;</div><code>YellowGreen ##9ACD32 rgb(154, 205, 50)</code> * <div class=\"colorbox\" style=\"color:OliveDrab\">&#9632;</div><code>OliveDrab ##6B8E23 rgb(107, 142, 35)</code> * <div class=\"colorbox\" style=\"color:Olive\">&#9632;</div><code>Olive ##808000 rgb(128, 128, 0)</code> * <div class=\"colorbox\" style=\"color:DarkOliveGreen\">&#9632;</div><code>DarkOliveGreen ##556B2F rgb(85, 107, 47)</code> * <div class=\"colorbox\" style=\"color:MediumAquamarine\">&#9632;</div><code>MediumAquamarine ##66CDAA rgb(102, 205, 170)</code> * <div class=\"colorbox\" style=\"color:DarkSeaGreen\">&#9632;</div><code>DarkSeaGreen ##8FBC8B rgb(143, 188, 139)</code> * <div class=\"colorbox\" style=\"color:LightSeaGreen\">&#9632;</div><code>LightSeaGreen ##20B2AA rgb(32, 178, 170)</code> * <div class=\"colorbox\" style=\"color:DarkCyan\">&#9632;</div><code>DarkCyan ##008B8B rgb(0, 139, 139)</code> * <div class=\"colorbox\" style=\"color:Teal\">&#9632;</div><code>Teal ##008080 rgb(0, 128, 128)</code>  ## Blue  * <div class=\"colorbox\" style=\"color:Aqua\">&#9632;</div><code>Aqua ##00FFFF rgb(0, 255, 255)</code> * <div class=\"colorbox\" style=\"color:Cyan\">&#9632;</div><code>Cyan ##00FFFF rgb(0, 255, 255)</code> * <div class=\"colorbox\" style=\"color:LightCyan\">&#9632;</div><code>LightCyan ##E0FFFF rgb(224, 255, 255)</code> * <div class=\"colorbox\" style=\"color:PaleTurquoise\">&#9632;</div><code>PaleTurquoise ##AFEEEE rgb(175, 238, 238)</code> * <div class=\"colorbox\" style=\"color:Aquamarine\">&#9632;</div><code>Aquamarine ##7FFFD4 rgb(127, 255, 212)</code> * <div class=\"colorbox\" style=\"color:Turquoise\">&#9632;</div><code>Turquoise ##40E0D0 rgb(64, 224, 208)</code> * <div class=\"colorbox\" style=\"color:MediumTurquoise\">&#9632;</div><code>MediumTurquoise ##48D1CC rgb(72, 209, 204)</code> * <div class=\"colorbox\" style=\"color:DarkTurquoise\">&#9632;</div><code>DarkTurquoise ##00CED1 rgb(0, 206, 209)</code> * <div class=\"colorbox\" style=\"color:CadetBlue\">&#9632;</div><code>CadetBlue ##5F9EA0 rgb(95, 158, 160)</code> * <div class=\"colorbox\" style=\"color:SteelBlue\">&#9632;</div><code>SteelBlue ##4682B4 rgb(70, 130, 180)</code> * <div class=\"colorbox\" style=\"color:LightSteelBlue\">&#9632;</div><code>LightSteelBlue ##B0C4DE rgb(176, 196, 222)</code> * <div class=\"colorbox\" style=\"color:PowderBlue\">&#9632;</div><code>PowderBlue ##B0E0E6 rgb(176, 224, 230)</code> * <div class=\"colorbox\" style=\"color:LightBlue\">&#9632;</div><code>LightBlue ##ADD8E6 rgb(173, 216, 230)</code> * <div class=\"colorbox\" style=\"color:SkyBlue\">&#9632;</div><code>SkyBlue ##87CEEB rgb(135, 206, 235)</code> * <div class=\"colorbox\" style=\"color:LightSkyBlue\">&#9632;</div><code>LightSkyBlue ##87CEFA rgb(135, 206, 250)</code> * <div class=\"colorbox\" style=\"color:DeepSkyBlue\">&#9632;</div><code>DeepSkyBlue ##00BFFF rgb(0, 191, 255)</code> * <div class=\"colorbox\" style=\"color:DodgerBlue\">&#9632;</div><code>DodgerBlue ##1E90FF rgb(30, 144, 255)</code> * <div class=\"colorbox\" style=\"color:CornflowerBlue\">&#9632;</div><code>CornflowerBlue ##6495ED rgb(100, 149, 237)</code> * <div class=\"colorbox\" style=\"color:MediumSlateBlue\">&#9632;</div><code>MediumSlateBlue ##7B68EE rgb(123, 104, 238)</code> * <div class=\"colorbox\" style=\"color:RoyalBlue\">&#9632;</div><code>RoyalBlue ##4169E1 rgb(65, 105, 225)</code> * <div class=\"colorbox\" style=\"color:Blue\">&#9632;</div><code>Blue ##0000FF rgb(0, 0, 255)</code> * <div class=\"colorbox\" style=\"color:MediumBlue\">&#9632;</div><code>MediumBlue ##0000CD rgb(0, 0, 205)</code> * <div class=\"colorbox\" style=\"color:DarkBlue\">&#9632;</div><code>DarkBlue ##00008B rgb(0, 0, 139)</code> * <div class=\"colorbox\" style=\"color:Navy\">&#9632;</div><code>Navy ##000080 rgb(0, 0, 128)</code> * <div class=\"colorbox\" style=\"color:MidnightBlue\">&#9632;</div><code>MidnightBlue ##191970 rgb(25, 25, 112)</code>  ## Brown  * <div class=\"colorbox\" style=\"color:Cornsilk\">&#9632;</div><code>Cornsilk ##FFF8DC rgb(255, 248, 220)</code> * <div class=\"colorbox\" style=\"color:BlanchedAlmond\">&#9632;</div><code>BlanchedAlmond ##FFEBCD rgb(255, 235, 205)</code> * <div class=\"colorbox\" style=\"color:Bisque\">&#9632;</div><code>Bisque ##FFE4C4 rgb(255, 228, 196)</code> * <div class=\"colorbox\" style=\"color:NavajoWhite\">&#9632;</div><code>NavajoWhite ##FFDEAD rgb(255, 222, 173)</code> * <div class=\"colorbox\" style=\"color:Wheat\">&#9632;</div><code>Wheat ##F5DEB3 rgb(245, 222, 179)</code> * <div class=\"colorbox\" style=\"color:BurlyWood\">&#9632;</div><code>BurlyWood ##DEB887 rgb(222, 184, 135)</code> * <div class=\"colorbox\" style=\"color:Tan\">&#9632;</div><code>Tan ##D2B48C rgb(210, 180, 140)</code> * <div class=\"colorbox\" style=\"color:RosyBrown\">&#9632;</div><code>RosyBrown ##BC8F8F rgb(188, 143, 143)</code> * <div class=\"colorbox\" style=\"color:SandyBrown\">&#9632;</div><code>SandyBrown ##F4A460 rgb(244, 164, 96)</code> * <div class=\"colorbox\" style=\"color:Goldenrod\">&#9632;</div><code>Goldenrod ##DAA520 rgb(218, 165, 32)</code> * <div class=\"colorbox\" style=\"color:DarkGoldenrod\">&#9632;</div><code>DarkGoldenrod ##B8860B rgb(184, 134, 11)</code> * <div class=\"colorbox\" style=\"color:Peru\">&#9632;</div><code>Peru ##CD853F rgb(205, 133, 63)</code> * <div class=\"colorbox\" style=\"color:Chocolate\">&#9632;</div><code>Chocolate ##D2691E rgb(210, 105, 30)</code> * <div class=\"colorbox\" style=\"color:SaddleBrown\">&#9632;</div><code>SaddleBrown ##8B4513 rgb(139, 69, 19)</code> * <div class=\"colorbox\" style=\"color:Sienna\">&#9632;</div><code>Sienna ##A0522D rgb(160, 82, 45)</code> * <div class=\"colorbox\" style=\"color:Brown\">&#9632;</div><code>Brown ##A52A2A rgb(165, 42, 42)</code> * <div class=\"colorbox\" style=\"color:Maroon\">&#9632;</div><code>Maroon ##800000 rgb(128, 0, 0)</code>  ## White  * <div class=\"colorbox\" style=\"color:White\">&#9632;</div><code>White ##FFFFFF rgb(255, 255, 255)</code> * <div class=\"colorbox\" style=\"color:Snow\">&#9632;</div><code>Snow ##FFFAFA rgb(255, 250, 250)</code> * <div class=\"colorbox\" style=\"color:HoneyDew\">&#9632;</div><code>HoneyDew ##F0FFF0 rgb(240, 255, 240)</code> * <div class=\"colorbox\" style=\"color:MintCream\">&#9632;</div><code>MintCream ##F5FFFA rgb(245, 255, 250)</code> * <div class=\"colorbox\" style=\"color:Azure\">&#9632;</div><code>Azure ##F0FFFF rgb(240, 255, 255)</code> * <div class=\"colorbox\" style=\"color:AliceBlue\">&#9632;</div><code>AliceBlue ##F0F8FF rgb(240, 248, 255)</code> * <div class=\"colorbox\" style=\"color:GhostWhite\">&#9632;</div><code>GhostWhite ##F8F8FF rgb(248, 248, 255)</code> * <div class=\"colorbox\" style=\"color:WhiteSmoke\">&#9632;</div><code>WhiteSmoke ##F5F5F5 rgb(245, 245, 245)</code> * <div class=\"colorbox\" style=\"color:SeaShell\">&#9632;</div><code>SeaShell ##FFF5EE rgb(255, 245, 238)</code> * <div class=\"colorbox\" style=\"color:Beige\">&#9632;</div><code>Beige ##F5F5DC rgb(245, 245, 220)</code> * <div class=\"colorbox\" style=\"color:OldLace\">&#9632;</div><code>OldLace ##FDF5E6 rgb(253, 245, 230)</code> * <div class=\"colorbox\" style=\"color:FloralWhite\">&#9632;</div><code>FloralWhite ##FFFAF0 rgb(255, 250, 240)</code> * <div class=\"colorbox\" style=\"color:Ivory\">&#9632;</div><code>Ivory ##FFFFF0 rgb(255, 255, 240)</code> * <div class=\"colorbox\" style=\"color:AntiqueWhite\">&#9632;</div><code>AntiqueWhite ##FAEBD7 rgb(250, 235, 215)</code> * <div class=\"colorbox\" style=\"color:Linen\">&#9632;</div><code>Linen ##FAF0E6 rgb(250, 240, 230)</code> * <div class=\"colorbox\" style=\"color:LavenderBlush\">&#9632;</div><code>LavenderBlush ##FFF0F5 rgb(255, 240, 245)</code> * <div class=\"colorbox\" style=\"color:MistyRose\">&#9632;</div><code>MistyRose ##FFE4E1 rgb(255, 228, 225)</code>  ## Gray  * <div class=\"colorbox\" style=\"color:Gainsboro\">&#9632;</div><code>Gainsboro ##DCDCDC rgb(220, 220, 220)</code> * <div class=\"colorbox\" style=\"color:LightGray\">&#9632;</div><code>LightGray ##D3D3D3 rgb(211, 211, 211)</code> * <div class=\"colorbox\" style=\"color:Silver\">&#9632;</div><code>Silver ##C0C0C0 rgb(192, 192, 192)</code> * <div class=\"colorbox\" style=\"color:DarkGray\">&#9632;</div><code>DarkGray ##A9A9A9 rgb(169, 169, 169)</code> * <div class=\"colorbox\" style=\"color:Gray\">&#9632;</div><code>Gray ##808080 rgb(128, 128, 128)</code> * <div class=\"colorbox\" style=\"color:DimGray\">&#9632;</div><code>DimGray ##696969 rgb(105, 105, 105)</code> * <div class=\"colorbox\" style=\"color:LightSlateGray\">&#9632;</div><code>LightSlateGray ##778899 rgb(119, 136, 153)</code> * <div class=\"colorbox\" style=\"color:SlateGray\">&#9632;</div><code>SlateGray ##708090 rgb(112, 128, 144)</code> * <div class=\"colorbox\" style=\"color:DarkSlateGray\">&#9632;</div><code>DarkSlateGray ##2F4F4F rgb(47, 79, 79)</code> * <div class=\"colorbox\" style=\"color:Black\">&#9632;</div><code>Black ##000000 rgb(0, 0, 0)</code>  ## References  * [Color names](https://htmlcolorcodes.com/color-names/)   ","title":"HTML colors"},{"id":551,"location":"/til/ssh-tunnel.html","tags":["ssh","tunnel","docker","xdg-open"],"text":" Para acessar uma interface de administração que só está disponível para localhost remotamente você pode usar uma conexão SSH através de um túnel.   ```shell # Iniciar um tunel para redirecionamento de porta # localhost:porta remoto aponta para localhost:porta local ssh -fNTL localhost:8080:$(ssh nome-ou-ip-do-servidor \\   \"docker inspect --format '{{ .NetworkSettings.IPAddress }}' \\     nome-do-container\"):8080 nome-ou-ip-do-servidor  # Abrir o navegador para acessar através do tunel xdg-open http://localhost:8080  # Terminar o tunel kill $(lsof -t -i @localhost:8080 -sTCP:listen) ```  ::: pikchr src=\"/til/ssh_tunnel_01.svg\" title=\"SSH Tunne — localhost <-> localhost\" CLIENT_DOMAIN: box width 4cm height 4cm thick radius 2mm arrow 50% color Indigo <- TUNNEL: box \"ssh tunnel\" width 3cm height 0.5cm fill Plum color Indigo radius 2mm arrow 50% color Indigo SERVER_DOMAIN: box width 6cm height 4cm thick radius 2mm text \"Client\" big big with .s at CLIENT_DOMAIN.n  text \"Server\" big big with .s at SERVER_DOMAIN.n  CLIENT_SSH: box \"SSH\" with .e at CLIENT_DOMAIN.e color green box \"SSH\" with .w at SERVER_DOMAIN.w color blue line <-> color blue SERVER_APP: box \"Web\" \"Server\" color yellow text \"listen on\" \"localhost:8080\" with .n at CLIENT_SSH.s color green; text \"listen on\" \"localhost:80\" with .n at SERVER_APP.s color yellow; move to CLIENT_DOMAIN.s + (-1mm,-10mm) CMD_TUNNEL: box \"ssh -L \" big big thin fit box \"localhost:8080\" big big thin color green fit width 85% box \":\" big big thin fit box \"localhost:80\" big big thin color yellow fit width 85% box \"user@server\" big big thin color blue fit box \"curl \" big big thin fit with .nw at CMD_TUNNEL.sw - (0,8mm)  box \"localhost:8080\" big big thin fit width 85% color green  ::: pikchr src=\"/til/ssh_tunnel_02.svg\" title=\"SSH Tunne — localhost <-> bastion <-> remote\" CLIENT_DOMAIN: box width 4cm height 4cm thick radius 2mm arrow 50% color Indigo <- TUNNEL: box \"ssh tunnel\" width 3cm height 0.5cm fill Plum color Indigo radius 2mm arrow 50% color Indigo BASTION_SSH: box \"BASTION\" \"SSH\"  color blue width 150% SERVER_DOMAIN: box width 6cm height 4cm thick radius 2mm with .w at BASTION_SSH.w + (5mm,0) color red text \"Client\" big big with .s at CLIENT_DOMAIN.n text \"Private Network\" big big with .s at SERVER_DOMAIN.n color red CLIENT_SSH: box \"SSH\" with .e at CLIENT_DOMAIN.e color green line <-> color blue from BASTION_SSH.e SERVER_APP: box \"Web\" \"Server\" color yellow text \"'Remote'\" \"server\" big big with .s at last.n color yellow text \"listen on\" \"localhost:8080\" with .n at CLIENT_SSH.s color green; text \"listen on\" \"0.0.0.0:80\" with .n at SERVER_APP.s color yellow; move to CLIENT_DOMAIN.s + (-1mm,-10mm) CMD_TUNNEL: box \"ssh -L \" big big thin fit box \"localhost:8080\" big big thin color green fit width 85% box \":\" big big thin fit CMD_4: box \"server:80\" big big thin color yellow fit width 85% box \"user@bastion\" big big thin color blue fit box \"curl \" big big thin fit with .nw at CMD_TUNNEL.sw - (0,8mm)  box \"localhost:8080\" big big thin fit width 85% color green text \"Has public\" \"and private\" \"interface\" fit at BASTION_SSH.nw + (-20mm,13mm) color gray arrow from last  to BASTION_SSH chop color gray text \"Tells SSHd server\" \"where to forward\" \"traffic to\" fit at CMD_4.se + (-5mm,-15mm) color gray arrow from last .n to CMD_4.s  chop color gray  ## Referências  * [Connecting to the web admin interface on a remote / virtual host via SSH](https://hub.docker.com/_/rethinkdb)  ","title":"SSH Tunnel — How to access an application running on remote localhost"},{"id":552,"location":"/til/ai-image.html","tags":["ai","image-generation","fotor"],"text":"::: toc  ## Introduction  * <https://www.fotor.com/> * <https://neural.love/> * <https://midjourney.com/>  ## References  * []() ","title":"Artificial Intelligence Image Generation"},{"id":553,"location":"/til/file-watcher.html","tags":["entr","fswatch","inotify-tools"],"text":"::: toc  ## Introduction  ## References  * [a quick review of file watchers](https://anarc.at/blog/2019-11-20-file-monitoring-tools/) ","title":"file-watcher"},{"id":554,"location":"/til/cpp_armadillo_01.html","tags":["cpp","armadillo","math"],"text":" According to the [Armadillo site](http://arma.sourceforge.net/) it is a high quality linear algebra library (matrix maths) for the C++ language, aiming towards a good balance between speed and ease of use.  <!--more-->  ## Installation  ### Debian  ```shell apt install libarmadillo-dev ```  ### MacOS  ```shell brew install armadillo ```  ## Sample code   ### Random matrix creation   ```cpp   // set the seed to a random value   arma_rng::set_seed_random(); ```   #### Warning about use of the `auto` C++11 keyword  I tried to use `auto` for matrix declaration but this lead me to a tricky error. The variable created by the keyword `auto` was a random matrix generator and not a matrix.  I expect to declare `R`, `S` and `A` as random initialized matrix:   ```cpp   auto R = randu(2, 3);   auto S = randu<mat>(2, 3);   auto T = (mat)randu(2, 3);   mat A = randu(2, 3);    cout << \"Lets check the types of each variable:\\n\";   cout << \"Type of R: \" << typeid(R).name() << '\\n';   cout << \"Type of S: \" << typeid(S).name() << '\\n';   cout << \"Type of T: \" << typeid(T).name() << '\\n';   cout << \"Type of A: \" << typeid(A).name() << '\\n';   // Type of R: N4arma3GenINS_3MatIdEENS_9gen_randuEEE   // Type of S: N4arma3GenINS_3MatIdEENS_9gen_randuEEE   // Type of T: N4arma3MatIdEE   // Type of A: N4arma3MatIdEE ```   Note the types are slightly different.  The `A` matrix presents the expected behavior, keeping the elements unchanged:   ```cpp   cout << \"A:\\n\" << A << '\\n';   cout << \"A:\\n\" << A << '\\n';   cout << \"A:\\n\" << A << '\\n';   // A:   //    0.8512   0.8562   0.5564   //    0.0223   0.1000   0.0846   // A:   //    0.8512   0.8562   0.5564   //    0.0223   0.1000   0.0846   // A:   //    0.8512   0.8562   0.5564   //    0.0223   0.1000   0.0846 ```  However the `R` ~~matrix~~ generator return different values on each   ```cpp   cout << \"R:\\n\" << R << '\\n';   cout << \"R:\\n\" << R << '\\n';   cout << \"R:\\n\" << R << '\\n';   // R:   //    0.0718   0.9256   0.4991   //    0.7697   0.9635   0.8418   // R:   //    0.9830   0.7305   0.2061   //    0.2162   0.9320   0.2274   // R:   //    0.7011   0.6158   0.8350   //    0.6841   0.4025   0.0418 ```   ### Transpose matrix   ```cpp   cout << \"A:\\n\" << A << '\\n';   cout << \"A.t:\\n\" << A.t() << '\\n';   // A:   //    0.8512   0.8562   0.5564   //    0.0223   0.1000   0.0846   //   // A.t:   //    0.8512   0.0223   //    0.8562   0.1000   //    0.5564   0.0846 ```   ### Multiplication   ```cpp   cout << A.t() * A << '\\n';   //   0.7251   0.7311   0.4755   //   0.7311   0.7431   0.4848   //   0.4755   0.4848   0.3167 ```   ### Determinant   ```cpp   mat B(3, 3, fill::randu);   cout << \"B:\\n\" << B << '\\n';   // B:   //    0.9563   0.8955   0.0919   //    0.3291   0.3086   0.3452   //    0.1894   0.9898   0.8642    cout << \"Det: \" << det(B) << '\\n';   // Det: -0.243228    mat C = randu(3, 3);   cout << \"C:\\n\" << C << '\\n';   // C:   //    0.5561   0.6219   0.2147   //    0.3105   0.2813   0.9172   //    0.3408   0.1925   0.4703   cout << \"Det: \" << det(C) << '\\n';   // Det: -0.254525    mat D = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};   cout << \"D:\\n\" << D << '\\n';   // D:   //    1.0000   2.0000   3.0000   //    4.0000   5.0000   6.0000   //    7.0000   8.0000   9.0000   cout << \"Det: \" << det(D) << '\\n';   // Det: 6.66134e-16 ```   ### Operation with rows and columns   ```cpp   D.row(0) = D.row(1) + D.row(2);   cout << \"D:\\n\" << D << '\\n';   // D:   // 11.0000   13.0000   15.0000   //  4.0000    5.0000    6.0000   //  7.0000    8.0000    9.0000    D.row(1) = D.row(1) * 5;   cout << \"D:\\n\" << D << '\\n';   // D:   // 11.0000   13.0000   15.0000   // 20.0000   25.0000   30.0000   //  7.0000    8.0000    9.0000   //    D.row(2).zeros();   cout << \"D:\\n\" << D << '\\n';   // D:   // 11.0000   13.0000   15.0000   // 20.0000   25.0000   30.0000   //       0         0         0    D.col(2) = D.col(2) + 10;   cout << \"D:\\n\" << D << '\\n';   // D:   // 11.0000   13.0000   25.0000   // 20.0000   25.0000   40.0000   //       0         0   10.0000    D = diagmat(D);   cout << \"D:\\n\" << D << '\\n';   // D:   // 11.0000         0         0   //       0   25.0000         0   //       0         0   10.0000  ```   ### Save and load   ```cpp   D.save(\"D.bin\");    D.save(\"D.txt\", arma_ascii);   // ARMA_MAT_TXT_FN008   // 3 3   //    1.10000000000000e+01   0.00000000000000e+00   0.00000000000000e+00   //    0.00000000000000e+00   2.50000000000000e+01   0.00000000000000e+00   //    0.00000000000000e+00   0.00000000000000e+00   1.00000000000000e+01    mat O = ones(2, 2);   cout << \"O:\\n\" << O << '\\n';   // O:   // 1.0000   1.0000   // 1.0000   1.0000    auto Z = zeros(3, 5);   cout << \"Z:\\n\" << Z << '\\n';   // Z:   // 0        0        0        0        0   // 0        0        0        0        0   // 0        0        0        0        0    mat F1, F2;   F1.load(\"D.bin\");   F2.load(\"D.txt\");   cout << \"F1:\\n\" << F1 << '\\n';   // F1:   // 11.0000         0         0   //       0   25.0000         0   //       0         0   10.000    cout << \"F1 - F1:\\n\" << F1 - F2 << '\\n';   // F1 - F2:   // 0        0        0   // 0        0        0   // 0        0        0    mat F(2, 3);   F.fill(3.14);   cout << \"F:\\n\" << F << '\\n';   // F:   // 3.1400   3.1400   3.1400   // 3.1400   3.1400   3.1400    F = F.ones();   F.col(0) *= datum::pi;   F.col(1) *= datum::inf;   F.col(2) *= datum::nan;   cout << \"F:\\n\" << F << '\\n';   // F:   // 3.1416      inf      nan   // 3.1416      inf      nan } ```   ## References  * [Armadillo C++ library for linear algebra & scientific computing](http://arma.sourceforge.net/)  ## Complete source  <https://gist.github.com/geraldolsribeiro/7765d983b678daf72f5dc0d2d611b4ca>  ## Output   ```txt Lets check the types of each variable: Type of R: N4arma3GenINS_3MatIdEENS_9gen_randuEEE Type of S: N4arma3GenINS_3MatIdEENS_9gen_randuEEE Type of T: N4arma3MatIdEE Type of A: N4arma3MatIdEE A:    0.2185   0.1149   0.9977    0.7731   0.3205   0.3326  A:    0.2185   0.1149   0.9977    0.7731   0.3205   0.3326  A:    0.2185   0.1149   0.9977    0.7731   0.3205   0.3326  R:    0.7555   0.7524   0.6949    0.0772   0.2595   0.5550  R:    0.2130   0.7339   0.6252    0.6877   0.5083   0.8916  R:    0.0715   0.5353   0.4911    0.0889   0.7803   0.7600  A:    0.2185   0.1149   0.9977    0.7731   0.3205   0.3326  A.t:    0.2185   0.7731    0.1149   0.3205    0.9977   0.3326     0.6455   0.2729   0.4751    0.2729   0.1159   0.2212    0.4751   0.2212   1.1061  B:    0.5812   0.5037   0.8215    0.0821   0.0389   0.7032    0.0760   0.6156   0.0316  Det: -0.186193 C:    0.8048   0.8430   0.7984    0.4579   0.4557   0.2175    0.1802   0.2472   0.6514  Det: 0.00201619 D:    1.0000   2.0000   3.0000    4.0000   5.0000   6.0000    7.0000   8.0000   9.0000  Det: 0 D:    11.0000   13.0000   15.0000     4.0000    5.0000    6.0000     7.0000    8.0000    9.0000  D:    11.0000   13.0000   15.0000    20.0000   25.0000   30.0000     7.0000    8.0000    9.0000  D:    11.0000   13.0000   15.0000    20.0000   25.0000   30.0000          0         0         0  D:    11.0000   13.0000   25.0000    20.0000   25.0000   40.0000          0         0   10.0000  D:    11.0000         0         0          0   25.0000         0          0         0   10.0000  O:    1.0000   1.0000    1.0000   1.0000  Z:         0        0        0        0        0         0        0        0        0        0         0        0        0        0        0  F1:    11.0000         0         0          0   25.0000         0          0         0   10.0000  F1 - F1:         0        0        0         0        0        0         0        0        0  F:    3.1400   3.1400   3.1400    3.1400   3.1400   3.1400  F:    3.1416      inf      nan    3.1416      inf      nan   ``` ","title":"Getting started with Armadillo"},{"id":555,"location":"/til/cpp_buffer_overflow.html","tags":["C++","buffer_overflow"],"text":" ::: toc   ```cpp   char var1[4]; // stack   char var2[4]; // stack   char var3[4]; // stack    std::stringstream input( \"1234567890\\nABCDEFG\\nRSTUVX\" );    fmt::print( \"var1 address: {}\\n\", static_cast<void *>( var1 ) );   fmt::print( \"var2 address: {}\\n\", static_cast<void *>( var2 ) );   fmt::print( \"var3 address: {}\\n\", static_cast<void *>( var3 ) );   fmt::print( \"var1: '{}'  var2: '{}'  var3: '{}'\\n\", var1, var2, var3 );    fmt::print(\"Input -> var2\\n\");   input.getline( var2, '\\n' );   fmt::print( \"var1: '{}'  var2: '{}'  var3: '{}'\\n\", var1, var2, var3 );    fmt::print(\"Input -> var1\\n\");   input.getline( var1, '\\n' );   fmt::print( \"var1: '{}'  var2: '{}'  var3: '{}'\\n\", var1, var2, var3 );  ```   ## Possible output   ```txt var1 address: 0x7ffefb3af80c var2 address: 0x7ffefb3af808 var3 address: 0x7ffefb3af804 var1: ''  var2: ''  var3: '' Input -> var2 var1: '56789'  var2: '123456789'  var3: '' Input -> var1 var1: ''  var2: '1234'  var3: ''  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ buffer overflow"},{"id":556,"location":"/til/cpp_buffer_underflow.html","tags":["C++","buffer_underflow"],"text":" ::: toc    ```cpp   char *var = new char[4];   var[-1]   = 'a';   delete[] var; ```   ## Possible output   ```txt  ```   ```txt double free or corruption (out) Makefile: Failure on bin/buffer_underflow execution  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ buffer underflow"},{"id":557,"location":"/til/cpp_handling_error_on_new.html","tags":["C++","handling_error"],"text":" ::: toc   ## How new works  * A new expression invokes operator new function * operator new function will try to allocate memory * On failure   * it throws an exception of type bad_alloc (default behavior)   * it calls a function set by set_new_handler function   * it returns NULL (if nothrow version of new is used) * On success   * the constructor is invoked   * memory address is returned   ```cpp constexpr int N = 10; int *ptr[N]{}; // const size_t M1 = std::numeric_limits<std::size_t>::max() / 1'000'000'000; const size_t M = 10'000'000'000;  void deleteAllNonNullPtr() {   for (int i = 0; i < N; ++i) {     if (ptr[i]) {       fmt::print(\"Deleting ptr[{}]\\n\", i);       delete[] ptr[i];     }   } }  void testThrowException() {   try {     for (int i = 0; i < N; ++i) {       fmt::print(\"{}: #1 Allocating {} bytes...\", i, M);       ptr[i] = new int[M];       if (ptr[i]) {         fmt::print(\" OK\\n\");         ptr[i][0] = i;  // use the allocated space       }     }   } catch (std::exception &e) {     fmt::print(\"\\nException #1: {}\", e.what());   }   deleteAllNonNullPtr(); }  void NewHandler() {   using namespace std::chrono_literals;   fmt::print(\"\\n#2 Failure to allocate memory\");   std::this_thread::sleep_for(1s);   throw std::runtime_error(\"NewHandler exception\"); }  void testNewHandler() {   set_new_handler(NewHandler);   try {     for (int i = 0; i < N; ++i) {       fmt::print(\"{}: #2 Allocating {} bytes...\", i, M);       ptr[i] = new int[M];       if (ptr[i]) {         fmt::print(\" OK\\n\");         ptr[i][0] = i;       }     }   } catch (std::exception &e) {     fmt::print(\"\\nException #2: {}\", e.what());   }   deleteAllNonNullPtr(); }  void testNoThrow() {   // Equivalent to   // try { return operator new(size); } catch( ... ) { return nullptr; }   int *p = new (std::nothrow) int[M];    // You must check the value o p for nullptr   if (p == nullptr) {     fmt::print(\"\\n#3 Failure to allocate memory\");   } else {     delete[] p;   } } ```  ## Placement new  ```c++ Type *ptr = new (<memory_address>) Type{}; ```   ```cpp void testPlacementNew() {   char buf[4];    int *ptr = new (buf) int{3};    fmt::print(\"\\nPlacement new\");   fmt::print(\"\\nValue of ptr = {}\", *ptr);   fmt::print(\"\\nAddress of ptr = {}\", static_cast<void *>(ptr));   fmt::print(\"\\nAddress of buf = {}\", static_cast<void *>(buf)); } ```     ```cpp class Reporter {  public:   Reporter() : data(0) { fmt::print(\"\\nReporter Constructor: {}\", 0); }   Reporter(size_t i) : data(i) { fmt::print(\"\\nReporter Constructor: {}\", i); }   ~Reporter() { fmt::print(\"\\nReporter Destructor {}\", data); }   Reporter &operator=(const Reporter &other) {     data = other.data;     fmt::print(\"\\nReporter assigment operator {}\", data);     return *this;   }   private:   size_t data; }; ```     ```cpp void testPlacementNew2() {   char buf[4];   const size_t SIZE = 5;    auto ptr = new (buf) Reporter{42};   // delete ptr; // Generate an error   ptr->~Reporter();    // ---   // Calls constructor one time   Reporter r1[SIZE]{11, 12, 13, 14, 15};  // RAII calls destructor    // ---   // Calls constructor (data=0)   Reporter *r2 = new Reporter[SIZE]{};   for (size_t i = 0; i < SIZE; ++i) {     // Calls constructor (data=i+20)     // Calls assigment/copy operator     // Calls destructor     r2[i] = Reporter{i + 20};   }    // No constructor called here   Reporter *ptr3 =       static_cast<Reporter *>(operator new(SIZE * sizeof(Reporter)));   for (size_t i = 0; i < SIZE; ++i) {     // Calls constructor on placement = ptr + i     new (ptr3 + i) Reporter(i + 30);   }    for (size_t i = 0; i < SIZE; ++i) {     ptr3[i].~Reporter();   } }     ```cpp int main([[maybe_unused]] int argc, [[maybe_unused]] char **argv) {   testThrowException();   testNewHandler();   testNoThrow();   testPlacementNew();   testPlacementNew2();    return 0; } ```    ## Possible output   ```txt 0: #1 Allocating 10000000000 bytes... Exception #1: std::bad_alloc0: #2 Allocating 10000000000 bytes... #2 Failure to allocate memory Exception #2: NewHandler exception #2 Failure to allocate memory #3 Failure to allocate memory Placement new Value of ptr = 3 Address of ptr = 0x7ffcc89ccc7c Address of buf = 0x7ffcc89ccc7c Reporter Constructor: 42 Reporter Destructor 42 Reporter Constructor: 11 Reporter Constructor: 12 Reporter Constructor: 13 Reporter Constructor: 14 Reporter Constructor: 15 Reporter Constructor: 0 Reporter Constructor: 0 Reporter Constructor: 0 Reporter Constructor: 0 Reporter Constructor: 0 Reporter Constructor: 20 Reporter assigment operator 20 Reporter Destructor 20 Reporter Constructor: 21 Reporter assigment operator 21 Reporter Destructor 21 Reporter Constructor: 22 Reporter assigment operator 22 Reporter Destructor 22 Reporter Constructor: 23 Reporter assigment operator 23 Reporter Destructor 23 Reporter Constructor: 24 Reporter assigment operator 24 Reporter Destructor 24 Reporter Constructor: 30 Reporter Constructor: 31 Reporter Constructor: 32 Reporter Constructor: 33 Reporter Constructor: 34 Reporter Destructor 30 Reporter Destructor 31 Reporter Destructor 32 Reporter Destructor 33 Reporter Destructor 34 Reporter Destructor 15 Reporter Destructor 14 Reporter Destructor 13 Reporter Destructor 12 Reporter Destructor 11 ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ handling error on new"},{"id":558,"location":"/til/cpp_initialize_list_01.html","tags":["C++","initialize_list_01"],"text":" ::: toc     ```cpp struct A {   A()                                 { cout << \"A()\"; }   explicit A( int )                   { cout << \"A( int )\"; } // Não vai ser chamado pelo A{n}   explicit A( initializer_list<int> ) { cout << \"A( initializer_list<int> )\";   } };  struct B {   B()               { cout << \"B()\"; }   explicit B( int ) { cout << \"B( int )\"; } }; ```   ```cpp struct C {   vector<int> mContainer;   explicit C( initializer_list<int> xs ) : mContainer( xs )   {     cout << \"C( initializer_list<int> )\" << endl;     for( const auto &x : mContainer ) {       cout << \"xi = \" << x << endl;     }   } }; ```   ```cpp int main( [[maybe_unused]] int argc, [[maybe_unused]] char *argv[] ) {   // clang-format off   cout << \"A a1;       \"; A a1;         cout << endl; // A()   cout << \"A a2{};     \"; A a2{};       cout << endl; // A() não tem args então vai pelo ctor padrão   cout << \"A a3{1};    \"; A a3{1};      cout << endl; // A( initializer_list<int> )   cout << \"A a4{1, 2}; \"; A a4{1, 2};   cout << endl; // A( initializer_list<int> )   cout << \"A a5();     \"; A a5();       cout << endl; // não imprime nada; isso é a declaração de uma função   cout << \"B b1;       \"; B b1;         cout << endl; // B()   cout << \"B b2{};     \"; B b2{};       cout << endl; // B()   cout << \"B b3{1};    \"; B b3{1};      cout << endl; // B( int )   // B b4{1, 2}; error: no matching constructor for initialization of 'B'   C c1{ 10, 20, 30 };   // clang-format on   return 0; } ```  ## Possible output   ```txt A a1;       A() A a2{};     A() A a3{1};    A( initializer_list<int> ) A a4{1, 2}; A( initializer_list<int> ) A a5();      B b1;       B() B b2{};     B() B b3{1};    B( int ) C( initializer_list<int> ) xi = 10 xi = 20 xi = 30  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ initialize_list_01"},{"id":559,"location":"/til/git-restore-mtime.html","tags":["git","git-restore-mtime"],"text":"::: toc  ## Introduction  ```shell $ sudo apt install git-restore-mtime $ cd [repo] $ git restore-mtime ```  ## References  * [Restore a file's modification time in Git](https://stackoverflow.com/questions/2458042/restore-a-files-modification-time-in-git) ","title":"git-restore-mtime"},{"id":560,"location":"/certificate/2023-02-16_stefanini_Código_de_Ética_e_Conduta.html","tags":["soft-skill","ética","conduta"],"text":" ``` Certificamos que: Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:30 horas o curso: Código de ética e conduta  Concluído em: 16/Fevereiro/2023  Chave Eletrônica: 7a2580c3c47f550c39b4f14ed0bd1c1e3c99d1c9  https://stefanini.konviva.com.br/lms/lms/#/home/consultacertificado/?hash=7a2580c3c47f550c39b4f14ed0bd1c1e3c99d1c9  O Código de Ética e conduta está de cara nova, e bem mais moderna, trazendo os princípios que trtaduzem a cultura da Stefanini para nosso dia a dia.  • Introdução ao Código • Compromisso com a integridade • Compliance, ética, conduta e integridade • Legislação anticorrupção • Prevenção a conflito de interesse, fraude e suborno • Presentes e hospitalidades • Parentesco e relacionamento afetivo • Convivência no ambiente de trabalho • Prevenção a preconceito, assédio e discriminação • Uso de álcool, drogas e armas • Saúde e segurança do trabalho, acidentes de trabalho • Meio ambiente e preservação • Contratação de ex colaboradores • uso dos equipamentos da empresa • Segurança da informação, informações privilegiadas • Clientes, fornecedores e concorrentes • Home Office e redes sociais • Relacionamento com investidores • Violações ao código de conduta • Canais de acesso ``` ","title":"Código de Ética e Conduta"},{"id":561,"location":"/certificate/2023-02-16_stefanini_LGPD_conceitos_bases_legais_de_tratamento_e_mais.html","tags":["lgpd"],"text":" ``` Certificamos que: Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 00:45 horas o curso: LGPD, conceitos, bases legais de tratamento e mais  Concluído em: 16/Fevereiro/2023  Chave Eletrônica: 0d7f61a7b994696d7a888544fdd37d0f71c72642  https://stefanini.konviva.com.br/lms/lms/#/home/consultacertificado/?hash=0d7f61a7b994696d7a888544fdd37d0f71c72642 ``` ","title":"LGPD conceitos bases legais de tratamento e mais"},{"id":562,"location":"/certificate/2023-02-16_stefanini_Agir_com_Integridade_e_Respeito.html","tags":["soft-skill","integridade","respeito"],"text":" ``` Certificamos que: Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso: AGIR COM INTEGRIDADE E RESPEITO  Concluído em: 16/Fevereiro/2023  Chave Eletrônica: 1d8f55f5c5bd486c177da67bfc270ef098e2420b  https://stefanini.konviva.com.br/lms/lms/#/home/consultacertificado/?hash=1d8f55f5c5bd486c177da67bfc270ef098e2420b ``` ","title":"Agir com Integridade e Respeito"},{"id":563,"location":"/certificate/2023-02-16_stefanini_Introdução_a_Lei_Geral_de_Proteção_de_Dados_LGPD.html","tags":["lgpd"],"text":" ``` Certificamos que: Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso: Introdução a Lei Geral de Proteção de dados (LGPD)  Concluído em: 16/Fevereiro/2023  Chave Eletrônica: 9508a093f23a7e22e690c727e6ffbd42368e17be  https://stefanini.konviva.com.br/lms/lms/#/home/consultacertificado/?hash=9508a093f23a7e22e690c727e6ffbd42368e17be ``` ","title":"Introdução a Lei Geral de Proteção de Dados LGPD"},{"id":564,"location":"/certificate/2023-02-16_stefanini_Sistema_de_Gestão_da_Qualidade_ISO_9001.html","tags":["iso","iso-9001","9001"],"text":" ``` Certificamos que: Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 00:30 horas o curso: Sistema de Gestão da Qualidade ISO 9001  Concluído em: 16/Fevereiro/2023  Chave Eletrônica: 37f6583c1ad6315497a4a861eb9b8229d75dc9a2  https://stefanini.konviva.com.br/lms/lms/#/home/consultacertificado/?hash=37f6583c1ad6315497a4a861eb9b8229d75dc9a2 ``` ","title":"Sistema de Gestão da Qualidade ISO 9001"},{"id":565,"location":"/certificate/2023-02-16_stefanini_Treinamentos_Obrigatórios_Governança_Corporativa.html","tags":["governança-corporativa"],"text":" ``` Certificamos que: Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 06:15 horas a trilha: Treinamentos Obrigatórios Governança Corporativa  Concluído em: 16/02/2023 ``` ","title":"Treinamentos Obrigatórios Governança Corporativa"},{"id":566,"location":"/certificate/2023-02-16_stefanini_Compliance.html","tags":["compliance"],"text":" ``` Certificamos que: Geraldo Luis Da Silva Ribeiro  Concluiu com carga horária de 01:00 horas o curso: Compliance  Concluído em: 16/Fevereiro/2023  Chave Eletrônica: 8dfbda0e41d6e98554d6c7c8cbbf1edacf790f0f   https://stefanini.konviva.com.br/lms/lms/#/home/consultacertificado/?hash=8dfbda0e41d6e98554d6c7c8cbbf1edacf790f0f  O programa de Compliance aborda diversos aspectos importantes da cultura Stefanini, como ética, integridade e a transparência.  O objetivo deste treinamento é comunicar nossos colaboradores sobre o programa de Compliance no grupo Stefanini.  • Compliance • Etica • Integridade • Trasparência • Contexto histórico • Corrupção • Legislação Aplicável • Código de ética e Conduta • Canal de Denúncia •  Auditorias •  Due Diligence. ``` ","title":"Compliance"},{"id":567,"location":"/til/cpp_weeds.html","tags":["C++","weeds"],"text":" ::: toc   ## Introduction  ::: warning Don't use in production   ## Operator Order of Evaluation  * `[intro.execution]/10` \"Except where noted, evaluations of operands   of individual operators and of subexpressions of individual   expressions are unsequenced. The value computations of the operands   of an operator are sequenced before the value computation of the   result of the operator.’; * `[expr.comma]/1` \"A pair of expressions separated by a comma is   evaluated left-to-right; the left expression is a discarded-value   expression. The left expression is sequenced before the right   expression * `[expr.ass]/1` “In all cases, the assignment is sequenced after   the value computation of the right and left operands, and before the   value computation of the assignment expression. The right operand   is sequenced before the left operand.   ```cpp void ___(auto text) { std::cout << \"\\n--- [\" << text << \"]\" << std::endl; }  void weeds01() {   auto print_one = [](auto t) {     std::cout << t << std::endl;     return std::type_identity<void>{};   };    ___(\"print_one(hello) , print_one(world)\");   print_one(\"hello\"), print_one(\"world\");  // hello world   ___(\"print_one(hello) = print_one(world)\");   print_one(\"hello\") = print_one(\"world\");  // world hello    auto fold_print_assign_right = [&](auto... vals) { (print_one(vals) = ...); };   auto fold_print_assign_left = [&](auto... vals) { (... = print_one(vals)); };    ___(\"fold_print_assign_right(1,2,3,4)\");   fold_print_assign_right(1, 2, 3, 4);  // 4 3 2 1    ___(\"fold_print_assign_left(1,2,3,4)\");   fold_print_assign_left(1, 2, 3, 4);  //  4 3 2 1    auto fold_print_comma_right = [&](auto... vals) { (print_one(vals), ...); };   auto fold_print_comma_left = [&](auto... vals) { (..., print_one(vals)); };    ___(\"fold_print_comma_right(1,2,3,4)\");   fold_print_comma_right(1, 2, 3, 4);  // 4 3 2 1    ___(\"fold_print_comma_left(1,2,3,4)\");   fold_print_comma_left(1, 2, 3, 4);  //  4 3 2 1 } ```   ## Possible output   ```txt  --- [print_one(hello) , print_one(world)] hello world  --- [print_one(hello) = print_one(world)] world hello  --- [fold_print_assign_right(1,2,3,4)] 4 3 2 1  --- [fold_print_assign_left(1,2,3,4)] 4 3 2 1  --- [fold_print_comma_right(1,2,3,4)] 1 2 3 4  --- [fold_print_comma_left(1,2,3,4)] 1 2 3 4  ```  ## References  * ▶️[Why You Should Write Code That You Should Never Write - Daisy Hollman - CppCon 2021](https://www.youtube.com/watch?v=15etE6WcvBY) ","title":"C++ weeds"},{"id":568,"location":"/certificate/2023-02-17_udemy_Detecting_Memory_Leaks_in_C_C++_Applications.html","tags":["C++","C","memory-leak","memory-management","debug"],"text":" ``` Certificate no: UC-e5fb5738-bb08-4bed-9c28-804fe0484ac2 Certificate url: ude.my/UC-e5fb5738-bb08-4bed-9c28-804fe0484ac2 Reference Number: 0004  CERTIFICATE OF COMPLETION Detecting Memory Leaks tn C/ C++ Applications Instructors Umar Lone  Geraldo Ribeiro Date Feb. 17, 2023 Length 6 total hours ```  C++ is a large and complex language, but it gives programmers complete freedom when it comes to management of dynamic memory. This allows the programmers to allocate memory and manipulate it at runtime. That is why C++ is still a favorite language for high performance applications in various domains such as gaming, telecom, finance, aerospace, etc.  However, it requires programmers to take great care while using dynamic memory, such as releasing acquired memory, taking care not to overstep memory boundary, etc. Otherwise, it could lead to problems such as dangling pointers, memory corruption, memory leaks, etc.  This course will help you overcome all these problem by leveraging the excellent features that Visual Studio provides. It has a rich set of functions provided by the C/C++ runtime heap library. These functions can help detect memory leaks, overflows, etc. You'll learn how to use these functions effectively and make your programs bug-free.  In this course, you'll start with the basics of heap memory management and understand C & C++ allocation functions/operators in depth. You'll also learn how to effectively use them to avoid memory problems. Afterwards, you'll learn about the Visual Studio heap library functions and understand how to use them in your code.  By the end of this course, you'll have a deep understanding of dynamic memory management. You'll be able to use CRT heap functions effectively to detect & isolate memory problems. You'll also implement the Visual Studio functions so that they can be used with any C++ compiler.  ::: note This course requires Visual Studio 2017 or a higher version.  ## Topics  * Understand different kinds of problems associated with memory management * Effectively detect & isolate memory problems * Gain confidence in C/C++ memory management  ## Requirements  * Fair knowledge of C & C++ is essential for this course * Not recommended for beginners  ## Who this course is for:  * C/C++ programmers who wish to understand memory management in depth * C/C++ programmers who wish to efficiently debug memory related errors ","title":"Detecting Memory Leaks in C C++ Applications"},{"id":569,"location":"/til/cpp_solid.html","tags":["C++","solid"],"text":" ::: toc   ## SOLID Principles  * Single Responsibility Principle * Open Closed Principle * Liskov Substitution Principle * Interface Segregation Principle * Dependency Inversion Principle  ## Single Responsibility Principle  A class should have only one reason to change  * Should have only one responsibility * Classes with multiple responsibilities break when changed * Put each responsibility in a separate class  Before:  ```c++ class Notes {  public:   void Add() {}   void Remove() {}   void Display() {} }; ```  After  ```c++ class Notes {  public:   void Add() {}   void Remove() {} }; ```  Trasfer the responsability to display Notes to view class  ```c++ class View {  public:   void Display(Notes *notes) {      // implementation   } }; ```   ## Open-Closed Principle  Modules should be open for extension but closed for modification  * Modification to existing code leads to bugs and causes the software to * it should be possible to change behavior of existing code without * it the behavior should be changed by adding new code * Cornerstone of good design * Use design patterns  This principle explains why we should write software in such a way that its behavior can be modified in future without changing existing code.  ## Liskov-Substitution Principle  Subtypes must be substitutable for their base types  * Applies to inheritance relationship * The inheritance relationship should be based on behavior * A subclass must have all the behaviors of its base type & must not remove * This allows a subclass to replace its base type in code * New subclasses can be added without modifying existing code  Learn how inheritance should be used correctly through the Liskov  ## Interface Segregation Principle  Clients should not be forced to depend on methods they do not use  * An interface with too many methods will be complex to use (called fat * Some clients may not use all the methods   * But will be forced to depend on them * Separate the interface and put methods based on the client usage  This principle deals with fat interfaces.  Before:  ```c++ struct IFile {   virtual void Read() = 0;   virtual void Write() = 0;   virtual ~IFile() = default; }; ```  After:  ```c++ struct IRead {   virtual void Read() = 0;   virtual ~IRead() = default; }; ```   ```c++ struct IWrite {   virtual void Write() = 0;   virtual ~IWrite() = default; }; ```   ## Dependency Inversion Principle  Abstractions should not depend on details. Details should depend on  * Abstraction means an interface and details mean classes * Using a concrete class directly creates a dependency * Software becomes difficult to modify * Invert the dependency by using an interface rather a concrete class  A very important principle that forms the flexible structure of all class  Before:  ```c++ class ImageReader {  public:   virtual void Decode() = 0;   virtual ~ImageReader() = default; }; ```  ```c++ class BitmapReader : public ImageReader {  public:   void Decode(); }; ```  ```c++ class ImageViewer {   BitmapReader *m_Reader{}; // depends on concrete class   public:   void Display() {} }; ```  After  ```c++ class ImageViewer {   ImageReader *m_Reader{}; // depends on interface   public:   void Display() {} }; ```  ```cpp  ```   ## Possible output   ```txt  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ solid"},{"id":570,"location":"/til/cpp_limits.html","tags":["C++","min","max","lowest","std::numeric_limits"],"text":" ::: toc   ## Weird integral types  ::: warning Integral types less than 4 bytes in size don’t support arithmetic operations. \\ * `char`: 1 byte * `short int`: 2 bytes   ```cpp   short int var1{10};  // 2 bytes   short int var2{20};   char var3{40};  // 1 byte   char var4{50};    auto result1 = var1 + var2;  // 🔴 Implicit conversion to int   auto result2 = var3 + var4;  // 🔴 Implicit conversion to int   auto result3 = var1 >> 1;   auto result4 = var3 << 1;  #define printSizeOf(var) \\   fmt::print(\"sizeof({:^10}) = {} | value = {}\\n\", #var, sizeof(var), var);    printSizeOf(var1);   printSizeOf(var2);   printSizeOf(var3);  // ascii 40 -> (   printSizeOf(var4);  // ascii 50 -> 2   printSizeOf(result1);   printSizeOf(result2);   printSizeOf(result3);   printSizeOf(result4); ```   ## Type limits   ```cpp   // max:    maximum positive value   // min:    minimum positive value   // lowest: minimum negative value (if not integral)   fmt::print(\"\\n\\n{:^14}|{:2}|{:^27}|{:^27}|{:>27}\\n\", \"TYPE\", \"SZ\", \"LOWEST\",              \"MIN\", \"MAX\"); #define print_range(T)                                                        \\   if (std::numeric_limits<T>::is_integer) {                                   \\     fmt::print(\"{:14}|{:2}|INT{:24}|{:27}|{:27}\\n\", #T, sizeof(T),            \\                std::numeric_limits<T>::lowest(),                              \\                std::numeric_limits<T>::min(), std::numeric_limits<T>::max()); \\   } else {                                                                    \\     fmt::print(\"{:14}|{:2}|{:27}|{:27}|{:27}\\n\", #T, sizeof(T),               \\                std::numeric_limits<T>::lowest(),                              \\                std::numeric_limits<T>::min(), std::numeric_limits<T>::max()); \\   }    print_range(short);   print_range(unsigned short);   print_range(int);   print_range(unsigned int);   print_range(long);   print_range(unsigned long);   print_range(float);   print_range(double);   print_range(long double);    fmt::print(\"\\n\\n{:14}|{:^20}|{:^10}\\n\", \"TYPE\", \"PROPERTY\", \"VALUE\"); #define print_prop(T, P) \\   fmt::print(\"{:14}|{:^20}|{:^10}\\n\", #T, #P, std::numeric_limits<T>::P);    print_prop(int, is_signed);   print_prop(int, digits);   print_prop(int, radix);   print_prop(int, digits10);   // print_prop(int, round_style);    print_prop(double, is_signed);   print_prop(double, digits);   print_prop(double, radix);   print_prop(double, digits10);   // print_prop(double, round_style); ```   ## Possible output   ```txt sizeof(   var1   ) = 2 | value = 10 sizeof(   var2   ) = 2 | value = 20 sizeof(   var3   ) = 1 | value = ( sizeof(   var4   ) = 1 | value = 2 sizeof( result1  ) = 4 | value = 30 sizeof( result2  ) = 4 | value = 90 sizeof( result3  ) = 4 | value = 5 sizeof( result4  ) = 4 | value = 80        TYPE     |SZ|          LOWEST           |            MIN            |                        MAX short         | 2|INT                  -32768|                     -32768|                      32767 unsigned short| 2|INT                       0|                          0|                      65535 int           | 4|INT             -2147483648|                -2147483648|                 2147483647 unsigned int  | 4|INT                       0|                          0|                 4294967295 long          | 8|INT    -9223372036854775808|       -9223372036854775808|        9223372036854775807 unsigned long | 8|INT                       0|                          0|       18446744073709551615 float         | 4|             -3.4028235e+38|              1.1754944e-38|              3.4028235e+38 double        | 8|   -1.7976931348623157e+308|    2.2250738585072014e-308|    1.7976931348623157e+308 long double   |16|-1.189731495357231765e+4932|3.3621031431120935063e-4932| 1.189731495357231765e+4932   TYPE          |      PROPERTY      |  VALUE    int           |     is_signed      |   true    int           |       digits       |    31     int           |       radix        |    2      int           |      digits10      |    9      double        |     is_signed      |   true    double        |       digits       |    53     double        |       radix        |    2      double        |      digits10      |    15      ```  ## References  * [C++ Numeric limits](https://en.cppreference.com/w/cpp/types/numeric_limits)  ","title":"C++ numerical limits"},{"id":571,"location":"/til/cpp_prefix_and_postfix.html","tags":["C++","prefix_and_postfix"],"text":" ::: toc   ## Suffix/postfix increment and decrement  * `a++`, `a--` * associativity: left to right * precedence 2  ## Prefix increment and decrement  * `++a`, `--a` * associativity: right to left * precedence 3  ```cpp   int N{5};   fmt::print(\"N++: {}   N: {}\\n\", N++, N);   N = 5;  // reset;   fmt::print(\"++N: {}   N: {}\\n\", ++N, N);   N = 5;  // reset;   fmt::print(\"N--: {}   N: {}\\n\", N--, N);   N = 5;  // reset;   fmt::print(\"--N: {}   N: {}\\n\", --N, N);   N = 5;  // reset;   fmt::print(\"++--N: {}   N: {}\\n\", ++--N, N); ```   ## Possible output   ```txt N++: 5   N: 6 ++N: 6   N: 6 N--: 5   N: 4 --N: 4   N: 4 ++--N: 5   N: 5  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ prefix and postfix"},{"id":572,"location":"/til/online-compilers.html","tags":["online-compiler","godbolt","wandbox","coliru"],"text":"::: toc  ## Introduction  The fastest way to try different compilers.  ## References  * <https://wandbox.org/> * <https://coliru.stacked-crooked.com/> * <https://godbolt.org/> ","title":"Online Compilers"},{"id":573,"location":"/til/cpp_bitshift.html","tags":["C++","bitshift"],"text":" ::: toc    ```cpp   unsigned short int value{0b110110};   auto print = [](auto value) {     auto ushort =  static_cast<unsigned short int>(value);     std::cout << \"sizeof(value)=\" << sizeof(value) << \" -> \"               << std::bitset<sizeof(value)*8>(value) << \" \" << value << \"/\" << ushort << endl;   };    print(value);   print(value >> 1);   print(value << 1);   print(value >> 10);   print(value << 10);   print(value << 30);  ```   ## Possible output   ```txt sizeof(value)=2 -> 0000000000110110 54/54 sizeof(value)=4 -> 00000000000000000000000000011011 27/27 sizeof(value)=4 -> 00000000000000000000000001101100 108/108 sizeof(value)=4 -> 00000000000000000000000000000000 0/0 sizeof(value)=4 -> 00000000000000001101100000000000 55296/55296 sizeof(value)=4 -> 10000000000000000000000000000000 -2147483648/0  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ bit shift"},{"id":574,"location":"/til/cpp_bitwise_operator.html","tags":["C++","bitwise_operator"],"text":" ::: toc    ```cpp   unsigned char value1{0b01010101};   unsigned char value2{0b11110000};   unsigned char value3{0};    auto print3 = [](auto value1, auto value2, auto value3, auto label) {     auto print1 = [](auto value) { cout << '\\n' << std::bitset<8>(value); };     print1(value1);     print1(value2);     cout << \"\\n-------- \" << label;     print1(value3);     cout << '\\n';   };    auto printUnary = [](auto value1, auto value2, auto label) {     auto print1 = [](auto value) { cout << '\\n' << std::bitset<8>(value); };     print1(value1);     cout << \"\\n-------- \" << label;     print1(value2);     cout << '\\n';   };    print3(value1, value2, value1 ^ value2, \"^ XOR\");  // ZOR   print3(value1, value2, value1 | value2, \"| OR\");   print3(value1, value2, value1 & value2, \"& AND\");    printUnary(value1, ~value1, \"~ NOT\");   printUnary(value2, ~value2, \"~ NOT\");    value3 = value1;   value3 &= 0b10000;   print3(value1, 0b10000, value3, \" &= 0b10000 MASK\");    value3 = value1;   value3 &= 0b1000;   print3(value1, 0b1000, value3, \" &= 0b01000 MASK\");    value3 = value1;   value3 |= 0b10000;   print3(value1, 0b10000, value3, \" |= 0b10000 SET BIT TO 1\");    value3 = value1;   value3 |= 0b1000;   print3(value1, 0b1000, value3, \" |= 0b01000 SET BIT TO 1\");    value3 = value1;   value3 &= ~0b10000;   print3(value1, ~0b10000, value3, \" &= ~0b10000 SET BIT TO 0\");    value3 = value1;   value3 &= ~0b1000;   print3(value1, ~0b1000, value3, \" &= ~0b01000 SET BIT TO 0\");    value3 = value1;   value3 ^= 0b10000;   print3(value1, 0b10000, value3, \" ^= 0b10000\");    value3 = value1;   value3 ^= 0b1000;   print3(value1, 0b1000, value3, \" ^= 0b01000\");    const unsigned int red_mask{0xff000000};   const unsigned int green_mask{0x00ff0000};   const unsigned int blue_mask{0x0000ff00};   const unsigned int alpha_mask{0x000000ff};   unsigned int my_color{0xAABCDEFF};    cout << hex << showbase << endl;   cout << \"C: \" << my_color << endl;   cout << \"R: \" << ((my_color & red_mask) >> 24) << endl;   cout << \"G: \" << ((my_color & green_mask) >> 16) << endl;   cout << \"B: \" << ((my_color & blue_mask) >> 8) << endl;   cout << \"A: \" << ((my_color & alpha_mask) >> 0) << endl;  ```   ## Possible output   ```txt  01010101 11110000 -------- ^ XOR 10100101  01010101 11110000 -------- | OR 11110101  01010101 11110000 -------- & AND 01010000  01010101 -------- ~ NOT 10101010  11110000 -------- ~ NOT 00001111  01010101 00010000 --------  &= 0b10000 MASK 00010000  01010101 00001000 --------  &= 0b01000 MASK 00000000  01010101 00010000 --------  |= 0b10000 SET BIT TO 1 01010101  01010101 00001000 --------  |= 0b01000 SET BIT TO 1 01011101  01010101 11101111 --------  &= ~0b10000 SET BIT TO 0 01000101  01010101 11110111 --------  &= ~0b01000 SET BIT TO 0 01010101  01010101 00010000 --------  ^= 0b10000 01000101  01010101 00001000 --------  ^= 0b01000 01011101  C: 0xaabcdeff R: 0xaa G: 0xbc B: 0xde A: 0xff  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ bitwise operator"},{"id":575,"location":"/til/cpp_static_cast.html","tags":["C++","static_cast"],"text":" ::: toc   ::: important Prefer C++ casts over C- style casts  * C++ casts, `static_cast<>` is jut one of them, make your intent very   clear * They are easy to search for in code * `static_cast<>()` is checked by the compiler, and if the types are not   ```cpp   double x{12.5};   double y{34.6};    unsigned char cc[] = {0, 0, 0, 0};    auto sum1 = static_cast<int>(x) + static_cast<int>(y);   auto sum2 = static_cast<int>(x + y);    fmt::print(\"sizeof(sum1) = {} sum1 = {} <- (12+34)\\n\", sizeof(sum1), sum1);   fmt::print(\"sizeof(sum2) = {} sum2 = {} <- (47.1)\\n\", sizeof(sum2), sum2);    fmt::print(\"{} {} {} {} {}\\n\", static_cast<int>(*cc), cc[0], cc[1], cc[2],              cc[3]);    cc[1] = 254;  // this does not affect the static_cast below   fmt::print(\"{} {} {} {} {}\\n\", static_cast<int>(*cc), cc[0], cc[1], cc[2],              cc[3]);   cc[0] = 14;   fmt::print(\"{} {} {} {} {}\\n\", static_cast<int>(*cc), cc[0], cc[1], cc[2],              cc[3]);    fmt::print(\"Buffer overflow\\n\");   unsigned char c = 253;   for (int i = 0; i < 5; ++i) {     fmt::print(\"i: {} -> {}\\n\", i, static_cast<int>(++c));   }    fmt::print(\"Buffer underflow\\n\");   for (int i = 0; i < 5; ++i) {     fmt::print(\"i: {} -> {}\\n\", i, static_cast<int>(--c));   }  ```  ## Possible output   ```txt sizeof(sum1) = 4 sum1 = 46 <- (12+34) sizeof(sum2) = 4 sum2 = 47 <- (47.1) 0 0 0 0 0 0 0 254 0 0 14 14 254 0 0 Buffer overflow i: 0 -> 254 i: 1 -> 255 i: 2 -> 0 i: 3 -> 1 i: 4 -> 2 Buffer underflow i: 0 -> 1 i: 1 -> 0 i: 2 -> 255 i: 3 -> 254 i: 4 -> 253  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ static_cast"},{"id":576,"location":"/til/xargs.html","tags":["xargs"],"text":"::: toc  ## Introduction  `xargs` build and execute command lines from standard input.  ## Replacement string  ```shell seq 10 | xargs -I {} echo \"{}² = {} x {}\" ```  The `-I {}` indicates the replacement string. In this example all occurrences of `{}` will be replaced by the input line. The output of previous command is depicted below:   ``` 1² = 1 x 1 2² = 2 x 2 3² = 3 x 3 4² = 4 x 4 5² = 5 x 5 6² = 6 x 6 7² = 7 x 7 8² = 8 x 8 9² = 9 x 9 10² = 10 x 10 ```  ## How to stop on first error?  ### General method  ```shell xargs -n 1 sh -c '<your_command> $0 || exit 255' < input ```  ### Specific case  ```shell xargs -n 1 sh -c 'curl --silent --output /dev/null \\   --write-out \"%{url_effective}: %{http_code}\\n\" $0 || exit 255' < pages.txt ```  ## References  * [How to stop xargs on first error?](https://stackoverflow.com/questions/26484443/how-to-stop-xargs-on-first-error) ","title":"xargs"},{"id":577,"location":"/til/cpp_type_promotion.html","tags":["C++","type_promotion"],"text":" ::: toc   ## Introduction  As mentioned at [C++ numerical  ::: warning Integral types less than 4 bytes in size don’t support arithmetic operations. \\ * `char`: 1 byte * `short int`: 2 bytes  ::: tip The type of a floating literal is `double` unless explicitly specified by a **suffix**. The suffixes `f` and `F` specify `float`, the suffixes `l` and `L` specify `long double`.   ```cpp #define print_type(var) \\   fmt::print(\"{} = {} is {} \\n\", #var, var, typeid(var).name());  int main([[maybe_unused]] int argc, [[maybe_unused]] char **argv) {   int a = 10;   int b = 20;    auto max1 = (a > b) ? a : b;      // max1 is i   auto max2 = (a > b) ? 10.0f : b;  // max2 is f   auto max3 = (a > b) ? a : 20.0f;  // max3 is f   auto max4 = (a > b) ? 10.0 : b;   // max4 is d   auto max5 = (a > b) ? a : 20.0;   // max5 is d    short int x = 10;   short int y = 20;   short int z = 0;   auto max6 = (x > y) ? x : y;  // max6 is s   // 🔴 Implicit conversion to int   // short int don't support arithmetic   auto max7 = (x > y) ? x + z : y + z;  // max7 is i    print_type(max1);   print_type(max2);   print_type(max3);   print_type(max4);   print_type(max5);   print_type(max6);   print_type(max7);   return 0; } ```   ## Possible output   ```txt max1 = 20 is i  max2 = 20 is f  max3 = 20 is f  max4 = 20 is d  max5 = 20 is d  max6 = 20 is s  max7 = 20 is i   ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ automatic type promotion"},{"id":578,"location":"/til/cpp_if_with_initializer.html","tags":["C++","if","initializer"],"text":" ::: toc    ```cpp const int Pen{10}; const int Marker{20}; const int Eraser{30}; const int Rectangle{40}; const int Circle{50}; const int Ellipse{60};  int main([[maybe_unused]] int argc, [[maybe_unused]] char **argv) {   bool go{false};   // initialized inplace. Only one variable is allowed   if (int high_speed{33}; go) {     // high_speed is visible at if     if (high_speed > 5) {       cout << \"Slow down\" << endl;     } else {       cout << \"All good!\" << endl;     }   } else {     // high_speed is visible at else     cout << \"high_speed: \" << high_speed << endl;     cout << \"Stop\" << endl;   }    // not visible outside block   // cout << \"high_speed: \" << high_speed << endl;    int tool{Eraser};   // switch accept ONE initializer like if   switch (double strength{3.56}; tool) {     case Pen: {       std::cout << \"Active tool is Pen. strength : \" << strength << std::endl;     } break;      case Marker: {       std::cout << \"Active tool is Marker. strength : \" << strength                 << std::endl;     } break;      case Eraser:     case Rectangle:     case Circle: {       std::cout << \"Drawing Shapes. strength : \" << strength << std::endl;     } break;      case Ellipse: {       std::cout << \"Active tool is Ellipse. strength : \" << strength                 << std::endl;     } break;      default: {       std::cout << \"No match found. strength : \" << strength << std::endl;     } break;   }    return 0; } ```   ## Possible output   ```txt high_speed: 33 Stop Drawing Shapes. strength : 3.56  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ if with initializer"},{"id":579,"location":"/til/cpp_variable_lifetime.html","tags":["C++","variable_lifetime"],"text":" ::: toc    ```cpp #define print_var(var) fmt::print( \"{:>20} = {}\\n\", #var, var );  // static duration: dies when program ends int static_var_1{80};  void some_function() {   fmt::print( \"\\nsome_function()\\n\");   // local (automatic) duration: dies at end of block   int local_var_2{30};    // static duration: dies when program ends   static int static_var_3{40}; // the initialization occurs only one time   print_var(static_var_3);   ++static_var_3; // 41, 42, 43, ...    // you decide when it dies   int dynamic_var_4{50};    print_var(local_var_2);   print_var(static_var_3);   print_var(dynamic_var_4); }  int main([[maybe_unused]] int argc, [[maybe_unused]] char **argv) {   print_var(static_var_1);   some_function();   some_function();   some_function();   return 0; } ```   ## Possible output   ```txt         static_var_1 = 80  some_function()         static_var_3 = 40          local_var_2 = 30         static_var_3 = 41        dynamic_var_4 = 50  some_function()         static_var_3 = 41          local_var_2 = 30         static_var_3 = 42        dynamic_var_4 = 50  some_function()         static_var_3 = 42          local_var_2 = 30         static_var_3 = 43        dynamic_var_4 = 50  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ variable_lifetime"},{"id":580,"location":"/til/cpp_short_circuit.html","tags":["C++","short_circuit"],"text":" ::: toc    ```cpp bool car() {   fmt::print(\"   car function running\\n\");   return true; }  bool house() {   fmt::print(\" house function running\\n\");   return false; }  bool job() {   fmt::print(\"   job function running\\n\");   return true; }  bool spouse() {   fmt::print(\"spouse function running\\n\");   return true; }  int main([[maybe_unused]] int argc, [[maybe_unused]] char **argv) {   // First FALSE abort execution of AND   //    T        F           T          T   if (car() and house() and job() and spouse()) {     fmt::print(\"I am happy AND!\\n\");   } else {     fmt::print(\"I am sad AND!\\n\");   }   fmt::print(\"=================\\n\");   //    T        T          T            F   if (car() and job() and spouse() and house()) {     fmt::print(\"I am happy AND!\\n\");   } else {     fmt::print(\"I am sad AND!\\n\");   }   fmt::print(\"=================\\n\");    // First TRUE abort execution of OR   //    T       T         T           F   if (car() or job() or spouse() or house()) {     fmt::print(\"I am happy OR!\\n\");   } else {     fmt::print(\"I am sad OR!\\n\");   }    return 0; } ```   ## Possible output   ```txt    car function running  house function running I am sad AND! =================    car function running    job function running spouse function running  house function running I am sad AND! =================    car function running I am happy OR!  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ short_circuit"},{"id":581,"location":"/til/onedrive.html","tags":["onedrive","sharepoint","t3"],"text":"::: toc  ## Introduction  ## Get the drive_id  ```shell $ onedrive --get-O365-drive-id MYSHARENAME Using dry-run database copy for OneDrive API query Configuring Global Azure AD Endpoints Initializing the Synchronization Engine ... Office 365 Library Name Query: MYSHARENAME ----------------------------------------------- Site Name:    MYSHARENAME Library Name: name_of_library_01 drive_id:     b!RiaLHxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxHk1H Library URL:  https://yourcompany.sharepoint.com/sites/MYSHARENAME/name_of_library_01 ```  ## Configure  ```shell # single quoto to prevet expansion of character ! $ DRIVE_ID='b!RiaLHxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxHk1H' $ NAME=My_Library_Name $ CONF_DIR=~/.config/SharePoint_$NAME $ DATA_DIR=/data/SharePoint_$NAME $ mkdir -pv \"$CONF_DIR\" $ mkdir -pv \"$DATA_DIR\" $ wget https://raw.githubusercontent.com/abraunegg/onedrive/master/config \\   -O \"$CONF_DIR/config\" ```  Customize the default configuration file  ```shell $ sed -i \"s|.*sync_dir = .*|sync_dir = \\\"$DATA_DIR\\\"|\" \"$CONF_DIR/config\" $ sed -i \"s|.*drive_id = .*|drive_id = \\\"$DRIVE_ID\\\"|\" \"$CONF_DIR/config\" ```  Validate the configuration file  ```shell onedrive --confdir=\"$CONF_DIR\" --display-config ```  Sincronize  ```shell onedrive --confdir=\"$CONF_DIR\" --synchronize --verbose ```    ## List  ```shell onedrive --list-shared-folders ```  ## References  * [How to configure OneDrive Business Shared Folder Sync](https://github.com/abraunegg/onedrive/blob/master/docs/BusinessSharedFolders.md) * [How to configure OneDrive SharePoint Shared Library sync](https://github.com/abraunegg/onedrive/blob/master/docs/SharePoint-Shared-Libraries.md) ","title":"onedrive"},{"id":582,"location":"/til/debuggers_and_checkers.html","tags":["debugger","checkers","gdb","rr","LiveRecorder","valgrind","sanitizers","cppcheck","coverity"],"text":"::: toc  ## Introduction  ::: youtube id=\"bJfQ67idmW0\" title=\"Modern Linux C++ Debugging Tools Under the Covers\"  ## Debbugers  * GDB * strace  ## Time travel  * rr * LiveRecorder  ## Dynamic checkers  * valgrind * sanitizers  ## Static checkers  * cppcheck * coverity  ## Signal and ptrace  On receipt of signal:  * Terminate (potentially dumping core) Ignore * Stop (Suspend) * Run signal handler * If ptraced - stop (tracing stop)  Tracer gets complete control of what signals hit the tracee  ## References  * [How Linux C++ Debuggers Really Work](https://undo.io/resources/gdb-watchpoint/how-linux-debuggers-really-work/) * [Modern Linux C++ Debugging Tools Under the Covers](https://www.youtube.com/watch?v=bJfQ67idmW0) * [Debugging with GDB](https://sourceware.org/gdb/onlinedocs/gdb/index.html)  ","title":"Debuggers and Checkers"},{"id":583,"location":"/til/cpp_gdb_pretty_print.html","tags":["C++","gdb","pretty-print"],"text":" ::: toc  ## Pretty-Printer Introduction  Here is how a C++ `std::string` looks without a pretty-printer:  ```c++ (gdb) print s $1 = {   static npos = 4294967295,    _M_dataplus = {     <std::allocator<char>> = {       <__gnu_cxx::new_allocator<char>> = {         <No data fields>}, <No data fields>       },     members of std::basic_string<char, std::char_traits<char>,       std::allocator<char> >::_Alloc_hider:     _M_p = 0x804a014 \"abcd\"   } } ```   With a pretty-printer for `std::string` only the contents are printed:  ```c++ (gdb) print s $2 = \"abcd\" ```     ```cpp #include <stdlib.h>  typedef struct {   const char *first_name;   const char *last_name;   struct {     int day;     int month;     int year;   } dob;   char *comments; } student;  student students[]     = { [0] = { .first_name = \"Fred\", .last_name = \"Smith\", .dob = { 1, 1, 1970 } },         [1]         = { .first_name = \"Sarah\",             .last_name  = \"G0T0\",             .dob        = { 1, 1, 2002 },             .comments   = \"Lorem ipsum enchanta constrata\" } };  int main( void ) {   students[1].comments     = (char *) malloc( 128 );   students[1].comments[51] = 'X';   return 0; } ```   ## GDB commands   ```bash set verbose off set pagination off  start  set logging file output/gdb_pretty_print.gdb set logging overwrite on set logging on  echo print students with pretty off\\n set print pretty off print students  echo print students with pretty on\\n set print pretty on print students  echo Printing and watching elements of arrays\\n # 10 character max width print -elements 10 -- students[1].comments # All character print -elements unlimited -- students[1].comments print students[1].comments[5]@10 next  print students[1].comments[50]@4 watch students[1].comments[50]@4 continue  set logging off quit  #  vim: ft=gdb  ```  ## GDB output   ```shell print students with pretty off $1 = {{first_name = 0x555555556004 \"Fred\", last_name = 0x555555556009 \"Smith\", dob = {day = 1, month = 1, year = 1970}, comments = 0x0}, {first_name = 0x55555555600f \"Sarah\", last_name = 0x555555556015 \"G0T0\", dob = {day = 1, month = 1, year = 2002}, comments = 0x55555555601a \"Lorem ipsum enchanta constrata\"}} print students with pretty on $2 = {{     first_name = 0x555555556004 \"Fred\",     last_name = 0x555555556009 \"Smith\",     dob = {       day = 1,       month = 1,       year = 1970     },     comments = 0x0   }, {     first_name = 0x55555555600f \"Sarah\",     last_name = 0x555555556015 \"G0T0\",     dob = {       day = 1,       month = 1,       year = 2002     },     comments = 0x55555555601a \"Lorem ipsum enchanta constrata\"   }} Printing and watching elements of arrays $3 = 0x55555555601a \"Lorem ipsu\"... $4 = 0x55555555601a \"Lorem ipsum enchanta constrata\" $5 = \" ipsum enc\" 66\t  students[1].comments[51] = 'X'; $6 = \"\\000\\000\\000\" Hardware watchpoint 2: students[1].comments[50]@4  Thread 1 \"gdb_pretty_prin\" hit Hardware watchpoint 2: students[1].comments[50]@4  Old value = \"\\000\\000\\000\" New value = \"\\000X\\000\" main () at gdb_pretty_print.cpp:67 67\t  return 0;  ```  ## References  * [Debugging with GDB](https://sourceware.org/gdb/onlinedocs/gdb/index.html) * [Save time debugging in GDB with pretty printing](https://undo.io/resources/gdb-watchpoint/save-time-debugging-gdb-pretty-printing/) * [Debugging with pretty printers in GDB - part 2](https://undo.io/resources/gdb-watchpoint/debugging-pretty-printers-gdb-part2/) * [Debugging with pretty printers in GDB - part 3](https://undo.io/resources/gdb-watchpoint/debugging-pretty-printers-gdb-part3/) * [10.10.2 Pretty-Printer Example](https://sourceware.org/gdb/onlinedocs/gdb/Pretty_002dPrinter-Example.html) ","title":"C++ GDB pretty print"},{"id":584,"location":"/til/cpp_inline.html","tags":["C++","inline"],"text":" ::: toc   * Inline functions can increase the size of your application binary * It is recommended fo use them for short, frequently used functions * The programmer (You), should weigh in the benefits against the   downsides of inlining your functions * Usually only functions of a few lines of code and simple logic,   like our max function should be inlined * Marking your function as inline is just a suggestion to the   compiler.   * The compiler might agree and inline your function or just ignore you  ```cpp   func1();   func2(); ```   ## Possible output   ```txt  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ inline"},{"id":585,"location":"/til/cpp_memory_mapping_files.html","tags":["C++","memory_mapping_files"],"text":" ::: toc    ```cpp    ```   ## Possible output   ```txt  ```  ## References  * [Memory mapping files(https://bertvandenbroucke.netlify.app/2019/12/08/memory-mapping-files/  ","title":"C++ memory_mapping_files"},{"id":586,"location":"/til/cpp_gdb_user_defined_commands.html","tags":["C++","gdb","user-defined-command"],"text":" ::: toc  ## Introduction  Often it is tedious to debug complex data structures. Debugging a linked list often requires printing a node by dereferencing the pointer to its struct, then accessing the next node and doing the same to it. This can become tedious and messy, resulting in commands like: ```shell (gdb) print *(curr) (gdb) print *(curr->next) (gdb) print *(curr->next->next) ... ```  However, a command to print out a linked list can be created and placed inside the `.gdbinit` file.  ### Define a command  You can create a user defined command in the .gdbinit file:  ```shell define <command>     <code> end ```  ### Document a command  You can document a command in the .gdbinit file:  ```shell document <command>     <information about the command> end ```  This information appears when the help feature is used:  ```shell (gdb) help <command> <information about the command> ```  ### Command parameters  When a user defined command is called in GBD, arguments can be passed in:  ```shell (gdb) <command> <arg0> <arg1> <arg2> ... ```  The number of arguments, and the arguments themselves can be referenced inside the command definition using the following variables:  ```shell $argc $arg0 $arg1 $arg2 ... ```  ## Example of user-defined command   To create a user-defined command, we use the GDB command `define`, and give it a command name, which in our example is `bugreport` followed by a set of GDB commands that you want to execute or capture the output from.     ```shell (gdb) define bugreport > set pagination off > thread apply all backtrace full > shell uname -a > end (gdb) ```  To save the output to a file:  ```shell (gdb) define bugreport > set pagination off > set logging file /tmp/bugreport.txt > set logging on > thread apply all backtrace full > shell uname -a > set logging off > end (gdb) ```  Run it and display the file contents.  ```shell (gdb) bugreport (gdb) shell cat /tmp/bugreport.txt ```      ```cpp struct node {   int          data;   struct node *next; };  struct node *create_node( int data ); struct node *create_list( int length ); void         print_list( struct node *list );  int main( void ) {   struct node *list1 = create_list( 7 );   print_list( list1 );    return 0; }  struct node *create_node( int data ) {   struct node *newNode = (struct node *)malloc( sizeof( struct node ) );   assert( newNode != NULL );   newNode->data = data;   newNode->next = NULL;   return newNode; }  struct node *create_list( int length ) {   struct node *head = NULL;   if( length > 0 ) {     head              = create_node( 0 );     int          i    = 1;     struct node *curr = head;     while( i < length ) {       curr->next = create_node( i );       curr       = curr->next;       i++;     }   }   return head; }  void print_list( struct node *list ) {   struct node *curr = list;    while( curr != NULL ) {     printf( \"%d->\", curr->data );     curr = curr->next;   }   printf( \"X\\n\" ); } ```   ## GDB commands   ```bash set verbose off set pagination off  define p_generic_list   set var $n = $arg0   while $n     print *($n)     set var $n = $n->next   end end  document p_generic_list         p_generic_list LIST_HEAD_POINTER         Print all the fields of the nodes in the linked list pointed to by LIST_HEAD_POINTER. Assumes there is a next field in the struct. end  define indentby     printf \"\\n\"     set $i_$arg0 = $arg0     while $i_$arg0 > 10         set $i_$arg0 = $i_$arg0 - 1         printf \"%c\", ' '     end end  start  set logging file output/gdb_user_defined_commands.gdb set logging overwrite on set logging on  # struct node *list1 = create_list( 7 ); next p_generic_list list1  # See document p_generic_list help p_generic_list  # print_list( list1 ); next  continue quit  # vim: ft=gdb  ```  ## GDB output   ```shell 142\t  print_list( list1 ); $1 = {   data = 0,   next = 0x555555ab2540 } $2 = {   data = 1,   next = 0x555555ab2560 } $3 = {   data = 2,   next = 0x555555ab2580 } $4 = {   data = 3,   next = 0x555555ab25a0 } $5 = {   data = 4,   next = 0x555555ab25c0 } $6 = {   data = 5,   next = 0x555555ab25e0 } $7 = {   data = 6,   next = 0x0 }         p_generic_list LIST_HEAD_POINTER         Print all the fields of the nodes in the linked list pointed to by LIST_HEAD_POINTER. Assumes there is a next field in the struct. 144\t  return 0; [Inferior 1 (process 29241) exited normally]  ```  ## References  * [How to Work with User-Defined Commands in   GDB?(https://undo.io/resources/gdb-watchpoint/how-work-user-defined-commands-gdb/ * [GDB - Init File](https://www.cse.unsw.edu.au/~learn/debugging/modules/gdb_init_file/) * [title](link)  ","title":"C++ gdb user defined commands"},{"id":587,"location":"/til/cpp_concepts_01.html","tags":["C++","concepts","requires"],"text":" ::: toc   * C++ 20 * A mechanism to place constraints on your template type parameters.  An alternative to static asserts and type traits  ## Syntax 1  * the `requires` keyword is used to specify the concept   ```cpp template <typename T>   requires std::integral<T> // <--- T addA( T a, T b ) {   return a + b; }  template <typename T>   requires std::is_integral_v<T> // Using a type trait T addB( T a, T b ) {   return a + b; } ```   ## Syntax 2   ```cpp template <std::integral T> T addC( T a, T b ) {   return a + b; } ```   ## Syntax 3   ```cpp auto addD( std::integral auto a, std::integral auto b ) {   return a + b; } ```   ## Syntax 4   ```cpp template <typename T> T addE( T a, T b )   requires std::integral<T> {   return a + b; } ```   ## Building your own concept   ```cpp template <typename T> concept MyIntegral = std::is_integral_v<T>; ```    ```cpp template <typename T> concept Multipliable = requires( T a, T b ) {   a *b; // Just makes sure the syntax is valid }; ```    ```cpp template <typename T> concept Incrementable = requires( T a ) {   a += 1;   ++a;   a++; }; ```    ```cpp template <typename T> concept Addable = requires( T a, T b ) {   // noexcept is optional   {     a + b   } noexcept -> std::convertible_to<int>; // Compound requirement   // Checks if a + b is valid syntax, does not throw exceptions(optional),   // and the result is convertible to int(optional) }; ```   ##  Nested requirement   ```cpp template <typename T> concept TinyType = requires( T t ) {   sizeof( T ) <= 4; // Simple requirement : Only checks syntax    // Nested requirement: checks the if the expression is true   requires sizeof( T ) <= 4; }; ```   ## Combining requirement  ### Conjunction &&   ```cpp template <typename T>   requires std::integral<T> && TinyType<T> T addF( T a, T b ) {   return a + b; } ```   ### Disjunction ||   ```cpp template <typename T>   requires std::integral<T> || std::floating_point<T> T addG( T a, T b ) {   return a + b; } ```   ## Concepts and auto    ```cpp template <typename T> void print_number( T n ) {   static_assert( std::is_integral<T>::value, \"Must pass in an integral argument\" );   std::cout << \"n: \" << n << std::endl; } ```   ```cpp class A {};  enum E : int {};  template <class T> T f( T i ) {   static_assert( std::is_integral<T>::value, \"Integral required.\" );   return i; } #define SHOW( ... ) std::cout << std::setw( 29 ) << #__VA_ARGS__ << \" == \" << __VA_ARGS__ << '\\n'  int main( [[maybe_unused]] int argc, [[maybe_unused]] char **argv ) {  ```cpp   std::cout << std::boolalpha;    SHOW( std::is_integral<A>::value );   SHOW( std::is_integral_v<E> );   SHOW( std::is_integral_v<float> );   SHOW( std::is_integral_v<int> );   SHOW( std::is_integral_v<const int> );   SHOW( std::is_integral_v<bool> );   SHOW( f( 123 ) );    // clang-format off   //    std::is_integral<A>::value == false   //         std::is_integral_v<E> == false   //     std::is_integral_v<float> == false   //       std::is_integral_v<int> == true   // std::is_integral_v<const int> == true   //      std::is_integral_v<bool> == true   //                      f( 123 ) == 123   // clang-format on  ```  ```   ## Possible output   ```txt    std::is_integral<A>::value == false         std::is_integral_v<E> == false     std::is_integral_v<float> == false       std::is_integral_v<int> == true std::is_integral_v<const int> == true      std::is_integral_v<bool> == true                      f( 123 ) == 123  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ Concepts"},{"id":588,"location":"/til/broadband-wideband-narrowband.html","tags":["broadband","wideband","narrowband"],"text":"::: toc  ## Introduction  ## Broadband  * In the Internet space, broadband is good. * It’s a catch-all term for services with faster speeds. * It’s where we all want to be, particularly those of us who remember dial-up modems. * Having broadband means faster downloads of content for your smartphone, computer, Internet-enabled TV or content-streaming device. * Your devices are either broadband-enabled or they aren't. * Engineers argue about what download or upload speeds constitute broadband, e.g., over 2 Mbps (megabits per second). * Most consumers don’t know — and don’t care — about how to measure a megabit   but do know they have broadband if they can watch a movie or video clip on an   Internet-enabled device without it stalling (buffering, if you prefer a more   accurate term). * The opposite of Internet broadband would be called narrowband, but that’s   only a term used now to distinguish what we had in the “old” days, now that   we have broadband. * Another way of thinking about broadband is to envision a stream of running   water: A faster stream carries a floating boat more quickly. * For two-way radios — technically called land mobile radios by the Federal   Communications Commission — there’s another technology transition going on.   However, the attractiveness of “bands” is not intuitive based on the prior   broadband and narrowband comparison: in this context, \"narrowband” is better,   and “wideband” not so.  ## Wideband  *  Radios for many years were wideband, meaning they utilized more spectrum,    e.g., 25 kHz (kilohertz) and even up to 50 kHz in the distant past. * Using the stream of water analogy above, wideband would refer to the width of   the stream, i.e., you can fit more boats side-by-side in the water.  ## Narrowband  * The reason why narrowband is better is that technology has improved over the   years, driven largely by a conversion from analog to digital, allowing voice   and data communications over two way radio frequencies to consume less   bandwidth, essentially allowing the same or better communications to take   place over half the spectrum. * The FCC mandated years ago that radio users in the 150–174 MHz and 421–470   MHz bands convert to 12.5 MHz “narrowband” channels (and equivalents) for   their communications by Jan. 1, 2013. * Manufacturers have continued to improve the efficiency of their radios, so   even 6.25 kHz narrowband radios exist today, performing the same and better   functions that older wideband radios did. * So, for two-way radio usage, narrowband spectrum is good. * For Internet usage, narrowband speeds are bad. * In a future Wireless Connections article we will review strategies that some   land-mobile-radio operators are considering to use broadband applications   over narrowband frequencies.  ## References  * [What’s the Difference: Broadband, Wideband, Narrowband](http://m.hqtsolutions.com/news-information/what-difference-broadband-wideband-narrowband.html) ","title":"Broadband — Wideband — Narrowband"},{"id":589,"location":"/til/digital-communication-block-diagram.html","tags":["communication","waveform","channel"],"text":"::: toc  ## Introduction  ::: pikchr src=\"/til/digital_communication_block_diagram_01.svg\" \\ title=\"Digital Communication Block Diagram\" \\ preload=\"/til/digital_communication.pikchr\" topmargin += 1mm margin = 5mm down; file \"Information\" \"Source\" width 15mm color brown; F1: bitstream; essential( \"Format\" \"ADC\" ); SE1: bitstream; optional( \"Source\" \"Encode\" ); bitstream; optional( \"Encrypt\" ); bitstream; optional( \"Channel\" \"Encode\" ); MP1: bitstream; optional( \"Multiplex\" ); bitstream; essential( \"Pulse\" \"Modulate\" ); baseband_waveform; essential( \"Bandpass\" \"Modulate\" ); baseband_waveform; optional( \"Frequency\" \"Spread\" ); baseband_waveform; optional( \"Multiple\" \"Access\" ); arrow rf_head(\"XMT\") move to last oval.e; right Channel: arrow \"CHANNEL\" above thin width 3cm dashed color blue rf_head(\"RCV\") move to last oval.n; up arrow; optional( \"Multiple\" \"Access\" ) baseband_waveform; optional( \"Frequency\" \"Despread\" ) baseband_waveform; essential( \"Demodulate\" \"And Sample\" ) baseband_waveform; essential( \"Detect\" ) bitstream; optional( \"Demultiplex\" ) bitstream; optional( \"Channel\" \"Decode\" ) bitstream; optional( \"Decrypt\" ) bitstream; optional( \"Source\" \"Decode\" ) bitstream; essential( \"Format\" \"DAC\" ) bitstream; file \"Information\" \"Sink\" width 15mm color brown; arrow \"Message\" small small \"Symbols\" small small from SE1.w - (15mm,0) right 12mm thin thin; arrow \"Channel\" small small \"Symbols\" small small from MP1.w - (15mm,0) right 12mm thin thin; move to Channel.s then down 2cm then left 27mm right optional( \"Optional\" \"Component\" ) line invisible width 2mm essential( \"Essential\" \"Component\" ) line invisible width 2mm rf_head(\"RF Head\")   ![Digital Communication Block Diagram](/til/digital_communication_block_diagram_00.webp)  ## Source Encoder  The source encoder compresses the data into minimum number of bits. This process helps in effective utilization of the bandwidth. It removes the redundant bits unnecessary excess bits, i.e., zeroes.  ## Channel Encoder  The channel encoder, does the coding for error correction. During the transmission of the signal, due to the noise in the channel, the signal may get altered and hence to avoid this, the channel encoder adds some redundant bits to the transmitted data. These are the error correcting bits.  ## Digital Modulator  The signal to be transmitted is modulated here by a carrier. The signal is also converted to analog from the digital sequence, in order to make it travel through the channel or medium.  ## Channel  The channel or a medium, allows the analog signal to transmit from the transmitter end to the receiver end.  ## Digital Demodulator  This is the first step at the receiver end. The received signal is demodulated as well as converted again from analog to digital. The signal gets reconstructed here.  ## Channel Decoder  The channel decoder, after detecting the sequence, does some error corrections. The distortions which might occur during the transmission, are corrected by adding some redundant bits. This addition of bits helps in the complete recovery of the original signal.  ## Source Decoder  The resultant signal is once again digitized by sampling and quantizing so that the pure digital output is obtained without the loss of information. The source decoder recreates the source output.  ## Output Transducer  This is the last block which converts the signal into the original physical form, which was at the input of the transmitter. It converts the electrical signal into physical output (Example: loud speaker).  ## Output Signal  This is the output which is produced after the whole process. Example − The sound signal received.  ## FM — Frequency Modulation  * High frequency = high energy * Less power required for transmission * Unaffected by interference/noise  ![FM Enconding](/til/digital_communication_fm_encoding.webp)  ![Pulse Width Modulation](/til/digital_communication_pulse_width_modulation.webp)  ![Pulse Position Modulation](/til/digital_communication_pulse_position_modulation.webp)  ![Pulse Width vs Position Modulation](/til/digital_communication_pulse_width_vs_position_modulation.webp)  ![Pulse Amplitude Modulation](/til/digital_communication_pulse_amplitude_modulation.webp)  ## PCM — Pulse Code Modulation  * Commonly used * Easy to understand * Antecedent to all other methods * Lossless encoding  Instead of a pulse train, PCM produces a series of numbers or digits, and hence this process is called as **digital**.  Each one of these digits, though in binary code, represent the approximate amplitude of the signal sample at that instant.  In Pulse Code Modulation, the message signal is represented by a sequence of coded pulses. This message signal is achieved by representing the signal in discrete form in both time and amplitude.  ::: pikchr src=\"/til/digital_communication_pcm_01.svg\" title=\"PCM\" margin = 3mm arrow from (-0.1,0) to (7.2,0) color yellow; text \"Time\" below arrow from (0,-1) to (0,1.2) color yellow; text \"Amplitude\" below // spline from (0.00,sin(0.00)) to (0.25,sin(0.25)) to (0.50,sin(0.50)) to (0.75,sin(0.75)) to (1.00,sin(1.00)) to (1.25,sin(1.25)) to (1.50,sin(1.50)) to (1.75,sin(1.75)) to (2.00,sin(2.00)) to (2.25,sin(2.25)) to (2.50,sin(2.50)) to (2.75,sin(2.75)) to (3.00,sin(3.00)) to (3.25,sin(3.25)) to (3.50,sin(3.50)) to (3.75,sin(3.75)) to (4.00,sin(4.00)) to (4.25,sin(4.25)) to (4.50,sin(4.50)) to (4.75,sin(4.75)) to (5.00,sin(5.00)) to (5.25,sin(5.25)) to (5.50,sin(5.50)) to (5.75,sin(5.75)) to (6.00,sin(6.00)) to (6.25,sin(6.25)) to (6.50,sin(6.50)) to (6.75,sin(6.75))  color green thick arrow <- from 0.5 <10th vertex of last spline, 11th vertex of last spline> then right 1cm up 1cm color green text \"Analog Signal\" big big color green arrow <- from 13th vertex of last spline + (0.5mm,0.5mm) then right 1cm up 1cm color red text \"Sampled\" big big color red // line from (0.00,0) to (0.00,sin(0.00)) color cyan thin thin dashed; dot rad 150% color red line same from (0.25,0) to (0.25,sin(0.25)); dot same; text \"a1\" line same from (0.50,0) to (0.50,sin(0.50)); dot same line same from (0.75,0) to (0.75,sin(0.75)); dot same line same from (1.00,0) to (1.00,sin(1.00)); dot same line same from (1.25,0) to (1.25,sin(1.25)); dot same line same from (1.50,0) to (1.50,sin(1.50)); dot same line same from (1.75,0) to (1.75,sin(1.75)); dot same line same from (2.00,0) to (2.00,sin(2.00)); dot same line same from (2.25,0) to (2.25,sin(2.25)); dot same line same from (2.50,0) to (2.50,sin(2.50)); dot same line same from (2.75,0) to (2.75,sin(2.75)); dot same line same from (3.00,0) to (3.00,sin(3.00)); dot same line same from (3.25,0) to (3.25,sin(3.25)); dot same line same from (3.50,0) to (3.50,sin(3.50)); dot same line same from (3.75,0) to (3.75,sin(3.75)); dot same line same from (4.00,0) to (4.00,sin(4.00)); dot same line same from (4.25,0) to (4.25,sin(4.25)); dot same line same from (4.50,0) to (4.50,sin(4.50)); dot same line same from (4.75,0) to (4.75,sin(4.75)); dot same line same from (5.00,0) to (5.00,sin(5.00)); dot same line same from (5.25,0) to (5.25,sin(5.25)); dot same line same from (5.50,0) to (5.50,sin(5.50)); dot same line same from (5.75,0) to (5.75,sin(5.75)); dot same line same from (6.00,0) to (6.00,sin(6.00)); dot same line same from (6.25,0) to (6.25,sin(6.25)); dot same line same from (6.50,0) to (6.50,sin(6.50)); dot same line same from (6.75,0) to (6.75,sin(6.75)); dot same // line from (0,-1) left 2mm thin line same from (0,-0.9) left 2mm line same from (0,-0.8) left 2mm line same from (0,-0.7) left 2mm line same from (0,-0.6) left 2mm line same from (0,-0.5) left 3mm line same from (0,-0.4) left 2mm line same from (0,-0.3) left 2mm line same from (0,-0.2) left 2mm line same from (0,-0.1) left 2mm line same from (0,1) left 2mm line same from (0,0.9) left 2mm line same from (0,0.8) left 2mm line same from (0,0.7) left 2mm line same from (0,0.6) left 2mm line same from (0,0.5) left 3mm line same from (0,0.4) left 2mm line same from (0,0.3) left 2mm line same from (0,0.2) left 2mm line same from (0,0.1) left 2mm // text at (0.25,0) \"t1\" below text at (0.50,0) \"t2\" below // ADCbits: [   text at (0,1) \"1111 1111 1111 1111\" color grey   text same at (0,0.9) \"1111 1111 1111 1110\"   text same at (0,0.8) \"1111 1111 1111 1101\"   text same at (0,0.7) \"1111 1111 1111 1100\"   text same at (0,-0.7) \"0000 0000 0000 0011\"   text same at (0,-0.8) \"0000 0000 0000 0010\"   text same at (0,-0.9) \"0000 0000 0000 0001\"   text same at (0,-1) \"0000 0000 0000 0000\"   text at (0,0) \"PCM\" big \"Encoded Signal\" small ] at (-0.7,0.0) box at ADCbits.center width ADCbits.width -5mm height ADCbits.height  text at ADCbits.n \"ADC\" above big  ::: pikchr src=\"/til/digital_communication_pcm_output_signal.svg\" title=\"PCM Output Signal\" define pcmw { box \"PCM word\" small $1 width 100%; } pcmw(\"1010 1010\") pcmw(\"0010 1111\") pcmw(\"1110 0010\") pcmw(\"0110 1110\") box same \"...\" pcmw(\"1111 1110\")  ### PCM Encoding  * Companding PCM * Differential PCM * Adaptive Differential PCM * Linear Predictive PCM * Delta Modulation * Modified Discrete Cosine Transform  ### Basic Elements of PCM  ::: pikchr src=\"/til/digital_communication_pcm_02.svg\" \\ title=\"Basic Elements of PCM\" \\ preload=\"/til/digital_communication.pikchr\" margin = 3mm down file \"Analog\" \"Message\" \"Signal\" color brown width 15mm BS1: bitstream LPF: essential(\"Low Pass\" \"Filter\") BS2: bitstream SAMPLER: essential(\"Sampler\") BS3: bitstream Q: essential(\"Quantizer\") BS4: bitstream E: optional(\"Encoder\") BS5: bitstream text at LPF.e + (1mm,0)  \"eliminate high frequency\" ljust \"present in the input signal\" ljust text at SAMPLER.e + (1mm,0) \"collect instantaneous values\" ljust \"of message signal\" ljust text at Q.e + (1mm,0) \"reduce the excessive bits\" ljust \"and confining the data\" ljust text at E.e + (1mm,0) \"digitization of analog signal\" ljust line from BS1.e left 2cm \"x(t)\" above big color yellow thin thin line from BS2.e left 2cm \"x(t)\" above big color yellow thin thin line same from BS3.e left 2cm \"{xn}\" big \"flat-top PAM\" line same from BS4.e left 2cm \"{x̂n}\" big above line same from BS5.e left 2cm \"010101010...\"  above  ## Low Pass Filter  This filter eliminates the high frequency components present in the input analog signal which is greater than the highest frequency of the message signal, to avoid aliasing of the message signal.  ## Sampler  * p.e. 44.1kHz at 1 second  This is the technique which helps to collect the sample data at instantaneous values of message signal, so as to reconstruct the original signal. The sampling rate must be greater than twice the highest frequency component W of the message signal, in accordance with the sampling theorem.  ::: tip The typical human speech is represented by a simple 1200 Hz tone, which is represented by a sine wave.  ::: info title=\"Nyquist\" If a and-limited signal is sampled at regular intervals of time and at a rate equal to or higher than twice (2x) the highest significant signal frequency, then the sample contains all the information of the original signal. \\ The original signal may then be reconstructed by use of a low-pass filter.  Based on Nyquist sampling theorem, we can derive that the nominal **4 kHz voice channel** can be reconstructed by a sampling rate of 8000 times per second (4000 x 2).  This means that a sample is taken every 125 μsec, or 1 second/8000.  ## Quantizer  * p.e. 16bits (65.536 levels)  Quantizing is a process of reducing the excessive bits and confining the data. The sampled output when given to Quantizer, reduces the redundant bits and compresses the value.  The exact sample value is replaced by the closest value allowed. The infinite number of levels is transformed into a finite number of levels.   ::: pikchr src=\"/til/digital_communication_pcm_quantizer_00.svg\" title=\"PCM Quantizer\" arrow from (-0.1,0) to (7.2,0) color yellow; text \"Time\" below arrow from (0,-1) to (0,1.2) color yellow; text \"Amplitude\" below spline from (0.00,sin(0.00)) to (0.25,sin(0.25)) to (0.50,sin(0.50)) to (0.75,sin(0.75)) to (1.00,sin(1.00)) to (1.25,sin(1.25)) to (1.50,sin(1.50)) to (1.75,sin(1.75)) to (2.00,sin(2.00)) to (2.25,sin(2.25)) to (2.50,sin(2.50)) to (2.75,sin(2.75)) to (3.00,sin(3.00)) to (3.25,sin(3.25)) to (3.50,sin(3.50)) to (3.75,sin(3.75)) to (4.00,sin(4.00)) to (4.25,sin(4.25)) to (4.50,sin(4.50)) to (4.75,sin(4.75)) to (5.00,sin(5.00)) to (5.25,sin(5.25)) to (5.50,sin(5.50)) to (5.75,sin(5.75)) to (6.00,sin(6.00)) to (6.25,sin(6.25)) to (6.50,sin(6.50)) to (6.75,sin(6.75))  color green thick arrow <- from 0.5 <11th vertex of last spline, 12th vertex of last spline> then right 1cm up 1cm color green text \"Analog Signal\" big big color green $t = 0.0 $y = -0.95 define level { line from (0,$y) to (7,$y) dotted thin thin color gray; $y += 0.27; } define time { line from ($t,-1) to ($t,1) dotted thin thin color gray; $t += 0.25; } define step { line same right 0.25 then to ($t,$1); dot rad 300% color red;  $t += 0.25; } level; level; level; level; level; level; level; level; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; time; $t = 0.25 line from (0,0) to (0,0) thick thick color red; step(0.13) step(0.40) step(0.67) step(0.94) step(0.94) step(0.94) step(0.94) step(0.94) step(0.67) step(0.67) step(0.40) step(0.13) step(-0.14) step(-0.41) step(-0.68) step(-0.68) step(-0.95) step(-0.95) step(-0.95) step(-0.95) step(-0.95) step(-0.68) step(-0.41) step(-0.14) step(-0.14) step(0.13) step(0.40)  ::: pikchr src=\"/til/digital_communication_pcm_quantizer_01.svg\" title=\"PCM Quantizer\" $x = -4cm $y = -4cm define auxLine {   line from (0,$y) to ($x,$y) dotted thin   line from ($x,0) to ($x,$y) dotted thin   $x = $x + 1cm   $y = $y + 1cm } define step {   auxLine   line right 1cm then up 1cm thick color red } arrow from (-7cm,0) to (6cm,0) thin color yellow arrow from (0,-4.2cm) to (0,4.5cm) thin color yellow step step step step line same up 1cm $y = $y + 1cm step step step line same right 3cm line same from (-4cm,-4cm) left 3cm auxLine text \"x̂8\" with .e at (0,4cm) text \"x̂7\" with .e at (0,3cm) text \"x̂6\" with .e at (0,2cm) text \"x̂5\" with .e at (0,1cm) text \"x̂4\" with .w at (0,-1cm) text \"x̂3\" with .w at (0,-2cm) text \"x̂2\" with .w at (0,-3cm) text \"x̂1\" with .w at (0,-4cm) text \"a1\" with .s at (-3cm,0) text \"a2\" with .s at (-2cm,0) text \"a3\" with .s at (-1cm,0) text \"a4\" with .nw at (0,0) text \"a5\" with .n at (1cm,0) text \"a6\" with .n at (2cm,0) text \"a7\" with .n at (3cm,0)    ## Bandwidth  * p.e. 44.1k samples x 16bits = 705.6kbps for a single audio channel * sample rate x bit depth x number of channels = bandwidth of multichannel audio  ## Encoder  * The digitization of analog signal is done by the encoder. * It designates each quantized level by a binary code. * The sampling done here is the sample-and-hold process. * Encoding minimizes the bandwidth used.  ## Regenerative Repeater  This section increases the signal strength. The output of the channel also has one regenerative repeater circuit, to compensate the signal loss and reconstruct the signal, and also to increase its strength.  ## Decoder  The decoder circuit decodes the pulse coded waveform to reproduce the original signal. This circuit acts as the demodulator.  ## Reconstruction Filter  After the digital-to-analog conversion is done by the regenerative circuit and the decoder, a low-pass filter is employed, called as the reconstruction filter to get back the original signal.  Hence, the Pulse Code Modulator circuit digitizes the given analog signal, codes it and samples it, and then transmits it in an analog form. This whole process is repeated in a reverse pattern to obtain the original signal.  ## Broadband, wideband and narrowband  * [Broadband — Wideband — Narrowband](/til/broadband-wideband-narrowband.html)  ## References  * [Digital Communication - Quick Guide](https://www.tutorialspoint.com/digital_communication/digital_communication_quick_guide.htm) * [Lecture 11, ELG3175: Introduction to Communication Systems](https://www.site.uottawa.ca/~sloyka/elg3175/Lec_11_ELG3175.pdf) * Stanford [Lecture 13: Pulse Code Modulation](https://web.stanford.edu/class/ee179/lectures/notes13.pdf) * [WHAT IS PULSE CODE MODULATION (PCM)?](https://www.fiberoptics4sale.com/blogs/archive-posts/95045126-what-is-pulse-code-modulation-pcm) * Video [10. Pulse Code Modulation - Digital Audio Fundamentals](https://www.youtube.com/watch?v=wn71QBApCRg) * Video [Digital Show & Tell](https://www.xiph.org/video/vid2.shtml) * Video [A Digital Media Primer for Geeks](https://www.xiph.org/video/vid1.shtml) ","title":"Digital Communication Block Diagram"},{"id":590,"location":"/til/hf-vhf-uhf.html","tags":["HF","VHF","UHF"],"text":"::: toc  ## Introduction  ::: description Each operational frequency comes with its own advantages and disadvantages. But overall, VHF radios are better for outdoor use in large areas, and UHF radios are better for indoor or outdoor settings that are in close proximity.  ## UHF — Ultra High Frequency  * Between 300 MHz and 3 GHz * UHF radio waves propagate mainly by line of sight * They are blocked by hills and large buildings although the transmission through building walls is strong enough for indoor reception * They are used for:   * television broadcasting   * cell phones   * satellite communication including GPS   * personal radio services including Wi-Fi and Bluetooth   * walkie-talkies   * cordless phones * The IEEE defines the UHF radar band as frequencies between 300 MHz and 1 GHz. * Two other IEEE radar bands overlap the ITU UHF band:   * the L band between 1 and 2 GHz   * the S band between 2 and 4 GHz * One of the biggest pros of UHF radios is that they do a much better job of penetrating barriers in urban locations, like concrete, steel, and wood. * So this kind of radio is best suited for use indoors, including buildings with multiple floors, in industries such as:   * manufacturing   * distribution   * education   * retail   * hospitality   * healthcare * They also work well for businesses that function in both indoor and outdoor settings, where there are a lot of surrounding buildings.  ## VHF — Very high frequency   * From 30 MHz to 300 MHz * Frequencies immediately below VHF are denoted high frequency (HF) * The next higher frequencies are known as ultra high frequency (UHF) * Common uses for VHF are:   * FM radio broadcasting   * television broadcasting   * two way land mobile radio systems (emergency, business, private use and military)   * long range data communication up to several tens of kilometers with radio modems   * amateur radio   * marine communications * Air traffic control communications and air navigation systems (e.g. VOR, DME   & ILS) work at distances of 100 kilometers or more to aircraft at cruising   altitude. * VHF was used for analog television stations in the US, and continues to be   used for digital television. * VHF band was an early choice for manpack radios used by ground troops to   communicate within a local eight kilometer (five mile) area or so. * Unlike HF, VHF transmissions lack the ability to utilize the Ionosphere and are limited to line-of-sight (LOS) communication * This reduces radio emission clutter throughout an extended battlefield and limits the vulnerability to unfriendly interception.  ## HF — High frequency  * Between 1.6 MHz and 30 MHz * The HF band is a major part of the shortwave band of frequencies * Communication at these frequencies is often called shortwave radio * Because radio waves in this band can be reflected back to Earth by the   ionosphere layer in the atmosphere – a method known as \"skip\" or \"skywave\"   propagation – these frequencies are suitable for long-distance communication   across intercontinental distances. * SSB — Single Side Band, a layer of ionization gases that resides between 100   and 700 km above the Earth surface. * The band is used by international shortwave broadcasting stations (2.310   - 25.820 MHz), aviation communication, government time stations, weather   stations, amateur radio and citizens band services, among other uses. * Is vital for base stations communicating with each other over vast distances * Is useful for linking remote regions to the outside world, as HF radio   communications is not reliant on conventional communications infrastructure. * STANAG 4539(QAM)   * coded data rates from 75 to 9600 bps   * uncoded data rate of 12k8 bps * STANAG 4285(PSK) * STANAG 4415(PSK NATO robust) * MIL-STD-188-110B(QAM) * STANAG 4529 (NB PSK) * MIL-STD-188-110A (PSK) * MIL-STD-188-110B Appendix F (QAM, ISB)  ## References  * [What is the Difference Between UHF & VHF & HF and GMRS   & FRS?](http://m.hqtsolutions.com/news-information/difference-between-uhf-vhf-hf-and-gmrs-frs.html) * [VHF RADIO OVERVIEW](https://www.barrettcommunications.com.au/vhf_overview/) * [Standard HF Waveform Performances](https://www.rapidm.com/standard-hf-waveform-performances/) ","title":"HF — VHF — UHF"},{"id":591,"location":"/til/inter-process-communication.html","tags":["IPC","inter-process-communication","socket","shared-memory","pipe"],"text":"::: toc  ## Introduction  ## References  * [Comparing and Evaluating the Performance of Inter Process Communication Models in Linux Environment](https://www.researchgate.net/publication/334164367_Comparing_and_Evaluating_the_Performance_of_Inter_Process_Communication_Models_in_Linux_Environment) * [Evaluation of Inter-Process Communication Mechanisms](https://pages.cs.wisc.edu/~adityav/Evaluation_of_Inter_Process_Communication_Mechanisms.pdf) * [Benchmarks for Inter-Process-Communication Techniques](https://github.com/goldsborough/ipc-bench) * [Beej's Guide to Unix IPC](https://beej.us/guide/bgipc/) * [Beej's IPC github](https://github.com/beejjorgensen/bgipc) ","title":"inter-process-communication"},{"id":592,"location":"/til/self-education.html","tags":["self-education","t2","t3"],"text":"::: toc  ## Introduction  ## References  * [Self-Education: The Skill That Will Help You Stay Ahead](https://collegeinfogeek.com/self-education/) ","title":"self-education"},{"id":593,"location":"/til/stock-image-source.html","tags":["image","nappy"],"text":"::: toc  ## Introduction  There are a lot of  free stock photography websites offering high quality and free photos filed under the creative commons license.  ## References  * [Megapixl](https://www.megapixl.com/) * [Pexels](https://www.pexels.com/) * [Unsplash](https://unsplash.com/) * [Nappy Beautiful photos of Black and Brown people](https://nappy.co/)  ","title":"Stock Image Source"},{"id":594,"location":"/til/cpp_ranges_03.html","tags":["C++","ranges","std::for_each","parallel"],"text":" ::: toc  Copy of post [Daily bit(e) of C++ | std::for_each](https://simontoth.substack.com/p/daily-bite-of-c-stdfor_each) written by [Šimon Tóth](https://substack.com/profile/87554170-simon-toth).  The `std::for_each` algorithm invokes the provided functor on each range element in order, ignoring the result.  While the range-based for-loop has mostly replaced the use cases for `std::for_each`, it still comes in handy as a trivial parallelization tool and in its C++20 range version with projections.    ## Possible output   ```txt 6 6 6 6 6  0 2 0 4 0   ```  ## References  * [Daily bit(e) of C++ | std::for_each](https://simontoth.substack.com/p/daily-bite-of-c-stdfor_each)  ","title":"C++ Ranges — Part 3 — The simplest C++ algorithm: std::for_each"},{"id":595,"location":"/til/abu_dhabi.html","tags":["Abu-Dhabi"],"text":"::: toc  ## Introduction  ## Geography  ::: pikchr src=\"/til/abu_dhabi_draft_00.svg\" title=\"Abu Dhabi\" // Abu Dhabi line from \\ (51.589859, 24.127875) to \\ (52.585320, 22.950924) to \\ (55.155180, 22.632711) to \\ (55.237650, 23.144699) to \\ (55.589883, 23.655311) to \\ (55.492561, 23.944110) to \\ (56.008578, 24.059336) to \\ (55.969135, 24.215450) to \\ (55.750984, 24.250344) to \\ (55.834119, 24.703303) to \\ (55.290882, 24.618084) to \\ (55.029213, 24.985316) to \\ (54.660572, 24.730350) to \\ (54.576808, 24.509935) to \\ (54.472602, 24.577657) to \\ (54.091866, 24.289589) to \\ (54.018500, 24.110974) to \\ (52.585232, 24.178576) to \\ (52.166914, 23.958103) to \\ (51.795888, 24.015111) to \\ (51.784619, 24.275817) to \\ (51.595901, 24.364411) \\ close fill lightgray  ## References  * []() ","title":"Abu Dhabi"},{"id":596,"location":"/til/cpp_constructor_01.html","tags":["C++","constructor"],"text":" ::: toc    ```cpp class A { public:   A()   {   }   int i; // not initialized   int j = 5; }; ```    ```cpp class B { public:   B() = default;   int i; // will be initialized with 0   int j; // will be initialized with 0 }; ```    ```cpp int main( [[maybe_unused]] int argc, [[maybe_unused]] char **argv ) {   for( int i = 0; i < 5; ++i ) {     A *pa = new A();     B *pb = new B();     cout << \"A.i = \" << pa->i << \" A.j = \" << pa->j << \" without default constructor\" << endl;     cout << \"B.i = \" << pb->i << \" B.j = \" << pb->j << \" with default constructor\" << endl;     delete pa;     delete pb;   }   return 0; } ```   ## Possible output   ```txt A.i = 818477504 A.j = 5 without default constructor B.i = 0 B.j = 0 with default constructor A.i = 818477472 A.j = 5 without default constructor B.i = 0 B.j = 0 with default constructor A.i = 818477504 A.j = 5 without default constructor B.i = 0 B.j = 0 with default constructor A.i = 818477472 A.j = 5 without default constructor B.i = 0 B.j = 0 with default constructor A.i = 818477504 A.j = 5 without default constructor B.i = 0 B.j = 0 with default constructor  ```  ## References  * [How is \"=default\" different from \"{}\" for default constructor and destructor?](https://stackoverflow.com/questions/13576055/how-is-default-different-from-for-default-constructor-and-destructor)  ","title":"C++ constructor_01"},{"id":597,"location":"/til/network_mesh.html","tags":["network-topology","network-mesh"],"text":"::: toc  ## Introduction  ## How to check if your hardware supports mesh  Use the command below to list capabilities of your hardware:  ```shell iw list ```  Then look for `mesh point` in the `Supported interface modes` section.  ```shell \tSupported interface modes: \t\t * IBSS \t\t * managed \t\t * AP \t\t * monitor \t\t * mesh point \t\t * P2P-client \t\t * P2P-GO \t\t * P2P-device ```  ## Network topology  ![Network topology](/til/network_topology.webp)  ### Bus network  In the bus network topology, every node is connected in series along a single cable. This arrangement is found today primarily in cable broadband distribution networks.  ### Star network  In the star network topology, a central device connects to all other nodes through a central hub. Switched local area networks based on Ethernet switches and most wired home and office networks have a physical star topology.  ### Ring network  In the ring network topology, the nodes are connected in a closed-loop configuration. Some rings pass data in one direction only, while others are capable of transmission in both directions. These bidirectional ring networks are more resilient than bus networks since traffic can reach a node by moving in either direction. Metro networks based on Synchronous Optical Network technology are the primary example of ring networks.  ### Mesh network  The mesh network topology links nodes with connections so that multiple paths between at least some points of the network are available. A network is considered to be fully meshed if all nodes are directly connected to all other nodes and partially meshed if only some nodes have multiple connections to others. Meshing multiple paths increases resiliency but also increases cost. However, more space is needed for dedicated links.  ### Tree network  The tree network topology consists of one root node, and all other nodes are connected in a hierarchy. The topology itself is connected in a star configuration. Many larger Ethernet switch networks, including data center networks, are configured as trees.  ### Hybrid network  The hybrid network topology is any combination of two or more topologies. Hybrid topologies typically provide exceptional flexibility, as they can accommodate a number of setups. For example, different departments in the same organization may opt for personalized network topologies that are more adaptable to their network needs.  ## Hardware  * Ivan's suggestion: Kit Roteador TP-Link Wi-Fi Mesh Gigabit 5GHz Deco M4  ## References  * [network topology](https://www.techtarget.com/searchnetworking/definition/network-topology) * [DIY WI-FI MESH with OpenWrt](https://www.youtube.com/watch?v=vVoZppb_FR0) * [What is a Mesh Network? Everything You Need to Know](https://www.youtube.com/watch?v=8UZlwhiWKmA) ","title":"network mesh"},{"id":598,"location":"/til/decibel.html","tags":["t1","t2","t3"],"text":"::: toc  ## Introduction  ::: pikchr src=\"/til/decibel_00.svg\" title=\"The unit dB\" margin = 15mm DB: text \"dB\" big big big color red arrow from DB.se right 1cm down 1cm thin text \"Alexander\" \"Grahan Bell\" arrow from DB.sw left 1cm down 1cm thin text \"deci\" \"0.1\"  O dB é uma unidade logarítmica muito usada em telecomunicações, por pelo menos dois motivos :  * O ouvido humano tem resposta logarítmica (sensação auditiva versus potência acústica) * Em telecomunicações, se usam números extremamente grandes ou pequenos.  ::: tip O uso de logaritmos torna estes números pequenos e fáceis de manipular, e transforma produtos em somas e divisões em subtrações.  ::: tip O dB é um número relativo e permite representar relações entre duas grandezas de mesmo tipo, como relações de potências, tensões, correntes ou qualquer outra relação adimensional.  Portanto, permite definir ganhos e atenuações, relação sinal/ruído, dinâmica, etc...  Por definição, uma quantidade Q em dB é igual a 10 vezes o logaritmo decimal da relação de duas potências, ou seja:  $$ Q(dB) = 10 \\times \\log \\frac{P1}{P2} $$  ::: gnuplot src=\"/til/decibel_log_plot.svg\" title=\"Log function\" set grid plot [0:5] log(x) lt rgb 'violet'  ::: tip Quanto $P1$ e $P2$ são iguais $dB=0$.  Como a potência é proporcional ao quadrado da tensão dividida pela resistência do circuito, temos, aplicando as propriedades dos logaritmos (o $log$ do quadrado de $n$ é duas vezes o $log n$) :  $$ Q(dB) = 20 \\times\\log\\frac{V1}{V2} + 10 \\times \\log \\frac{R2}{R1} $$  ou ainda, na mesma resistência:  $$ Q(dB) = 20 \\times\\log\\frac{V1}{V2} $$  Para ganhos por ex., P2 é a potência de entrada e P1 a potência de saída do circuito.  Para atenuações, P1 é a potência de entrada e P2 a potência de saída. Atenuação é o inverso do ganho (em unidades lineares) e é igual ao ganho em dB com sinal trocado.  A tabela seguinte fornece alguns valores típicos :  |Q(dB)|P1/P2|V1/V2| |:----:|:---:|:---:| |120|1 000 000 000 000|1 000 000| |90|1 000 000 000|31 600| |60|1 000 000|1 000| |30|1 000|31,6| |20|100|10| |10|10|3,16| |6|4|2| |3|2|1,414| |0|1|1| |-3|0,5|0,707| |-6|0,25|0,5| |-10|0,1|0,316| |-20|0,01|0,1| |-30|0,001|0,0316| |-60|0,000 001|0,001| |-120|0,000 000 000 001|0,000 001|  Observe que 0 dB (zero dB) equivale a uma relação de 1, e 3 dB equivale a uma relação de 2 (em potência), e 10 dB por acaso equivale a uma relação de 10.  Resumindo:  * +3 dB equivale a multiplicar por 2 * +10 dB equivale a multiplicar por 10 * -3 dB equivale a dividir por 2 * -10 dB equivale a dividir por 10  ::: tip É fácil converter qualquer valor inteiro de dB na relação correspondente, usando apenas 3 e 10 dB. \\ Por exemplo, 17 db: \\ $$17dB = 10dB + 10dB - 3dB$$ \\ ou em unidades lineares \\ $$10 \\times 10 / 2 = 50$$ \\ Portanto $17 dB$ equivale a uma relação de $50$.  Exemplo de operações com dB e as respectivas unidades lineares :  ![Exemplo de operações com dB](/til/decibel_01.webp)  ## Outras unidades logarítmicas  ### dBA  zero dBA equivale a uma intensidade sonora (pressão sonora) de 20 microPascal, e equivale aproximadamente ao limiar de audição. O limiar de dor se situa em torno de 120 dBA, ou seja, uma pressão 1 000 000 de vezes maior ou uma potência sonora 1 000 000 000 000 de vezes maior ! (a potência sonora é proporcional ao quadrado da pressão). O A se refere a um tipo de filtro de ponderação (weighting), que leva em conta a não linearidade do ouvido em freqüência. A figura seguinte mostra a curva de ponderação A. A intensidade sonora também pode ser medida sem essa ponderação, em dB ou dBZ, em relação à referencia de 20 microPascal = 0 dB. Por exemplo, um som com freqüência de 100 Hz e intensidade de 60 dBA tem uma intensidade não ponderada de 79 dB, pois a curva A apresenta 19 dB de atenuação em 100 Hz. Em 1000 Hz (e 6000 Hz), as medidas em dB e dBA são idênticas.  ### Neper  Uma unidade bastante usada em calculo é o Neper, que é igual ao logaritmo neperiano da razão de duas tensões (ou correntes) na mesma impedância. Obs.: 1 N = 8,65 dB.  ### dBr  O dBr é uma unidade relativa de medida de nível, em relação ao ponto zero de transmissão, (0 TLP), onde geralmente o nível do tom de teste é de 0 dBm. Apenas indica o somatório dos ganhos e atenuações num ponto qualquer em relação ao ponto de referencia, ou ponto zero de transmissão.  ### dBm  O dBm é uma unidade de medida de potência : 0 dBm = 1 mW (Não importa em qual resistência !)  $$ P(dBm) = 10 log P (mW)$$  Portanto: 3 dBm = 2 mW , 30 dBm = 1W , -30 dBm = 1 microW  ### dBw  O dBw é uma unidade de medida de potência: 0 dBw = 1W = 30 dBm  ### dBk  O dBk é uma unidade de medida de potência: 0 dBk = 1 kW = 30 dBw = 60 dBm  ### dBm0  O dBm0 é uma unidade de medida de potência relativa ao ponto zero. Geralmente, é usado para indicar o nível de outros sinais, como pilotos, tons de sinalização, ruído, fuga de portadora, diafonia, etc., em relação ao tom de teste.  Ex.: um tom de sinalização de –20dBm0 terá uma potência (ou nível) de –28 dBm num ponto onde o tom de teste tem –8dBm. ( ponto de –8dBr).  Ex.: se num determinado ponto o nível do ruído é de –34 dBm e o nível do tom de teste é de –4dBm, então o nível do ruído é de –30dBm0.  Obs.: a relação sinal/ruído em db é o nível do ruído em dBm0 com sinal trocado.  Relação entre dBm, dBr e dbm0 : dBm = dBr + dBm0  ### dBu  O dBu é uma unidade de medida de tensão, onde 0 dBu = 0,775V. Um voltímetro pode ter uma escala graduada em dBu, relacionada com a tensão V por:  U(dbu) = 20 log ( V / 0, 775 )  Como 0,775V corresponde a tensão desenvolvida por 1 mW num resistor de 600 ohms, a leitura em dBu corresponde a potência em dBm, desde que seja efetuada em um circuito cuja resistência de terminação é de 600 ohms.  Em qualquer outra impedância Z (resistiva), deve ser somado à leitura em dbu um fator de correção:  F(db) = 10 log ( 600 / Z ) para obter o valor da potência em dBm: P (dBm) = U (dBu) + F (dB).  Alguns valores de F e Z : 6 dB em 150 ohms, 9 dB em 75 ohms, 10,8 db em 50 ohms.  ### dBsr  O dBsr (scale reading) ou seja, dB lidos na escala (do voltímetro). É o mesmo que o dBu.  ### VU  O VU : unidade de medida de tensão, usada em estúdios de radio : 0 (zero) VU = +4 dBm = 1,228 V em 600 ohms.  ### dBµ  O dBµ : (ou dBµV) unidade de medida de tensão onde 0 (zero) dbµ = 1 microvolt, usada para medir tensões muito pequenas como por ex. sensibilidade de receptores. Zero dbµ em 50 ohms equivale a uma potência de -107 dBm.  ### dBµV/m  O dBµV/m : unidade de medida de intensidade de campo elétrico E, onde 0 (zero) dbµV/m = 1 microvolt/metro.  Conversão de dbµV/m em dbµV, em função do ganho isotrópico Gi da antena e da frequência F, em 50 ohms:  $$V( dbµV) = E( dbµV/m) + Gi - 20logF(MHz) + 29,8$$  ### dBp  O dBp : dB ponderado psofometricamente (psofos= ruído), ou seja, que leva em conta o somatório das respostas em frequência do ouvido e da cápsula receptora telefônica, e usado para medir ruído e relações sinal/ruído em telefonia. Aplica-se também ao dBm > dBmp e dBm0 > dBm0p.  ### dBi  O dBi : usado para expressar o ganho de uma antena em relação a antena ISOTRÓPICA. A antena isotrópica tem um diagrama de irradiação esférico, ou seja , irradia igualmente em todas as direções. O dBi é muito usado em cálculos de enlaces de telecomunicações, pois a atenuação de propagação é sempre calculada entre antenas isotrópicas. A antena isotrópica é uma referencia teórica, sendo de difícil construção prática.  ### dBd  O dBd : usado para expressar o ganho de uma antena em relação ao DIPOLO de meia onda. O dipolo de meia onda é a antena ressonante mais simples e fácil de ser construída e por isso é muito usada como referencia. Em espaço livre, o ganho do dipolo de meia onda é de 0 dBd = 2,15 dBi  ### S  O ponto S : unidade usada por radio amadores, o ponto S de signal-Strength, intensidade de sinal, teoricamente equivale a 6 dB, ou seja, duas vezes mais tensão no conector de antena do receptor. Teoricamente também, S 9 equivale a 50 microvolts (-73 dBm em 50 ohms) abaixo de 30 MHz, e 5 microvolts (-93 dBm) acima de 30 MHz. Mas na pratica, apenas alguns raros medidores de unidades S são calibrados para S9, e mesmo assim o resto da escala sendo muito impreciso, principalmente acima de 30 MHz !. Para valores acima de S 9 , usa-se o dB, por exemplo: S9+20 dB. Conversões dBm/volts/unidades S aqui.  ### dBFS  O dBFS : usado para expressar níveis de amplitude em sistemas digitais. O nível máximo que ainda não sofre ceifamento (clipping) é definido como 0 dBFS (zero dBFS) (FS=Full Scale). Por exemplo, se a tensão de entrada de uma placa de som está com a metade do nível máximo de quantização do conversor A/D, ela está com -6 dBFS. Para ter certeza que algumas amostras realmente se situam no pico da onda, é escolhida uma freqüência de teste de 997 Hz, que não é submúltiplo exato das taxas de amostragem padronizadas.  ## Soma de sinais não coerentes  Ruído branco ou sinais de freqüências diferentes:  Por exemplo, qual é a potência total de um sinal com 10 dBm somado a um ruído de 6 dBm ?  Solução : a diferença entre as parcelas é 10 dBm - 6 dBm = 4 dB (obs. : subtrair potências em unidades logarítmicas equivale a fazer um quociente em unidades lineares, portanto, o resultado é um numero adimensional, o dB). No gráfico da figura seguinte, obtemos para uma diferença de 4 dB o valor de 1,45 dB. A soma dos dois sinais tem uma potência de 10 dBm + 1,45 dB = 11,45  dBm.  ![Soma de sinais não coerentes](/til/decibel_02.webp)  ## References  * [O dB , (decibel) e outras unidades logarítmicas](https://www.eletrica.ufpr.br/armando/index_arquivos/dB.pdf) ","title":"dB — Decibel"},{"id":599,"location":"/til/cpp_hyperloglog_01.html","tags":["C++","hyperloglog","murmurhash"],"text":" ::: toc   ## Introduction  ::: youtube id=\"2PlrMCiUN_s\" title=\"The Algorithm with the Best Name - HyperLogLog Explained\"  The main idea behind HyperLogLog algorithm is to estimate the number of distinct elements in a large set using a small amount of memory. The algorithm achieves this by using a probabilistic data structure that is designed to approximate the number of distinct elements with high accuracy and low memory usage.  The algorithm works by assigning each element in the set to a hash value, which is then used to determine the index of a register in a table of fixed size. The registers are initialized to zero, and for each element, the algorithm computes a \"rank\" value based on the hash value. The rank is defined as the position of the leftmost non-zero bit in the binary representation of the hash value.  The algorithm maintains a set of counters, one for each register in the table. For each element, the algorithm updates the counter corresponding to the register index with the maximum rank value seen so far. After processing all elements in the set, the algorithm uses the counter values to estimate the number of distinct elements in the set.  The key insight of HyperLogLog algorithm is that the distribution of rank values for a large set of elements can be approximated by a power-law distribution, which has a characteristic shape that depends only on the size of the set and not on the specific elements in the set. This property enables the algorithm to estimate the number of distinct elements with high accuracy by only storing a small number of counter values.  To improve the accuracy of the algorithm, HyperLogLog uses a technique called \"bias correction\" that corrects for a systematic bias introduced by the probabilistic data structure. The bias correction involves applying a correction factor to the estimated cardinality that depends on the precision of the algorithm.  Overall, HyperLogLog algorithm provides a highly efficient and scalable method for estimating the number of distinct elements in large datasets, making it a popular tool in big data analytics and database systems.  ## Precision  In HyperLogLog, the precision is determined by the number of bits used to represent the registers. Specifically, the number of registers used is equal to 2^precision. The higher the precision, the more accurate the estimate of the number of distinct elements in the set will be, but also the more memory the algorithm will consume.  In the C++ implementation I provided, the precision is passed as an argument to the constructor of the HyperLogLog class. For example, if you create a HyperLogLog object with precision 10, it will use 1024 registers (2^10) to estimate the number of distinct elements in the set.  The choice of precision depends on the trade-off between accuracy and memory usage. In practice, a precision of 10-12 is often used, which provides a reasonable estimate with a moderate memory overhead. However, the optimal precision may vary depending on the specific application and the size of the set being estimated.  ## Memory usage  The table below shows the approximate memory usage in bytes for a HyperLogLog data structure with different numbers of bits:  |Precision (bits)|Number of Registers|Memory Usage (bytes)| |----------------|-------------------|--------------------| | 4 | 16 | 64 | | 5 | 32 | 128 | | 6 | 64 | 256 | | 7 | 128 | 512 | | 8 | 256 | 1024 | | 9 | 512 | 2048 | | 10 | 1024 | 4096 | | 11 | 2048 | 8192 | | 12 | 4096 | 16384 | | 13 | 8192 | 32768 | | 14 | 16384 | 65536 | | 15 | 32768 | 131072 |  Note that these numbers are approximate and may vary depending on the specific implementation of the HyperLogLog algorithm and the memory allocation behavior of the operating system. Additionally, the memory usage of a HyperLogLog data structure may also depend on the specific dataset being analyzed and the accuracy required for the estimation.   ```cpp class HyperLogLog {  public:   HyperLogLog(uint8_t precision) : precision(precision), size(1 << precision) {     M = new uint8_t[size];     std::memset(M, 0, size * sizeof(uint8_t));     alpha = get_alpha(precision);   }    ~HyperLogLog() { delete[] M; }    void add(uint64_t value) {     uint32_t hash = murmurhash(value);     uint32_t index = hash >> (32 - precision);     uint8_t rho = count_leading_zeros(hash << precision) + 1;     if (rho > M[index]) {       M[index] = rho;     }   }    uint64_t count() const {     double Z = 0;     for (uint32_t i = 0; i < size; i++) {       Z += 1.0 / (1 << M[i]);     }     double estimate = alpha * size * size / Z;     if (estimate <= 2.5 * size) {       uint32_t zeros = 0;       for (uint32_t i = 0; i < size; i++) {         if (M[i] == 0) {           zeros++;         }       }       if (zeros != 0) {         estimate = size * std::log((double)size / zeros);       }     } else if (estimate > 1.0 / 30.0 * std::pow(2, 32)) {       estimate = -std::pow(2, 32) * std::log(1 - estimate / std::pow(2, 32));     }     return static_cast<uint64_t>(estimate);   }   private:   uint8_t precision;   uint32_t size;   uint8_t *M;   double alpha;    uint32_t murmurhash(uint64_t value) const {     uint32_t seed = 0x9747b28c;     uint32_t m = 0x5bd1e995;     uint32_t h = seed ^ sizeof(value);     uint32_t k = value;     k *= m;     k ^= k >> 24;     k *= m;     h *= m;     h ^= k;     h *= m;     h ^= h >> 13;     h *= m;     h ^= h >> 15;     return h;   }    uint8_t count_leading_zeros(uint32_t x) const {     uint8_t n = 1;     if ((x >> 16) == 0) {       n += 16;       x <<= 16;     }     if ((x >> 24) == 0) {       n += 8;       x <<= 8;     }     if ((x >> 28) == 0) {       n += 4;       x <<= 4;     }     if ((x >> 30) == 0) {       n += 2;       x <<= 2;     }     n -= x >> 31;     return n;   }    double get_alpha(uint8_t precision) const {     switch (precision) {       case 4:         return 0.673;       case 5:         return 0.697;       case 6:         return 0.709;       default:         return 0.721;     }   } }; ```   In this example, we create a HyperLogLog object with precision 10, which means it has 1024 registers. We then generate a set of 1 million random integers and add them to both the std::unordered_set and the HyperLogLog. Finally, we print out the actual size of the set and the estimated size of the set using the count method of the HyperLogLog object.  Note that the actual size of the set is not known, so we cannot compare the estimate to the true value. However, in practice, HyperLogLog has been shown to produce accurate estimates with a low memory footprint.   ```cpp  #include <cmath>  int main() {   HyperLogLog hll(       10);  // Create a HyperLogLog with precision 10 (1024 registers)   std::unordered_set<uint64_t> set;   for (int i = 0; i < 1000000; i++) {     uint64_t value = rand();     set.insert(value);     hll.add(value);   }   std::cout << \"Actual set size: \" << set.size() << std::endl;   std::cout << \"Estimated set size: \" << hll.count() << std::endl;   std::cout << \"Error: \" << (set.size() - hll.count()) / (0.01 * set.size())             << \"%\" << std::endl;   return 0; } ```   ## Possible output   ```txt Actual set size: 999776 Estimated set size: 994435 Error: 0.53422%  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ — hyperloglog"},{"id":600,"location":"/til/dsp.html","tags":["C++","dsp","aquila"],"text":"::: toc  ## Introduction  Aquila is an open source and cross-platform DSP (Digital Signal Processing) library written in C++.  ## References  * [Aquila](https://aquila-dsp.org/) ","title":"DSP — Digital signal processing"},{"id":601,"location":"/til/cpp_audio.html","tags":["C++","audio"],"text":" ::: toc   ## 44.1kHz  The selection of the sample rate was based primarily on the need to reproduce the audible frequency range of 20–20,000 Hz (20 kHz). The Nyquist–Shannon sampling theorem states that a sampling rate of more than twice the maximum frequency of the signal to be recorded is needed, resulting in a required rate of at least 40 kHz. The exact sampling rate of 44.1 kHz was inherited from PCM adaptors which was the most affordable way to transfer data from the recording studio to the CD manufacturer at the time the CD specification was being developed.   ```cpp    ```   ## Possible output   ```txt  ```  ## References  * [Audio API Quick Start Guide: Playing and Recording Sound on Linux,   Windows, FreeBSD and macOS](https://habr.com/en/post/663352/) * [github   stsaz/audio-api-quick-start-guide](https://github.com/stsaz/audio-api-quick-start-guide)  ","title":"C++ audio"},{"id":602,"location":"/til/cpp_complex_01.html","tags":["C++","complex","norm","abs","imag","real"],"text":" ::: toc   ## Complex Number  ::: pikchr src=\"/til/cpp_complex_01_01.svg\" title=\"Complex number\" arrow from (-0.5cm,0) to (4.5cm,0) color gray; text \"Re\" below arrow from (0,-3.5cm) to (0,3.5cm) color gray; text \"Im\" below Z: (4cm,3cm) Zc: (4cm,-3cm) A: (4cm,0cm) B: (0,3cm) Bc: (0,-3cm) arrow from (0,0) to Z color red thick; dot rad 200% color red arrow from (0,0) to Zc color yellow thick; dot rad 200% color yellow line dashed from A to Z thin line dashed from B to Z thin line dashed from A to Zc thin line dashed from Bc to Zc thin text \"0\" italic with .ne at (0,0) text \"a\" italic with .ne at A text \"b\" italic with .e at B text \"-b\" italic with .e at Bc text \"Z = a + bi\" big big italic with .sw at Z color red text \"conj(Z)\" big big with .w at Zc color yellow text \"a: real part\" ljust \"b: imaginary part\" ljust \"i: imaginary number\" ljust at (4.5cm,2cm) color gray line invisible from (0,0) to Z \"abs\" aligned above angle = 0.643501109 spline <-> from (2cm,0) to (2cm*cos(angle/2),2cm*sin(angle/2)) to (2cm*cos(angle),2cm*sin(angle)) text \"phase\" with .w at (2cm*cos(angle/2),2cm*sin(angle/2))   ## Functions  * `real`: Real part of complex * `imag`: Imaginary part of complex * `abs`: Absolute value of complex * `arg`: Phase angle of complex * `norm`: Norm of complex * `conj`: Complex conjugate * `polar`: Complex from polar components * `proj`: Complex projection.  ## Norm vs Abs  In essence, the absolute value of a real number captures the idea of its magnitude, i.e., its distance to the origin $0$ on the real number line, ignoring its algebraic sign (positive or negative).  When you try to generalise this to multi-dimensional vectors, the most natural extension that captures the idea of distance to the origin is the Euclidian norm, also known as the $L^2-norm$. It consists of the square root of the sum of squares of the coordinates of the vector, as that also measures its magnitude, or the distance between the tip of that vector and its base if that base is made to be the origin.  $$ \\textbf{x} = (x_1, x_2, \\dots, x_n) $$  $$ L^2-norm = |\\textbf{x}| = \\sqrt{ \\sum_{k=1}^n{|x_k|^2}} $$  Just like the absolute value chooses to ignore the algebraic sign of a real number in order to capture its magnitude, the Euclidian norm chooses to ignore the direction of the vector and captures its magnitude.  However, one can choose other norms in multi-dimensional space, as long as some rules are satisfied (these are spelled out on the Wolfram page above). Two notable ones are the $L^1-norm$ which is the sum of the absolute values of the coordinates of the vector, and the $L^∞-norm$ which captures the magnitude of the largest of the coordinates of the vector.  The $L^2-norm$ has been preferred for many computational and optimisation purposes, due to its nice analytical properties, i.e., it has nice closed forms for its gradient when trying to minimise or maximise it. This is the reason the $L^1-norm$ has been spurned for a long time, due to its \"less nice\" mathematical properties.  This is now changing thanks to the available computational capabilities, which let us find minima and maxima of objective functions through searches within the desired space, even when there is no nice closed form solution or quite as nice analytical properties to the norm, when compared to the Euclidian norm.  ```cpp   auto printZ = [](const auto& label, const auto& Z) {     fmt::print(\"{:30}=> {}{:+}i\\n\", label, Z.real(), Z.imag());   };   auto printR = [](const auto& label, auto R) {     fmt::print(\"{:30}=> {}\\n\", label, R);   };    std::complex<double> z3_4(3.0, 4.0);  // 3 + 4i   std::complex<double> z1_2{1.0, 2.0};  // 1 + 2i   std::complex<double> z4_3{4.0, 3.0};  // 4 + 3i   printZ(\"z3_4\", z3_4);   printZ(\"z1_2\", z1_2);    // Addition   auto sum = z3_4 + z1_2;  // 4 + 6i   printZ(\"z3_4 + z1_2, sum\", sum);    // Subtraction   auto diff = z3_4 - z1_2;  // 2 + 2i   printZ(\"z3_4 - z1_2, difference\", diff);    // Multiplication   auto prod = z3_4 * z1_2;  // -5 + 10i   printZ(\"z3_4 * z1_2, product\", prod);    // Division   auto quot = z3_4 / z1_2;  // 2.2 - 0.4i   printZ(\"z3_4 / z1_2, quotient\", quot);    // Conjugate   auto conj = std::conj(z3_4);  // 3 - 4i   printZ(\"conj(z3_4), conjugate\", conj);    // Absolute value (modulus)   double abs_z3_4 = std::abs(z3_4);  // 5   printR(\"abs(z3_4), modulus\", abs_z3_4);    // The norm value of a complex number is its squared magnitude, defined as   // the addition of the square of both its real and its imaginary part   // (without the imaginary unit). This is the square of abs(x).   double norm_z3_4 = std::norm(z3_4);  // 25   printR(\"norm(z3_4), norm\", norm_z3_4);    // The phase angle of a complex number is the angle the theoretical vector to   // (real,imag) forms with the real axis (i.e., its arc tangent). It returns   // the same as: atan2(x.imag(),x.real());   double arg_z4_3 = std::arg(z4_3);   printR(\"arg(z4_3), phase angle in rad\", arg_z4_3);    // The projection of z onto the Riemann sphere.   printZ(\"proj(z1_2)\", std::proj(z1_2));   printZ(\"proj(z3_4)\", std::proj(z3_4));   std::complex<double> inf1{INFINITY, 50};   std::complex<double> inf2{-INFINITY, 50};   std::complex<double> inf3{0, -INFINITY};   printZ(\"proj(inf1)\", std::proj(inf1));   printZ(\"proj(inf2)\", std::proj(inf2));   printZ(\"proj(inf3)\", std::proj(inf3)); ```   ## Possible output   ```txt z3_4                          => 3+4i z1_2                          => 1+2i z3_4 + z1_2, sum              => 4+6i z3_4 - z1_2, difference       => 2+2i z3_4 * z1_2, product          => -5+10i z3_4 / z1_2, quotient         => 2.2-0.4i conj(z3_4), conjugate         => 3-4i abs(z3_4), modulus            => 5 norm(z3_4), norm              => 25 arg(z4_3), phase angle in rad => 0.6435011087932844 proj(z1_2)                    => 1+2i proj(z3_4)                    => 3+4i proj(inf1)                    => inf+0i proj(inf2)                    => inf+0i proj(inf3)                    => inf-0i  ```  ## References  * [What’s the difference between absolute value and norm?](https://www.quora.com/What-s-the-difference-between-absolute-value-and-norm) * [L^2-Norm](https://mathworld.wolfram.com/L2-Norm.html) * [Complex numbers library](https://cplusplus.com/reference/complex/)  ","title":"C++ Complex Number — 01"},{"id":603,"location":"/til/cpp_complex_02.html","tags":["C++","complex","fft"],"text":" ::: toc   ```cpp   const double Fs = 1000.0;                       // Sampling frequency (Hz)   const int N = 1024;                             // signal length   std::vector<double> signal(N);                  // time-domain signal   std::vector<std::complex<double>> spectrum(N);  // frequency-domain spectrum    // fill signal with data...   for (int n = 0; n < N; n++) {     signal[n] = 10 * std::sin(2 * M_PI * 25 * n / Fs) +                 20 * std::sin(2 * M_PI * 50 * n / Fs) +                 30 * std::sin(2 * M_PI * 100 * n / Fs);   }    // create FFTW plan   fftw_plan plan = fftw_plan_dft_r2c_1d(       N, signal.data(), reinterpret_cast<fftw_complex*>(spectrum.data()),       FFTW_ESTIMATE);    // perform FFT   fftw_execute(plan);    // destroy plan   fftw_destroy_plan(plan);    for (int i = 0; i < N / 2 + 1; i++) {     auto norm = abs(spectrum[i]);     if (norm > 3000) {       double freq = i * Fs / N;       fmt::print(           \"Freq: {:5.1f}   Norm: {:7.1f}   Complex: {:7.1f} + {:7.1f}i\\n\", freq,           norm, spectrum[i].real(), spectrum[i].imag());     }   } ```   ## Possible output   ```txt Freq:  25.4   Norm:  3741.2   Complex: -3524.0 + -1256.2i Freq:  49.8   Norm:  9643.3   Complex:  5698.9 + -7779.3i Freq:  98.6   Norm:  3290.9   Complex:  3138.5 +  -989.8i Freq:  99.6   Norm: 11594.9   Complex: 11036.1 + -3556.3i Freq: 100.6   Norm:  7779.4   Complex: -7390.0 +  2430.3i  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ Complex Number — 02"},{"id":604,"location":"/til/cpp_fftw_01.html","tags":["C++","fftw"],"text":" ::: toc    ## Possible output   ```txt Peak 1: frequency = 1.95312 Hz, amplitude = 131.061 Peak 2: frequency = 0.976562 Hz, amplitude = 130.502 Peak 3: frequency = 0 Hz, amplitude = 130.317  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ fftw — 01"},{"id":605,"location":"/til/cpp_ranges_04.html","tags":["C++","ranges","views","filter","transform"],"text":" ::: toc    ```cpp int main() {   std::vector<int> v(1000000);   std::iota(v.begin(), v.end(), 1);    // clang-format off   auto even_squares = v      | std::views::filter([](int x) { return x % 2 == 0; })     | std::views::filter([](int x) { return x <= 20; })     | std::views::transform([](int x) { return x * x; });   // clang-format on    std::cout << \"Even squares:\\n\";   for (auto x : even_squares) {     std::cout << x << \"\\n\";   }   std::cout << \"\\n\";    return 0; } ```   ## Possible output   ```txt Even squares: 4 16 36 64 100 144 196 256 324 400   ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ ranges 04"},{"id":606,"location":"/til/waveform.html","tags":["waveform","t2","t3"],"text":"::: toc  ## Introduction  In the context of software-defined radio (SDR), a waveform refers to a digital signal that has been modulated to represent information that can be transmitted over the air. A waveform is generated by taking a baseband signal, which represents the information to be transmitted (such as audio, video, or data), and modulating it onto a carrier signal, which is a higher-frequency signal that can be transmitted over the air.  The process of generating a waveform typically involves several steps. First, the baseband signal is transformed into a digital signal using an analog-to-digital converter (ADC). Then, the digital signal is processed using digital signal processing (DSP) algorithms to apply the desired modulation scheme, such as amplitude modulation (AM), frequency modulation (FM), or quadrature amplitude modulation (QAM). The resulting modulated signal is then transmitted over the air using an antenna.  In SDR, the generation of waveforms is done using software rather than dedicated hardware, which allows for greater flexibility and adaptability. By using programmable DSP algorithms and software-defined radios, waveforms can be easily adapted to different modulation schemes, frequencies, and other parameters. This allows SDR systems to be used in a wide range of applications, such as military and civilian communications, radar systems, and scientific research.  In summary, a waveform in the context of SDR refers to a modulated digital signal that represents information to be transmitted over the air. It is generated using digital signal processing algorithms and can be easily adapted to different modulation schemes and other parameters using software-defined radios.  ## References  * []() ","title":"SDR Waveform"},{"id":607,"location":"/til/cpp_ranges_05.html","tags":["C++","ranges_05"],"text":" ::: toc    ```cpp // Point.hpp #ifndef POINT_H #define POINT_H #include <compare> #include <iostream>  class Point {   friend std::ostream& operator<<(std::ostream& out, const Point& p);   public:   Point() = default;   Point(double x, double y) : m_x(x), m_y(y) {}   // Operators   bool operator==(const Point& other) const;   std::partial_ordering operator<=>(const Point& right) const;   private:   double length() const;  // Function to calculate distance from the point(0,0)   public:   double m_x{};   double m_y{}; };  inline std::ostream& operator<<(std::ostream& out, const Point& p) {   out << \"\\nPoint [ x : \" << p.m_x << \", y : \" << p.m_y       << \" , length : \" << p.length() << \" ]\";   return out; }  #endif  // POINT_H ```    ```cpp // Point.cpp #include <cmath> // #include \"point.h\"  double Point::length() const {   return sqrt(pow(m_x - 0, 2) + pow(m_y - 0, 2) * 1.0); }  bool Point::operator==(const Point& other) const {   return (this->length() == other.length()); }  std::partial_ordering Point::operator<=>(const Point& right) const {   if (length() > right.length()) {     return std::partial_ordering::greater;   } else if (length() == right.length()) {     return std::partial_ordering::equivalent;   } else if (length() < right.length()) {     return std::partial_ordering::less;   } else {     return std::partial_ordering::unordered;   } } ```   ```cpp template <typename T> void print_collection(const auto label, const T& collection) {   std::cout << \"\\n\" << std::setw(30) << label << \" [\";   for (const auto& element : collection) {     std::cout << \" \" << element;   }   std::cout << \"]\" << std::endl; } ```   ```cpp   // Projections : usually the sorting is done based on operator<   // but you get one chance to write operator <   // sometimes you want to sort things based on another scheme or   // member variable other than the one used by operator<   // You can do that with projections. For example, sorting based on y   // for Point can be achieved with a y projection as shown in this example    std::cout << std::endl;   std::vector<Point> points{{10, 90}, {30, 70}, {20, 80}};   print_collection(\"Initial\", points);    // Sorting with the default comparator   std::ranges::sort(points, std::less<>{});  // Default sort based on distance   print_collection(\"Sort std::less<>{} <=> length\", points);    // Sorting with a projection: The data is passed into the projection before   // it's passed into the comparator.   // std::less<> is going to compare two doubles instead of comparing two   // Points.   std::ranges::sort(points, std::less<>{}, [](auto const& p) { return p.m_x; });   print_collection(\"Sort projection on Point::m_x\", points);    std::ranges::sort(points, std::less<>{}, [](auto const& p) { return p.m_y; });   print_collection(\"Sort projection on Point::m_y\", points);    // Projection on Point::m_y with direct member variables\"   std::ranges::sort(points, std::less<>{}, &Point::m_x);   print_collection(\"Projection direct on member variable m_x\", points); ```    ```cpp   // Projections with for_each   std::cout << \"Projections with for_each: \" << std::endl;    auto print = [](const auto& n) { std::cout << \" \" << n; };   using pair = std::pair<int, std::string>;   std::vector<pair> pairs{{1, \"one\"}, {2, \"two\"}, {3, \"tree\"}};    std::cout << \"project the pair::first: \";   std::ranges::for_each(pairs, print, [](const pair& p) { return p.first; });   std::cout << std::endl;    std::cout << \"project the pair::first: \";   std::ranges::for_each(pairs, print, &pair::first);   std::cout << std::endl;    std::cout << \"project the pair::second: \";   std::ranges::for_each(pairs, print, [](const pair& p) { return p.second; });   std::cout << std::endl; ```   ## Possible output   ```txt                          Initial [  Point [ x : 10, y : 90 , length : 90.5539 ]  Point [ x : 30, y : 70 , length : 76.1577 ]  Point [ x : 20, y : 80 , length : 82.4621 ]]   Sort std::less<>{} <=> length [  Point [ x : 30, y : 70 , length : 76.1577 ]  Point [ x : 20, y : 80 , length : 82.4621 ]  Point [ x : 10, y : 90 , length : 90.5539 ]]   Sort projection on Point::m_x [  Point [ x : 10, y : 90 , length : 90.5539 ]  Point [ x : 20, y : 80 , length : 82.4621 ]  Point [ x : 30, y : 70 , length : 76.1577 ]]   Sort projection on Point::m_y [  Point [ x : 30, y : 70 , length : 76.1577 ]  Point [ x : 20, y : 80 , length : 82.4621 ]  Point [ x : 10, y : 90 , length : 90.5539 ]]  Projection direct on member variable m_x [  Point [ x : 10, y : 90 , length : 90.5539 ]  Point [ x : 20, y : 80 , length : 82.4621 ]  Point [ x : 30, y : 70 , length : 76.1577 ]] Projections with for_each:  project the pair::first:  1 2 3 project the pair::first:  1 2 3 project the pair::second:  one two tree  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ Ranges — Part 5 — Projections"},{"id":608,"location":"/til/hardware_hacking_tutorial.html","tags":["t1","t2","t3"],"text":"::: toc  ## Introduction  Notes on playlist [Hardware Hacking Tutorial](https://www.youtube.com/playlist?list=PLoFdAHrZtKkhcd9k8ZcR4th8Q8PNOx7iU) from Valerio Di Giampietro.  How to do hardware hacking starting with information gathering, then building an emulation environment, analyzing how the device works and hacking the device and modify its firmware.  ## References  * [Hardware Hacking Tutorial](https://www.youtube.com/playlist?list=PLoFdAHrZtKkhcd9k8ZcR4th8Q8PNOx7iU) ","title":"Hardware hacking tutorial"},{"id":609,"location":"/til/cpp_aliasing_01.html","tags":["C++","aliasing_01"],"text":" ::: toc    ```cpp   std::string s{\"hello, \"};   s += s;   fmt::print(\"{}\", s); ```   ## Possible output   ```txt hello, hello,  ```  ## References  * ▶️[Aliasing in C++ - Risks, Opportunities and Techniques - Roi Barkan - CppCon 2022](https://www.youtube.com/watch?v=zHkmk1Y-gqM) * [title](link) * [title](link)  ","title":"C++ aliasing_01"},{"id":610,"location":"/til/cpp_atomic_01.html","tags":["C++","atomic"],"text":" ::: toc    ```cpp #include <atomic> #include <iostream> #include <mutex> #include <numeric> #include <thread>  using namespace std;  // std::atomic<int> x{0}; // ++x;           // atomic pre-increment // x++;           // atomic post-incrment // x += 1;        // atomic increment // x |= 2;        // atomic bit set // int y = x * 2; // atomic read of x // x = y + 1;     // atomic write // x = x + 1;     // atomic read followed by atomic write // x = x * 2;     // atomic read followed by atomic write // ---- x *= 2;   // NÃO EXISTE MULTIPLICAÇÃO ATOMICA  // ---------------------------------------------------------------------- // // ---------------------------------------------------------------------- // usar construtor em vez de std::atomic<unsigned long> sum1 = 0 atomic<unsigned long> sum1( 0 ); void                  doWork1( size_t N, unsigned long *a ) {   for( size_t i = 0; i < N; ++i ) {     sum1 += a[i];   } }  // ---------------------------------------------------------------------- // // ---------------------------------------------------------------------- unsigned long sum2( 0 ); mutex         M; void          doWork2( size_t N, unsigned long *a ) {   unsigned long s = 0;   for( size_t i = 0; i < N; ++i ) {     s += a[i];   }   lock_guard<mutex> L( M );   sum2 += s; }  // ---------------------------------------------------------------------- // // ---------------------------------------------------------------------- int main() {   constexpr size_t        N = 10000;   array<unsigned long, N> data;   iota( data.begin(), data.end(), 1000 );    cout << \"Sum1: \" << sum1 << endl;   cout << \"Sum2: \" << sum2 << endl;    thread t1( doWork1, N, data.data() );   thread t2( doWork2, N, data.data() );    t1.join();   t2.join();    cout << \"Sum1: \" << sum1 << endl;   cout << \"Sum2: \" << sum2 << endl; } ```   ## Possible output   ```txt Sum1: 0 Sum2: 0 Sum1: 59995000 Sum2: 59995000  ```  ## References  * ▶️[CppCon 2017: Fedor Pikus “C++ atomics, from basic to advanced. What do they really do?](https://youtu.be/ZQFzMfHIxng?t=820)  ","title":"C++ atomic 01"},{"id":611,"location":"/til/cpp_fltk_02.html","tags":["C++","fltk"],"text":" ::: toc    ```cpp using cb = std::function<void()>; ```    ```cpp void my_cb(Fl_Widget *b, void *data) {   auto func = static_cast<cb *>(data);   (*func)(); } ```    ```cpp int main([[maybe_unused]] int argc, [[maybe_unused]] char **argv) {   Fl::scheme(\"gtk+\");   auto win = new Fl_Window(100, 100, 400, 300);   auto but = new Fl_Button(160, 200, 80, 40, \"Click me\");   win->label(\"Before click\");   win->end();   win->show();   but->callback(my_cb, new cb([=] {                   std::cout << \"Lamda callback called\" << std::endl;                   win->label(\"After click lambda\");                 }));   return Fl::run(); } ```   ## Possible output   ```txt Lamda callback called Lamda callback called Lamda callback called  ```  ## References  * ▶️[Canal Mo Al](https://www.youtube.com/c/MoAlyousef/videos) * ▶️[Using modern C++ lambdas with FLTK](https://youtu.be/xF6-lfjbfDk)  ","title":"C++ fltk — 02 — Lambda callback"},{"id":612,"location":"/til/cpp_libsigcplusplus_01.html","tags":["C++","libsigcplusplus"],"text":" ::: toc  ## Motivation There are many situations in which it is desirable to decouple code that detects an event, and the code that deals with it. This is especially common in GUI programming, where a toolkit might provide user interface elements such as clickable buttons but, being a generic toolkit, doesn't know how an individual application using that toolkit should handle the user clicking on it.  In C the callbacks are generally handled by the application calling a 'register' function and passing a pointer to a function and a void* argument, eg.  ```c void clicked(void* data);  button* okbutton = create_button(\"ok\"); static char somedata[] = \"This is some data I want the clicked() function to have\";  register_click_handler(okbutton, clicked, somedata); ```  When clicked, the toolkit will call `clicked()` with the data pointer passed to the `register_click_handler()` function.  This works in C, but is not typesafe. There is no compile-time way of ensuring that `clicked()` isn't expecting a struct of some sort instead of a `char *`.  As C++ programmers, we want type safety. We also want to be able to use things other than free-standing functions as callbacks.  `libsigc++` provides the concept of a slot, which holds a reference to one of the things that can be used as a callback:  * A free-standing function as in the example * A functor object that defines `operator()` (a lambda expression is   such an object) * A pointer-to-a-member-function and an instance of an object on   which to invoke it (the object should inherit from `sigc::trackable`)  All of which can take different numbers and types of arguments.  To make it easier to construct these, libsigc++ provides the `sigc::ptr_fun()` and `sigc::mem_fun()` functions, for creating slots from static functions and member functions, respectively. They return a generic `signal::slot` type that can be invoked with `emit()` or `operator()`.  For the other side of the fence, libsigc++ provides signals, to which the client can attach slots. When the signal is emitted, all the connected slots are called.  ## Debian installation  ```shell sudo apt install libsigc++-3.0-dev ```   ```cpp #include <sigc++/sigc++.h> #include <unistd.h>  #include <iostream>  class AlienDetector {  public:   AlienDetector() {}   void run() {     sleep(3);                // wait for aliens     signal_detected.emit();  // panic!   }   sigc::signal<void()> signal_detected; };  // Using a member function class AlienAlerter : public sigc::trackable {  public:   AlienAlerter([[maybe_unused]] char const* servername) {}   void alert() {     std::cout << \"Member function: There are aliens in the carpark!\"               << std::endl;   } };  void warn_people() {   std::cout << \"Standalone function: There are aliens in the carpark!\"             << std::endl; }  int main([[maybe_unused]] int argc, [[maybe_unused]] char** argv) {   AlienDetector mydetector;   AlienAlerter myalerter(\"localhost\");  // added    // mydetector.signal_detected.connect( sigc::ptr_fun(warn_people) );   // You can use a lambda expression instead of sigc::ptr_fun().   mydetector.signal_detected.connect([]() { warn_people(); });   mydetector.signal_detected.connect(       sigc::mem_fun(myalerter, &AlienAlerter::alert));  // changed    mydetector.run();   return 0; } ```    ## Possible output   ```txt Standalone function: There are aliens in the carpark! Member function: There are aliens in the carpark!  ```  ## References  * [libsigc++](https://libsigcplusplus.github.io/libsigcplusplus/manual/html/index.html) * [title](link) * [title](link)  ","title":"C++ libsigcplusplus — typesafe callbacks"},{"id":613,"location":"/til/cpp_fltk_03.html","tags":["C++","fltk"],"text":" ::: toc   ![Window example.](/til/cpp_fltk_03_01.webp)   ```cpp #include <FL/Enumerations.H> #include <FL/Fl.H> #include <FL/Fl_Box.H> #include <FL/Fl_Button.H> #include <FL/Fl_Window.H> #include <FL/fl_draw.H>  #include <functional> #include <iostream>  #define WIDTH 600 #define HEIGHT 400 #define BLUE fl_rgb_color(0x42, 0xA5, 0xF5) #define SEL_BLUE fl_rgb_color(0x21, 0x96, 0xF3) #define GRAY fl_rgb_color(0x75, 0x75, 0x75) #define LIGHT_GRAY fl_rgb_color(211, 211, 211)  using cb_t = std::function<void(Fl_Widget *)>;  class MyBox : public Fl_Box {  public:   MyBox(int x, int y, int w, int h, const char *title = NULL)       : Fl_Box(x, y, w, h, title) {}   virtual void draw() override {     fl_rectf(0, h(), w(), 3, LIGHT_GRAY);     Fl_Box::draw();   } };  template <typename T> class WidgetWrapper : public T {   cb_t func_ = NULL;   public:   WidgetWrapper(int x, int y, int w, int h, const char *title = NULL)       : T(x, y, w, h, title) {}   void set_cb(cb_t &&func) {     func_ = func;     auto cb = [](Fl_Widget *w, void *data) {       auto fn = *static_cast<cb_t *>(data);       fn(w);     };     this->callback(cb, &func_);   } };  int main() {   auto win = new Fl_Window(WIDTH, HEIGHT, \"Flutter-like\");   auto bar = new WidgetWrapper<MyBox>(0, 0, WIDTH, 60, \"    FLTK APP\");   bar->align(FL_ALIGN_LEFT | FL_ALIGN_INSIDE);   auto txt = new WidgetWrapper<Fl_Box>(       250, 180, 100, 40, \"You have pushed the button this many times:\");   auto count = new WidgetWrapper<Fl_Box>(txt->x(), txt->y() + 40, 100, 40, \"0\");   auto but = new WidgetWrapper<Fl_Button>(WIDTH - 100, HEIGHT - 100, 60, 60,                                           \"@+6plus\");   win->end();   win->show();    // theming   Fl::background(255, 255, 255);   Fl::visible_focus(false);    bar->box(FL_FLAT_BOX);   bar->labelsize(22);   bar->labelcolor(FL_WHITE);   bar->color(BLUE);    txt->labelsize(18);   txt->labelfont(FL_TIMES);    count->labelsize(36);   count->labelcolor(GRAY);    but->color(BLUE);   but->selection_color(SEL_BLUE);   but->labelcolor(FL_WHITE);   but->box(FL_OFLAT_BOX);   // end theming    but->set_cb([=]([[maybe_unused]] Fl_Widget *b) {     std::cout << \"Lambda callback called\" << std::endl;     auto label = atoi(count->label());     label += 1;     char buf[12];     (void)snprintf(buf, 12, \"%d\", label);     count->copy_label(buf);   });    return Fl::run(); } ```   ## Possible output   ```txt Lambda callback called Lambda callback called Lambda callback called  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ fltk — Theming (Flutter)"},{"id":614,"location":"/til/cpp_fltk_04.html","tags":["C++","fltk"],"text":" ::: toc    ```cpp #include <FL/Fl.H> #include <FL/Fl_Button.H> #include <FL/Fl_Window.H>  void but_cb( Fl_Widget *, void * ) {   auto win = new Fl_Window( 200, 100 );   win->end();   win->show();   while( win->shown() ) {     Fl::wait();   } }  int main() {   printf(\"FLTK\\n\");   auto win    = new Fl_Window( 400, 300 );   auto button = new Fl_Button( 160, 200, 80, 40, \"Click\" );   win->end();   win->show();   button->callback( but_cb, NULL );   return Fl::run(); } ```   ## Possible output   ```txt FLTK  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ fltk — 4 — Multi window"},{"id":615,"location":"/til/cpp_fltk_01.html","tags":["C++","fltk"],"text":" ::: toc    ```cpp #include <FL/Fl.H> #include <FL/Fl_Button.H> #include <FL/Fl_Window.H>  #include <iostream>  // Old style C callback void cb(Fl_Widget *b, void *data) {   std::cout << \"Callback called\" << std::endl;   auto win = static_cast<Fl_Window *>(data);   win->label(\"After click old style\"); }  int main([[maybe_unused]] int argc, [[maybe_unused]] char **argv) {   Fl::scheme(\"gtk+\");   auto win = new Fl_Window(100, 100, 400, 300);   auto but = new Fl_Button(160, 200, 80, 40, \"Click me\");   win->label(\"Before click\");   win->end();   win->show();   but->callback(cb, win);   return Fl::run(); } ```   ## Possible output   ```txt Callback called Callback called Callback called  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ fltk — 1 — Old style C callback"},{"id":616,"location":"/til/cpp_fltk_05.html","tags":["C++","fltk","libsigcplusplus"],"text":" ::: toc    ```cpp #include <FL/Fl.H> #include <FL/Fl_Box.H> #include <FL/Fl_Button.H> #include <FL/Fl_Window.H> #include <FL/fl_ask.H> #include <sigc++/sigc++.h>  #include <iostream>  static sigc::signal<void()> SignalClickMe; static sigc::signal<void()> SignalIncrement;  class WindowTest : public Fl_Window {   int counter = 0;   bool button1_clicked = false;   Fl_Button* button1;   Fl_Button* button2;   Fl_Box* label;    void onClickMe() {     std::cout << \"onClickMe()\" << std::endl;     if (button1_clicked) {       fl_alert(\"Stop it, you've clicked me already!\");     } else {       button1->label(\"Thank you!\");       button1_clicked = true;     }   }   public:   WindowTest() : Fl_Window(300, 300, 300, 200, \"Lambda & Signals\") {     button1 = new Fl_Button(5, 5, 80, 25, \"Click me\");     button2 = new Fl_Button(5, 70, 80, 25, \"Increment\");     label = new Fl_Box(5, 100, 80, 25, \"Counter: 0\");      button1->callback([]([[maybe_unused]] Fl_Widget* w,                          [[maybe_unused]] void* u) { SignalClickMe.emit(); });      button2->callback([]([[maybe_unused]] Fl_Widget* w,                          [[maybe_unused]] void* u) { SignalIncrement.emit(); });      SignalClickMe.connect(sigc::mem_fun(*this, &WindowTest::onClickMe));      SignalIncrement.connect([this] {       char text[50];       sprintf(text, \"Counter: %d\", ++counter);       label->copy_label(text);       std::cout << \"Lamda incremment called \" << counter << std::endl;     });   } };  int main([[maybe_unused]] int argc, [[maybe_unused]] char** argv) {   WindowTest* window = new WindowTest();   window->show(0, NULL);   return Fl::run(); } ```   ## Possible output   ```txt onClickMe() onClickMe() Lamda incremment called 1 Lamda incremment called 2 Lamda incremment called 3 Lamda incremment called 4  ```  ## References  * [Replacing FLTK Callbacks with Lambdas and Signals](https://andreldm.com/2016/04/02/replacing-fltk-callbacks-lambdas.html) * [title](link) * [title](link)  ","title":"C++ fltk — 5 — libsigcplusplus"},{"id":617,"location":"/til/cpp_coroutine_01.html","tags":["C++","coroutine"],"text":" ::: toc  ## Introduction  * Coroutines are a generalization of **functions** in C++ * They are designed to make writing **asynchronous** code much easier  ## Parts  * `promise_type` * `coroutine_handle` * awaiter   * passed to `co_wait`   * `std::suspend_always`   * `std::suspend_never`  ### Awaiter methods  * `bool await_ready(){}`   * Whether the co_await expression suspends.   * if false is returned, then `await_suspend` is called, to (mostly) suspend * `void await_suspend(){}`   * May suspend the coroutine, or schedule the coroutine state for destruction * `void await_resume(){}`   * May return the result of the entire `co_await` expression  ::: tip title=\"Awaiter\" It is possible to create your own awaiters, things that can act as operands to the co_await operator, by setting up structs/classes that overload the co_await operator  ```c++ struct My_Awaitable {   auto operator co_await() {     return std::suspend_always{};   } }; ```  ## Function  * Can be called * Can return something  ## Coroutines  * Can be called * Can return something * Can be paused * Can be resumed  When paused the function state is save on heap topically.  * local variables * parameters * pointer to resume this function  ## Lazy computation  ```c++ auto f = some_coroutine(); // store computation info in f // Use f to manipulate the computation ```  ## Keywords  C++ 20 introduces three keywords that help pause and resume coroutines  * `co_yield`: suspends the execution and returns a value * `co_return`: completes execution and optionally returns a value * `co_await`: suspends the execution until resumed  If a function has one of those keywords, it becomes a coroutine. There is no other special syntax for coroutines.  ## Which function can be a coroutine  It's not every function in C++ that can be a coroutine. The functions below can't be coroutines.  * `constexpr` functions * constructors * destructors * the main function  ## C++20 warnings  C++ 20 doesn't provide actual usable coroutine types like Corolype  It provides the low level infrastructure to build them (promises, awaitables, coroutine handles,...  Building your own coroutine types is not recommended. It’s only reserved for hard core, highly experienced library developers who really know what they're doing  It is expected that C++23 will provide high level coroutine types built into C++, ready to use just by including some headers  If you want to use them know, there are third party libraries that can help, like cppcoro and some others   ## See Also  * [01](/til/cpp_corotine_01.html) * [02](/til/cpp_corotine_02.html) * [03](/til/cpp_corotine_03.html) * [04](/til/cpp_corotine_04.html) * [05](/til/cpp_corotine_05.html)   ```cpp #include <coroutine> #include <iostream>  // Absolute minimum to satisfy the compiler struct CoroType {   struct promise_type {     CoroType get_return_object() { return CoroType(this); }     std::suspend_always initial_suspend() { return {}; }     std::suspend_always final_suspend() noexcept { return {}; }      void unhandled_exception() noexcept {       std::rethrow_exception(std::current_exception());     }     void return_void(){};   };    CoroType(promise_type* p)       : m_handle(std::coroutine_handle<promise_type>::from_promise(*p)) {}   ~CoroType() {     std::cout << \"Handle destroyed...\" << std::endl;     m_handle.destroy();   }   std::coroutine_handle<promise_type> m_handle; };  CoroType do_work() {   std::cout << \"Doing first thing... \" << std::endl;   co_await std::suspend_always{};   std::cout << \"Doing second thing...\" << std::endl;   co_await std::suspend_always{};   std::cout << \"Doing Third thing...\" << std::endl; }  int main([[maybe_unused]] int argc, [[maybe_unused]] char** argv) {   auto task = do_work();    // Resume   task.m_handle(); // Doing first thing...    std::cout << std::boolalpha;   std::cout << \"coro done : \" << task.m_handle.done() << std::endl;  // false    // Resume for second time   task.m_handle.resume(); // Doing second thing...   std::cout << \"coro done : \" << task.m_handle.done() << std::endl;  // false    // Resume for third time   task.m_handle.resume(); // Doing Third thing...   std::cout << \"coro done : \" << task.m_handle.done() << std::endl;  // true    // Resuming after coroutine has run to completion : BAD!   // std::cout << \"------\" << std::endl;   // task.m_handle.resume();    std::cout << \"Done!\" << std::endl;    return 0; } ```    ## Possible output   ```txt Doing first thing...  coro done : false Doing second thing... coro done : false Doing Third thing... coro done : true Done! Handle destroyed...  ```  ## References  * [My tutorial and take on C++20 coroutines](https://www.scs.stanford.edu/~dm/blog/c++-coroutines.html) * 🚀[A library of C++ coroutine abstractions for the coroutines TS](https://github.com/lewissbaker/cppcoro) * [C++20 Coroutines — Complete* Guide](https://itnext.io/c-20-coroutines-complete-guide-7c3fc08db89d)  ","title":"C++ coroutine — 1"},{"id":618,"location":"/til/cpp_coroutine_02.html","tags":["C++","coroutine"],"text":" ::: toc  ## Introduction  * Coroutines are a generalization of **functions** in C++ * They are designed to make writing **asynchronous** code much easier  ## Parts  * `promise_type` * `coroutine_handle` * awaiter   * passed to `co_wait`   * `std::suspend_always`   * `std::suspend_never`  ### Awaiter methods  * `bool await_ready(){}`   * Whether the co_await expression suspends.   * if false is returned, then `await_suspend` is called, to (mostly) suspend * `void await_suspend(){}`   * May suspend the coroutine, or schedule the coroutine state for destruction * `void await_resume(){}`   * May return the result of the entire `co_await` expression  ::: tip title=\"Awaiter\" It is possible to create your own awaiters, things that can act as operands to the co_await operator, by setting up structs/classes that overload the co_await operator  ```c++ struct My_Awaitable {   auto operator co_await() {     return std::suspend_always{};   } }; ```  ## Function  * Can be called * Can return something  ## Coroutines  * Can be called * Can return something * Can be paused * Can be resumed  When paused the function state is save on heap topically.  * local variables * parameters * pointer to resume this function  ## Lazy computation  ```c++ auto f = some_coroutine(); // store computation info in f // Use f to manipulate the computation ```  ## Keywords  C++ 20 introduces three keywords that help pause and resume coroutines  * `co_yield`: suspends the execution and returns a value * `co_return`: completes execution and optionally returns a value * `co_await`: suspends the execution until resumed  If a function has one of those keywords, it becomes a coroutine. There is no other special syntax for coroutines.  ## Which function can be a coroutine  It's not every function in C++ that can be a coroutine. The functions below can't be coroutines.  * `constexpr` functions * constructors * destructors * the main function  ## C++20 warnings  C++ 20 doesn't provide actual usable coroutine types like Corolype  It provides the low level infrastructure to build them (promises, awaitables, coroutine handles,...  Building your own coroutine types is not recommended. It’s only reserved for hard core, highly experienced library developers who really know what they're doing  It is expected that C++23 will provide high level coroutine types built into C++, ready to use just by including some headers  If you want to use them know, there are third party libraries that can help, like cppcoro and some others   ## See Also  * [01](/til/cpp_corotine_01.html) * [02](/til/cpp_corotine_02.html) * [03](/til/cpp_corotine_03.html) * [04](/til/cpp_corotine_04.html) * [05](/til/cpp_corotine_05.html)    ```cpp #include <coroutine> #include <iostream>  struct CoroType {   struct promise_type {     int m_value;     CoroType get_return_object() { return CoroType(this); }     std::suspend_always initial_suspend() { return {}; }     std::suspend_always final_suspend() noexcept { return {}; }      void unhandled_exception() noexcept {       std::rethrow_exception(std::current_exception());     }      std::suspend_always yield_value(int val) {       m_value = val;       return {};     }      void return_void() {}   };   CoroType(promise_type* p)       : m_handle(std::coroutine_handle<promise_type>::from_promise(*p)) {}   ~CoroType() {     std::cout << \"Handle destroyed...\" << std::endl;     m_handle.destroy();   }   std::coroutine_handle<promise_type> m_handle; };  CoroType do_work() {   std::cout << \"Starting the coroutine...\" << std::endl;   co_yield 1;   co_yield 2;   co_yield 3;   co_return; }  int main() {   auto task = do_work();    task.m_handle.resume();  // This resumes the couroutine. When next suspension                            // point is hit it pauses   std::cout << \"value : \" << task.m_handle.promise().m_value << std::endl;    task.m_handle.resume();  // This resumes the couroutine. When next suspension                            // point is hit it pauses   std::cout << \"value : \" << task.m_handle.promise().m_value << std::endl;    task.m_handle.resume();  // This resumes the couroutine. When next suspension                            // point is hit it pauses   std::cout << std::boolalpha;   std::cout << \"value : \" << task.m_handle.promise().m_value << std::endl;   std::cout << \"coro done : \" << task.m_handle.done() << std::endl;    std::cout << \"------\" << std::endl;   task.m_handle.resume();   std::cout << \"coro done : \" << task.m_handle.done() << std::endl;    std::cout << \"Done!\" << std::endl;    return 0; } ```   ## Possible output   ```txt Starting the coroutine... value : 1 value : 2 value : 3 coro done : false ------ coro done : true Done! Handle destroyed...  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ coroutine — 2"},{"id":619,"location":"/til/cpp_coroutine_03.html","tags":["C++","coroutine"],"text":" ::: toc  ## Introduction  * Coroutines are a generalization of **functions** in C++ * They are designed to make writing **asynchronous** code much easier  ## Parts  * `promise_type` * `coroutine_handle` * awaiter   * passed to `co_wait`   * `std::suspend_always`   * `std::suspend_never`  ### Awaiter methods  * `bool await_ready(){}`   * Whether the co_await expression suspends.   * if false is returned, then `await_suspend` is called, to (mostly) suspend * `void await_suspend(){}`   * May suspend the coroutine, or schedule the coroutine state for destruction * `void await_resume(){}`   * May return the result of the entire `co_await` expression  ::: tip title=\"Awaiter\" It is possible to create your own awaiters, things that can act as operands to the co_await operator, by setting up structs/classes that overload the co_await operator  ```c++ struct My_Awaitable {   auto operator co_await() {     return std::suspend_always{};   } }; ```  ## Function  * Can be called * Can return something  ## Coroutines  * Can be called * Can return something * Can be paused * Can be resumed  When paused the function state is save on heap topically.  * local variables * parameters * pointer to resume this function  ## Lazy computation  ```c++ auto f = some_coroutine(); // store computation info in f // Use f to manipulate the computation ```  ## Keywords  C++ 20 introduces three keywords that help pause and resume coroutines  * `co_yield`: suspends the execution and returns a value * `co_return`: completes execution and optionally returns a value * `co_await`: suspends the execution until resumed  If a function has one of those keywords, it becomes a coroutine. There is no other special syntax for coroutines.  ## Which function can be a coroutine  It's not every function in C++ that can be a coroutine. The functions below can't be coroutines.  * `constexpr` functions * constructors * destructors * the main function  ## C++20 warnings  C++ 20 doesn't provide actual usable coroutine types like Corolype  It provides the low level infrastructure to build them (promises, awaitables, coroutine handles,...  Building your own coroutine types is not recommended. It’s only reserved for hard core, highly experienced library developers who really know what they're doing  It is expected that C++23 will provide high level coroutine types built into C++, ready to use just by including some headers  If you want to use them know, there are third party libraries that can help, like cppcoro and some others   ## See Also  * [01](/til/cpp_corotine_01.html) * [02](/til/cpp_corotine_02.html) * [03](/til/cpp_corotine_03.html) * [04](/til/cpp_corotine_04.html) * [05](/til/cpp_corotine_05.html)    ```cpp #include <coroutine> #include <iostream>  struct CoroType {   struct promise_type {     int m_value;     CoroType get_return_object() { return CoroType(this); }     std::suspend_always initial_suspend() { return {}; }     std::suspend_always final_suspend() noexcept { return {}; }      void unhandled_exception() noexcept {       std::rethrow_exception(std::current_exception());     }     std::suspend_always yield_value(int val) {       m_value = val;       return {};     }     void return_value(int val) {       std::cout << \"Returning value \" << std::endl;       m_value = val;     }      // void return_void() { std::cout << \"Returning void...\" << std::endl; }   };   CoroType(promise_type* p)       : m_handle(std::coroutine_handle<promise_type>::from_promise(*p)) {}   ~CoroType() {     std::cout << \"Handle destroyed...\" << std::endl;     m_handle.destroy();   }   std::coroutine_handle<promise_type> m_handle; };  CoroType do_work() {   std::cout << \"Starting the coroutine...\" << std::endl;   co_yield 1;   co_yield 2;   co_yield 3;   co_return 4; }  int main() {   auto task = do_work();    task.m_handle();  // This resumes the couroutine. When next suspension point                     // is hit it pauses   std::cout << \"value : \" << task.m_handle.promise().m_value << std::endl;    task.m_handle();  // This resumes the couroutine. When next suspension point                     // is hit it pauses   std::cout << std::boolalpha;   std::cout << \"value : \" << task.m_handle.promise().m_value << std::endl;   std::cout << \"coro done : \" << task.m_handle.done() << std::endl;    task.m_handle();  //   std::cout << std::boolalpha;   std::cout << \"value : \" << task.m_handle.promise().m_value << std::endl;   std::cout << \"coro done : \" << task.m_handle.done() << std::endl;    task.m_handle();  //   std::cout << std::boolalpha;   std::cout << \"value : \" << task.m_handle.promise().m_value << std::endl;   std::cout << \"coro done : \" << task.m_handle.done() << std::endl;    std::cout << \"Done!\" << std::endl;   return 0; } ```   ## Possible output   ```txt Starting the coroutine... value : 1 value : 2 coro done : false value : 3 coro done : false Returning value  value : 4 coro done : true Done! Handle destroyed...  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ coroutine — 3"},{"id":620,"location":"/til/cpp_coroutine_04.html","tags":["C++","coroutine_04"],"text":" ::: toc   ## Introduction  * Coroutines are a generalization of **functions** in C++ * They are designed to make writing **asynchronous** code much easier  ## Parts  * `promise_type` * `coroutine_handle` * awaiter   * passed to `co_wait`   * `std::suspend_always`   * `std::suspend_never`  ### Awaiter methods  * `bool await_ready(){}`   * Whether the co_await expression suspends.   * if false is returned, then `await_suspend` is called, to (mostly) suspend * `void await_suspend(){}`   * May suspend the coroutine, or schedule the coroutine state for destruction * `void await_resume(){}`   * May return the result of the entire `co_await` expression  ::: tip title=\"Awaiter\" It is possible to create your own awaiters, things that can act as operands to the co_await operator, by setting up structs/classes that overload the co_await operator  ```c++ struct My_Awaitable {   auto operator co_await() {     return std::suspend_always{};   } }; ```  ## Function  * Can be called * Can return something  ## Coroutines  * Can be called * Can return something * Can be paused * Can be resumed  When paused the function state is save on heap topically.  * local variables * parameters * pointer to resume this function  ## Lazy computation  ```c++ auto f = some_coroutine(); // store computation info in f // Use f to manipulate the computation ```  ## Keywords  C++ 20 introduces three keywords that help pause and resume coroutines  * `co_yield`: suspends the execution and returns a value * `co_return`: completes execution and optionally returns a value * `co_await`: suspends the execution until resumed  If a function has one of those keywords, it becomes a coroutine. There is no other special syntax for coroutines.  ## Which function can be a coroutine  It's not every function in C++ that can be a coroutine. The functions below can't be coroutines.  * `constexpr` functions * constructors * destructors * the main function  ## C++20 warnings  C++ 20 doesn't provide actual usable coroutine types like Corolype  It provides the low level infrastructure to build them (promises, awaitables, coroutine handles,...  Building your own coroutine types is not recommended. It’s only reserved for hard core, highly experienced library developers who really know what they're doing  It is expected that C++23 will provide high level coroutine types built into C++, ready to use just by including some headers  If you want to use them know, there are third party libraries that can help, like cppcoro and some others   ## See Also  * [01](/til/cpp_corotine_01.html) * [02](/til/cpp_corotine_02.html) * [03](/til/cpp_corotine_03.html) * [04](/til/cpp_corotine_04.html) * [05](/til/cpp_corotine_05.html)  ```   ```cpp #include <cassert> #include <coroutine> #include <iostream>  template <typename T> struct generator {   struct promise_type {     T m_value;     generator get_return_object() { return generator(this); }     std::suspend_always initial_suspend() { return {}; }     std::suspend_always final_suspend() noexcept { return {}; }      void unhandled_exception() noexcept {       std::rethrow_exception(std::current_exception());     }     std::suspend_always yield_value(T val) {       m_value = val;       return {};     }      void return_void() { std::cout << \"Returning void...\" << std::endl; }   };   generator(promise_type* p)       : m_handle(std::coroutine_handle<promise_type>::from_promise(*p)) {}   ~generator() {     std::cout << \"Handle destroyed...\" << std::endl;     m_handle.destroy();   }    T operator()() {     assert(m_handle != nullptr);     m_handle.resume();     return (m_handle.promise().m_value);   }   std::coroutine_handle<promise_type> m_handle; };  generator<int> generate_numbers() {   std::cout << \"generate_numbers starting\" << std::endl;   co_yield 10;  // Return 10 and pause    std::cout << \"After stop point #1\" << std::endl;   co_yield 20;    std::cout << \"After stop point #2\" << std::endl;   co_yield 30;    std::cout << \"After stop point #3\" << std::endl;   std::cout << \"generate_numbers ending\" << std::endl; }  generator<int> infinite_number_stream(int start = 0) {   auto value = start;   for ([[maybe_unused]] int i = 0;; ++i) {     std::cout << \"In infinite_number stream...\" << std::endl;     co_yield value;     ++value;   } }  generator<int> range(int first, int last) {   while (first != last) {     co_yield first++;   } }  int main() {   auto task1 = generate_numbers();   std::cout << \"value : \" << task1() << std::endl;   std::cout << \"value : \" << task1() << std::endl;   std::cout << std::boolalpha;   std::cout << \"value : \" << task1() << std::endl;   std::cout << \"coro done : \" << task1.m_handle.done() << std::endl;   task1();   std::cout << \"coro done : \" << task1.m_handle.done() << std::endl;    auto task2 = infinite_number_stream();   for (size_t i{}; i < 10; ++i) {     std::cout << \"infinite value : \" << task2() << std::endl;   }    // Range   auto task3 = range(0, 25);   for (size_t i{}; i < 26; ++i) {     std::cout << \"range value[\" << i << \"] : \" << task3() << std::endl;   }    std::cout << \"Done!\" << std::endl;    return 0; } ```   ## Possible output   ```txt value : generate_numbers starting 10 value : After stop point #1 20 value : After stop point #2 30 coro done : false After stop point #3 generate_numbers ending Returning void... coro done : true infinite value : In infinite_number stream... 0 infinite value : In infinite_number stream... 1 infinite value : In infinite_number stream... 2 infinite value : In infinite_number stream... 3 infinite value : In infinite_number stream... 4 infinite value : In infinite_number stream... 5 infinite value : In infinite_number stream... 6 infinite value : In infinite_number stream... 7 infinite value : In infinite_number stream... 8 infinite value : In infinite_number stream... 9 range value[0] : 0 range value[1] : 1 range value[2] : 2 range value[3] : 3 range value[4] : 4 range value[5] : 5 range value[6] : 6 range value[7] : 7 range value[8] : 8 range value[9] : 9 range value[10] : 10 range value[11] : 11 range value[12] : 12 range value[13] : 13 range value[14] : 14 range value[15] : 15 range value[16] : 16 range value[17] : 17 range value[18] : 18 range value[19] : 19 range value[20] : 20 range value[21] : 21 range value[22] : 22 range value[23] : 23 range value[24] : 24 range value[25] : Returning void... 24 Done! Handle destroyed... Handle destroyed... Handle destroyed...  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ coroutine — 4"},{"id":621,"location":"/til/cpp_coroutine_05.html","tags":["C++","coroutine"],"text":" ::: toc  ## Introduction  * Coroutines are a generalization of **functions** in C++ * They are designed to make writing **asynchronous** code much easier  ## Parts  * `promise_type` * `coroutine_handle` * awaiter   * passed to `co_wait`   * `std::suspend_always`   * `std::suspend_never`  ### Awaiter methods  * `bool await_ready(){}`   * Whether the co_await expression suspends.   * if false is returned, then `await_suspend` is called, to (mostly) suspend * `void await_suspend(){}`   * May suspend the coroutine, or schedule the coroutine state for destruction * `void await_resume(){}`   * May return the result of the entire `co_await` expression  ::: tip title=\"Awaiter\" It is possible to create your own awaiters, things that can act as operands to the co_await operator, by setting up structs/classes that overload the co_await operator  ```c++ struct My_Awaitable {   auto operator co_await() {     return std::suspend_always{};   } }; ```  ## Function  * Can be called * Can return something  ## Coroutines  * Can be called * Can return something * Can be paused * Can be resumed  When paused the function state is save on heap topically.  * local variables * parameters * pointer to resume this function  ## Lazy computation  ```c++ auto f = some_coroutine(); // store computation info in f // Use f to manipulate the computation ```  ## Keywords  C++ 20 introduces three keywords that help pause and resume coroutines  * `co_yield`: suspends the execution and returns a value * `co_return`: completes execution and optionally returns a value * `co_await`: suspends the execution until resumed  If a function has one of those keywords, it becomes a coroutine. There is no other special syntax for coroutines.  ## Which function can be a coroutine  It's not every function in C++ that can be a coroutine. The functions below can't be coroutines.  * `constexpr` functions * constructors * destructors * the main function  ## C++20 warnings  C++ 20 doesn't provide actual usable coroutine types like Corolype  It provides the low level infrastructure to build them (promises, awaitables, coroutine handles,...  Building your own coroutine types is not recommended. It’s only reserved for hard core, highly experienced library developers who really know what they're doing  It is expected that C++23 will provide high level coroutine types built into C++, ready to use just by including some headers  If you want to use them know, there are third party libraries that can help, like cppcoro and some others   ## See Also  * [01](/til/cpp_corotine_01.html) * [02](/til/cpp_corotine_02.html) * [03](/til/cpp_corotine_03.html) * [04](/til/cpp_corotine_04.html) * [05](/til/cpp_corotine_05.html)    ```cpp int main( [[maybe_unused]] int argc, [[maybe_unused]] char **argv ) {   return 0; } ```    ## Third Party Coroutines Types   ## Possible output   ```txt  ```  ## References  * [CPPcoro — Single-header library facilities for C++2a Coroutines](https://github.com/Quuxplusone/coro) * [title](link) * [title](link)  ","title":"C++ coroutine — 5"},{"id":622,"location":"/til/cpp_doctest_01.html","tags":["C++","doctest","test-suite","test-case","junit","test"],"text":" ::: toc    ## Possible output   ```txt Executando somente os testes [doctest] doctest version is \"2.4.5\" [doctest] run with \"--help\" for options =============================================================================== [doctest] test cases: 1 | 1 passed | 0 failed | 0 skipped [doctest] assertions: 2 | 2 passed | 0 failed | [doctest] Status: SUCCESS! Executando somente o programa Main program Done! Executando os testes e o programa [doctest] doctest version is \"2.4.5\" [doctest] run with \"--help\" for options =============================================================================== [doctest] test cases: 1 | 1 passed | 0 failed | 0 skipped [doctest] assertions: 2 | 2 passed | 0 failed | [doctest] Status: SUCCESS! Main program Done!  ```  ## References  * [Better Ways to Test with doctest – the Fastest C++ Unit Testing Framework](https://blog.jetbrains.com/rscpp/2019/07/10/better-ways-testing-with-doctest/) * [doctest - the lightest C++ testing framework for unit tests](https://www.methodsandtools.com/tools/doctest.php) * [title](link)  ","title":"C++ doctest_01"},{"id":623,"location":"/til/html_dashboard.html","tags":["dashboard","html"],"text":"::: toc  ## Introduction  ## References  * [The 23 Best HTML Dashboard Templates for Admins & Users](https://blog.hubspot.com/website/best-html5-admin-dashboard-templates) ","title":"html_dashboard"},{"id":624,"location":"/til/live-server.html","tags":["t1","t2","t3"],"text":"::: toc  ## Introduction  ## Installation  ```shell npm install -g live-server ```  ## Serving  ```shell cd static live-server ```  If the default port is already in use then another one will be selected.  ```shell $ http://0.0.0.0:8080 is already in use. Trying another port. Ready for changes Serving \"/full/path/of/my/static/page\" at http://127.0.0.1:34413 ```  This address will automatically opened on the default browser.  ## References  * [How to add live reload to a static page](https://www.educative.io/answers/how-to-add-live-reload-to-a-static-page) ","title":"live-server"},{"id":625,"location":"/til/cpp_static_link_failure.html","tags":["C++","static","thread"],"text":" ::: toc   ## Introduction  Program that uses thread can crashes if statically linked.  ### Minimal program to test the faillure   ```cpp #include <condition_variable> int main() {   std::condition_variable a;   return 0; } ```   ### Makefile  ```makefile bin/static_link_failure: static_link_failure.cpp \tg++ --std=c++11 -static -pthread $^ -lpthread -o $@.g++.static \tclang++ --std=c++11 -static -pthread $^ -lpthread -o $@.clang++.static \tg++ --std=c++11 -pthread $^ -lpthread -o $@.g++.non_static \tclang++ --std=c++11 -pthread $^ -lpthread -o $@.clang++.non_static \tclang++ --std=c++20 -pthread $^ -lpthread -o $@  output/static_link_failure.txt: bin/static_link_failure \techo \"bin/static_link_failure.g++.static\" > $@ \tbin/static_link_failure.g++.static         || echo \"FAIL\" >> $@ \techo \"bin/static_link_failure.clang++.static\" >> $@ \tbin/static_link_failure.clang++.static     || echo \"FAIL\" >> $@ \techo \"bin/static_link_failure.g++.non_static\" >> $@ \tbin/static_link_failure.g++.non_static     || echo \"FAIL\" >> $@ \techo \"bin/static_link_failure.clang++.non_static\" >> $@ \tbin/static_link_failure.clang++.non_static || echo \"FAIL\" >> $@ ```  ## Possible output   ```txt bin/static_link_failure.g++.static FAIL bin/static_link_failure.clang++.static FAIL bin/static_link_failure.g++.non_static bin/static_link_failure.clang++.non_static  ```  ## References  * [C++11's condition variables fail with static linking](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=58909)  ","title":"🐛 BUG — static linking thread"},{"id":626,"location":"/til/log_level.html","tags":["log-level","trace","debug","info","warn","error","fatal"],"text":"::: toc  ## Introduction  ![Log level](/til/log_level_01.webp)  * **Trace** — Only when I would be \"tracing\" the code and trying to find one   part of a function specifically. * **Debug** — Information that is diagnostically helpful to people more than   just developers (IT, sysadmins, etc.). * **Info** — Generally useful information to log (service start/stop,   configuration assumptions, etc). Info I want to always have available but   usually don't care about under normal circumstances.     * This is my out-of-the-box config level. * **Warn** — Anything that can potentially cause application oddities, but for   which I am automatically recovering. (Such as switching from a primary to   backup server, retrying an operation, missing secondary data, etc.) * **Error** — Any error which is fatal to the operation, but not the service or   application (can't open a required file, missing data, etc.). These errors   will force user (administrator, or direct user) intervention. These are   usually reserved (in my apps) for incorrect connection strings, missing   services, etc. * **Fatal** — Any error that is forcing a shutdown of the service or   application to prevent data loss (or further data loss). I reserve these only   for the most heinous errors and situations where there is guaranteed to have   been data corruption or loss.  Fatal/Critical: Overall application or system failure that should be investigated immediately. Yes, wake up the SysAdmin. Since we prefer our SysAdmins alert and well-rested, this severity should be used very infrequently. If it's happening daily and that's not a BFD, it has lost its meaning. Typically, a Fatal error only occurs once in the process lifetime, so if the log file is tied to the process, this is typically the last message in the log.  Error: Definitely a problem that should be investigated. SysAdmin should be notified automatically, but doesn't need to be dragged out of bed. By filtering a log to look at errors and above you get an overview of error frequency and can quickly identify the initiating failure that might have resulted in a cascade of additional errors. Tracking error rates as versus application usage can yield useful quality metrics such as MTBF which can be used to assess overall quality. For example, this metric might help inform decisions about whether or not another beta testing cycle is needed before a release.  Warning: This MIGHT be problem, or might not. For example, expected transient environmental conditions such as short loss of network or database connectivity should be logged as Warnings, not Errors. Viewing a log filtered to show only warnings and errors may give quick insight into early hints at the root cause of a subsequent error. Warnings should be used sparingly so that they don't become meaningless. For example, loss of network access should be a warning or even an error in a server application, but might be just an Info in a desktop app designed for occasionally disconnected laptop users.  Info: This is important information that should be logged under normal conditions such as successful initialization, services starting and stopping or successful completion of significant transactions. Viewing a log showing Info and above should give a quick overview of major state changes in the process providing top-level context for understanding any warnings or errors that also occur. Don't have too many Info messages. We typically have < 5% Info messages relative to Trace.  Trace: Trace is by far the most commonly used severity and should provide context to understand the steps leading up to errors and warnings. Having the right density of Trace messages makes software much more maintainable but requires some diligence because the value of individual Trace statements may change over time as programs evolve. The best way to achieve this is by getting the dev team in the habit of regularly reviewing logs as a standard part of troubleshooting customer reported issues. Encourage the team to prune out Trace messages that no longer provide useful context and to add messages where needed to understand the context of subsequent messages. For example, it is often helpful to log user input such as changing displays or tabs.  Debug: We consider Debug < Trace. The distinction being that Debug messages are compiled out of Release builds. That said, we discourage use of Debug messages. Allowing Debug messages tends to lead to more and more Debug messages being added and none ever removed. In time, this makes log files almost useless because it's too hard to filter signal from noise. That causes devs to not use the logs which continues the death spiral. In contrast, constantly pruning Trace messages encourages devs to use them which results in a virtuous spiral. Also, this eliminates the possibility of bugs introduced because of needed side-effects in debug code that isn't included in the release build. Yeah, I know that shouldn't happen in good code, but better safe than sorry.  ## References  * [When to use the different log levels](https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels) ","title":"log level"},{"id":627,"location":"/til/cpp_murmurhash.html","tags":["C++","murmurhash"],"text":" ::: toc   ## Introduction  The name comes from two basic operations, **MU**ltiply and **R**otate.  **MurmurHash3** is a **non-cryptographic hash function** that produces a 32-bit hash value for a given input data. It was designed to be fast and produce good quality hash values for a wide variety of input data.  The basic MurmurHash3 algorithm works as follows:  * Initialize a 32-bit hash value to a seed value (usually 0). * Process the input data in 4-byte blocks.   * For each block, perform a series of operations that mix the   bits of the block into the hash value. * Process any remaining bytes (i.e., the \"tail\" of the input data).   * Combine the remaining bytes with the hash value using a different   mixing function. * Finalize the hash value by performing a series of operations that   further mix the bits of the hash value.   * This step is optional, but it can improve the quality of the   hash value.  The MurmurHash3 algorithm uses a combination of multiplication, XOR, bit shifting, and other bitwise operations to mix the bits of the input data and produce the final hash value. The specific operations used are designed to avoid \"avalanche\" effects (i.e., small changes in the input data should produce large changes in the hash value) and to be efficient on modern processors.  The constants `c1`, `c2`, `rotation_1`, `rotation_2`, `m`, and `n` used in the algorithm are carefully chosen to produce good quality hash values. These constants are not secret, and can be freely shared.  Note that the MurmurHash3 algorithm is designed to be used with byte-oriented data, but it can be used with other data types by first converting them to byte arrays. Also note that while MurmurHash3 is a good general-purpose hash function, there are other hash functions that may be better suited for specific applications or data types.  ## Versions  ### MurmurHash1  The original MurmurHash was created as an attempt to make a faster function than Lookup3. Although successful, it hadn't been tested thoroughly and wasn't capable of providing 64-bit hashes as in Lookup3. It had a rather elegant design, that would be later built upon in MurmurHash2, combining a multiplicative hash (similar to Fowler–Noll–Vo hash function) with a Xorshift.  ### MurmurHash2  MurmurHash2 yields a 32-bit or 64-bit value. It came in multiple variants, including some that allowed incremental hashing and aligned or neutral versions. * MurmurHash2 (32-bit, x86)   * The original version; contains a flaw that weakens collision in some * MurmurHash2A (32-bit, x86)   * A fixed variant using Merkle–Damgård construction. Slightly slower. * CMurmurHash2A (32-bit, x86)   * MurmurHash2A but works incrementally. * MurmurHashNeutral2 (32-bit, x86)   * Slower, but endian and alignment neutral. * MurmurHashAligned2 (32-bit, x86)   * Slower, but does aligned reads (safer on some platforms). * MurmurHash64A (64-bit, x64)   * The original 64-bit version. Optimized for 64-bit arithmetic. * MurmurHash64B (64-bit, x86)   * A 64-bit version optimized for 32-bit platforms. It is not a   true 64-bit hash due to insufficient mixing of the stripes.  The person who originally found the flaw[clarification needed] in MurmurHash2 created an unofficial 160-bit version of MurmurHash2 called MurmurHash2_160.  ### MurmurHash3  The current version is MurmurHash3, which yields a **32-bit** or **128-bit** hash value.  ::: warning When using 128-bits, the x86 and x64 versions do not produce the same values, as the algorithms are optimized for their respective platforms.  MurmurHash3 was released alongside SMHasher—a hash function test suite.  ## Debian package  There is a package called `libmurmurhash-dev` in the standard Debian distro.  ```shell sudo apt install libmurmurhash-dev ```  Use the version at <https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp> for production.  Below is presented a 32 bits version for explain the process.   ```cpp // MurmurHash3 constants constexpr uint32_t c1 = 0xcc9e2d51; constexpr uint32_t c2 = 0x1b873593; constexpr uint32_t rotation_1 = 15; constexpr uint32_t rotation_2 = 13; constexpr uint32_t m = 5; constexpr uint32_t n = 0xe6546b64; ```    ```cpp // This function performs the core MurmurHash3 algorithm uint32_t murmurhash3_core(const uint8_t* data, size_t len, uint32_t h) {   const uint32_t* blocks = reinterpret_cast<const uint32_t*>(data);   const size_t n_blocks = len / sizeof(uint32_t);  // four bytes block    for (size_t i = 0; i < n_blocks; ++i) {     uint32_t block = blocks[i];      block *= c1;     // block rotation 1     block = (block << rotation_1) | (block >> (32 - rotation_1));     // 01011001110001111000011111000000 original block     // --------------------------------     // 11000011111000000000000000000000 block << 15     // 00000000000000001011001110001111 block >> (32-15)     // -------------------------------- or     // 11000011111000001011001110001111 rotated block      block *= c2;      h ^= block;      // block rotation 2     h = (h << rotation_2) | (h >> (32 - rotation_2));     h = h * m + n;   }    const uint8_t* tail = data + n_blocks * sizeof(uint32_t);   uint32_t block = 0;    switch (len & 3) {     case 3:       block ^= tail[2] << 16;       [[fallthrough]];     case 2:       block ^= tail[1] << 8;       [[fallthrough]];     case 1:       block ^= tail[0];       block *= c1;       block = (block << rotation_1) | (block >> (32 - rotation_1));       block *= c2;       h ^= block;   }    h ^= len;   h ^= h >> 16;   h *= 0x85ebca6b;   h ^= h >> 13;   h *= 0xc2b2ae35;   h ^= h >> 16;    return h; } ```    ```cpp // This is the main MurmurHash3 function that clients will use uint32_t murmurhash3(const void* key, size_t len, uint32_t seed = 0) {   const uint8_t* data = reinterpret_cast<const uint8_t*>(key);   const size_t n_blocks = len / sizeof(uint32_t);    uint32_t h = seed;    // Process the data in 4-byte blocks   h = murmurhash3_core(data, n_blocks * sizeof(uint32_t), h);    // Process any remaining bytes   const size_t n_tail = len % sizeof(uint32_t);   if (n_tail != 0) {     uint32_t k = 0;     memcpy(&k, data + n_blocks * sizeof(uint32_t), n_tail);     h ^= k;     h *= c1;     h = (h << rotation_1) | (h >> (32 - rotation_1));     h *= c2;   }    // Finalize the hash   h ^= len;   h ^= h >> 16;   h *= 0x85ebca6b;   h ^= h >> 13;   h *= 0xc2b2ae35;   h ^= h >> 16;    return h; } ```    ```cpp int main() {   // Avalanche test on seed   // Small change on key result on dramatically change on computed hash   constexpr uint32_t seed1 = 1234;   constexpr uint32_t seed2 = 1235;    // Avalanche test on input   // Small change on input result on dramatically change on computed hash   std::list<std::string> texts{\"Hello, world!\",                                \"hello, world!\",                                \"Hello, World!\",                                \"hello, world!\",                                \"\",                                \"h\",                                \"he\",                                \"hello\"};    for (const auto& text : texts) {     uint32_t hash1 = murmurhash3(text.data(), text.size(), seed1);     uint32_t hash2 = murmurhash3(text.data(), text.size(), seed2);      fmt::print(\"hash: {:10}   seed: {}   text: {}\\n\", hash1, seed1, text);     fmt::print(\"hash: {:10}   seed: {}   text: {}\\n\", hash2, seed2, text);   }    // Tests with the package libmurmurhash-dev   // clang-format off   // void lmmh_x86_32( const void *addr, unsigned int len, uint32_t seed, uint32_t out[1]);   // void lmmh_x86_128(const void *addr, unsigned int len, uint32_t seed, uint32_t out[4]);   // void lmmh_x64_128(const void *addr, unsigned int len, uint32_t seed, uint64_t out[2]);   // clang-format on   for (const auto& text : texts) {     uint32_t hash32;     lmmh_x86_32(text.data(), text.size(), seed1, &hash32);     fmt::print(\"hash: {:10}   seed: {}   text: {}\\n\", hash32, seed1, text);   }    for (const auto& text : texts) {     uint32_t hash128A[4];     uint64_t hash128B[2];      lmmh_x86_128(text.data(), text.size(), seed1, hash128A);     lmmh_x64_128(text.data(), text.size(), seed1, hash128B);      fmt::print(\"hash128A: {:10} {:10} {:10} {:10}   seed: {}   text: {}\\n\",                hash128A[0], hash128A[1], hash128A[2], hash128A[3], seed1, text);      fmt::print(\"hash128B: {:21} {:21}   seed: {}   text: {}\\n\", hash128B[0],                hash128B[1], seed1, text);   }    return 0; }  ```   ## Possible output   ```txt hash: 1880165001   seed: 1234   text: Hello, world! hash:   37900214   seed: 1235   text: Hello, world! hash: 1773352101   seed: 1234   text: hello, world! hash: 3125240818   seed: 1235   text: hello, world! hash: 2650466895   seed: 1234   text: Hello, World! hash: 3693886096   seed: 1235   text: Hello, World! hash: 1773352101   seed: 1234   text: hello, world! hash: 3125240818   seed: 1235   text: hello, world! hash: 3613156711   seed: 1234   text:  hash: 2319787446   seed: 1235   text:  hash: 1968416228   seed: 1234   text: h hash: 3135554948   seed: 1235   text: h hash: 1299136751   seed: 1234   text: he hash: 3700568032   seed: 1235   text: he hash:  616337965   seed: 1234   text: hello hash: 3371755843   seed: 1235   text: hello hash: 4210478515   seed: 1234   text: Hello, world! hash: 1215213111   seed: 1234   text: hello, world! hash: 3644279836   seed: 1234   text: Hello, World! hash: 1215213111   seed: 1234   text: hello, world! hash:  254590987   seed: 1234   text:  hash: 1073392072   seed: 1234   text: h hash:   19595036   seed: 1234   text: he hash: 2251423591   seed: 1234   text: hello hash128A: 4192683273 3344351611  905885657  131714559   seed: 1234   text: Hello, world! hash128B:   6994950471748863742   5906757252613544790   seed: 1234   text: Hello, world! hash128A: 3379794421 1391467063  204088760 2201735466   seed: 1234   text: hello, world! hash128B:   3334729735983292266  15246033631058457288   seed: 1234   text: hello, world! hash128A: 2645690248 1320752661 2676918588 3486440893   seed: 1234   text: Hello, World! hash128B:  13342170012096846388  10422801084110055398   seed: 1234   text: Hello, World! hash128A: 3379794421 1391467063  204088760 2201735466   seed: 1234   text: hello, world! hash128B:   3334729735983292266  15246033631058457288   seed: 1234   text: hello, world! hash128A:  396337949 2466738178 2466738178 2466738178   seed: 1234   text:  hash128B:   5006475794136178589  13573877494810213620   seed: 1234   text:  hash128A: 3741828134 1966168643 1966168643 1966168643   seed: 1234   text: h hash128B:  11851864647889073320  18017523628106187849   seed: 1234   text: h hash128A:  740872880 1097768591 1097768591 1097768591   seed: 1234   text: he hash128B:  12027140842659985391   5619874163494401635   seed: 1234   text: he hash128A: 1597004003 2034712666 2930991220 2930991220   seed: 1234   text: hello hash128B:  10403193130508565092  11308957242644105945   seed: 1234   text: hello  ```  ## References  * ▶️[Murmur Hash - Explained](https://www.youtube.com/watch?v=b8HzEZt0RCQ) * [MurMurHash3, an ultra fast hash algorithm for C# / .NET](https://blog.teamleadnet.com/2012/08/murmurhash3-ultra-fast-hash-algorithm.html) * [MurmurHash3 on Github](https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp)  ","title":"C++ murmur hash"},{"id":628,"location":"/til/cpp_openai_01.html","tags":["C++","openai","ChatGPT"],"text":" ::: toc  ## Introduction  ChatGPT API is a natural language processing API based on the GPT-3.5 architecture. It allows you to integrate powerful text-based AI capabilities into your applications, including language translation, sentiment analysis, question answering, text completion, and more.  Using ChatGPT API, you can easily add advanced language processing features to your applications without having to develop them from scratch. This API works by accepting text-based inputs and returning relevant, human-like responses generated by the GPT-3.5 model, which has been trained on a massive corpus of human-written text.  To use the ChatGPT API, you simply need to send an HTTP request to the API endpoint with your input text as the payload, and the API will return a response in the form of text. You can integrate this API into your applications to provide your users with natural language interactions and responses, improving the overall user experience of your application.  ## Usage  The ChatGPT API can be used for a wide range of natural language processing (NLP) tasks. Here are some examples of the main use cases for the API:  * **Language translation:** You can use the API to translate text from one language to another. This is especially useful if you have an international audience and want to provide your content in multiple languages. * **Sentiment analysis:** You can use the API to analyze the sentiment of text, whether it's positive, negative, or neutral. This can be useful for analyzing customer feedback or social media posts. * **Text completion:** You can use the API to generate text based on incomplete or partial input. This can be useful for auto-completing search queries or helping users complete forms and surveys. * **Question answering:** You can use the API to answer questions posed in natural language. This can be useful for chatbots or virtual assistants that need to provide information to users. * **Chatbots:** You can use the API to create chatbots that can interact with users in natural language. This can be useful for customer service or other applications where a human-like interaction is desired.  These are just a few examples of the main use cases for the ChatGPT API. With its powerful NLP capabilities, the API can be used in a wide range of applications to improve the user experience and provide more natural language interactions.   ```cpp #define CPPHTTPLIB_OPENSSL_SUPPORT  #include \"httplib.h\" #include \"json.hpp\" #include \"toml.hpp\" #include <iostream> #include <string> #include <vector>  using namespace nlohmann; using namespace httplib; using namespace std;  string generate_text( string api_key, string prompt ) {   httplib::SSLClient cli( \"api.openai.com\" );    auto    endpoint            = \"/v1/completions\"s;   auto    auth_header         = \"Bearer \"s + api_key;   auto    content_type_header = \"application/json\"s;   Headers headers             = { { \"Authorization\", auth_header }, { \"Content-Type\", content_type_header } };    json data       = { { \"model\", \"text-davinci-003\" },           // The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array           // of token arrays.           { \"prompt\", prompt },           // The maximum number of tokens to generate in the completion.           // The token count of your prompt plus max_tokens cannot exceed the model's context length. Most models have a           // context length of 2048 tokens (except for the newest models, which support 4096).           { \"max_tokens\", 100 },           // How many completions to generate for each prompt.           { \"n\", 1 },           // Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the           // stop sequence.           { \"stop\", nullptr },           // What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,           // while lower values like 0.2 will make it more focused and deterministic.           // We generally recommend altering this or top_p but not both.           { \"temperature\", 0.5 } };    auto res = cli.Post( endpoint, headers, data.dump(), content_type_header );    if( !res || res->status != 200 ) {     cerr << \"Error: \" << ( res ? res->status : -1 ) << endl;     return \"\";   }    json response_json = json::parse( res->body );    { // Debugging     ofstream dbg( \"output/openai_01.json\" );     dbg << response_json.dump( 2 );   }    string response_text = response_json[\"choices\"][0][\"text\"];   return response_text; } ```    ```cpp int main() {   auto config  = toml::parse_file( \"openai_01.toml\" );   auto api_key = config[\"openai\"][\"api_key\"].value_or( \"YOUR_API_KEY\"s );   // I don't need to specify the language.   // If I ask in portuguese the answer will be in portuguese as well.   auto prompt   = \"Qual é o significado da vida?\"s;   auto response = generate_text( api_key, prompt );    cout << prompt << endl;   cout << response << endl;   return 0; } ```   ## Possible output   ```txt Qual é o significado da vida?   Essa é uma pergunta que tem sido discutida por filósofos, religiosos e pessoas comuns por muitos séculos. Não existe uma resposta única para essa pergunta, pois cada pessoa tem sua própria visão sobre o significado da vida. Algumas pessoas acreditam que o  ```   ```json {   \"choices\": [     {       \"finish_reason\": \"length\",       \"index\": 0,       \"logprobs\": null,       \"text\": \"\\n\\nEssa é uma pergunta que tem sido discutida por filósofos, religiosos e pessoas comuns por muitos séculos. Não existe uma resposta única para essa pergunta, pois cada pessoa tem sua própria visão sobre o significado da vida. Algumas pessoas acreditam que o\"     }   ],   \"created\": 1680386338,   \"id\": \"cmpl-70dXOsVOsTdKEURW23nCZX62WedxX\",   \"model\": \"text-davinci-003\",   \"object\": \"text_completion\",   \"usage\": {     \"completion_tokens\": 100,     \"prompt_tokens\": 9,     \"total_tokens\": 109   } } ```  ## References  * API Reference [Create completion](https://platform.openai.com/docs/api-reference/completions/create)  ","title":"C++ openai — 01"},{"id":629,"location":"/til/cpp_httplib_01.html","tags":["C++","httplib_01"],"text":" ::: toc     ```cpp    ```    ## Possible output   ```txt  ```  ## References  * ▶️[Developing a Web-Application in C++](https://www.youtube.com/watch?v=ogtjetYs7oc) * [title](link) * [title](link)  ","title":"C++ httplib_01"},{"id":630,"location":"/til/cpp_galib_01.html","tags":["C++","galib"],"text":" ::: toc    ```cpp #include <fmt/core.h> #include <ga/GARealGenome.h> #include <ga/ga.h>  #include <cmath> #include <fstream> #include <ga/GARealGenome.C>  FILE* genomeFile;  // Define the fitness function float myObjective(GAGenome& g) {   GARealGenome genome = (GARealGenome&)g;   float x1 = genome.gene(0) - 33.0;   float x2 = genome.gene(1) - 22.0;    return (x1 * x1) + (x2 * x2);   // The minimum value is (33;22) }  int main([[maybe_unused]] int argc, [[maybe_unused]] char** argv) {   constexpr auto minValue1 = -1.0;   constexpr auto maxValue1 = 50.0;   constexpr auto increment1 = 0.001;    constexpr auto minValue2 = -2.0;   constexpr auto maxValue2 = 40.0;   constexpr auto increment2 = 0.005;    genomeFile = fopen(\"output/galib_01.dat\", \"w\");    GARandomSeed(123456);      // One allele for each dimension   GARealAlleleSetArray alleles;   alleles.add(minValue1, maxValue1, increment1, GAAllele::EXCLUSIVE,               GAAllele::EXCLUSIVE);   alleles.add(minValue2, maxValue2, increment2, GAAllele::EXCLUSIVE,               GAAllele::EXCLUSIVE);    GARealGenome genome(alleles, myObjective);    GASimpleGA ga(genome);   ga.minimize();          // by default we want to minimize the objective   ga.populationSize(10);  // how many individuals in the population   ga.nGenerations(500);   // number of generations to evolve    // Dumping data (optional)   ga.scoreFrequency(20);  // keep the scores of every n generations   ga.flushFrequency(20);  // specify how often to write the score to disk   ga.scoreFilename(\"output/galib_01_score.txt\");    ga.initialize();   // ----------------------------------------------------------------------   // ga.evolve();   // ----------------------------------------------------------------------   // Or step by step   size_t step{};   while (!ga.done()) {     ga.step();     // Debugging     if (step++ % 20 == 0) {       GARealGenome& best = (GARealGenome&)ga.statistics().bestIndividual();       fmt::print(genomeFile, \"{:3} {:.7f} {:.7f} {:.7f}\\n\", step, best.gene(0),                  best.gene(1), best.score());     }   }   // ----------------------------------------------------------------------    // Print the best solution found   GARealGenome& best = (GARealGenome&)ga.statistics().bestIndividual();   fmt::print(\"Best X1: {:+.7f} X2: {:+.7f}\\n\", best.gene(0), best.gene(1));    fmt::print(genomeFile, \"{:3} {:.7f} {:.7f} {:.7f}\\n\", step, best.gene(0),              best.gene(1), best.score());   fclose(genomeFile);    // Plot   FILE* gnuplotPipe = popen(\"gnuplot -persistent\", \"w\");   fprintf(gnuplotPipe, \"set term svg enhanced size 1200 800\\n\");   fprintf(gnuplotPipe, \"set output 'images/galib_01.svg'\\n\");   fprintf(gnuplotPipe, \"set title 'Optimization progress' tc rgb 'white'\\n\");   fprintf(gnuplotPipe, \"set xlabel 'Best of generation' tc rgb 'white'\\n\");   fprintf(gnuplotPipe, \"set ylabel 'Input values and Score' tc rgb 'white'\\n\");   fprintf(gnuplotPipe, \"set border lc rgb 'white'\\n\");   fprintf(gnuplotPipe, \"set key tc rgb 'white'\\n\");   fprintf(gnuplotPipe, \"set logscale y\\n\");   fprintf(gnuplotPipe, \"set grid\\n\");   fprintf(gnuplotPipe, \"set linetype 1 lc rgb 'orange' lw 2\\n\");   fprintf(gnuplotPipe, \"set linetype 2 lc rgb 'cyan' lw 2\\n\");   fprintf(gnuplotPipe, \"set linetype 3 lc rgb 'green' lw 2\\n\");   fprintf(gnuplotPipe, \"set linetype 99 lc rgb 'white'\\n\");   fprintf(gnuplotPipe, \"set xzeroaxis linetype 99\\n\");   fprintf(gnuplotPipe, \"set yzeroaxis linetype 99\\n\");   fprintf(gnuplotPipe,           \"plot \"           \"'output/galib_01.dat' using 1:4 w l title 'Score', \"           \"'output/galib_01.dat' using 1:2 w l title 'X_1', \"           \"'output/galib_01.dat' using 1:3 w l title 'X_2'\\n\");   fflush(gnuplotPipe);   pclose(gnuplotPipe);    return 0; } ```   ![Plot](/til/cpp_galib_01.svg)  ## Possible output   ```txt Best X1: +32.7250023 X2: +22.2899990  ```  Debugging evolution data:   ```txt   1 30.8700008 17.3349991 26.2991295  21 30.8700008 21.1099987 5.3289986  41 30.8700008 21.1099987 5.3289986  61 30.8700008 21.1099987 5.3289986  81 30.8700008 21.1099987 5.3289986 101 30.8700008 21.1099987 5.3289986 121 30.8700008 21.1099987 5.3289986 141 34.7660027 21.1099987 3.9108677 161 34.7660027 21.1099987 3.9108677 181 34.7660027 21.1099987 3.9108677 201 34.7660027 21.1099987 3.9108677 221 34.7660027 21.1099987 3.9108677 241 34.7660027 21.1099987 3.9108677 261 32.7250023 22.2899990 0.1597232 281 32.7250023 22.2899990 0.1597232 301 32.7250023 22.2899990 0.1597232 321 32.7250023 22.2899990 0.1597232 341 32.7250023 22.2899990 0.1597232 361 32.7250023 22.2899990 0.1597232 381 32.7250023 22.2899990 0.1597232 401 32.7250023 22.2899990 0.1597232 421 32.7250023 22.2899990 0.1597232 441 32.7250023 22.2899990 0.1597232 461 32.7250023 22.2899990 0.1597232 481 32.7250023 22.2899990 0.1597232 500 32.7250023 22.2899990 0.1597232  ```  Score file generated by **galib**.   ```txt 0\t1223.13 20\t271.691 40\t554.674 60\t75.4333 80\t5.329 100\t5.329 120\t5.329 140\t3.91087 160\t3.91087 180\t11.2698 200\t97.5 220\t723.864 240\t3.91087 260\t377.376 280\t0.159723 300\t384.785 320\t572.807 340\t0.159723 360\t0.159723 380\t0.159723 400\t0.159723  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ GAlib"},{"id":631,"location":"/til/cpp_functor.html","tags":["C++","functor"],"text":" ::: toc    ```cpp class MyFunctor {  public:   int operator()(int x) { return x * 2; } };  class Matcher {   int target;   public:   Matcher(int m) : target(m) {}   bool operator()(int x) { return x == target; } };  class MultBy {   int mult = 1;   MultBy();   public:   MultBy(int n) : mult(n) { std::cout << \"MultBy(\" << mult << \") Ctor\\n\"; }   int operator()(int n) const {     return mult * n;   } };  int main([[maybe_unused]] int argc, [[maybe_unused]] char **argv) {   MyFunctor doubler;   assert(doubler(5) == 10);    Matcher Is5(5);   auto n = 5;   assert(Is5(n));  // o mesmo que  n == 5    const MultBy times4(4);   const MultBy times10(10);   const MultBy times15(15);    std::cout << \"times4(5) = \" << times4(5) << \"\\n\";   std::cout << \"times4(15) = \" << times4(15) << \"\\n\";   std::cout << \"times10(5) = \" << times10(5) << \"\\n\";   std::cout << \"times10(15) = \" << times10(15) << \"\\n\";   std::cout << \"times15(5) = \" << times15(5) << \"\\n\";   std::cout << \"times15(15) = \" << times15(15) << \"\\n\";    return 0; } ```   ## Possible output   ```txt MultBy(4) Ctor MultBy(10) Ctor MultBy(15) Ctor times4(5) = 20 times4(15) = 60 times10(5) = 50 times10(15) = 150 times15(5) = 75 times15(15) = 225  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ functor"},{"id":632,"location":"/til/cpp_mega_giga.html","tags":["C++","mega","giga","imbue","locale"],"text":" ::: toc    ```cpp #include <iostream> #include <locale>  using namespace std;  // clang-format off // 2^0   = 1                                                             = 1000^0   (0% deviation) // 2^10  = 1 024                                                         ≈ 1000^1   (2.4% deviation) // 2^20  = 1 048 576                                                     ≈ 1000^2   (4.9% deviation) // 2^30  = 1 073 741 824                                                 ≈ 1000^3   (7.4% deviation) // 2^40  = 1 099 511 627 776                                             ≈ 1000^4   (10.0% deviation) // 2^50  = 1 125 899 906 842 624                                         ≈ 1000^5   (12.6% deviation) // 2^60  = 1 152 921 504 606 846 976                                     ≈ 1000^6   (15.3% deviation) // 2^70  = 1 180 591 620 717 411 303 424                                 ≈ 1000^7   (18.1% deviation) // 2^80  = 1 208 925 819 614 629 174 706 176                             ≈ 1000^8   (20.9% deviation) // 2^90  = 1 237 940 039 285 380 274 899 124 224                         ≈ 1000^9   (23.8% deviation) // 2^100 = 1 267 650 600 228 229 401 496 703 205 376                     ≈ 1000^10  (26.8% deviation) // 2^110 = 1 298 074 214 633 706 907 132 624 082 305 024                 ≈ 1000^11  (29.8% deviation) // 2^120 = 1 329 227 995 784 915 872 903 807 060 280 344 576             ≈ 1000^12  (32.9% deviation) // 2^130 = 1 361 129 467 683 753 853 853 498 429 727 072 845 824         ≈ 1000^13  (36.1% deviation) // 2^140 = 1 393 796 574 908 163 946 345 982 392 040 522 594 123 776     ≈ 1000^14  (39.4% deviation) // 2^150 = 1 427 247 692 705 959 881 058 285 969 449 495 136 382 746 624 ≈ 1000^15  (42.7% deviation) // clang-format on  int main([[maybe_unused]] int argc, [[maybe_unused]] char** argv) {   cout << \"1 kB = 1 x 2^10 = \" << (1 << 10) << endl;   cout << \"3 MB = 3 x 2^20 = \" << (3 << 20) << endl;   cout << \"5 GB = 5 x 2^30 = \" << (5UL << 30) << endl;   cout << \"7 TB = 7 x 2^40 = \" << (7UL << 40) << endl;   cout << \"9 TB = 9 x 2^50 = \" << (9UL << 50) << endl;   cout.imbue(locale(\"\"));   cout << \"1 kB = 1 x 2^10 = \" << (1 << 10) << endl;   cout << \"3 MB = 3 x 2^20 = \" << (3 << 20) << endl;   cout << \"5 GB = 5 x 2^30 = \" << (5UL << 30) << endl;   cout << \"7 TB = 7 x 2^40 = \" << (7UL << 40) << endl;   cout << \"9 TB = 9 x 2^50 = \" << (9UL << 50) << endl; }   ## Possible output //-- ## Possible output   ```txt 1 kB = 1 x 2^10 = 1024 3 MB = 3 x 2^20 = 3145728 5 GB = 5 x 2^30 = 5368709120 7 TB = 7 x 2^40 = 7696581394432 9 TB = 9 x 2^50 = 10133099161583616 1 kB = 1 x 2^10 = 1.024 3 MB = 3 x 2^20 = 3.145.728 5 GB = 5 x 2^30 = 5.368.709.120 7 TB = 7 x 2^40 = 7.696.581.394.432 9 TB = 9 x 2^50 = 10.133.099.161.583.616  ```  ## References //-- ## References  // clang-format off * [title](link) //-- * [title](link) * [title](link) //-- * [title](link) * [title](link) //-- * [title](link) // clang-format on  ","title":"C++ mega giga"},{"id":633,"location":"/til/cpp_yaml_01.html","tags":["C++","yaml"],"text":" ::: toc    ```cpp   YAML::Node config;    // Vai salvar na ordem de criação   config[\"key2\"] = 2;   config[\"key3\"] = 3.141592;   config[\"key1\"] = \"value1\";    config[\"sequence1\"].push_back(30);   config[\"sequence1\"].push_back(20);   config[\"sequence1\"].push_back(10);   config[\"sequence1\"].push_back(\"string\");   config[\"sequence1\"].push_back(50);    if (config[\"sequence1\"].IsSequence()) {     cout << \"sequence1 é uma sequência\" << endl;   }    if (config[\"key1\"].IsScalar()) {     cout << \"key1 é um escalar\" << endl;   }    if (config.IsMap()) {     cout << \"config é um mapa\" << endl;   }    config[\"aliaskey\"] = config[\"key1\"];    ofstream out(\"config.yaml\");   out << config;   out.close();    // ----------------------------------------------------------------------   //   // ----------------------------------------------------------------------    YAML::Node config2 = YAML::LoadFile(\"config.yaml\");    if (config2[\"key1\"] and config2[\"key2\"] and config2[\"key3\"]) {     cout << \"key1: \" << config2[\"key1\"].as<string>() << endl;     cout << \"key2: \" << config2[\"key2\"].as<int>() << endl;     cout << \"key3: \" << config2[\"key3\"].as<float>() << endl;   }    if (config2[\"sequence1\"] && config2[\"sequence1\"].IsSequence()) {     // para fazer o swap não usar alias     auto tmp = config2[\"sequence1\"][0].as<int>();     config2[\"sequence1\"][0] = config2[\"sequence1\"][2].as<int>();     config2[\"sequence1\"][2] = tmp;     cout << \"[2]: \" << config2[\"sequence1\"][2] << endl;      for (auto item : config2[\"sequence1\"]) {       cout << \"Sequence1 default: \" << item << endl;       try {         cout << \"Sequence1 string: \" << item.as<string>() << endl;         cout << \"Sequence1 int: \" << item.as<int>() << endl;       } catch (YAML::BadConversion &e) {         cout << \"exceção de conversão: \" << e.what()              << endl;  // deve ser disparada quando tentar converter \"string\" em                        // int       } catch (YAML::Exception &e) {         cout << \"exceção genérica: \" << e.what() << endl;       } catch (...) {         cout << \"N exceção: falha de conversão\" << endl;       }     }   }    if (config2[\"not-found-key\"]) {     cout << \"Key não encontrada foi encontrada!\" << endl;   } ```   ## Possible output   ```txt sequence1 é uma sequência key1 é um escalar config é um mapa key1: value1 key2: 2 key3: 3.14159 [2]: 30 Sequence1 default: 10 Sequence1 string: 10 Sequence1 int: 10 Sequence1 default: 20 Sequence1 string: 20 Sequence1 int: 20 Sequence1 default: 30 Sequence1 string: 30 Sequence1 int: 30 Sequence1 default: string Sequence1 string: string Sequence1 int: exceção de conversão: yaml-cpp: error at line 8, column 5: bad conversion Sequence1 default: 50 Sequence1 string: 50 Sequence1 int: 50  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ yaml_01"},{"id":634,"location":"/til/cpp_declspec_01.html","tags":["C++","declspec_01"],"text":" ::: toc   `__declspec` is a C++ language extension that allows programmers to specify various attributes or properties of functions and data types in a Microsoft Windows environment. This extension is used to indicate how a particular function or variable should be treated by the compiler or the operating system.  The `__declspec` extension provides a mechanism to specify various attributes of C++ entities that are specific to the Windows operating system, such as the calling convention, the export or import of functions and data, and the memory allocation model.  Understanding how to use `__declspec` can be beneficial for developers who need to write code that interacts with the Windows API, creates DLLs or shared libraries, or uses advanced memory management techniques. In this introduction, we will explore the different ways in which `__declspec` can be used in C++ programming to optimize the performance and functionality of software applications running on the Windows platform.  Não é uma extensão padrão e é válido somente para *clang / msvc / intel*.  Use as opções `-fdeclspec` ou `-fms-extensions` para habilitar  ## Get and Set  For example, consider a class with private data members that need to be accessed through getter and setter functions. To ensure that these functions are accessed efficiently, you can use `__declspec` with the appropriate attribute.   ```cpp class Person {  private:   int mAge{42};   public:   int getAge() const {     cout << \"Person::getAge() called here\" << endl;     return mAge;   }   void setAge(int value) {     cout << \"Person::setAge(\" << value << \") called here\" << endl;     mAge = value;   }    __declspec(property(get = getAge, put = setAge)) int age; }; ```   ```cpp   Person person;    cout << person.age << endl;  // Call person.getAge();   person.age = 20;             // Call person.setAge(20); ```   ## Possible output   ```txt Person::getAge() called here 42 Person::setAge(20) called here  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ declspec_01"},{"id":635,"location":"/til/cpp_heap_01.html","tags":["C++","heap","std::make_heap","std::pop_heap","std::push_heap"],"text":" ::: toc  ## Introduction  A Heap is a special Tree-based data structure in which the tree is a complete binary tree.  ## Operations  * **Heapify:** a process of creating a heap from an array. * **Insertion:** process to insert an element in existing heap time   complexity **O(log N)**. * **Deletion:** deleting the top element of the heap or the highest   priority element, and then organizing the heap and returning the   element with time complexity **O(log N)**. * **Peek:** to check or find the most prior element in the heap,   (max or min element for max and min heap).  ## Types  * **max heap**   * the key present at the root node must be **greatest** among the keys     present at all of it’s children   * the same property must be recursively true for all sub-trees in that     Binary Tree. * **min heap**   * the key present at the root node must be **minimum** among the keys     present at all of it’s children   * the same property must be recursively true for all sub-trees in that     Binary Tree. * **binomial heap** * **fibonacci heap** * **leftist heap** * **k-ary heap**  ## Indexes  * **parent of i = (i-1)/2** * **i left child = (2*i)+1** * **i right child = (2*i)+2**  ![Max heap in tree representation and squashed on array.](/til/cpp_heap_01.svg)    ```cpp   auto print = [](auto label, auto numbers) {     fmt::print(\"{:20} \", label);     for (const auto& number : numbers) {       fmt::print(\"{} \", number);     }     if (std::ranges::is_heap(numbers)) {       fmt::print(\" IS HEAP\");     } else {       fmt::print(\" IS NOT HEAP\");     }     fmt::print(\"\\n\");   }; ```    ```cpp   // Input   std::vector<int> numbers{1, 2, 3, 4, 5, 6, 7, 8, 9};   print(\"numbers\", numbers);    // Construct max heap   std::make_heap(begin(numbers), end(numbers));   std::ranges::make_heap(numbers);   print(\"make_heap max\", numbers);   draw_heap(numbers);    // Pop   std::pop_heap(begin(numbers), end(numbers));   print(\"pop_heap\", numbers);   auto n = numbers.back();   numbers.pop_back();   draw_heap(numbers);    // Push   n = 42;   print(\"numbers.pop_back\", numbers);   numbers.push_back(n);   print(\"numbers.push_back\", numbers);   std::push_heap(begin(numbers), end(numbers));   print(\"push_heap\", numbers);   draw_heap(numbers);    // Construct min heap   std::make_heap(begin(numbers), end(numbers), std::greater<>{});   print(\"make_heap min\", numbers);   draw_heap(numbers); ```   Draw heap from <https://en.cppreference.com/w/cpp/algorithm/ranges/make_heap>   ```cpp void draw_heap(auto const& v) {   auto bails = [](int n, int w) {     auto b = [](int w) {       out(\"┌\"), out(\"─\", w), out(\"┴\"), out(\"─\", w), out(\"┐\");     };     if (!(n /= 2)) return;     for (out(' ', w); n-- > 0;) b(w), out(' ', w + w + 1);     out('\\n');   };   auto data = [](int n, int w, auto& first, auto last) {     for (out(' ', w); n-- > 0 && first != last; ++first)       out(*first), out(' ', w + w + 1);     out('\\n');   };   auto tier = [&](int t, int m, auto& first, auto last) {     const int n{1 << t};     const int w{(1 << (m - t - 1)) - 1};     bails(n, w), data(n, w, first, last);   };   const int m{static_cast<int>(std::ceil(std::log2(1 + v.size())))};   auto first{v.cbegin()};   for (int i{}; i != m; ++i) {     tier(i, m, first, v.cend());   } } ```    ## Possible output   ```txt numbers              1 2 3 4 5 6 7 8 9  IS NOT HEAP make_heap max        9 8 7 4 5 6 3 2 1  IS HEAP        9                   ┌───┴───┐           8       7         ┌─┴─┐   ┌─┴─┐     4   5   6   3    ┌┴┐ ┌┴┐ ┌┴┐ ┌┴┐  2 1  pop_heap             8 5 7 4 1 6 3 2 9  IS NOT HEAP        8                   ┌───┴───┐           5       7         ┌─┴─┐   ┌─┴─┐     4   1   6   3    ┌┴┐ ┌┴┐ ┌┴┐ ┌┴┐  2  numbers.pop_back     8 5 7 4 1 6 3 2  IS HEAP numbers.push_back    8 5 7 4 1 6 3 2 42  IS NOT HEAP push_heap            42 8 7 5 1 6 3 2 4  IS HEAP        42                   ┌───┴───┐           8       7         ┌─┴─┐   ┌─┴─┐     5   1   6   3    ┌┴┐ ┌┴┐ ┌┴┐ ┌┴┐  2 4  make_heap min        1 2 3 4 8 6 7 5 42  IS NOT HEAP        1                   ┌───┴───┐           2       3         ┌─┴─┐   ┌─┴─┐     4   8   6   7    ┌┴┐ ┌┴┐ ┌┴┐ ┌┴┐  5 42   ```  ## References  * ▶️[CppCon 2018: Jonathan Boccara “105 STL Algorithms in Less Than an Hour”](https://www.youtube.com/watch?v=2olsGf6JIkU) * [Heap Data Structure](https://www.geeksforgeeks.org/heap-data-structure/)  ","title":"C++ heap"},{"id":636,"location":"/til/cpp_priority_queue_01.html","tags":["C++","std::priority_queue","std::set","std::multiset"],"text":" ::: toc  ::: fixme Incomplete  Since both `std::priority_queue` and `std::set` (and `std::multiset`) are data containers that store elements and allow you to access them in an *ordered* fashion, and have same insertion complexity **O(log N)**, what are the advantages of using one over the other (or, what kind of situations call for the one or the other?)?  While I know that the underlying structures are different, I am not as much interested in the difference in their implementation as I am in the comparison their performance and suitability for various uses.  Note: I know about the no-duplicates in a set. That's why I also mentioned `std::multiset` since it has the exactly same behavior as the `std::set` but can be used where the data stored is allowed to compare as equal elements.  `std::priority_queue` allows to do the following:  * Insert an element **O(log N)** * Get the smallest element **O(1)** * Erase the smallest element **O(log N)**  while `std::set` has more possibilities:  * Insert any element **O(log N)** and the constant is greater than in   `std::priority_queue` * Find any element **O(log N)** * Find an element, `>=` than the one your are looking for **O(log N)**   (lower_bound) * Erase any element **O(log N)** * Erase any element by its iterator **O(1)** * Move to previous/next element in sorted order **O(1)** * Get the smallest element **O(1)** * Get the largest element **O(1)**  A priority queue only gives you access to one element in sorted order - i.e., you can get the highest priority item, and when you remove that, you can get the next highest priority, and so on. A priority queue also allows duplicate elements, so it's more like a multiset than a set.  [Edit: As @Tadeusz Kopec pointed out, building a heap is also linear on the number of items in the heap, where building a set is O(N log N) unless it's being built from a sequence that's already ordered (in which case it is also linear).]  A set allows you full access in sorted order, so you can, for example, find two elements somewhere in the middle of the set, then traverse in order from one to the other.  set/multiset are generally backed by a binary tree. http://en.wikipedia.org/wiki/Binary_tree  priority_queue is generally backed by a heap. http://en.wikipedia.org/wiki/Heap_(data_structure)  So the question is really when should you use a binary tree instead of a heap?  Both structures are laid out in a tree, however the rules about the relationship between anscestors are different.  We will call the positions P for parent, L for left child, and R for right child.  In a binary tree L < P < R.  In a heap P < L and P < R  So binary trees sort \"sideways\" and heaps sort \"upwards\".  So if we look at this as a triangle than in the binary tree L,P,R are completely sorted, whereas in the heap the relationship between L and R is unknown (only their relationship to P).  This has the following effects:  If you have an unsorted array and want to turn it into a binary tree it takes O(nlogn) time. If you want to turn it into a heap it only takes O(N) time, (as it just compares to find the extreme element)  Heaps are more efficient if you only need the extreme element (lowest or highest by some comparison function). Heaps only do the comparisons (lazily) necessary to determine the extreme element.  Binary trees perform the comparisons necessary to order the entire collection, and keep the entire collection sorted all-the-time.  Heaps have constant-time lookup (peek) of lowest element, binary trees have logarithmic time lookup of lowest element.  ```cpp    // template <class T, class Container = vector<T>,  class Compare =   // less<typename Container::value_type> > class priority_queue; ```   ## Possible output   ```txt  ```  ## References  * [Difference between std::set and std::priority_queue](https://stackoverflow.com/questions/10141841/difference-between-stdset-and-stdpriority-queue) * [title](link) * [title](link)  ","title":"C++ std::set std::priority_queue"},{"id":637,"location":"/til/cpp_version.html","tags":["C++","version"],"text":" ::: toc    ```cpp #include <iostream>  int main() {   switch( __cplusplus ) {   case 202002L:     std::cout << \"C++20\\n\";     break;   case 201703L:     std::cout << \"C++17\\n\";     break;   case 201402L:     std::cout << \"C++14\\n\";     break;   case 201103L:     std::cout << \"C++11\\n\";     break;   case 199711L:     std::cout << \"C++98\\n\";     break;   default:     std::cout << \"pre-standard C++: \" << __cplusplus << \"\\n\";   }   return 0; } ```   ## Possible output   ```txt C++20  ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ version"},{"id":638,"location":"/til/compiler_explorer.html","tags":["compiler-explorer","godbolt"],"text":"::: toc  ## Introduction  Compiler Explorer, also known as [Godbolt](https://godbolt.org/), is a popular online tool used by developers to explore how code is compiled by different compilers and how optimization flags impact the generated machine code. It provides a user-friendly interface that allows developers to write code in various programming languages, such as C++, Rust, and Go, and view the corresponding assembly code produced by different compilers. With Compiler Explorer, developers can easily experiment with different compiler options, explore how their code is optimized, and compare the performance of different compiler versions. The tool is widely used by developers to optimize their code, understand how compilers work, and learn about new optimization techniques. In this age of performance optimization, Compiler Explorer is a valuable resource for developers seeking to improve the performance of their code.  ## References  * [Um tour pelo Compiler Explorer](https://youtu.be/5p-fmh2CAGI) ","title":"Compiler Explorer"},{"id":639,"location":"/til/cpp_partial_sort_01.html","tags":["C++","std::partial_sort"],"text":" ::: toc  ## Introduction  `std::partial_sort` algorithms are intended to be used for **small constant numbers** of `[first, middle)` selected elements.  ::: Note The order of the remaining elements in the range [middle, last) is unspecified.   @startpikchr images/partial_sort_01.pikchr /til/cpp_partial_sort_01.svg boxht = 0.3 boxwid = 0.3 B5: box \"5\" fill yellow B7: box \"7\" fill yellow B4: box \"4\" fill yellow B2: box \"2\" fill blue B8: box \"8\" fill green B6: box \"6\" fill green B1: box \"1\" fill blue B9: box \"9\" fill green B0: box \"0\" fill blue B3: box \"3\" fill green move from 3rd box.s down box \"2\" fill blue arrow from 4th box.s to 11th box.n move from 1st box.s down 1.2 B20: box \"0\" fill blue right; B21: box \"1\" fill blue B22: box \"2\" fill blue move from B2.s down 1.5 B27: box \"7\" fill yellow; right B28: box \"8\" fill green B26: box \"6\" fill green B25: box \"5\" fill yellow B29: box \"9\" fill green B24: box \"4\" fill yellow B23: box \"3\" fill green arrow from 11th box to B22 chop arrow from B3 to B23 chop arrow from B9 to B29 chop arrow from B6 to B26 chop arrow from B8 to B28 chop arrow <- from 11th box.w left \"3rd\" \"position\" text \"3rd element\" with .s at B2.n + (0,0.2) arrow from last text to B2.n chop text \"[0, 3)\" big big at B20.w - (0.5,0) @endpikchr   ```cpp   auto print = [](auto label, auto numbers) {     fmt::print(\"{:20} \", label);     for (const auto& number : numbers) {       fmt::print(\"{:2} \", number);     }     fmt::print(\"\\n\");   }; ```    ```cpp   std::vector<int> numbersRef{5,  7,  4,  2,  8,  6,  1,  9,  0, 3,                               18, 15, 14, 10, 13, 11, 12, 17, 16};   print(\"numbersRef\", numbersRef);    // Ascendent order   auto numbers = numbersRef;   std::partial_sort(begin(numbers), begin(numbers) + 2, end(numbers));   print(\"partial_sort [0, 2)\", numbers);    numbers = numbersRef;   std::partial_sort(begin(numbers), begin(numbers) + 3, end(numbers));   print(\"partial_sort [0, 3)\", numbers);    numbers = numbersRef;   std::partial_sort(begin(numbers), begin(numbers) + 4, end(numbers));   print(\"partial_sort [0, 4)\", numbers);    // Descendent order   numbers = numbersRef;   std::partial_sort(begin(numbers), begin(numbers) + 3, end(numbers),                     std::greater<>{});   print(\"partial_sort [0, 3)D\", numbers);    numbers = numbersRef;   std::partial_sort(begin(numbers) + 3, begin(numbers) + 8, end(numbers));   print(\"partial_sort [3, 8)\", numbers);  ```    ## Possible output   ```txt numbersRef            5  7  4  2  8  6  1  9  0  3 18 15 14 10 13 11 12 17 16  partial_sort [0, 2)   0  1  7  5  8  6  4  9  2  3 18 15 14 10 13 11 12 17 16  partial_sort [0, 3)   0  1  2  7  8  6  5  9  4  3 18 15 14 10 13 11 12 17 16  partial_sort [0, 4)   0  1  2  3  8  7  6  9  5  4 18 15 14 10 13 11 12 17 16  partial_sort [0, 3)D 18 17 16  2  4  5  1  6  0  3  7  8  9 10 13 11 12 14 15  partial_sort [3, 8)   5  7  4  0  1  2  3  6  9  8 18 15 14 10 13 11 12 17 16   ```  ## References  * [title](link) * [title](link) * [title](link)  ","title":"C++ partial_sort"},{"id":640,"location":"/til/cpp_partition_01.html","tags":["C++","partition"],"text":" ::: toc     ```cpp   auto print = [](auto label, auto beg, auto end) {     fmt::print(\"{:20} \", label);     auto it = beg;     while (it != end) {       fmt::print(\"{:2} \", *it);       it = std::next(it);     }     fmt::print(\"\\n\");   }; ```    ```cpp   auto is_divisible_by_3 = [](int i) { return i % 3 == 0; };   std::vector<int> numbers{5,  7,  4,  2,  8,  6,  1,  9,  0, 3,                            18, 15, 14, 10, 13, 11, 12, 17, 16};   print(\"numbers\", std::begin(numbers), std::end(numbers));   fmt::print(\"Are numbers partitioned? {}\\n\",              std::is_partitioned(std::begin(numbers), std::end(numbers),                                  is_divisible_by_3));    auto firstElementOfSecondGroup =       std::partition(begin(numbers), end(numbers), is_divisible_by_3);   print(\"numbers\", std::begin(numbers), std::end(numbers));   fmt::print(\"Are numbers partitioned? {}\\n\",              std::is_partitioned(std::begin(numbers), std::end(numbers),                                  is_divisible_by_3));    print(\"Side A\", begin(numbers), firstElementOfSecondGroup);   print(\"Side B\", firstElementOfSecondGroup, std::end(numbers)); ```    ## Possible output   ```txt numbers               5  7  4  2  8  6  1  9  0  3 18 15 14 10 13 11 12 17 16  Are numbers partitioned? false numbers              12 15 18  3  0  6  9  1  8  2  4  7 14 10 13 11  5 17 16  Are numbers partitioned? true Side A               12 15 18  3  0  6  9  Side B                1  8  2  4  7 14 10 13 11  5 17 16   ```  ## References  * [cppreference std::is_partitioned](https://en.cppreference.com/w/cpp/algorithm/is_partitioned) * [cppreference std::partition](https://en.cppreference.com/w/cpp/algorithm/partition)  ","title":"C++ partition"}]