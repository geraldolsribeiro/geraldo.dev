@startuml ../../static/img/corba-01.png
[Data.idl]
[Data.idl] ..> [Data.hh] : <<realizes>>
[Data.idl] ..> [DataSK.cc] : <<realizes>>

[Data.hh] <. [DataSK.cc]
[Data.hh] <.. [CServiceA_i.hh]
[CServiceA_i.hh] <. [CServiceA_i.cc]
[Data.hh] <.. [CRequestServiceA.hh]
[CRequestServiceA.hh] <. [CRequestServiceA.cc]
[CServiceA_i.hh] <.. [Server.cc]
[CRequestServiceA.hh] <.. [Client.cc]


[DataSK.cc] <-- [client]
[Client.cc] <-- [client]
[CRequestServiceA.cc] <- [client]
[CRequestServiceA.cc] -[hidden] [Client.cc]


[DataSK.cc] <-- [server]
[Server.cc] <-- [server]
[CServiceA_i.cc] <- [server]
[CServiceA_i.cc] -[hidden] [Server.cc]
@enduml


@startuml ../../static/img/corba-client.png
autoactivate on
actor client
participant "CRequestServiceA" as CRequestServiceA
participant "CORBA" as CORBA
participant "ORB_var" as ORB_var
participant "Object_var" as Object_var
participant "CosNaming::NamingContext" as NamingContext
participant "CosNaming::Name" as Name
participant "NamingContext_var" as NamingContext_var
participant "ServiceA" as ServiceA
participant "Data::ServiceA_var" as m_Data

create CRequestServiceA
client -> CRequestServiceA : new

== Construtor ==

CRequestServiceA -> CORBA : ORB_init( argc, argv )
create ORB_var
CORBA -> ORB_var : new
return
return orb

CRequestServiceA -> ORB_var : resolve_initial_reference( "OmniNameService" )
create Object_var
ORB_var -> Object_var : new
return
return obj

CRequestServiceA -> NamingContext : _narrow( obj.in() )
create NamingContext_var
NamingContext -> NamingContext_var : new
return
return nc

create Name
CRequestServiceA -> Name : new
return _corbaCosName

CRequestServiceA -> NamingContext_var : resolve( _corbaCosName )
return obj1

CRequestServiceA -> ServiceA : _narrow( obj1.in() )
create m_Data
ServiceA -> m_Data : new
return
return m_Data
return

== Acesso Ã s rotinas ==

client -> CRequestServiceA : RequestServiceARoutineA()
CRequestServiceA -> m_Data : CallServiceARoutineA( num1, num2, retnum )
return
return


client -> CRequestServiceA : RequestServiceARoutineB()
CRequestServiceA -> m_Data : CallServiceARoutineB( num1, num2 )
return
return

@enduml

# vim: ft=plantuml
