<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on geraldo.dev</title>
    <link>https://geraldo.dev/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on geraldo.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>&amp;copy; 2019 Geraldo Ribeiro</copyright>
    <lastBuildDate>Sat, 04 Jan 2020 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://geraldo.dev/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;: array</title>
      <link>https://geraldo.dev/posts/cpp-array/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/cpp-array/</guid>
      <description>Características  é um wrapper para o array do C array oferece uma sintaxe mais amigável comparada com a array do C pode ser passado e retornado por valor pode ser passado e retornado por referência uso mais conveniente de size uso mais conveniente de iteradores STL possui exatamente a mesma performace da array do C  Array vs Vector  array é estático e possui tamanho definido em tempo de compilação vector é dinâmico e é alocado no heap  Exemplos 1#include &amp;lt;algorithm&amp;gt;2#include &amp;lt;array&amp;gt;3#include &amp;lt;iostream&amp;gt;4 5using namespace std; 6 7int main( int argc, char **argv ) 8{ 9 //{{{ 10 auto print = []( const auto &amp;amp;arr ) { 11 cout &amp;lt;&amp;lt; &amp;#34;{ &amp;#34;; 12 for( const auto &amp;amp;x : arr ) { 13 cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;&amp;#34;; 14 } 15 cout &amp;lt;&amp;lt; &amp;#34;}&amp;#34; &amp;lt;&amp;lt; endl; 16 }; 17 18 array&amp;lt;int, 3&amp;gt; a = {2, 1, 3}; 19 int c[3] = {2, 1, 3}; // old C style 20 21 sort( a.</description>
    </item>
    
    <item>
      <title>CORBA</title>
      <link>https://geraldo.dev/posts/corba/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/corba/</guid>
      <description>Introdução O que é CORBA?  é o acrônimo para Common Object Request Broker Architecture é um framework para construção de sistemas distribuídos orientados a objetos é multiplataforma é independente de linguagem é um padrão aberto e extensível definido pela Object Management Group clientes e servidores estão em diferentes máquinas programas clientes enviam mensagens para servidores remotos como se este estivesse locais (location transparency)  O que é a OMG?  www.</description>
    </item>
    
    <item>
      <title>Álgebra linear com Armadillo</title>
      <link>https://geraldo.dev/posts/armadillo/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/armadillo/</guid>
      <description>$$ A_{m,n} = \begin{pmatrix} a_{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n} \\ a_{2,1} &amp; a_{2,2} &amp; \cdots &amp; a_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{m,1} &amp; a_{m,2} &amp; \cdots &amp; a_{m,n} \end{pmatrix} $$  Armadillo é uma biblioteca de álgebra linear para C++ rápida e fácil de usar, com sintaxe parecida com a do Matlab.
Provê suporte para:
 vetores (tensores de primeira ordem) matrizes (tensores de segunda ordem) cubos (tensores de terceira ordem) matrizes densas e esparsas números inteiros, de ponto flutuante e complexos decomposição (via LAPACK) multi-thread (Intel MKL ou OpenBLAS) avaliador de expressão baseado em meta-programação paralelização (via OpenMP)  Principais usos:</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Lambda</title>
      <link>https://geraldo.dev/posts/cpp-lambda/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/cpp-lambda/</guid>
      <description>Funções de primeira classe Em programação funcional funções são cidadães de primeira classe, o que significa que elas se comportam com dados e suportam quaisquer operações que a linguagem permita.
Algumas características das funções de primeira classe são:
 atribuir uma função a uma variável passar uma função como parâmetro para outra função retornar a função como valor de outra função armazenar a função em uma estrutura de dados  Lambdas Lambdas são funções anônimas (sem um nome) definidas in-place.</description>
    </item>
    
    <item>
      <title>Feed Forward Neural Network no debian com mlpack</title>
      <link>https://geraldo.dev/posts/mlpack-feed-forward-neural-network-no-debian/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/mlpack-feed-forward-neural-network-no-debian/</guid>
      <description>Este artigo mostra como criar uma rede neural simples no Debian stable utilizando a mlpack. A mlpack é uma biblioteca popular e de alta performance para aprendizado de máquina em C++.
Versões do mlpack disponíveis do Debian As versões disponíveis no momento da escrita deste artigo são:
   Versão do Debian Versão do mlpack Arquiteturas     jessie (oldstable) 1.0.10-1 amd64 armel armhf i386   stretch (stable) 2.</description>
    </item>
    
  </channel>
</rss>