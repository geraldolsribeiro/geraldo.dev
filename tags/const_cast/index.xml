<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>const_cast on geraldo.dev</title>
    <link>https://geraldo.dev/tags/const_cast/</link>
    <description>Recent content in const_cast on geraldo.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>&amp;copy; 2019-2020 Geraldo Ribeiro</copyright>
    <lastBuildDate>Fri, 10 Jan 2020 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://geraldo.dev/tags/const_cast/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43; - const_cast</title>
      <link>https://geraldo.dev/posts/cpp-const-cast/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/cpp-const-cast/</guid>
      <description>O operadorconst_cast é utilizado para:
 adicionar um modificador const a um tipo remover um modificador const de um tipo adicionar um modificador volatile a um tipo remover um modificador volatile de um tipo  1#include &amp;lt;iostream&amp;gt;2using namespace std; 3 4void f(int* p) { 5 cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; endl; 6} 7 8int main(void) { 9 const int a = 10; 10 const int* b = &amp;amp;a; 11 12 // A função f() espera receber um int* e não um const int* 13 // f(b); 14 15 int* c = const_cast&amp;lt;int*&amp;gt;(b); 16 f(c); 17 18 // Lvalue é const 19 // *b = 20; 20 21 // Comportamento indefinido 22 // *c = 30; 23 24 int a1 = 40; 25 const int* b1 = &amp;amp;a1; 26 int* c1 = const_cast&amp;lt;int*&amp;gt;(b1); 27 28 // o inteiro a1 referenciado por c1 não foi declarado como const 29 *c1 = 50; 30 31 return 0; 32} Referências  [const_cast operator syntax(https://www.</description>
    </item>
    
  </channel>
</rss>