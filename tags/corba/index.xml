<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>corba on geraldo.dev</title>
    <link>https://geraldo.dev/tags/corba/</link>
    <description>Recent content in corba on geraldo.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>&amp;copy; 2019 Geraldo Ribeiro</copyright>
    <lastBuildDate>Fri, 27 Dec 2019 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://geraldo.dev/tags/corba/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CORBA</title>
      <link>https://geraldo.dev/posts/corba/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/corba/</guid>
      <description>Introdução  clientes e servidores estão em diferentes máquinas programas clientes enviam mensagens para servidores remotos como se este estivesse locais (location transparency)  ORB - Object Request Broker  é o núcleo da Object Management Architecture integra:  diferentes linguagens diferentes arquiteturas diferentes sistemas operacionais   é responsável por:  encontrar uma implementação para uma requisição preparar implementações para receber requisições comunicar dados das requisições    Clientes  possuem referências para objetos e invocam operações nestes objetos conhecem apenas a interface dos objetos do servidor não conhecem a implementação dos objetos nem os adaptadores utilizados por estas implementações invocam interfaces definidas por uma IDL invocam as implementações através de:  proxies (IDL generated stubs) DII (Dynamic Invocation Interface)    Servidores  se registram no ORB se disponibilizam para aceitar requisições implementam uma IDL  IDL  provê interfaces independente de linguagem e sistema operacional é puramente declarativa (não provê detalhes de implementação) é fortemente tipada especificações podem ser escritas e invocadas em qualquer linguagem  IDL Features  modules interfaces operations attributes inheritance basic types arrays sequences struct, enum, union typedef consts exceptions  Tipos básicos  float double long short unsigned long unsigned short char boolean octet any  Direções dos parâmetros  in - do cliente para o servidor out - do servidor para o cliente inout - do cliente para o servidor e de volta para o cliente  Exceções Interface Bank { exception Reject { string reason; }; exception TooMany {}; Account newAccount( in string name ) raises (Reject, TooMany); }; Operações oneway Interface Account { oneway void notice( in string notice ); };  não bloqueantes não aceitam parâmetros out ou inout não lançam exceções (não aceitam raise)  Estruturas struct PersonalDetails { string name; short age; }; interface Bank { PersonalDetails getPerDet(in string name); }; Arrays  podem ser multidimensionais precisam ter tamanho fixo (conhecido em tempo de definição)  Account bankAccounts[100]; short matrix[10][20]; // 2D array Constantes Interface Bank { const long MaxAccounts = 10000; }; Contantes dos tipos long, float e string podem ser declarada.</description>
    </item>
    
  </channel>
</rss>