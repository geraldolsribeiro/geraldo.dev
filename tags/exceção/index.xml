<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>exceção on geraldo.dev</title>
    <link>https://geraldo.dev/tags/exce%C3%A7%C3%A3o/</link>
    <description>Recent content in exceção on geraldo.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>&amp;copy; 2006-2020 Geraldo Ribeiro</copyright>
    <lastBuildDate>Tue, 12 Nov 2019 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://geraldo.dev/tags/exce%C3%A7%C3%A3o/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testando exceções com junit</title>
      <link>https://geraldo.dev/posts/junit-excecao/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/junit-excecao/</guid>
      <description>Este artigo apresenta uma visão suscinta sobre testes de exceção com JUnit usando o idioma try/fail/catch, o parâmetro expected da anotação @Test e a anotação @Rule. Cada um dos métodos apresenta prós e contras.
Usando bloco try/catch 1@Test 2public void example1() { 3 try { 4 find(&amp;#34;função que deveria lançar uma exceção&amp;#34;); 5 fail(); 6 // Ponto que nunca deveria ser alcançado quando o teste passar 7 } catch (NotFoundException e) { 8 assertThat(e.</description>
    </item>
    
  </channel>
</rss>