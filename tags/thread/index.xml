<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thread on geraldo.dev</title>
    <link>https://geraldo.dev/tags/thread/</link>
    <description>Recent content in Thread on geraldo.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>&amp;copy; 2019-2020 Geraldo Ribeiro</copyright>
    <lastBuildDate>Tue, 23 Jun 2020 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://geraldo.dev/tags/thread/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Thread em C&#43;&#43;</title>
      <link>https://geraldo.dev/posts/cpp-thread/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/cpp-thread/</guid>
      <description>Thread com função sem argumentos void foo() { printf( &amp;#34;Corpo da função: %d\n&amp;#34;, this_thread::get_id() ); } void run () { thread t1( foo ); // Algum processamento...  t1.join(); }  Thread com classe callable classCallableClass { public: void operator()() { printf( &amp;#34;Corpo da função: %d\n&amp;#34;, this_thread::get_id() ); } }; void run() { CallableClass obj; thread t2( obj ); // Algum processamento...  t2.join(); }  Thread com lambda // Sintaxe // [capture-list]( params ) /*mutable*/ /*constexpr*/ /*exception attribute*/ -&amp;gt; ret { body } // [capture-list]( params ) -&amp;gt; ret { body } // [capture-list]( params ) { body } // [capture-list]{ body }  void run() { thread t3( []{ printf( &amp;#34;Corpo da função: %d\n&amp;#34;, this_thread::get_id() ); } ); // Algum processamento.</description>
    </item>
    
  </channel>
</rss>