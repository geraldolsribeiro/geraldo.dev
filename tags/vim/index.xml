<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vim on geraldo.dev</title>
    <link>https://geraldo.dev/tags/vim/</link>
    <description>Recent content in vim on geraldo.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>&amp;copy; 2019-2020 Geraldo Ribeiro</copyright>
    <lastBuildDate>Wed, 30 Dec 2020 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://geraldo.dev/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VIM - Explorer</title>
      <link>https://geraldo.dev/posts/vim-explorer/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-explorer/</guid>
      <description>1:Explore &amp;#34; Lista os arquivo2:Sex &amp;#34; Lista com split3:Vex &amp;#34; Lista Vertical com splitComando dentro da árvore  % cria um novo arquivo d cria um diretório R renomeia um arquivo D deleta um arquivo  Referências  The file explorer  </description>
    </item>
    
    <item>
      <title>Dígrafos no VIM</title>
      <link>https://geraldo.dev/posts/vim-digraphs/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-digraphs/</guid>
      <description>Em modo de edição teclar Ctrl+K seguido de dois caracteres:
   Dígrafo Caractere Descrição     SE § SEction   DG ° DeGree   -a ª    -o º    Co © Copyright   PI ¶ Pilcrow   .M · Meddle dot   My µ Micro   +- ±    0S ⁰ 0 superescrito   1S ¹ 1 superescrito   2S ² 2 superescrito   3S ³ 3 superescrito   4S ⁴ 4 superescrito   9S ⁹ 9 superescrito   0s ₀ 0 subescrito   1s ₁ 1 subescrito   2s ₂ 2 subescrito   9s ₉ 9 subescrito   14 ¼    12 ½    34 ¾    o/ ø    O/ Ø    -: ÷    A* Α Alfa (grego)   B* Β Beta (grego)   G* Γ Gama (grego)   D* Δ Delta (grego)   H* Θ Teta (grego)   L* Λ Lambda (grego)   S* Σ Sigma (grego)   F* Φ Phi (grefo)   Q* Ψ Psi (grego)   W* Ω Omega (grego)   a* α Alga (grego)   b* β Beta (grego)   g* γ Gama (greto)   d* δ Delta (grego)   e* ε Epslon (grego)   p* π Pi (grego)   -3 ― Barra horizontal   :X ※ Marca de referência   Eu € Euro   oC ℃ Graus Célsius   TM ™ Trademark   1R Ⅰ 1 romano   2R Ⅱ 2 romano   3R Ⅲ 3 romano   4R Ⅳ 4 romano   5R Ⅴ 5 romano   9R Ⅸ 9 romano   aR Ⅹ 10 romano   bR Ⅺ 11 romano   cR Ⅻ 12 romano   1r ⅰ 1 romano   2r ⅱ 2 romano   &amp;lt;- ←    -&amp;gt; →    -v ↓    -!</description>
    </item>
    
    <item>
      <title>Editando arquivos com ex / vim</title>
      <link>https://geraldo.dev/posts/ex/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/ex/</guid>
      <description>1ex foo.txt &amp;lt;&amp;lt;-EOF 2g/^\s*$/d 3%s/^/[/ 4%s/\(.*\)\(\s\+\)\(.*\)/\3\2\1 5%s/$/]/ 6%s/design/test/ 7wq &amp;#34; Update changes and quit. 8EOF  o comando ex é equivalente a vim -E. acrescente -V1 para saída mais verbosa  Exemplo uma linha:
1ex +&amp;#34;g/^\s*$/d&amp;#34; +&amp;#34;%s/^/[/&amp;#34; +&amp;#34;%s/design/test/&amp;#34; -cwq foo.txt Referências  How to run a series of vim commands from command prompt  </description>
    </item>
    
    <item>
      <title>Copiar o nome do arquivo atual</title>
      <link>https://geraldo.dev/posts/vim-copiar-nome-do-arquivo/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-copiar-nome-do-arquivo/</guid>
      <description>Ao preparar relatórios por vezes preciso obter o caminho completo do arquivo que estou analisando. Uma maneira prática de obter esse caminho é colar o conteúdo do registrador % e recortá-lo para a área de transferência com dd:
&amp;#34;%pdd Para o comando acima copiar diretamente para a área de transferência do desktop é necessário a seguinte configuração no .vimrc:
1set clipboard=unnamedplusCaso contrário seria necessário especificar o registrador &amp;quot;+ e o comando ficaria um pouquinho maior:</description>
    </item>
    
    <item>
      <title>Autocompletar no VIM</title>
      <link>https://geraldo.dev/posts/vim-complete/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-complete/</guid>
      <description>C-x C-u C-x C-n C-x C-p Referências  []()  </description>
    </item>
    
    <item>
      <title>Vim: executar macro em todos os buffers</title>
      <link>https://geraldo.dev/posts/vim-executar-macro-em-todos-os-buffers/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 -0300</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-executar-macro-em-todos-os-buffers/</guid>
      <description>:bufdo execute &amp;quot;normal @a&amp;quot; | write Referências  Run a macro in all buffers in vim  </description>
    </item>
    
    <item>
      <title>Como repetir texto no vim</title>
      <link>https://geraldo.dev/posts/vim-inserir-caracteres-repetidos/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-inserir-caracteres-repetidos/</guid>
      <description>Para fazer a linha do título acima &amp;lt;esc&amp;gt;70i=&amp;lt;esc&amp;gt;&amp;lt;esc&amp;gt;
1 &amp;lt;esc&amp;gt;Nic&amp;lt;esc&amp;gt;&amp;lt;esc&amp;gt;N número de repetições c caractere ou palavra
1&amp;lt;esc&amp;gt;5iX&amp;lt;esc&amp;gt;&amp;lt;esc&amp;gt;2XXXXX34&amp;lt;esc&amp;gt;5iX Y &amp;lt;esc&amp;gt;&amp;lt;esc&amp;gt;5X Y X Y X Y X Y X Y </description>
    </item>
    
    <item>
      <title>Compilar Vim 8</title>
      <link>https://geraldo.dev/posts/vim-compilar-vim-8/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-compilar-vim-8/</guid>
      <description>cd ~/git git clone https://github.com/vim/vim.git cd vim ./configure --with-compiledby=&amp;quot;Geraldo Ribeiro &amp;lt;geraldolsribeiro@gmail.com&amp;gt;&amp;quot; \ --with-features=huge \ --enable-gui=auto \ --with-x \ --enable-rubyinterp \ --with-ruby-command=/usr/bin/ruby \ --enable-perlinterp \ --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config \ --enable-fontset \ --enable-cscope \ --enable-gtk2-check \ --enable-gnome-check make </description>
    </item>
    
    <item>
      <title>Fast Search in Vim</title>
      <link>https://geraldo.dev/posts/vim-fast-search-vim/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-fast-search-vim/</guid>
      <description>Projects can be searched for specific text within Vim:
:grep sometext Can we grep faster?
Override to use The Silver Searcher grep is a built-in command of Vim. By default, it will use the system&#39;s grep command. We can overwrite it to use The Silver Searcher&amp;lsquo;s ag command by putting this in our ~/.vimrc:
1&amp;#34; The Silver Searcher2if executable(&amp;#39;ag&amp;#39;)3&amp;#34; Use ag over grep4 set grepprg=ag\ --nogroup\ --nocolor56&amp;#34; Use ag in CtrlP for listing files.</description>
    </item>
    
    <item>
      <title>Formatar JSON no Vim</title>
      <link>https://geraldo.dev/posts/vim-formatar-json/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-formatar-json/</guid>
      <description>Antes: Um exemplo de json colapsado 1{ &amp;#34;quiz&amp;#34;: { &amp;#34;sport&amp;#34;: { &amp;#34;q1&amp;#34;: { &amp;#34;question&amp;#34;: &amp;#34;Which one is correct team name in NBA?&amp;#34;, 2&amp;#34;options&amp;#34;: [ &amp;#34;New York Bulls&amp;#34;, &amp;#34;Los Angeles Kings&amp;#34;, &amp;#34;Golden State Warriros&amp;#34;, 3&amp;#34;Huston Rocket&amp;#34; ], &amp;#34;answer&amp;#34;: &amp;#34;Huston Rocket&amp;#34; } }, &amp;#34;maths&amp;#34;: { &amp;#34;q1&amp;#34;: 4{ &amp;#34;question&amp;#34;: &amp;#34;5 + 7 = ?&amp;#34;, &amp;#34;options&amp;#34;: [ &amp;#34;10&amp;#34;, &amp;#34;11&amp;#34;, &amp;#34;12&amp;#34;, &amp;#34;13&amp;#34; ], &amp;#34;answer&amp;#34;: 5&amp;#34;12&amp;#34; }, &amp;#34;q2&amp;#34;: { &amp;#34;question&amp;#34;: &amp;#34;12 - 8 = ?&amp;#34;, &amp;#34;options&amp;#34;: [ &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;4&amp;#34; ], 6&amp;#34;answer&amp;#34;: &amp;#34;4&amp;#34; } } } } Depois: endentado 1{ 2 &amp;#34;quiz&amp;#34;: { 3 &amp;#34;maths&amp;#34;: { 4 &amp;#34;q1&amp;#34;: { 5 &amp;#34;answer&amp;#34;: &amp;#34;12&amp;#34;, 6 &amp;#34;options&amp;#34;: [ 7 &amp;#34;10&amp;#34;, 8 &amp;#34;11&amp;#34;, 9 &amp;#34;12&amp;#34;, 10 &amp;#34;13&amp;#34; 11 ], 12 &amp;#34;question&amp;#34;: &amp;#34;5 + 7 = ?</description>
    </item>
    
    <item>
      <title>Formatar XML no vim</title>
      <link>https://geraldo.dev/posts/vim-formatar-xml/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-formatar-xml/</guid>
      <description>:&#39;&amp;lt;,&#39;&amp;gt;!xmllint --format - </description>
    </item>
    
    <item>
      <title>Plugins para o vim</title>
      <link>https://geraldo.dev/posts/vim-plugins/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-plugins/</guid>
      <description>Instalação do vundle 1git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim Ctrlp Ctrlp modified Easily open locally modified files in your git-versioned projects.
Uso a versão que lista os arquivos [modificadas[(https://github.com/jasoncodes/ctrlp-modified.vim)
Instalação Acrescentar no .vimrc
1Bundle &amp;#39;kien/ctrlp.vim&amp;#39;2Bundle &amp;#39;jasoncodes/ctrlp-modified.vim&amp;#39;Rodar o VundleInstall
Atalhos Acrescentar no .vimrc
1map &amp;lt;Leader&amp;gt;m :CtrlPModified&amp;lt;CR&amp;gt;2map &amp;lt;Leader&amp;gt;M :CtrlPBranch&amp;lt;CR&amp;gt;</description>
    </item>
    
    <item>
      <title>Run Tests in Vim</title>
      <link>https://geraldo.dev/posts/vim-run-tests/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-run-tests/</guid>
      <description>Test driven development thrives on a tight feedback loop but switching from the editor to the shell to manually run specs is inefficient.
Tools such as autotest and guard run specs whenever a file gets saved. Although an improvement over a manual workflow, those approaches often run the suite when not needed and run too many or too few specs.
Enter vim-rspec, a lightweight Vim plugin that runs specs directly from within Vim with the press of a key.</description>
    </item>
    
    <item>
      <title>Substituição de texto avançada no Vim</title>
      <link>https://geraldo.dev/posts/vim-substituicao-de-texto-avancada/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-substituicao-de-texto-avancada/</guid>
      <description>Como substituir texto em todos os buffers abertos :bufdo %s/pattern/replace/ge | update  O e server para não gerar erro quando o padrão não for encontrado em algum dos buffers. o comando update salva os buffers modificados.  Como substituir texto em um padrão :arg *.cpp :argadd ../include/*.hpp ... :argdo %s/search/replace/ge | update Referências  Search and replace in multiple buffers  </description>
    </item>
    
    <item>
      <title>Vim args, argdo</title>
      <link>https://geraldo.dev/posts/vim-argdo/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-argdo/</guid>
      <description>O editor vim nos ajuda muito quando precisamos editar uma grande quantidade de arquivos para realizar uma refatoração ou realizar modificações em lote.
Carregamento de arquivos por condição Carregar todos os arquivos md.
:args `find . -name &#39;*.md&#39;` Carregar todos os arquivos que são rastreados pelo controle de versão que contenham a palavra Apple.
:args `git grep -l Apple` o -l do git-grep faz listar somente os arquivos sem o texto que faz match.</description>
    </item>
    
    <item>
      <title>Vim awesome</title>
      <link>https://geraldo.dev/posts/vim-awesome/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-awesome/</guid>
      <description> http://vimawesome.com/ http://vimawesome.com/plugin/fugitive-vim http://vimawesome.com/plugin/vim-snipmate-mine  </description>
    </item>
    
    <item>
      <title>Vim com python habilitado</title>
      <link>https://geraldo.dev/posts/vim-with-python/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-with-python/</guid>
      <description>1apt install vim-nox 2ou 3apt install vim-gtk </description>
    </item>
    
    <item>
      <title>Vim com rails</title>
      <link>https://geraldo.dev/posts/vim-rails/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-rails/</guid>
      <description>https://github.com/tpope/vim-rails
 gf considers context and knows about partials, fixtures, and much more. There are two commands, :A (alternate) and :R (related) for easy jumping between files, including favorites like model to schema, template to helper, and controller to functional test. Commands like :Emodel, :Eview, :Econtroller  are provided to :edit files by type, along with S, V, and T variants for :split, :vsplit, and :tabedit. Throw a bang on the end (:Emodel foo!</description>
    </item>
    
    <item>
      <title>Vim lento</title>
      <link>https://geraldo.dev/posts/vim-slow/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-slow/</guid>
      <description> http://eduncan911.com/software/fix-slow-scrolling-in-vim-and-neovim.html  1:set cursorline!2:set lazyredraw1set synmaxcol=1282syntax sync minlines=256</description>
    </item>
    
    <item>
      <title>Vim plugin coersion: snake_case, MixedCase, camelCase, UPPER_CASE, dash-case, dot.case, space case, Title Case</title>
      <link>https://geraldo.dev/posts/vim-abolish/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-abolish/</guid>
      <description>  https://github.com/tpope/vim-abolish
  crm - MixedCase
  crc - camelCase
  crs - snake_case
  cru - UPPER_CASE
  cr- - dash-case
  cr. - dot.case
  cr&amp;lt;space&amp;gt; - space case
  crt - Title Case
  </description>
    </item>
    
    <item>
      <title>VIM single instance</title>
      <link>https://geraldo.dev/posts/vim-single-instance/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-single-instance/</guid>
      <description> http://unix.stackexchange.com/questions/23162/how-to-run-gvim-in-a-single-instance http://www.phacks.net/open-multiple-text-files-as-tabs-gvim-kde4/  </description>
    </item>
    
    <item>
      <title>Vim Spell Checking</title>
      <link>https://geraldo.dev/posts/vim-spell-checking/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-spell-checking/</guid>
      <description>There are times when we edit prose in Vim, such as in a project README or Git commit message. In those cases, we can use Vim&#39;s spell-checking to help us avoid embarrassing mistakes.
Switching on spell-checking We can switch on spell checking with this command:
:setlocal spell We can also specify the language:
:setlocal spell spelllang=en_us What does it look like Here&#39;s a screenshot of what I see as I edit this blog post:</description>
    </item>
    
    <item>
      <title>vim-livro-noob-gratis.md</title>
      <link>https://geraldo.dev/posts/vim-livro-noob-gratis/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-livro-noob-gratis/</guid>
      <description> Um livro guia/referência para quem deseja aprender a utilizar o editor de textos Vim
 Confira em https://leanpub.com/vimparanoobs
Referência  https://woliveiras.com.br/vimparanoobs/chapters/pesquisando-por-plugins-no-vundle.html  </description>
    </item>
    
    <item>
      <title>Vim: Auto completar especial</title>
      <link>https://geraldo.dev/posts/vim-special-auto-complete/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-special-auto-complete/</guid>
      <description>Do pacote UltiSnip:
~/.vim/bundle/vim-snippets/UltiSnips/
 date -&amp;gt; 2018-10-27 time -&amp;gt; 15:10 datetime -&amp;gt; 2018-10-27 15:47 uuid -&amp;gt; e348aa09-1875-4eaa-b016-edd12ad7091d lorem -&amp;gt; lorem ipsum bbox -&amp;gt; caixa com texto centrado com a largura de comentário box -&amp;gt; cria uma caixa do tamenho do texto  </description>
    </item>
    
    <item>
      <title>Webvim</title>
      <link>https://geraldo.dev/posts/vim-webvim/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://geraldo.dev/posts/vim-webvim/</guid>
      <description>TODO: Estudar webvim https://github.com/vim-dist/webvim</description>
    </item>
    
  </channel>
</rss>