export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae){return {data:{"content-query-hu4ta4KfC9":{_path:"\u002Ftil\u002Fcpp-armadillo",_draft:m,_partial:m,_locale:"en",_empty:m,title:"Álgebra linear com Armadillo",description:"Algebra linear com a biblioteca armadillo.",excerpt:{type:C,children:[{type:a,tag:e,props:{},children:[{type:b,value:D},{type:a,tag:h,props:{},children:[{type:b,value:p}]},{type:b,value:n}]},{type:a,tag:E,props:{},children:[{type:b,value:F}]},{type:a,tag:e,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:G}]},{type:b,value:H},{type:a,tag:h,props:{},children:[{type:b,value:I}]},{type:b,value:n}]},{type:a,tag:e,props:{},children:[{type:b,value:J}]},{type:a,tag:i,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:K}]},{type:a,tag:c,props:{},children:[{type:b,value:L}]},{type:a,tag:c,props:{},children:[{type:b,value:M}]},{type:a,tag:c,props:{},children:[{type:b,value:N}]},{type:a,tag:c,props:{},children:[{type:b,value:O}]},{type:a,tag:c,props:{},children:[{type:b,value:P}]},{type:a,tag:c,props:{},children:[{type:b,value:Q}]},{type:a,tag:c,props:{},children:[{type:b,value:R}]},{type:a,tag:c,props:{},children:[{type:b,value:S}]}]},{type:a,tag:e,props:{},children:[{type:b,value:T}]},{type:a,tag:i,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:U}]},{type:a,tag:c,props:{},children:[{type:b,value:V}]},{type:a,tag:c,props:{},children:[{type:b,value:W}]},{type:a,tag:c,props:{},children:[{type:b,value:X}]},{type:a,tag:c,props:{},children:[{type:b,value:Y}]},{type:a,tag:c,props:{},children:[{type:b,value:Z}]},{type:a,tag:c,props:{},children:[{type:b,value:_}]}]},{type:a,tag:f,props:{id:q},children:[{type:b,value:r}]},{type:a,tag:d,props:{code:s,language:o},children:[{type:a,tag:j,props:{},children:[{type:a,tag:d,props:{__ignoreMap:g},children:[{type:b,value:s}]}]}]},{type:a,tag:f,props:{id:t},children:[{type:b,value:u}]},{type:a,tag:d,props:{code:v,language:o},children:[{type:a,tag:j,props:{},children:[{type:a,tag:d,props:{__ignoreMap:g},children:[{type:b,value:v}]}]}]},{type:a,tag:f,props:{id:w},children:[{type:b,value:x}]},{type:a,tag:d,props:{code:y,language:$},children:[{type:a,tag:j,props:{},children:[{type:a,tag:d,props:{__ignoreMap:g},children:[{type:b,value:y}]}]}]},{type:a,tag:f,props:{id:z},children:[{type:b,value:A}]},{type:a,tag:i,props:{},children:[{type:a,tag:c,props:{},children:[{type:a,tag:aa,props:{href:ab,rel:[ac]},children:[{type:b,value:ad}]}]}]}]},date:"2019-12-17T00:00:00.000Z",draft:m,tags:[p,"C++","cpp","álgebra linear"],Thumbnail:"img\u002Fheaders\u002Farmadillo.jpg",math:true,body:{type:C,children:[{type:a,tag:e,props:{},children:[{type:b,value:D},{type:a,tag:h,props:{},children:[{type:b,value:p}]},{type:b,value:n}]},{type:a,tag:E,props:{},children:[{type:b,value:F}]},{type:a,tag:e,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:G}]},{type:b,value:H},{type:a,tag:h,props:{},children:[{type:b,value:I}]},{type:b,value:n}]},{type:a,tag:e,props:{},children:[{type:b,value:J}]},{type:a,tag:i,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:K}]},{type:a,tag:c,props:{},children:[{type:b,value:L}]},{type:a,tag:c,props:{},children:[{type:b,value:M}]},{type:a,tag:c,props:{},children:[{type:b,value:N}]},{type:a,tag:c,props:{},children:[{type:b,value:O}]},{type:a,tag:c,props:{},children:[{type:b,value:P}]},{type:a,tag:c,props:{},children:[{type:b,value:Q}]},{type:a,tag:c,props:{},children:[{type:b,value:R}]},{type:a,tag:c,props:{},children:[{type:b,value:S}]}]},{type:a,tag:e,props:{},children:[{type:b,value:T}]},{type:a,tag:i,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:U}]},{type:a,tag:c,props:{},children:[{type:b,value:V}]},{type:a,tag:c,props:{},children:[{type:b,value:W}]},{type:a,tag:c,props:{},children:[{type:b,value:X}]},{type:a,tag:c,props:{},children:[{type:b,value:Y}]},{type:a,tag:c,props:{},children:[{type:b,value:Z}]},{type:a,tag:c,props:{},children:[{type:b,value:_}]}]},{type:a,tag:f,props:{id:q},children:[{type:b,value:r}]},{type:a,tag:d,props:{code:s,language:o},children:[{type:a,tag:j,props:{},children:[{type:a,tag:d,props:{__ignoreMap:g},children:[{type:a,tag:k,props:{class:B},children:[{type:a,tag:k,props:{class:ae},children:[{type:b,value:"apt install libarmadillo-dev"}]}]}]}]}]},{type:a,tag:f,props:{id:t},children:[{type:b,value:u}]},{type:a,tag:d,props:{code:v,language:o},children:[{type:a,tag:j,props:{},children:[{type:a,tag:d,props:{__ignoreMap:g},children:[{type:a,tag:k,props:{class:B},children:[{type:a,tag:k,props:{class:ae},children:[{type:b,value:"brew install armadillo"}]}]}]}]}]},{type:a,tag:f,props:{id:w},children:[{type:b,value:x}]},{type:a,tag:d,props:{code:y,language:$},children:[{type:a,tag:j,props:{},children:[{type:a,tag:d,props:{__ignoreMap:g},children:[{type:a,tag:k,props:{class:B},children:[{type:a,tag:k,props:{},children:[{type:b,value:"#include \u003Carmadillo\u003E\n#include \u003Ciostream\u003E\n\nusing namespace std;\nusing namespace arma;\n\nint main()\n{\n  \u002F\u002F inicia o gerador de números aleatórios\n  arma_rng::set_seed_random();\n\n  \u002F\u002F Cria uma matriz com dados aleatório com dimensão 2x3\n  auto A = randu( 2, 3 );\n  cout \u003C\u003C A \u003C\u003C endl;\n  \u002F\u002F    0.7038   0.6819   0.9555\n  \u002F\u002F    0.3804   0.9666   0.9270\n\n  \u002F\u002F Transposta\n  cout \u003C\u003C A.t() \u003C\u003C endl;\n  \u002F\u002F    0.7526   0.5681\n  \u002F\u002F    0.5874   0.9469\n  \u002F\u002F    0.3562   0.9346\n\n  \u002F\u002F Multiplicação de matrizes\n  cout \u003C\u003C A.t() * A \u003C\u003C endl;\n  \u002F\u002F    0.0536   0.2644   0.2534\n  \u002F\u002F    0.4731   0.3874   0.9599\n  \u002F\u002F    0.1739   0.3313   0.4768\n\n  mat B( 3, 3, fill::randu );\n  cout \u003C\u003C B \u003C\u003C endl;\n  \u002F\u002F    0.9563   0.8955   0.0919\n  \u002F\u002F    0.3291   0.3086   0.3452\n  \u002F\u002F    0.1894   0.9898   0.8642\n\n  cout \u003C\u003C \"Determinante: \" \u003C\u003C det( B ) \u003C\u003C endl;\n  \u002F\u002F Determinante: -0.243228\n\n  auto C = randu( 3, 3 );\n  cout \u003C\u003C C \u003C\u003C endl;\n  \u002F\u002F    0.5561   0.6219   0.2147\n  \u002F\u002F    0.3105   0.2813   0.9172\n  \u002F\u002F    0.3408   0.1925   0.4703\n  cout \u003C\u003C \"Determinante: \" \u003C\u003C det( C ) \u003C\u003C endl;\n  \u002F\u002F Determinante: -0.254525\n\n  mat D = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F    1.0000   2.0000   3.0000\n  \u002F\u002F    4.0000   5.0000   6.0000\n  \u002F\u002F    7.0000   8.0000   9.0000\n  cout \u003C\u003C \"Determinante: \" \u003C\u003C det( D ) \u003C\u003C endl;\n  \u002F\u002F Determinante: 6.66134e-16\n\n  D.row( 0 ) = D.row( 1 ) + D.row( 2 );\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F 11.0000   13.0000   15.0000\n  \u002F\u002F  4.0000    5.0000    6.0000\n  \u002F\u002F  7.0000    8.0000    9.0000\n\n  D.row( 1 ) = D.row( 1 ) * 5;\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F 11.0000   13.0000   15.0000\n  \u002F\u002F 20.0000   25.0000   30.0000\n  \u002F\u002F  7.0000    8.0000    9.0000\n  \u002F\u002F\n\n  D.row( 2 ).zeros();\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F 11.0000   13.0000   15.0000\n  \u002F\u002F 20.0000   25.0000   30.0000\n  \u002F\u002F       0         0         0\n\n  D.col( 2 ) = D.col( 2 ) + 10;\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F 11.0000   13.0000   25.0000\n  \u002F\u002F 20.0000   25.0000   40.0000\n  \u002F\u002F       0         0   10.0000\n\n  D = diagmat( D );\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F 11.0000         0         0\n  \u002F\u002F       0   25.0000         0\n  \u002F\u002F       0         0   10.0000\n\n  D.save( \"D.bin\" );\n\n  D.save( \"D.txt\", arma_ascii );\n  \u002F\u002F ARMA_MAT_TXT_FN008\n  \u002F\u002F 3 3\n  \u002F\u002F    1.10000000000000e+01   0.00000000000000e+00   0.00000000000000e+00\n  \u002F\u002F    0.00000000000000e+00   2.50000000000000e+01   0.00000000000000e+00\n  \u002F\u002F    0.00000000000000e+00   0.00000000000000e+00   1.00000000000000e+01\n\n  auto O = ones( 2, 2 );\n  cout \u003C\u003C O \u003C\u003C endl;\n  \u002F\u002F 1.0000   1.0000\n  \u002F\u002F 1.0000   1.0000\n\n  auto Z = zeros( 3, 5 );\n  cout \u003C\u003C Z \u003C\u003C endl;\n  \u002F\u002F 0        0        0        0        0\n  \u002F\u002F 0        0        0        0        0\n  \u002F\u002F 0        0        0        0        0\n\n  mat F1, F2;\n  F1.load( \"D.bin\" );\n  F2.load( \"D.txt\" );\n  cout \u003C\u003C F1 \u003C\u003C endl;\n  \u002F\u002F 11.0000         0         0\n  \u002F\u002F       0   25.0000         0\n  \u002F\u002F       0         0   10.000\n\n  cout \u003C\u003C F1 - F2 \u003C\u003C endl;\n  \u002F\u002F 0        0        0\n  \u002F\u002F 0        0        0\n  \u002F\u002F 0        0        0\n\n  mat F( 2, 3 );\n  F.fill( 3.14 );\n  cout \u003C\u003C F \u003C\u003C endl;\n  \u002F\u002F 3.1400   3.1400   3.1400\n  \u002F\u002F 3.1400   3.1400   3.1400\n\n  F = F.ones();\n  F.col( 0 ) *= datum::pi;\n  F.col( 1 ) *= datum::inf;\n  F.col( 2 ) *= datum::nan;\n  cout \u003C\u003C F \u003C\u003C endl;\n  \u002F\u002F 3.1416      inf      nan\n  \u002F\u002F 3.1416      inf      nan\n\n  return 0;\n}"}]}]}]}]}]},{type:a,tag:f,props:{id:z},children:[{type:b,value:A}]},{type:a,tag:i,props:{},children:[{type:a,tag:c,props:{},children:[{type:a,tag:aa,props:{href:ab,rel:[ac]},children:[{type:b,value:ad}]}]}]},{type:a,tag:"style",children:[{type:b,value:".ct-37a362{color:#F8F8F2}"}]}],toc:{title:g,searchDepth:l,depth:l,links:[{id:q,depth:l,text:r},{id:t,depth:l,text:u},{id:w,depth:l,text:x},{id:z,depth:l,text:A}]}},_type:"markdown",_id:"content:til:cpp-armadillo.md",_source:"content",_file:"til\u002Fcpp-armadillo.md",_extension:"md"}},prerenderedAt:1664114603005}}("element","text","li","code","p","h2","","strong","ul","pre","span",2,false,".","bash","armadillo","instalação-no-debian","Instalação no Debian","apt install libarmadillo-dev\n","instalação-no-macos","Instalação no MacOS","brew install armadillo\n","exemplos-de-uso","Exemplos de uso","#include \u003Carmadillo\u003E\n#include \u003Ciostream\u003E\n\nusing namespace std;\nusing namespace arma;\n\nint main()\n{\n  \u002F\u002F inicia o gerador de números aleatórios\n  arma_rng::set_seed_random();\n\n  \u002F\u002F Cria uma matriz com dados aleatório com dimensão 2x3\n  auto A = randu( 2, 3 );\n  cout \u003C\u003C A \u003C\u003C endl;\n  \u002F\u002F    0.7038   0.6819   0.9555\n  \u002F\u002F    0.3804   0.9666   0.9270\n\n  \u002F\u002F Transposta\n  cout \u003C\u003C A.t() \u003C\u003C endl;\n  \u002F\u002F    0.7526   0.5681\n  \u002F\u002F    0.5874   0.9469\n  \u002F\u002F    0.3562   0.9346\n\n  \u002F\u002F Multiplicação de matrizes\n  cout \u003C\u003C A.t() * A \u003C\u003C endl;\n  \u002F\u002F    0.0536   0.2644   0.2534\n  \u002F\u002F    0.4731   0.3874   0.9599\n  \u002F\u002F    0.1739   0.3313   0.4768\n\n  mat B( 3, 3, fill::randu );\n  cout \u003C\u003C B \u003C\u003C endl;\n  \u002F\u002F    0.9563   0.8955   0.0919\n  \u002F\u002F    0.3291   0.3086   0.3452\n  \u002F\u002F    0.1894   0.9898   0.8642\n\n  cout \u003C\u003C \"Determinante: \" \u003C\u003C det( B ) \u003C\u003C endl;\n  \u002F\u002F Determinante: -0.243228\n\n  auto C = randu( 3, 3 );\n  cout \u003C\u003C C \u003C\u003C endl;\n  \u002F\u002F    0.5561   0.6219   0.2147\n  \u002F\u002F    0.3105   0.2813   0.9172\n  \u002F\u002F    0.3408   0.1925   0.4703\n  cout \u003C\u003C \"Determinante: \" \u003C\u003C det( C ) \u003C\u003C endl;\n  \u002F\u002F Determinante: -0.254525\n\n  mat D = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F    1.0000   2.0000   3.0000\n  \u002F\u002F    4.0000   5.0000   6.0000\n  \u002F\u002F    7.0000   8.0000   9.0000\n  cout \u003C\u003C \"Determinante: \" \u003C\u003C det( D ) \u003C\u003C endl;\n  \u002F\u002F Determinante: 6.66134e-16\n\n  D.row( 0 ) = D.row( 1 ) + D.row( 2 );\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F 11.0000   13.0000   15.0000\n  \u002F\u002F  4.0000    5.0000    6.0000\n  \u002F\u002F  7.0000    8.0000    9.0000\n\n  D.row( 1 ) = D.row( 1 ) * 5;\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F 11.0000   13.0000   15.0000\n  \u002F\u002F 20.0000   25.0000   30.0000\n  \u002F\u002F  7.0000    8.0000    9.0000\n  \u002F\u002F\n\n  D.row( 2 ).zeros();\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F 11.0000   13.0000   15.0000\n  \u002F\u002F 20.0000   25.0000   30.0000\n  \u002F\u002F       0         0         0\n\n  D.col( 2 ) = D.col( 2 ) + 10;\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F 11.0000   13.0000   25.0000\n  \u002F\u002F 20.0000   25.0000   40.0000\n  \u002F\u002F       0         0   10.0000\n\n  D = diagmat( D );\n  cout \u003C\u003C D \u003C\u003C endl;\n  \u002F\u002F 11.0000         0         0\n  \u002F\u002F       0   25.0000         0\n  \u002F\u002F       0         0   10.0000\n\n  D.save( \"D.bin\" );\n\n  D.save( \"D.txt\", arma_ascii );\n  \u002F\u002F ARMA_MAT_TXT_FN008\n  \u002F\u002F 3 3\n  \u002F\u002F    1.10000000000000e+01   0.00000000000000e+00   0.00000000000000e+00\n  \u002F\u002F    0.00000000000000e+00   2.50000000000000e+01   0.00000000000000e+00\n  \u002F\u002F    0.00000000000000e+00   0.00000000000000e+00   1.00000000000000e+01\n\n  auto O = ones( 2, 2 );\n  cout \u003C\u003C O \u003C\u003C endl;\n  \u002F\u002F 1.0000   1.0000\n  \u002F\u002F 1.0000   1.0000\n\n  auto Z = zeros( 3, 5 );\n  cout \u003C\u003C Z \u003C\u003C endl;\n  \u002F\u002F 0        0        0        0        0\n  \u002F\u002F 0        0        0        0        0\n  \u002F\u002F 0        0        0        0        0\n\n  mat F1, F2;\n  F1.load( \"D.bin\" );\n  F2.load( \"D.txt\" );\n  cout \u003C\u003C F1 \u003C\u003C endl;\n  \u002F\u002F 11.0000         0         0\n  \u002F\u002F       0   25.0000         0\n  \u002F\u002F       0         0   10.000\n\n  cout \u003C\u003C F1 - F2 \u003C\u003C endl;\n  \u002F\u002F 0        0        0\n  \u002F\u002F 0        0        0\n  \u002F\u002F 0        0        0\n\n  mat F( 2, 3 );\n  F.fill( 3.14 );\n  cout \u003C\u003C F \u003C\u003C endl;\n  \u002F\u002F 3.1400   3.1400   3.1400\n  \u002F\u002F 3.1400   3.1400   3.1400\n\n  F = F.ones();\n  F.col( 0 ) *= datum::pi;\n  F.col( 1 ) *= datum::inf;\n  F.col( 2 ) *= datum::nan;\n  cout \u003C\u003C F \u003C\u003C endl;\n  \u002F\u002F 3.1416      inf      nan\n  \u002F\u002F 3.1416      inf      nan\n\n  return 0;\n}\n","referências","Referências","line","root","Algebra linear com a biblioteca ","div","\n$$\nA_{m,n} =\n\\begin{pmatrix}\na_{1,1} & a_{1,2} & \\cdots & a_{1,n} \\\\\na_{2,1} & a_{2,2} & \\cdots & a_{2,n} \\\\\n\\vdots  & \\vdots  & \\ddots & \\vdots  \\\\\na_{m,1} & a_{m,2} & \\cdots & a_{m,n} \n\\end{pmatrix}\n$$\n","Armadillo"," é uma biblioteca de álgebra linear para C++ rápida e fácil de usar, com sintaxe parecida com a do ","Matlab","Provê suporte para:","vetores (tensores de primeira ordem)","matrizes (tensores de segunda ordem)","cubos (tensores de terceira ordem)","matrizes densas e esparsas","números inteiros, de ponto flutuante e complexos","decomposição (via LAPACK)","multi-thread (Intel MKL ou OpenBLAS)","avaliador de expressão baseado em meta-programação","paralelização (via OpenMP)","Principais usos:","machine learning","reconhecimento de padrões","visão computacional","processamento de sinais","bioinformática","estatística","finanças","c++","a","http:\u002F\u002Farma.sourceforge.net\u002F","nofollow","Armadillo C++ library for linear algebra & scientific computing","ct-37a362"))