export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P){return {data:{"content-query-m8a8YfyNpy":{_path:"\u002Ftil\u002Fcpp-array",_draft:h,_partial:h,_locale:"en",_empty:h,title:"C++ array",description:j,excerpt:{type:u,children:[{type:a,tag:v,props:{},children:[{type:b,value:j}]},{type:a,tag:d,props:{id:k},children:[{type:b,value:l}]},{type:a,tag:f,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:w}]},{type:a,tag:c,props:{},children:[{type:b,value:x}]},{type:a,tag:c,props:{},children:[{type:b,value:y}]},{type:a,tag:c,props:{},children:[{type:b,value:z}]},{type:a,tag:c,props:{},children:[{type:b,value:A},{type:a,tag:e,props:{},children:[{type:b,value:B}]}]},{type:a,tag:c,props:{},children:[{type:b,value:C}]},{type:a,tag:c,props:{},children:[{type:b,value:D}]}]},{type:a,tag:d,props:{id:m},children:[{type:b,value:n}]},{type:a,tag:f,props:{},children:[{type:a,tag:c,props:{},children:[{type:a,tag:e,props:{},children:[{type:b,value:E}]},{type:b,value:F}]},{type:a,tag:c,props:{},children:[{type:a,tag:e,props:{},children:[{type:b,value:G}]},{type:b,value:H},{type:a,tag:e,props:{},children:[{type:b,value:I}]}]}]},{type:a,tag:d,props:{id:o},children:[{type:b,value:p}]},{type:a,tag:i,props:{code:q,language:J},children:[{type:a,tag:K,props:{},children:[{type:a,tag:i,props:{__ignoreMap:r},children:[{type:b,value:q}]}]}]},{type:a,tag:d,props:{id:s},children:[{type:b,value:t}]},{type:a,tag:f,props:{},children:[{type:a,tag:c,props:{},children:[{type:a,tag:L,props:{href:M,rel:[N]},children:[{type:b,value:O}]}]}]}]},date:"2020-01-04T00:00:00.000Z",draft:h,tags:["C++","cpp","std::array","Algorítimos"],Thumbnail:"img\u002Fheaders\u002Fcpp.png",body:{type:u,children:[{type:a,tag:v,props:{},children:[{type:b,value:j}]},{type:a,tag:d,props:{id:k},children:[{type:b,value:l}]},{type:a,tag:f,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:w}]},{type:a,tag:c,props:{},children:[{type:b,value:x}]},{type:a,tag:c,props:{},children:[{type:b,value:y}]},{type:a,tag:c,props:{},children:[{type:b,value:z}]},{type:a,tag:c,props:{},children:[{type:b,value:A},{type:a,tag:e,props:{},children:[{type:b,value:B}]}]},{type:a,tag:c,props:{},children:[{type:b,value:C}]},{type:a,tag:c,props:{},children:[{type:b,value:D}]}]},{type:a,tag:d,props:{id:m},children:[{type:b,value:n}]},{type:a,tag:f,props:{},children:[{type:a,tag:c,props:{},children:[{type:a,tag:e,props:{},children:[{type:b,value:E}]},{type:b,value:F}]},{type:a,tag:c,props:{},children:[{type:a,tag:e,props:{},children:[{type:b,value:G}]},{type:b,value:H},{type:a,tag:e,props:{},children:[{type:b,value:I}]}]}]},{type:a,tag:d,props:{id:o},children:[{type:b,value:p}]},{type:a,tag:i,props:{code:q,language:J},children:[{type:a,tag:K,props:{},children:[{type:a,tag:i,props:{__ignoreMap:r},children:[{type:a,tag:P,props:{class:"line"},children:[{type:a,tag:P,props:{},children:[{type:b,value:"#include \u003Calgorithm\u003E\n#include \u003Carray\u003E\n#include \u003Ciostream\u003E\n\nusing namespace std;\n\n\u002F\u002F Multidimensionais\ntemplate \u003Cclass T, size_t ROW, size_t COL\u003E\nusing Matrix = std::array\u003Cstd::array\u003CT, COL\u003E, ROW\u003E;\n\ntemplate \u003Cclass T, size_t I, size_t... J\u003E\nstruct MultiDimArray {\n  using Nested = typename MultiDimArray\u003CT, J...\u003E::type;\n  using type   = std::array\u003CNested, I\u003E;\n};\n\ntemplate \u003Cclass T, size_t I\u003E\nstruct MultiDimArray\u003CT, I\u003E {\n  using type = std::array\u003CT, I\u003E;\n};\n\nint main( int argc, char **argv )\n{\n  auto print = []( const auto &arr ) {\n    cout \u003C\u003C \"{ \";\n    for( const auto &x : arr ) {\n      cout \u003C\u003C x \u003C\u003C \" \";\n    }\n    cout \u003C\u003C \"}\" \u003C\u003C endl;\n  };\n\n  array\u003Cint, 3\u003E a    = {2, 1, 3};\n  int           c[3] = {2, 1, 3}; \u002F\u002F old C style\n\n  sort( a.begin(), a.end() );\n  print( a ); \u002F\u002F { 1, 2, 3 }\n\n  sort( begin( c ), end( c ) ); \u002F\u002F c == { 1, 2, 3 }\n  print( c );\n\n  for( auto &x : a ) {\n    x *= 2;\n  }\n  print( a ); \u002F\u002F { 2, 4, 6 }\n\n  for( auto &x : c ) {\n    x *= 2;\n  }\n  print( c ); \u002F\u002F { 2, 4, 6 }\n\n  array\u003Carray\u003Cint, 3\u003E, 3\u003E arr = {{{5, 8, 2}, {8, 3, 1}, {5, 3, 9}}};\n  cout \u003C\u003C arr[2][2] \u003C\u003C endl; \u002F\u002F 9\n\n  Matrix\u003Cfloat, 3, 4\u003E mat;\n  mat[1][2] = 5;\n\n  MultiDimArray\u003Cint, 2, 3, 4, 5\u003E::type multi;\n  multi[1][1][1][1] = 5;\n\n  return 0;\n}"}]}]}]}]}]},{type:a,tag:d,props:{id:s},children:[{type:b,value:t}]},{type:a,tag:f,props:{},children:[{type:a,tag:c,props:{},children:[{type:a,tag:L,props:{href:M,rel:[N]},children:[{type:b,value:O}]}]}]}],toc:{title:r,searchDepth:g,depth:g,links:[{id:k,depth:g,text:l},{id:m,depth:g,text:n},{id:o,depth:g,text:p},{id:s,depth:g,text:t}]}},_type:"markdown",_id:"content:til:cpp-array.md",_source:"content",_file:"til\u002Fcpp-array.md",_extension:"md"}},prerenderedAt:1664073383027}}("element","text","li","h2","code-inline","ul",2,false,"code","Exemplos de uso de std::array","características","Características","array-vs-vector","Array vs Vector","exemplos","Exemplos","#include \u003Calgorithm\u003E\n#include \u003Carray\u003E\n#include \u003Ciostream\u003E\n\nusing namespace std;\n\n\u002F\u002F Multidimensionais\ntemplate \u003Cclass T, size_t ROW, size_t COL\u003E\nusing Matrix = std::array\u003Cstd::array\u003CT, COL\u003E, ROW\u003E;\n\ntemplate \u003Cclass T, size_t I, size_t... J\u003E\nstruct MultiDimArray {\n  using Nested = typename MultiDimArray\u003CT, J...\u003E::type;\n  using type   = std::array\u003CNested, I\u003E;\n};\n\ntemplate \u003Cclass T, size_t I\u003E\nstruct MultiDimArray\u003CT, I\u003E {\n  using type = std::array\u003CT, I\u003E;\n};\n\nint main( int argc, char **argv )\n{\n  auto print = []( const auto &arr ) {\n    cout \u003C\u003C \"{ \";\n    for( const auto &x : arr ) {\n      cout \u003C\u003C x \u003C\u003C \" \";\n    }\n    cout \u003C\u003C \"}\" \u003C\u003C endl;\n  };\n\n  array\u003Cint, 3\u003E a    = {2, 1, 3};\n  int           c[3] = {2, 1, 3}; \u002F\u002F old C style\n\n  sort( a.begin(), a.end() );\n  print( a ); \u002F\u002F { 1, 2, 3 }\n\n  sort( begin( c ), end( c ) ); \u002F\u002F c == { 1, 2, 3 }\n  print( c );\n\n  for( auto &x : a ) {\n    x *= 2;\n  }\n  print( a ); \u002F\u002F { 2, 4, 6 }\n\n  for( auto &x : c ) {\n    x *= 2;\n  }\n  print( c ); \u002F\u002F { 2, 4, 6 }\n\n  array\u003Carray\u003Cint, 3\u003E, 3\u003E arr = {{{5, 8, 2}, {8, 3, 1}, {5, 3, 9}}};\n  cout \u003C\u003C arr[2][2] \u003C\u003C endl; \u002F\u002F 9\n\n  Matrix\u003Cfloat, 3, 4\u003E mat;\n  mat[1][2] = 5;\n\n  MultiDimArray\u003Cint, 2, 3, 4, 5\u003E::type multi;\n  multi[1][1][1][1] = 5;\n\n  return 0;\n}\n","","referências","Referências","root","p","é um wrapper para o array do C","array oferece uma sintaxe mais amigável comparada com a array do C","pode ser passado e retornado por valor","pode ser passado e retornado por referência","uso mais conveniente de ","size","uso mais conveniente de iteradores STL","possui exatamente a mesma performace da array do C","array"," é estático e possui tamanho definido em tempo de compilação","vector"," é dinâmico e é alocado no ","heap","c++","pre","a","http:\u002F\u002Fcpptruths.blogspot.com\u002F2011\u002F10\u002Fmulti-dimensional-arrays-in-c11.html","nofollow","Multi-dimensional arrays in C++11","span"))