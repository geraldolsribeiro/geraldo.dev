export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J){return {data:{"content-/til/cpp-const-cast":{title:u,date:v,tags:[w,x,e]},"content-query-nD8tgKZTjl":{_path:"\u002Ftil\u002Fcpp-const-cast",_draft:f,_partial:f,_locale:"en",_empty:f,title:u,description:"Usando o operador `const_cast`",excerpt:{type:y,children:[{type:b,tag:z,props:{},children:[{type:a,value:A},{type:b,tag:c,props:{},children:[{type:a,value:e}]},{type:a,value:B}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:h},{type:b,tag:c,props:{},children:[{type:a,value:i}]},{type:a,value:j}]},{type:b,tag:d,props:{},children:[{type:a,value:k},{type:b,tag:c,props:{},children:[{type:a,value:i}]},{type:a,value:l}]},{type:b,tag:d,props:{},children:[{type:a,value:h},{type:b,tag:c,props:{},children:[{type:a,value:m}]},{type:a,value:j}]},{type:b,tag:d,props:{},children:[{type:a,value:k},{type:b,tag:c,props:{},children:[{type:a,value:m}]},{type:a,value:l}]}]},{type:b,tag:n,props:{code:p,language:C},children:[{type:b,tag:D,props:{},children:[{type:b,tag:n,props:{__ignoreMap:q},children:[{type:a,value:p}]}]}]},{type:b,tag:E,props:{id:r},children:[{type:a,value:s}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:F},{type:b,tag:G,props:{href:o,rel:[H]},children:[{type:a,value:o}]},{type:a,value:I}]}]}]},date:v,draft:f,tags:[w,x,e],Thumbnail:"img\u002Fheaders\u002Fcpp.png",body:{type:y,children:[{type:b,tag:z,props:{},children:[{type:a,value:A},{type:b,tag:c,props:{},children:[{type:a,value:e}]},{type:a,value:B}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:h},{type:b,tag:c,props:{},children:[{type:a,value:i}]},{type:a,value:j}]},{type:b,tag:d,props:{},children:[{type:a,value:k},{type:b,tag:c,props:{},children:[{type:a,value:i}]},{type:a,value:l}]},{type:b,tag:d,props:{},children:[{type:a,value:h},{type:b,tag:c,props:{},children:[{type:a,value:m}]},{type:a,value:j}]},{type:b,tag:d,props:{},children:[{type:a,value:k},{type:b,tag:c,props:{},children:[{type:a,value:m}]},{type:a,value:l}]}]},{type:b,tag:n,props:{code:p,language:C},children:[{type:b,tag:D,props:{},children:[{type:b,tag:n,props:{__ignoreMap:q},children:[{type:b,tag:J,props:{class:"line"},children:[{type:b,tag:J,props:{},children:[{type:a,value:"#include \u003Ciostream\u003E\nusing namespace std;\n\nvoid f(int* p) {\n  cout \u003C\u003C *p \u003C\u003C endl;\n}\n\nint main(void) {\n  const int a = 10;\n  const int* b = &a;\n\n  \u002F\u002F A função f() espera receber um int* e não um const int*\n  \u002F\u002F f(b);\n\n  int* c = const_cast\u003Cint*\u003E(b);\n  f(c);\n\n  \u002F\u002F Lvalue é const\n  \u002F\u002F  *b = 20;\n\n  \u002F\u002F Comportamento indefinido\n  \u002F\u002F  *c = 30;\n\n  int a1 = 40;\n  const int* b1 = &a1;\n  int* c1 = const_cast\u003Cint*\u003E(b1);\n\n  \u002F\u002F o inteiro a1 referenciado por c1 não foi declarado como const\n  *c1 = 50;\n\n  return 0;\n}"}]}]}]}]}]},{type:b,tag:E,props:{id:r},children:[{type:a,value:s}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:F},{type:b,tag:G,props:{href:o,rel:[H]},children:[{type:a,value:o}]},{type:a,value:I}]}]}],toc:{title:q,searchDepth:t,depth:t,links:[{id:r,depth:t,text:s}]}},_type:"markdown",_id:"content:til:cpp-const-cast.md",_source:"content",_file:"til\u002Fcpp-const-cast.md",_extension:"md"}},prerenderedAt:1664656502953}}("text","element","code-inline","li","const_cast",false,"ul","adicionar um modificador ","const"," a um tipo","remover um modificador "," de um tipo","volatile","code","https:\u002F\u002Fwww.ibm.com\u002Fsupport\u002Fknowledgecenter\u002FSSLTBW_2.4.0\u002Fcom.ibm.zos.v2r4.cbclx01\u002Fkeyword_const_cast.htm","#include \u003Ciostream\u003E\nusing namespace std;\n\nvoid f(int* p) {\n  cout \u003C\u003C *p \u003C\u003C endl;\n}\n\nint main(void) {\n  const int a = 10;\n  const int* b = &a;\n\n  \u002F\u002F A função f() espera receber um int* e não um const int*\n  \u002F\u002F f(b);\n\n  int* c = const_cast\u003Cint*\u003E(b);\n  f(c);\n\n  \u002F\u002F Lvalue é const\n  \u002F\u002F  *b = 20;\n\n  \u002F\u002F Comportamento indefinido\n  \u002F\u002F  *c = 30;\n\n  int a1 = 40;\n  const int* b1 = &a1;\n  int* c1 = const_cast\u003Cint*\u003E(b1);\n\n  \u002F\u002F o inteiro a1 referenciado por c1 não foi declarado como const\n  *c1 = 50;\n\n  return 0;\n}\n","","referências","Referências",2,"C++ - const_cast","2020-01-10T00:00:00.000Z","C++","cpp","root","p","O operador"," é utilizado para:","c++","pre","h2","[const_cast operator syntax(","a","nofollow",")","span"))