export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK){return {data:{"content-query-AYk0q692Zu":{_path:"\u002Ftil\u002Fcpp-thread",_draft:r,_partial:r,_locale:"en",_empty:r,title:"Thread em C++",description:"Escrevendo funções e classes para execução em paralelo.",excerpt:{type:$,children:[{type:a,tag:e,props:{id:u},children:[{type:b,value:v}]},{type:a,tag:c,props:{code:w,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:b,value:w}]}]}]},{type:a,tag:e,props:{id:x},children:[{type:b,value:y}]},{type:a,tag:c,props:{code:z,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:b,value:z}]}]}]},{type:a,tag:e,props:{id:A},children:[{type:b,value:B}]},{type:a,tag:c,props:{code:C,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:b,value:C}]}]}]},{type:a,tag:e,props:{id:D},children:[{type:b,value:E}]},{type:a,tag:c,props:{code:F,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:b,value:F}]}]}]},{type:a,tag:e,props:{id:G},children:[{type:b,value:H}]},{type:a,tag:c,props:{code:I,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:b,value:I}]}]}]},{type:a,tag:e,props:{id:J},children:[{type:b,value:K}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:aa},{type:a,tag:m,props:{},children:[{type:b,value:s}]}]},{type:a,tag:d,props:{},children:[{type:b,value:ab},{type:a,tag:m,props:{},children:[{type:b,value:s}]},{type:b,value:ac},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:a,tag:i,props:{},children:[{type:b,value:p}]},{type:b,value:ad}]},{type:a,tag:d,props:{},children:[{type:a,tag:i,props:{},children:[{type:b,value:ae}]},{type:b,value:af}]}]}]},{type:a,tag:d,props:{},children:[{type:b,value:ag},{type:a,tag:m,props:{},children:[{type:b,value:ah}]}]},{type:a,tag:d,props:{},children:[{type:b,value:ai},{type:a,tag:i,props:{},children:[{type:b,value:t}]},{type:b,value:aj}]},{type:a,tag:d,props:{},children:[{type:b,value:ak},{type:a,tag:i,props:{},children:[{type:b,value:t}]},{type:b,value:al}]}]},{type:a,tag:e,props:{id:L},children:[{type:b,value:M}]},{type:a,tag:o,props:{},children:[{type:b,value:am},{type:a,tag:i,props:{},children:[{type:b,value:p}]},{type:b,value:an},{type:a,tag:ao,props:{},children:[{type:b,value:ap}]},{type:b,value:aq}]},{type:a,tag:o,props:{},children:[{type:b,value:ar}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:a,tag:m,props:{},children:[{type:b,value:as}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:m,props:{},children:[{type:b,value:at}]}]}]},{type:a,tag:o,props:{},children:[{type:b,value:au}]},{type:a,tag:c,props:{code:N,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:b,value:N}]}]}]},{type:a,tag:o,props:{},children:[{type:b,value:av},{type:a,tag:i,props:{},children:[{type:b,value:aw}]},{type:b,value:ax},{type:a,tag:i,props:{},children:[{type:b,value:p}]},{type:b,value:ay}]},{type:a,tag:c,props:{code:O,filename:az,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:b,value:O}]}]}]},{type:a,tag:e,props:{id:P},children:[{type:b,value:Q}]},{type:a,tag:c,props:{code:R,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:b,value:R}]}]}]},{type:a,tag:e,props:{id:S},children:[{type:b,value:T}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:aA}]},{type:a,tag:d,props:{},children:[{type:b,value:aB}]}]},{type:a,tag:c,props:{code:U,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:b,value:U}]}]}]},{type:a,tag:e,props:{id:q},children:[{type:b,value:q}]},{type:a,tag:e,props:{id:V},children:[{type:a,tag:i,props:{},children:[{type:b,value:W}]}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:aC}]},{type:a,tag:d,props:{},children:[{type:b,value:aD}]}]},{type:a,tag:e,props:{id:X},children:[{type:a,tag:i,props:{},children:[{type:b,value:Y}]}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:aE}]},{type:a,tag:d,props:{},children:[{type:b,value:aF}]},{type:a,tag:d,props:{},children:[{type:b,value:aG}]}]},{type:a,tag:e,props:{id:Z},children:[{type:b,value:_}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:a,tag:aH,props:{href:aI,rel:[aJ]},children:[{type:b,value:aK}]}]}]}]},date:"2020-06-23T00:00:00.000Z",draft:r,tags:["C++","cpp","thread"],Thumbnail:"img\u002Fheaders\u002Fcpp.png",body:{type:$,children:[{type:a,tag:e,props:{id:u},children:[{type:b,value:v}]},{type:a,tag:c,props:{code:w,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:a,tag:j,props:{class:n},children:[{type:a,tag:j,props:{},children:[{type:b,value:"void foo() {\n  cout \u003C\u003C \"Corpo da função: \" \u003C\u003C this_thread::get_id() \u003C\u003C endl;\n}\n\nvoid run () {\n  thread t1( foo );\n  \u002F\u002F Algum processamento...\n  t1.join();\n}"}]}]}]}]}]},{type:a,tag:e,props:{id:x},children:[{type:b,value:y}]},{type:a,tag:c,props:{code:z,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:a,tag:j,props:{class:n},children:[{type:a,tag:j,props:{},children:[{type:b,value:"void fooByRef( int & a ) {\n  while( true ) {\n    cout \u003C\u003C \"O valor é \" \u003C\u003C a \u003C\u003C endl;\n    this_thread::sleep_for( chrono::milliseconds( 1000 ) );\n  }\n}\n\nvoid run () {\n  int p = 9;\n  thread t2( fooByRef, std::ref( p ) ); \u002F\u002F usar o wrapper ref para não passar por valor\n  \u002F\u002F Algum processamento...\n  this_thread::sleep_for( chrono::milliseconds( 5000 ) );\n  p = 30;\n  t1.join();\n}"}]}]}]}]}]},{type:a,tag:e,props:{id:A},children:[{type:b,value:B}]},{type:a,tag:c,props:{code:C,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:a,tag:j,props:{class:n},children:[{type:a,tag:j,props:{},children:[{type:b,value:"void foo( int a, int b ) {\n}\n\nvoid run () {\n  int p = 9;\n  int q = 8;\n  thread t1( foo, p, q );\n  \u002F\u002F Algum processamento...\n  t1.join();\n}"}]}]}]}]}]},{type:a,tag:e,props:{id:D},children:[{type:b,value:E}]},{type:a,tag:c,props:{code:F,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:a,tag:j,props:{class:n},children:[{type:a,tag:j,props:{},children:[{type:b,value:"class CallableClass {\n  public:\n    void operator()() {\n      cout \u003C\u003C \"Corpo da função: \" \u003C\u003C this_thread::get_id() \u003C\u003C endl;\n    }\n};\n\nvoid run() {\n  CallableClass obj;\n  thread t2( obj );\n  \u002F\u002F Algum processamento...\n  t2.join();\n}"}]}]}]}]}]},{type:a,tag:e,props:{id:G},children:[{type:b,value:H}]},{type:a,tag:c,props:{code:I,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:a,tag:j,props:{class:n},children:[{type:a,tag:j,props:{},children:[{type:b,value:"\u002F\u002F Sintaxe\n\u002F\u002F [capture-list]( params ) \u002F*mutable*\u002F \u002F*constexpr*\u002F \u002F*exception attribute*\u002F -\u003E ret { body }\n\u002F\u002F [capture-list]( params ) -\u003E ret { body }\n\u002F\u002F [capture-list]( params ) { body }\n\u002F\u002F [capture-list]{ body }\n\nvoid run() {\n  thread t3( []{\n    cout \u003C\u003C \"Corpo da função: \" \u003C\u003C this_thread::get_id() \u003C\u003C endl;\n  } );\n  \u002F\u002F Algum processamento...\n  t3.join();\n}"}]}]}]}]}]},{type:a,tag:e,props:{id:J},children:[{type:b,value:K}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:aa},{type:a,tag:m,props:{},children:[{type:b,value:s}]}]},{type:a,tag:d,props:{},children:[{type:b,value:ab},{type:a,tag:m,props:{},children:[{type:b,value:s}]},{type:b,value:ac},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:a,tag:i,props:{},children:[{type:b,value:p}]},{type:b,value:ad}]},{type:a,tag:d,props:{},children:[{type:a,tag:i,props:{},children:[{type:b,value:ae}]},{type:b,value:af}]}]}]},{type:a,tag:d,props:{},children:[{type:b,value:ag},{type:a,tag:m,props:{},children:[{type:b,value:ah}]}]},{type:a,tag:d,props:{},children:[{type:b,value:ai},{type:a,tag:i,props:{},children:[{type:b,value:t}]},{type:b,value:aj}]},{type:a,tag:d,props:{},children:[{type:b,value:ak},{type:a,tag:i,props:{},children:[{type:b,value:t}]},{type:b,value:al}]}]},{type:a,tag:e,props:{id:L},children:[{type:b,value:M}]},{type:a,tag:o,props:{},children:[{type:b,value:am},{type:a,tag:i,props:{},children:[{type:b,value:p}]},{type:b,value:an},{type:a,tag:ao,props:{},children:[{type:b,value:ap}]},{type:b,value:aq}]},{type:a,tag:o,props:{},children:[{type:b,value:ar}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:a,tag:m,props:{},children:[{type:b,value:as}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:m,props:{},children:[{type:b,value:at}]}]}]},{type:a,tag:o,props:{},children:[{type:b,value:au}]},{type:a,tag:c,props:{code:N,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:a,tag:j,props:{class:n},children:[{type:a,tag:j,props:{},children:[{type:b,value:"void run() {\n  thread t4( foo );\n  throw runtime_error( \"Algum erro antes do join\u002Fdetach\" );\n  t4.join(); \u002F\u002F esta linha nunca vai ser executada\n}"}]}]}]}]}]},{type:a,tag:o,props:{},children:[{type:b,value:av},{type:a,tag:i,props:{},children:[{type:b,value:aw}]},{type:b,value:ax},{type:a,tag:i,props:{},children:[{type:b,value:p}]},{type:b,value:ay}]},{type:a,tag:c,props:{code:O,filename:az,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:a,tag:j,props:{class:n},children:[{type:a,tag:j,props:{},children:[{type:b,value:"class ThreadGuard {\n  thread & mThread;\n\n  public:\n    \u002F\u002F garantir que não haverá conversões implícitas\n    explicit ThreadGuard( thread & t ) : mThread( t ) {  }\n\n    \u002F\u002F realiza o join pelo destrutor\n    ~ThreadGuard() { if( mThread.joinable() ) { mThread.join(); } }\n\n    \u002F\u002F não permite o uso dos contrutores de cópia e atribuição\n    ThreadGuard( const ThreadGuard & ) = delete;\n    ThreadGuard & operator= ( const ThreadGuard & ) = delete;\n};\n\nvoid run() {\n  thread t4( foo );\n  ThreadGuard tg( t4 ); \u002F\u002F quando sair do escopo o join será chamado\n  throw runtime_error( \"Este erro não afeta a thread acima\" );\n}"}]}]}]}]}]},{type:a,tag:e,props:{id:P},children:[{type:b,value:Q}]},{type:a,tag:c,props:{code:R,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:a,tag:j,props:{class:n},children:[{type:a,tag:j,props:{},children:[{type:b,value:"void foo() { }\nvoid bar() { }\n\nvoid run() {\n  thread t1( foo );\n  \u002F\u002F thread t2 = t1; \u002F\u002F Se fizer isso vai gerar erro de compilação\n\n  \u002F\u002F usar move para transferir a posse da thread\n  thread t2 = std::move( t1 ); \u002F\u002F t1 não é mais dono da thread\n  t1 = thread( bar ); \u002F\u002F t1 tem nova thread\n\n  t1.join();\n  t2.join();\n}"}]}]}]}]}]},{type:a,tag:e,props:{id:S},children:[{type:b,value:T}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:aA}]},{type:a,tag:d,props:{},children:[{type:b,value:aB}]}]},{type:a,tag:c,props:{code:U,language:g},children:[{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{__ignoreMap:f},children:[{type:a,tag:j,props:{class:n},children:[{type:a,tag:j,props:{},children:[{type:b,value:"void run() {\n  thread t1( foo );\n  thread t2( foo );\n  thread t3;\n\n  cout \u003C\u003C t1.get_id() \u003C\u003C endl; \u002F\u002F 1234\n  cout \u003C\u003C t2.get_id() \u003C\u003C endl; \u002F\u002F 5678\n  cout \u003C\u003C t3.get_id() \u003C\u003C endl; \u002F\u002F 0\n\n  t1.join();\n  t2.join();\n\n  cout \u003C\u003C t1.get_id() \u003C\u003C endl; \u002F\u002F 0\n  cout \u003C\u003C t2.get_id() \u003C\u003C endl; \u002F\u002F 0\n}"}]}]}]}]}]},{type:a,tag:e,props:{id:q},children:[{type:b,value:q}]},{type:a,tag:e,props:{id:V},children:[{type:a,tag:i,props:{},children:[{type:b,value:W}]}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:aC}]},{type:a,tag:d,props:{},children:[{type:b,value:aD}]}]},{type:a,tag:e,props:{id:X},children:[{type:a,tag:i,props:{},children:[{type:b,value:Y}]}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:aE}]},{type:a,tag:d,props:{},children:[{type:b,value:aF}]},{type:a,tag:d,props:{},children:[{type:b,value:aG}]}]},{type:a,tag:e,props:{id:Z},children:[{type:b,value:_}]},{type:a,tag:l,props:{},children:[{type:a,tag:d,props:{},children:[{type:a,tag:aH,props:{href:aI,rel:[aJ]},children:[{type:b,value:aK}]}]}]}],toc:{title:f,searchDepth:k,depth:k,links:[{id:u,depth:k,text:v},{id:x,depth:k,text:y},{id:A,depth:k,text:B},{id:D,depth:k,text:E},{id:G,depth:k,text:H},{id:J,depth:k,text:K},{id:L,depth:k,text:M},{id:P,depth:k,text:Q},{id:S,depth:k,text:T},{id:q,depth:k,text:q},{id:V,depth:k,text:W},{id:X,depth:k,text:Y},{id:Z,depth:k,text:_}]}},_type:"markdown",_id:"content:til:cpp-thread.md",_source:"content",_file:"til\u002Fcpp-thread.md",_extension:"md"}},prerenderedAt:1664115389034}}("element","text","code","li","h2","","c++","pre","code-inline","span",2,"ul","em","line","p","join","sleep_for",false,"joinable","std::terminate","thread-com-função-sem-argumentos","Thread com função sem argumentos","void foo() {\n  cout \u003C\u003C \"Corpo da função: \" \u003C\u003C this_thread::get_id() \u003C\u003C endl;\n}\n\nvoid run () {\n  thread t1( foo );\n  \u002F\u002F Algum processamento...\n  t1.join();\n}\n","thread-com-função-passando-parâmetros-por-valor","Thread com função passando parâmetros por valor","void fooByRef( int & a ) {\n  while( true ) {\n    cout \u003C\u003C \"O valor é \" \u003C\u003C a \u003C\u003C endl;\n    this_thread::sleep_for( chrono::milliseconds( 1000 ) );\n  }\n}\n\nvoid run () {\n  int p = 9;\n  thread t2( fooByRef, std::ref( p ) ); \u002F\u002F usar o wrapper ref para não passar por valor\n  \u002F\u002F Algum processamento...\n  this_thread::sleep_for( chrono::milliseconds( 5000 ) );\n  p = 30;\n  t1.join();\n}\n","thread-com-função-passando-parâmetros-por-referência","Thread com função passando parâmetros por referência","void foo( int a, int b ) {\n}\n\nvoid run () {\n  int p = 9;\n  int q = 8;\n  thread t1( foo, p, q );\n  \u002F\u002F Algum processamento...\n  t1.join();\n}\n","thread-com-classe-callable","Thread com classe callable","class CallableClass {\n  public:\n    void operator()() {\n      cout \u003C\u003C \"Corpo da função: \" \u003C\u003C this_thread::get_id() \u003C\u003C endl;\n    }\n};\n\nvoid run() {\n  CallableClass obj;\n  thread t2( obj );\n  \u002F\u002F Algum processamento...\n  t2.join();\n}\n","thread-com-lambda","Thread com lambda","\u002F\u002F Sintaxe\n\u002F\u002F [capture-list]( params ) \u002F*mutable*\u002F \u002F*constexpr*\u002F \u002F*exception attribute*\u002F -\u003E ret { body }\n\u002F\u002F [capture-list]( params ) -\u003E ret { body }\n\u002F\u002F [capture-list]( params ) { body }\n\u002F\u002F [capture-list]{ body }\n\nvoid run() {\n  thread t3( []{\n    cout \u003C\u003C \"Corpo da função: \" \u003C\u003C this_thread::get_id() \u003C\u003C endl;\n  } );\n  \u002F\u002F Algum processamento...\n  t3.join();\n}\n","join-detach-e-terminate","Join, detach e terminate","tratamento-de-exceção","Tratamento de exceção","void run() {\n  thread t4( foo );\n  throw runtime_error( \"Algum erro antes do join\u002Fdetach\" );\n  t4.join(); \u002F\u002F esta linha nunca vai ser executada\n}\n","class ThreadGuard {\n  thread & mThread;\n\n  public:\n    \u002F\u002F garantir que não haverá conversões implícitas\n    explicit ThreadGuard( thread & t ) : mThread( t ) {  }\n\n    \u002F\u002F realiza o join pelo destrutor\n    ~ThreadGuard() { if( mThread.joinable() ) { mThread.join(); } }\n\n    \u002F\u002F não permite o uso dos contrutores de cópia e atribuição\n    ThreadGuard( const ThreadGuard & ) = delete;\n    ThreadGuard & operator= ( const ThreadGuard & ) = delete;\n};\n\nvoid run() {\n  thread t4( foo );\n  ThreadGuard tg( t4 ); \u002F\u002F quando sair do escopo o join será chamado\n  throw runtime_error( \"Este erro não afeta a thread acima\" );\n}\n","transferindo-a-posse-das-threads","Transferindo a posse das threads","void foo() { }\nvoid bar() { }\n\nvoid run() {\n  thread t1( foo );\n  \u002F\u002F thread t2 = t1; \u002F\u002F Se fizer isso vai gerar erro de compilação\n\n  \u002F\u002F usar move para transferir a posse da thread\n  thread t2 = std::move( t1 ); \u002F\u002F t1 não é mais dono da thread\n  t1 = thread( bar ); \u002F\u002F t1 tem nova thread\n\n  t1.join();\n  t2.join();\n}\n","threadget_id","thread::get_id()","void run() {\n  thread t1( foo );\n  thread t2( foo );\n  thread t3;\n\n  cout \u003C\u003C t1.get_id() \u003C\u003C endl; \u002F\u002F 1234\n  cout \u003C\u003C t2.get_id() \u003C\u003C endl; \u002F\u002F 5678\n  cout \u003C\u003C t3.get_id() \u003C\u003C endl; \u002F\u002F 0\n\n  t1.join();\n  t2.join();\n\n  cout \u003C\u003C t1.get_id() \u003C\u003C endl; \u002F\u002F 0\n  cout \u003C\u003C t2.get_id() \u003C\u003C endl; \u002F\u002F 0\n}\n","stdthis_threadyield","std::this_thread::yield()","stdthreadhardware_concurrency","std::thread::hardware_concurrency()","referências","Referências","root","Uma thread representa um objeto de execução em nível de hardware e está num estado chamado ","A opções no estado "," são:"," - introduz um ponto de sincronismo e bloqueia a execução","detach"," - faz a execução continuar em modo independente","Após esta escolha a thread se torna ","non joinable","Se esquecer de realizar o join ou detach a função "," será chamada pelo destrutor","Um programa com "," é considerado não seguro.","Para evitar problemas caso uma exceção for lançada antes do "," use\n","strong","RAII - Resource acquisition is initialization",".","RAII:","Construtor adquire os recursos","Destrutor libera os recursos","Exemplo de código com problema:","A classe ","ThreadGuard"," fornece um auxiliar para garantir que o "," será\nsempre executado quando o objeto sair do contexto.","6,9","retorna um id único para cada thread ativa em execução","retorna 0 para todas as threads não ativas","retorna a fatia de tempo","reinsere a thread na fila de execução","retorna o número de thread concorrentes suportado pela implementação do sistema","considere este valor apenas como uma dica","é usualmente o número de cores lógicos","a","https:\u002F\u002Fwww.udemy.com\u002Fcourse\u002Fmodern-cpp-concurrency-in-depth\u002F","nofollow","Modern C++ Concurrency in Depth"))