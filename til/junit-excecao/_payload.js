export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab){return {data:{"content-query-AuxCMbXTpi":{_path:"\u002Ftil\u002Fjunit-excecao",_draft:o,_partial:o,_locale:"en",_empty:o,title:"Testando exceções com junit",description:"Como testar exceções usando o junit.",excerpt:{type:D,children:[{type:a,tag:E,props:{},children:[{type:b,value:F},{type:a,tag:e,props:{},children:[{type:b,value:G}]},{type:b,value:H},{type:a,tag:e,props:{},children:[{type:b,value:I}]},{type:b,value:J},{type:a,tag:e,props:{},children:[{type:b,value:K}]},{type:b,value:L},{type:a,tag:e,props:{},children:[{type:b,value:M}]},{type:b,value:N}]},{type:a,tag:g,props:{id:r},children:[{type:b,value:s}]},{type:a,tag:f,props:{code:t,language:h},children:[{type:a,tag:j,props:{},children:[{type:a,tag:f,props:{__ignoreMap:i},children:[{type:b,value:t}]}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:k},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:O}]},{type:a,tag:c,props:{},children:[{type:b,value:P},{type:a,tag:Q,props:{},children:[{type:b,value:R}]},{type:b,value:S}]},{type:a,tag:c,props:{},children:[{type:b,value:T}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:l},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:U},{type:a,tag:e,props:{},children:[{type:b,value:V}]},{type:b,value:W}]}]}]}]},{type:a,tag:g,props:{id:u},children:[{type:b,value:v}]},{type:a,tag:f,props:{code:w,language:h},children:[{type:a,tag:j,props:{},children:[{type:a,tag:f,props:{__ignoreMap:i},children:[{type:b,value:w}]}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:k},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:X}]},{type:a,tag:c,props:{},children:[{type:b,value:Y}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:l},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:p},{type:a,tag:e,props:{},children:[{type:b,value:q}]}]}]}]}]},{type:a,tag:g,props:{id:x},children:[{type:b,value:y}]},{type:a,tag:f,props:{code:z,language:h},children:[{type:a,tag:j,props:{},children:[{type:a,tag:f,props:{__ignoreMap:i},children:[{type:b,value:z}]}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:k},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:Z}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:l},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:p},{type:a,tag:e,props:{},children:[{type:b,value:q}]}]}]}]}]},{type:a,tag:g,props:{id:A},children:[{type:b,value:B}]},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:a,tag:_,props:{href:$,rel:[aa]},children:[{type:b,value:ab}]}]}]}]},date:"2019-11-12T00:00:00.000Z",draft:o,tags:[h,"junit","exceção","try-catch"],Thumbnail:"img\u002Fheaders\u002Fjunit.webp",body:{type:D,children:[{type:a,tag:E,props:{},children:[{type:b,value:F},{type:a,tag:e,props:{},children:[{type:b,value:G}]},{type:b,value:H},{type:a,tag:e,props:{},children:[{type:b,value:I}]},{type:b,value:J},{type:a,tag:e,props:{},children:[{type:b,value:K}]},{type:b,value:L},{type:a,tag:e,props:{},children:[{type:b,value:M}]},{type:b,value:N}]},{type:a,tag:g,props:{id:r},children:[{type:b,value:s}]},{type:a,tag:f,props:{code:t,language:h},children:[{type:a,tag:j,props:{},children:[{type:a,tag:f,props:{__ignoreMap:i},children:[{type:a,tag:m,props:{class:C},children:[{type:a,tag:m,props:{},children:[{type:b,value:"@Test\npublic void example1() {\n    try {\n        find(\"função que deveria lançar uma exceção\");\n        fail();\n        \u002F\u002F Ponto que nunca deveria ser alcançado quando o teste passar\n    } catch (NotFoundException e) {\n        assertThat(e.getMessage(), containsString(\"algo que indique que a exceção certa ocorreu\"));\n    }\n    \u002F\u002F ... Outras exceções podem ser tratadas aqui.\n}"}]}]}]}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:k},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:O}]},{type:a,tag:c,props:{},children:[{type:b,value:P},{type:a,tag:Q,props:{},children:[{type:b,value:R}]},{type:b,value:S}]},{type:a,tag:c,props:{},children:[{type:b,value:T}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:l},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:U},{type:a,tag:e,props:{},children:[{type:b,value:V}]},{type:b,value:W}]}]}]}]},{type:a,tag:g,props:{id:u},children:[{type:b,value:v}]},{type:a,tag:f,props:{code:w,language:h},children:[{type:a,tag:j,props:{},children:[{type:a,tag:f,props:{__ignoreMap:i},children:[{type:a,tag:m,props:{class:C},children:[{type:a,tag:m,props:{},children:[{type:b,value:"public void example2() throws NotFoundException {\n    find(\"função que deveria lançar uma exceção\");\n    \u002F\u002F Ponto que nunca deveria ser alcançado quando o teste passar\n}"}]}]}]}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:k},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:X}]},{type:a,tag:c,props:{},children:[{type:b,value:Y}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:l},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:p},{type:a,tag:e,props:{},children:[{type:b,value:q}]}]}]}]}]},{type:a,tag:g,props:{id:x},children:[{type:b,value:y}]},{type:a,tag:f,props:{code:z,language:h},children:[{type:a,tag:j,props:{},children:[{type:a,tag:f,props:{__ignoreMap:i},children:[{type:a,tag:m,props:{class:C},children:[{type:a,tag:m,props:{},children:[{type:b,value:"\n@Test\npublic void example3() throws NotFoundException {\n    exception.expect(NotFoundException.class);\n    exception.expectMessage(containsString(\"algo que indique que a exceção certa ocorreu\"));\n    find(\"função que deveria lançar uma exceção\");\n    \u002F\u002F Ponto que nunca deveria ser alcançado quando o teste passar\n}"}]}]}]}]}]},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:k},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:Z}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:l},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:p},{type:a,tag:e,props:{},children:[{type:b,value:q}]}]}]}]}]},{type:a,tag:g,props:{id:A},children:[{type:b,value:B}]},{type:a,tag:d,props:{},children:[{type:a,tag:c,props:{},children:[{type:a,tag:_,props:{href:$,rel:[aa]},children:[{type:b,value:ab}]}]}]}],toc:{title:i,searchDepth:n,depth:n,links:[{id:r,depth:n,text:s},{id:u,depth:n,text:v},{id:x,depth:n,text:y},{id:A,depth:n,text:B}]}},_type:"markdown",_id:"content:til:junit-excecao.md",_source:"content",_file:"til\u002Fjunit-excecao.md",_extension:"md"}},prerenderedAt:1664115426005}}("element","text","li","ul","code-inline","code","h2","java","","pre","Vantagens:","Desvantagens:","span",2,false,"Não é possível realizar outros testes após o ","find","usando-bloco-trycatch","Usando bloco try\u002Fcatch","@Test\npublic void example1() {\n    try {\n        find(\"função que deveria lançar uma exceção\");\n        fail();\n        \u002F\u002F Ponto que nunca deveria ser alcançado quando o teste passar\n    } catch (NotFoundException e) {\n        assertThat(e.getMessage(), containsString(\"algo que indique que a exceção certa ocorreu\"));\n    }\n    \u002F\u002F ... Outras exceções podem ser tratadas aqui.\n}\n","test-expected--exceptionclass","@Test (expected = Exception.class)","public void example2() throws NotFoundException {\n    find(\"função que deveria lançar uma exceção\");\n    \u002F\u002F Ponto que nunca deveria ser alcançado quando o teste passar\n}\n","expectedexception-rule","ExpectedException Rule","\n@Test\npublic void example3() throws NotFoundException {\n    exception.expect(NotFoundException.class);\n    exception.expectMessage(containsString(\"algo que indique que a exceção certa ocorreu\"));\n    find(\"função que deveria lançar uma exceção\");\n    \u002F\u002F Ponto que nunca deveria ser alcançado quando o teste passar\n}\n","referências","Referências","line","root","p","Este artigo apresenta uma visão suscinta sobre testes de exceção com JUnit usando o idioma ","try\u002Ffail\u002Fcatch",", o parâmetro ","expected"," da anotação ","@Test"," e a anotação ","@Rule",".\nCada um dos métodos apresenta prós e contras.","Ter acesso à exceção para realizar outros procedimentos","Poder realizar outros ","em","asserts"," na mesma função","Funciona bem de os testes forem criado antes","Um erro comum é esquecer de incluir ","fail()"," como barreira causando um falso positivo","Sintaxe muito mais concisa","Favorece a escrita de teste focados em um único ponto","Mais de uma expetativa sobre a mesma exceção podem ser testadas após o teste","a","http:\u002F\u002Fbaddotrobot.com\u002Fblog\u002F2012\u002F03\u002F27\u002Fexpecting-exception-with-junit-rule\u002F","nofollow","Expecting Exceptions JUnit Rule"))