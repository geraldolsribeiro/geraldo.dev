export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah){return {data:{"content-query-RmCtOrz3gm":{_path:"\u002Ftil\u002Fvapid-key",_draft:v,_partial:v,_locale:"en",_empty:v,title:"Criando VAPID key",description:"Como misturar de forma saudável diferentes distribuições do Debian. Instale exatamente a versão do aplicativo que você quer sem bagunçar o sistema todo.",excerpt:{type:N,children:[{type:a,tag:O,props:{},children:[{type:b,value:P}]},{type:a,tag:g,props:{id:w},children:[{type:b,value:x}]},{type:a,tag:e,props:{code:y,language:p},children:[{type:a,tag:k,props:{},children:[{type:a,tag:e,props:{__ignoreMap:i},children:[{type:b,value:y}]}]}]},{type:a,tag:g,props:{id:z},children:[{type:b,value:A}]},{type:a,tag:e,props:{code:B,language:p},children:[{type:a,tag:k,props:{},children:[{type:a,tag:e,props:{__ignoreMap:i},children:[{type:b,value:B}]}]}]},{type:a,tag:g,props:{id:C},children:[{type:b,value:D}]},{type:a,tag:r,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:Q}]},{type:a,tag:h,props:{},children:[{type:b,value:R}]}]},{type:a,tag:g,props:{id:E},children:[{type:b,value:F}]},{type:a,tag:e,props:{code:G,language:s},children:[{type:a,tag:k,props:{},children:[{type:a,tag:e,props:{__ignoreMap:i},children:[{type:b,value:G}]}]}]},{type:a,tag:e,props:{code:H,language:p},children:[{type:a,tag:k,props:{},children:[{type:a,tag:e,props:{__ignoreMap:i},children:[{type:b,value:H}]}]}]},{type:a,tag:g,props:{id:I},children:[{type:b,value:J}]},{type:a,tag:e,props:{code:K,language:s},children:[{type:a,tag:k,props:{},children:[{type:a,tag:e,props:{__ignoreMap:i},children:[{type:b,value:K}]}]}]},{type:a,tag:g,props:{id:L},children:[{type:b,value:M}]},{type:a,tag:r,props:{},children:[{type:a,tag:h,props:{},children:[{type:a,tag:m,props:{href:S,rel:[n]},children:[{type:b,value:T}]}]},{type:a,tag:h,props:{},children:[{type:a,tag:m,props:{href:U,rel:[n]},children:[{type:b,value:V}]}]},{type:a,tag:h,props:{},children:[{type:a,tag:m,props:{href:W,rel:[n]},children:[{type:b,value:X}]}]},{type:a,tag:h,props:{},children:[{type:a,tag:m,props:{href:Y,rel:[n]},children:[{type:b,value:Z}]},{type:b,value:_}]}]}]},date:"2020-03-21T00:00:00.000Z",draft:true,tags:["web"],Thumbnail:"img\u002Fheaders\u002Fweb.jpg",body:{type:N,children:[{type:a,tag:O,props:{},children:[{type:b,value:P}]},{type:a,tag:g,props:{id:w},children:[{type:b,value:x}]},{type:a,tag:e,props:{code:y,language:p},children:[{type:a,tag:k,props:{},children:[{type:a,tag:e,props:{__ignoreMap:i},children:[{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"mkdir -p certs"}]}]},{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"openssl ecparam -name prime256v1 -genkey -noout -out certs\u002Fvapid_private.pem"}]}]},{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"openssl ec -in certs\u002Fvapid_private.pem -pubout  -out certs\u002Fvapid_public.pem"}]}]},{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"openssl ec -in certs\u002Fvapid_private.pem -outform DER \\"}]}]},{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:j},children:[{type:b,value:l}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" tail -c +8 "}]},{type:a,tag:c,props:{class:j},children:[{type:b,value:l}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" head -c 32 "}]},{type:a,tag:c,props:{class:j},children:[{type:b,value:l}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:$}]},{type:a,tag:c,props:{class:j},children:[{type:b,value:l}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aa}]},{type:a,tag:c,props:{class:q},children:[{type:b,value:ab}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:j},children:[{type:b,value:l}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ac}]},{type:a,tag:c,props:{class:q},children:[{type:b,value:ad}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:q},children:[{type:b,value:ae}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:af}]}]},{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:j},children:[{type:b,value:ag}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" certs\u002Fprivate_key.txt"}]}]},{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"openssl ec -in certs\u002Fvapid_private.pem -pubout -outform DER \\"}]}]},{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:j},children:[{type:b,value:l}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" tail -c 65 "}]},{type:a,tag:c,props:{class:j},children:[{type:b,value:l}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:$}]},{type:a,tag:c,props:{class:j},children:[{type:b,value:l}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:aa}]},{type:a,tag:c,props:{class:q},children:[{type:b,value:ab}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:j},children:[{type:b,value:l}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:ac}]},{type:a,tag:c,props:{class:q},children:[{type:b,value:ad}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:u}]},{type:a,tag:c,props:{class:q},children:[{type:b,value:ae}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:af}]}]},{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:t}]},{type:a,tag:c,props:{class:j},children:[{type:b,value:ag}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" certs\u002Fpublic_key.txt"}]}]}]}]}]},{type:a,tag:g,props:{id:z},children:[{type:b,value:A}]},{type:a,tag:e,props:{code:B,language:p},children:[{type:a,tag:k,props:{},children:[{type:a,tag:e,props:{__ignoreMap:i},children:[{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"npm install -g web-push"}]}]},{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"web-push generate-vapid-keys"}]}]}]}]}]},{type:a,tag:g,props:{id:C},children:[{type:b,value:D}]},{type:a,tag:r,props:{},children:[{type:a,tag:h,props:{},children:[{type:b,value:Q}]},{type:a,tag:h,props:{},children:[{type:b,value:R}]}]},{type:a,tag:g,props:{id:E},children:[{type:b,value:F}]},{type:a,tag:e,props:{code:G,language:s},children:[{type:a,tag:k,props:{},children:[{type:a,tag:e,props:{__ignoreMap:i},children:[{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{},children:[{type:b,value:"\u003C?php\n\n\u002F\u002F API access key from Google API's Console\ndefine( 'API_ACCESS_KEY', 'YOUR-API-ACCESS-KEY-GOES-HERE' );\n\n\n$registrationIds = array( $_GET['id'] );\n\n\u002F\u002F prep the bundle\n$msg = array\n(\n    'message'   =\u003E 'here is a message. message',\n    'title'     =\u003E 'This is a title. title',\n    'subtitle'  =\u003E 'This is a subtitle. subtitle',\n    'tickerText'    =\u003E 'Ticker text here...Ticker text here...Ticker text here',\n    'vibrate'   =\u003E 1,\n    'sound'     =\u003E 1,\n    'largeIcon' =\u003E 'large_icon',\n    'smallIcon' =\u003E 'small_icon'\n);\n\n$fields = array\n(\n    'registration_ids'  =\u003E $registrationIds,\n    'data'          =\u003E $msg\n);\n \n$headers = array\n(\n    'Authorization: key=' . API_ACCESS_KEY,\n    'Content-Type: application\u002Fjson'\n);\n \n$ch = curl_init();\ncurl_setopt( $ch,CURLOPT_URL, 'https:\u002F\u002Fandroid.googleapis.com\u002Fgcm\u002Fsend' );\ncurl_setopt( $ch,CURLOPT_POST, true );\ncurl_setopt( $ch,CURLOPT_HTTPHEADER, $headers );\ncurl_setopt( $ch,CURLOPT_RETURNTRANSFER, true );\ncurl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false );\ncurl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) );\n$result = curl_exec($ch );\ncurl_close( $ch );\n\necho $result;"}]}]}]}]}]},{type:a,tag:e,props:{code:H,language:p},children:[{type:a,tag:k,props:{},children:[{type:a,tag:e,props:{__ignoreMap:i},children:[{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{class:d},children:[{type:b,value:"ensure connection is secured, so CURLOPT_SSL_VERIFYPEER should be "}]},{type:a,tag:c,props:{class:ah},children:[{type:b,value:"set"}]},{type:a,tag:c,props:{class:d},children:[{type:b,value:" to "}]},{type:a,tag:c,props:{class:ah},children:[{type:b,value:"true"}]}]}]}]}]},{type:a,tag:g,props:{id:I},children:[{type:b,value:J}]},{type:a,tag:e,props:{code:K,language:s},children:[{type:a,tag:k,props:{},children:[{type:a,tag:e,props:{__ignoreMap:i},children:[{type:a,tag:c,props:{class:f},children:[{type:a,tag:c,props:{},children:[{type:b,value:"\u003C?php\n\n    \u002F\u002F Provide the Host Information.\n\n    $tHost = 'gateway.sandbox.push.apple.com';\n\n    $tPort = 2195;\n\n    \u002F\u002F Provide the Certificate and Key Data.\n\n    $tCert = 'dev.pem';\n\n    \u002F\u002F Provide the Private Key Passphrase (alternatively you can keep this secrete\n\n    \u002F\u002F and enter the key manually on the terminal -\u003E remove relevant line from code).\n\n    \u002F\u002F Replace XXXXX with your Passphrase\n\n    $tPassphrase = 'xxxxxx';\n\n    \u002F\u002F Provide the Device Identifier (Ensure that the Identifier does not have spaces in it).\n\n    \u002F\u002F Replace this token with the token of the iOS device that is to receive the notification.\n\n    $tToken = 'ada56107075e4d00f9da001b0ad71200cb953b99266e506884f6eab06f13f666';\n\n    \u002F\u002F The message that is to appear on the dialog.\n\n    $empresa = \"Petiskeira\";\n\n    $tAlert = $empresa . ' tem um recado para você!';\n\n    \u002F\u002F The Badge Number for the Application Icon (integer \u003E=0).\n\n    $tBadge = 1;\n\n    \u002F\u002F Audible Notification Option.\n\n    $tSound = 'default';\n\n    \u002F\u002F The content that is returned by the LiveCode \"pushNotificationReceived\" message.\n\n    $tPayload = '{\"endereco\":\"lauro oscar diefenthaeler\",\"tel\":\"51 3561-8797\",\"numero\":\"243\",\"complemento\":\"0\",\"id\":\"9\",\"nome\":\"petiskeira\",\"msg\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\"}';\n\n    \u002F\u002F Create the message content that is to be sent to the device.\n\n    $tBody['aps'] = array (\n\n    'alert' =\u003E $tAlert,\n\n    'badge' =\u003E $tBadge,\n\n    'sound' =\u003E $tSound,\n\n    );\n\n    $tBody ['payload'] = $tPayload;\n\n    \u002F\u002F Encode the body to JSON.\n\n    $tBody = json_encode ($tBody);\n\n    \u002F\u002F Create the Socket Stream.\n\n    $tContext = stream_context_create ();\n\n    stream_context_set_option ($tContext, 'ssl', 'local_cert', $tCert);\n\n    \u002F\u002F Remove this line if you would like to enter the Private Key Passphrase manually.\n\n    stream_context_set_option ($tContext, 'ssl', 'passphrase', $tPassphrase);\n\n    \u002F\u002F Open the Connection to the APNS Server.\n\n    $tSocket = stream_socket_client ('ssl:\u002F\u002F'.$tHost.':'.$tPort, $error, $errstr, 30, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $tContext);\n\n    \u002F\u002F Check if we were able to open a socket.\n\n    if (!$tSocket)\n\n    exit (\"APNS Connection Failed: $error $errstr\" . PHP_EOL);\n\n    \u002F\u002F Build the Binary Notification.\n\n    $tMsg = chr (0) . chr (0) . chr (32) . pack ('H*', $tToken) . pack ('n', strlen ($tBody)) . $tBody;\n\n    \u002F\u002F Send the Notification to the Server.\n\n    $tResult = fwrite ($tSocket, $tMsg, strlen ($tMsg));\n\n    if ($tResult){\n\n    echo 'Delivered Message to APNS' . PHP_EOL;\n\n    }else\n\n    echo 'Could not Deliver Message to APNS' . PHP_EOL;\n\n    \u002F\u002F Close the Connection to the Server.\n\n    fclose ($tSocket);\n\n?\u003E"}]}]}]}]}]},{type:a,tag:g,props:{id:L},children:[{type:b,value:M}]},{type:a,tag:r,props:{},children:[{type:a,tag:h,props:{},children:[{type:a,tag:m,props:{href:S,rel:[n]},children:[{type:b,value:T}]}]},{type:a,tag:h,props:{},children:[{type:a,tag:m,props:{href:U,rel:[n]},children:[{type:b,value:V}]}]},{type:a,tag:h,props:{},children:[{type:a,tag:m,props:{href:W,rel:[n]},children:[{type:b,value:X}]}]},{type:a,tag:h,props:{},children:[{type:a,tag:m,props:{href:Y,rel:[n]},children:[{type:b,value:Z}]},{type:b,value:_}]}]},{type:a,tag:"style",children:[{type:b,value:".ct-331e7c{color:#66D9EF}.ct-cce68b{color:#E6DB74}.ct-fcc90a{color:#F92672}.ct-ba6005{color:#F8F8F2}"}]}],toc:{title:i,searchDepth:o,depth:o,links:[{id:w,depth:o,text:x},{id:z,depth:o,text:A},{id:C,depth:o,text:D},{id:E,depth:o,text:F},{id:I,depth:o,text:J},{id:L,depth:o,text:M}]}},_type:"markdown",_id:"content:til:vapid-key.md",_source:"content",_file:"til\u002Fvapid-key.md",_extension:"md"}},prerenderedAt:1664117311077}}("element","text","span","ct-ba6005","code","line","h2","li","","ct-fcc90a","pre","|","a","nofollow",2,"bash","ct-cce68b","ul","php","  "," ",false,"criação-usando-openssl","Criação usando openssl","mkdir -p certs\nopenssl ecparam -name prime256v1 -genkey -noout -out certs\u002Fvapid_private.pem\nopenssl ec -in certs\u002Fvapid_private.pem -pubout  -out certs\u002Fvapid_public.pem\nopenssl ec -in certs\u002Fvapid_private.pem -outform DER \\\n  | tail -c +8 | head -c 32 | base64 | tr -d '=' | tr '\u002F+' '_-' \\\n  \u003E certs\u002Fprivate_key.txt\nopenssl ec -in certs\u002Fvapid_private.pem -pubout -outform DER \\\n  | tail -c 65 | base64 | tr -d '=' | tr '\u002F+' '_-' \\\n  \u003E certs\u002Fpublic_key.txt\n","criação-usando-web-push","Criação usando web-push","npm install -g web-push\nweb-push generate-vapid-keys\n","push-services","Push services","envio-através-do-php-para-android","Envio através do PHP para android","\u003C?php\n\n\u002F\u002F API access key from Google API's Console\ndefine( 'API_ACCESS_KEY', 'YOUR-API-ACCESS-KEY-GOES-HERE' );\n\n\n$registrationIds = array( $_GET['id'] );\n\n\u002F\u002F prep the bundle\n$msg = array\n(\n    'message'   =\u003E 'here is a message. message',\n    'title'     =\u003E 'This is a title. title',\n    'subtitle'  =\u003E 'This is a subtitle. subtitle',\n    'tickerText'    =\u003E 'Ticker text here...Ticker text here...Ticker text here',\n    'vibrate'   =\u003E 1,\n    'sound'     =\u003E 1,\n    'largeIcon' =\u003E 'large_icon',\n    'smallIcon' =\u003E 'small_icon'\n);\n\n$fields = array\n(\n    'registration_ids'  =\u003E $registrationIds,\n    'data'          =\u003E $msg\n);\n \n$headers = array\n(\n    'Authorization: key=' . API_ACCESS_KEY,\n    'Content-Type: application\u002Fjson'\n);\n \n$ch = curl_init();\ncurl_setopt( $ch,CURLOPT_URL, 'https:\u002F\u002Fandroid.googleapis.com\u002Fgcm\u002Fsend' );\ncurl_setopt( $ch,CURLOPT_POST, true );\ncurl_setopt( $ch,CURLOPT_HTTPHEADER, $headers );\ncurl_setopt( $ch,CURLOPT_RETURNTRANSFER, true );\ncurl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false );\ncurl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) );\n$result = curl_exec($ch );\ncurl_close( $ch );\n\necho $result;\n","ensure connection is secured, so CURLOPT_SSL_VERIFYPEER should be set to true\n","envio-via-php-para-ios","Envio via PHP para IOS","\u003C?php\n\n    \u002F\u002F Provide the Host Information.\n\n    $tHost = 'gateway.sandbox.push.apple.com';\n\n    $tPort = 2195;\n\n    \u002F\u002F Provide the Certificate and Key Data.\n\n    $tCert = 'dev.pem';\n\n    \u002F\u002F Provide the Private Key Passphrase (alternatively you can keep this secrete\n\n    \u002F\u002F and enter the key manually on the terminal -\u003E remove relevant line from code).\n\n    \u002F\u002F Replace XXXXX with your Passphrase\n\n    $tPassphrase = 'xxxxxx';\n\n    \u002F\u002F Provide the Device Identifier (Ensure that the Identifier does not have spaces in it).\n\n    \u002F\u002F Replace this token with the token of the iOS device that is to receive the notification.\n\n    $tToken = 'ada56107075e4d00f9da001b0ad71200cb953b99266e506884f6eab06f13f666';\n\n    \u002F\u002F The message that is to appear on the dialog.\n\n    $empresa = \"Petiskeira\";\n\n    $tAlert = $empresa . ' tem um recado para você!';\n\n    \u002F\u002F The Badge Number for the Application Icon (integer \u003E=0).\n\n    $tBadge = 1;\n\n    \u002F\u002F Audible Notification Option.\n\n    $tSound = 'default';\n\n    \u002F\u002F The content that is returned by the LiveCode \"pushNotificationReceived\" message.\n\n    $tPayload = '{\"endereco\":\"lauro oscar diefenthaeler\",\"tel\":\"51 3561-8797\",\"numero\":\"243\",\"complemento\":\"0\",\"id\":\"9\",\"nome\":\"petiskeira\",\"msg\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\"}';\n\n    \u002F\u002F Create the message content that is to be sent to the device.\n\n    $tBody['aps'] = array (\n\n    'alert' =\u003E $tAlert,\n\n    'badge' =\u003E $tBadge,\n\n    'sound' =\u003E $tSound,\n\n    );\n\n    $tBody ['payload'] = $tPayload;\n\n    \u002F\u002F Encode the body to JSON.\n\n    $tBody = json_encode ($tBody);\n\n    \u002F\u002F Create the Socket Stream.\n\n    $tContext = stream_context_create ();\n\n    stream_context_set_option ($tContext, 'ssl', 'local_cert', $tCert);\n\n    \u002F\u002F Remove this line if you would like to enter the Private Key Passphrase manually.\n\n    stream_context_set_option ($tContext, 'ssl', 'passphrase', $tPassphrase);\n\n    \u002F\u002F Open the Connection to the APNS Server.\n\n    $tSocket = stream_socket_client ('ssl:\u002F\u002F'.$tHost.':'.$tPort, $error, $errstr, 30, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $tContext);\n\n    \u002F\u002F Check if we were able to open a socket.\n\n    if (!$tSocket)\n\n    exit (\"APNS Connection Failed: $error $errstr\" . PHP_EOL);\n\n    \u002F\u002F Build the Binary Notification.\n\n    $tMsg = chr (0) . chr (0) . chr (32) . pack ('H*', $tToken) . pack ('n', strlen ($tBody)) . $tBody;\n\n    \u002F\u002F Send the Notification to the Server.\n\n    $tResult = fwrite ($tSocket, $tMsg, strlen ($tMsg));\n\n    if ($tResult){\n\n    echo 'Delivered Message to APNS' . PHP_EOL;\n\n    }else\n\n    echo 'Could not Deliver Message to APNS' . PHP_EOL;\n\n    \u002F\u002F Close the Connection to the Server.\n\n    fclose ($tSocket);\n\n?\u003E\n","referências","Referências","root","p","VAPID (Voluntary Application Server Identification)\né o novo meio de receber e enviar notificações push através da web.","fcm.googleapi.com - firebase - Google","updates.push.service.mozilla.com - Firefox","https:\u002F\u002Fgithub.com\u002Frtancman\u002Fflask-pywebpush\u002Fblob\u002Fmaster\u002FMakefile","Makefile do flask-pywebpush","https:\u002F\u002Fwww.rtancman.com.br\u002Fpython\u002Fcriando-sistema-de-notificacoes-com-pywebpush.html","Criando um sistema de notificações com pywebpush","https:\u002F\u002Fmedium.com\u002Fizettle-engineering\u002Fbeginners-guide-to-web-push-notifications-using-service-workers-cb3474a17679","Beginners guide to Web Push Notifications using Service Workers","https:\u002F\u002Fgist.github.com\u002Fprime31\u002F5675017","gits: envio de webpush usando PHP"," Aqui tem muitos comentários importantes"," base64 "," tr -d ","'='"," tr ","'\u002F+'","'_-'"," \\","\u003E","ct-331e7c"))